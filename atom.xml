<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>布袋青年</title>
  
  <subtitle>布袋青年</subtitle>
  <link href="https://great-jin.github.io/atom.xml" rel="self"/>
  
  <link href="https://great-jin.github.io/"/>
  <updated>2025-05-13T12:40:34.802Z</updated>
  <id>https://great-jin.github.io/</id>
  
  <author>
    <name>烽火戏诸诸诸侯</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaPackager 使用教程</title>
    <link href="https://great-jin.github.io/build/pkg/"/>
    <id>https://great-jin.github.io/build/pkg/</id>
    <published>2025-05-10T16:00:00.000Z</published>
    <updated>2025-05-13T12:40:34.802Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知 <code>Java</code> 基于 <code>JVM</code> 实现了跨平台，即一次编译任意平台运行，只需 <code>JRE</code> 运行环境即可。</p><p>跨平台的特性也是市面一系列产品如 <code>IDEA</code> 以及 <code>DBeaver</code> 等应用选择 <code>Java</code> 作为开发语言的一大原因。</p><p>虽然 <code>Java</code> 提供了跨平台的功能，但默认编译后的程序为 <code>jar</code> 文件，在发布时显然不够优雅。常常我们会通过各类工具将其二次编译为对应系统可直接运行的程序，例如在 <code>Windows</code> 下编译为 <code>exe</code> 程序，<code>Mac</code> 环境下的 <code>dmg</code> 等等。</p><p>但 <code>Java</code> 默认并不提供 <code>exe</code> 打包方式，需要借助其它工具。以 <code>Windows</code> 平台为例，可以选择 <code>exe4j</code> 工具，如果是新项目则可采用 <code>GraalVM</code> 编译为 <code>native image</code> 运行，二者都可生成 <code>exe</code> 可运行程序。</p><p><code>Exe4j</code> 与 <code>GraalVM</code> 虽然都可实现 <code>exe</code> 打包，但各有优缺点。前者默认打包后启动默认自带弹窗提示，后者则对旧项目并不友好。</p><p>而今天所分享的 <code>JavaPackager</code> 则可通过 <code>Maven Plugin</code> 插件的方式无感集成项目，提供 <code>Windows</code>、<code>Linux</code> 与 <code>Mac</code> 多平台程序构建，下面就让我们直接开始把。</p><h4 id="1-项目准备"><a href="#1-项目准备" class="headerlink" title="1. 项目准备"></a>1. 项目准备</h4><p>在开始之前，让我们先准备一个简单的 <code>Swing</code> 程序。</p><p>在之前的 <code>Maven</code> 教程中提过，项目默认在打包 <code>jar</code> 文件时并不会将所带的依赖一并编译，常通过 <code>assembly</code> 等插件实现 <code>fat jar</code> 构建。</p><p>而在 <code>JavaPackager</code> 中已经提供了此功能，因此无需额外引入其它插件，这里引入 <code>Jackson</code> 为例演示打包后的效果。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.19.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成后让我们实现一个简单的 <code>Swing</code> 窗口程序。</p><p>程序内容并不复杂，通过 <code>Jackson</code> 序列化 <code>Map</code> 实例并展示的串口中，完整代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PkgClient</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ObjectMapper mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span>        JFrame frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"PKG Client"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>JFrame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setLocationRelativeTo</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setResizable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加内容</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">createTextPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> JPanel <span class="token function">createTextPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span>        JPanel panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BoxLayout</span><span class="token punctuation">(</span>panel<span class="token punctuation">,</span> BoxLayout<span class="token punctuation">.</span>Y_AXIS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> Map<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>                <span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span>                <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"Alex"</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加文本</span>        JLabel label <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">,</span> SwingConstants<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        label<span class="token punctuation">.</span><span class="token function">setAlignmentX</span><span class="token punctuation">(</span>Component<span class="token punctuation">.</span>CENTER_ALIGNMENT<span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> panel<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序，可以得到下图中效果：<br><img src="/album/loading.gif" data-original="/album/article/java/pkg/1.png"></p><h4 id="2-基础编译"><a href="#2-基础编译" class="headerlink" title="2. 基础编译"></a>2. 基础编译</h4><p>那么现在我们就可以执行编译工作，先以最简化的配置开始，编译 <code>Windows</code> 下的 <code>exe</code> 程序。</p><p>在项目的 <code>pom</code> 文件中添加 <code>javapackager</code> 插件，其中 <code>phase = package</code> 即表示作用于 <code>mvn package</code> 打包期间。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.github.fvarrui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javapackager<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>PkgClient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">></span></span>xyz.ibudai.pkg.PkgClient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>platform</span><span class="token punctuation">></span></span>windows<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>platform</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bundleJre</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bundleJre</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jrePath</span><span class="token punctuation">></span></span>C:\Program Files\Java\jdk-17.0.7\jre<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jrePath</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>createZipball</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>createZipball</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述配置中核心的配置项说明参考下表：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">name</td>        <td style="text-align: center;">编译后的目录以及应用名，默认为类名以 - 分隔。</td>    </tr>    <tr>        <td style="text-align: center;">mainClass</td>        <td style="text-align: center;">主类的完整限定名。</td>    </tr>    <tr>        <td style="text-align: center;">platform</td>        <td style="text-align: center;">目标平台，可选值：auto|linux|mac|windows</td>    </tr>    <tr>        <td style="text-align: center;">bundleJre</td>        <td style="text-align: center;">是否生成 JRE，若否编译后文件允许需系统带 JRE。</td>    </tr>    <tr>        <td style="text-align: center;">jrePath</td>        <td style="text-align: center;">若 bundleJre 为 true，可指定 jre 目录。</td>    </tr>    <tr>        <td style="text-align: center;">createZipball</td>        <td style="text-align: center;">是否生成 -platform 后缀的 zip 文件，解压即可运行。</td>    </tr></table></br><p>添加配置后执行 <code>mvn package</code> 命令后即会在 <code>target</code> 目录生成下述内容。<br><img src="/album/loading.gif" data-original="/album/article/java/pkg/2.png"></p><p>图中 <code>-windows.zip</code> 文件解压缩后内容与 <code>PkgClient</code> 目录内容一致，包含下述文件：<br><img src="/album/loading.gif" data-original="/album/article/java/pkg/3.png"></p><p>其中 <code>exe</code> 即可执行程序，<code>libs</code> 即项目所依赖的 <code>jar</code> 包，在上述的工程中即 <code>Jackson</code> 相应 <code>jar</code> 文件。</p><p>而 <code>jre</code> 目录即 <code>Java</code> 运行环境，通过 <code>bundleJre</code> 参数控制是否生成，若否则生成的打包文件中不会包含这部分内容，也就意味在运行时需要对应的系统配置 <code>Java</code> 环境。默认其为拷贝当前系统 <code>Java</code> 所配置的版本，当然你也可以通过 <code>jrePath</code> 指定版本。</p><h4 id="3-环境变量"><a href="#3-环境变量" class="headerlink" title="3. 环境变量"></a>3. 环境变量</h4><p>运行 <code>Java</code> 程序时，在部分场景下常常我们会通过 <code>-D</code> 等等方式添加变量，亦或调整 <code>JVM</code> 参数。</p><p>在让 <code>JavaPackager</code> 编译后的文件运行时添加启动参数十分简单，在生成的 <code>exe</code> 下添加同级文件 <code>xxx.l4j.ini</code> 文件即可，其中 <code>xxx</code> 为上述 <code>name</code> 标签配置的值。</p><p>例如上述示例中，则新加 <code>PkgClient.l4j.ini</code> 文件后放于 <code>exe</code> 同级即可，文件中的内容按照一行一条的格式。</p><pre class="line-numbers language-ini"><code class="language-ini">-Xms16m<span class="token constant">-Dswing.aatext</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token constant">-Dsomevar</span><span class="token attr-value"><span class="token punctuation">=</span>"%SOMEVAR%"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如需要添加参数 <code>info.message=hello</code>，则在文件中添加下述内容：</p><pre class="line-numbers language-ini"><code class="language-ini"><span class="token constant">-Dinfo.message</span><span class="token attr-value"><span class="token punctuation">=</span>hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>稍微调整之前的程序，在窗口中读取配置并展示，代码片段如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> JPanel <span class="token function">createTextPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    JPanel panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    panel<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BoxLayout</span><span class="token punctuation">(</span>panel<span class="token punctuation">,</span> BoxLayout<span class="token punctuation">.</span>Y_AXIS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String message <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"info.message"</span><span class="token punctuation">,</span> <span class="token string">"default message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加文本</span>    JLabel label <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> SwingConstants<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>    label<span class="token punctuation">.</span><span class="token function">setAlignmentX</span><span class="token punctuation">(</span>Component<span class="token punctuation">.</span>CENTER_ALIGNMENT<span class="token punctuation">)</span><span class="token punctuation">;</span>    panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> panel<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后重新执行 <code>package</code> 编译项目，创建 <code>PkgClient.l4j.ini</code> 文件置于 <code>exe</code> 同级下并运行程序，可以得到下述效果：<br><img src="/album/loading.gif" data-original="/album/article/java/pkg/4.png"></p><h4 id="4-文件拷贝"><a href="#4-文件拷贝" class="headerlink" title="4. 文件拷贝"></a>4. 文件拷贝</h4><p>在部分需求场景下，我们的项目会依赖外部文件，在打包时需要一并进行复制。</p><p>针对此类场景，<code>JavaPackager</code> 同样提供了 <code>additionalResources</code> 标签用于文件或目录复制。</p><p>假如我们需要将 <code>assets</code> 目录一并复制进打包生成的目录结构中，则修改 <code>pom</code> 配置为下述内容：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>PkgClient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>additionalResources</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>additionalResource</span><span class="token punctuation">></span></span>D:\Temporary\assets<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>additionalResource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>additionalResources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成后重新执行 <code>packge</code> 命令构建，在生成的结构下可以看到 <code>assets</code> 目录生成成功。<br><img src="/album/loading.gif" data-original="/album/article/java/pkg/5.png"></p><p>这里需要注意一点，<code>.l4j.ini</code> 配置文件默认是通过 <code>additionalResources</code> 实现，若自定义了 <code>additionalResources</code> 属性且仍需要运行参数，则需要显式在 <code>additionalResource</code> 配置 <code>.l4j.ini</code> 文件路径。</p><hr><p><strong>参考链接</strong></p><ul><li><a href="https://github.com/javapackager/JavaPackager">JavaPackager</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;众所周知 &lt;code&gt;Java&lt;/code&gt; 基于 &lt;code&gt;JVM&lt;/code&gt; 实现了跨平台，即一次编译任意平台运行，只需 &lt;code&gt;JRE&lt;/code&gt; 运行环境即可。&lt;/p&gt;
&lt;p&gt;跨平台的特性也是市面一系列产品如 &lt;code&gt;IDEA&lt;/code&gt; 以及 &lt;c</summary>
      
    
    
    
    <category term="编译构建" scheme="https://great-jin.github.io/categories/%E7%BC%96%E8%AF%91%E6%9E%84%E5%BB%BA/"/>
    
    
    <category term="Windows" scheme="https://great-jin.github.io/tags/Windows/"/>
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB 项目集成教程</title>
    <link href="https://great-jin.github.io/db/mongo/integration/"/>
    <id>https://great-jin.github.io/db/mongo/integration/</id>
    <published>2025-05-09T16:00:00.000Z</published>
    <updated>2025-05-11T12:39:12.841Z</updated>
    
    <content type="html"><![CDATA[<p><code>MongoDB</code> 作为典型的 <code>NoSQL</code> 数据库拥有优秀的横向扩展能力，不拘束于关系型数据库中的表结构，无需调整便可实现结构变更。</p><p>今天就让我们了解下如何在普通 <code>Maven</code> 以及 <code>Spring Boot</code> 工程中集成使用 <code>MongoDB</code>。</p><h3 id="一、Maven集成"><a href="#一、Maven集成" class="headerlink" title="一、Maven集成"></a>一、Maven集成</h3><h4 id="1-依赖管理"><a href="#1-依赖管理" class="headerlink" title="1. 依赖管理"></a>1. 依赖管理</h4><p>在查找依赖时你可能会发现 <code>Mongo</code> 存在两个配置版本 <code>mongo-java-driver</code> 与 <code>mongodb-driver-sync</code>，前者为旧版依赖其包含异步 <code>API</code> 相对复杂，从 <code>MongoDB 4.0+</code> 开始官方建议使用 <code>mongodb-driver-sync</code>。</p><p>简而言之，如果无兼容历史版本的需要，则优先使用 <code>mongodb-driver-sync</code>，依赖配置如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mongodb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mongodb-driver-sync<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.10.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-服务连接"><a href="#2-服务连接" class="headerlink" title="2. 服务连接"></a>2. 服务连接</h4><p>在执行数据访问前，最基础的当然还是创建客户端连接对象，代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    String host <span class="token operator">=</span> <span class="token string">"localhost"</span><span class="token punctuation">;</span>    Integer port <span class="token operator">=</span> <span class="token number">27017</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>ServerAddress<span class="token operator">></span> serverList <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServerAddress</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String database <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token punctuation">;</span>    String username <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> password <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MongoClientSettings settings <span class="token operator">=</span> MongoClientSettings<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 超时配置</span>            <span class="token punctuation">.</span><span class="token function">applyToSocketSettings</span><span class="token punctuation">(</span>builder <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                builder<span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>                builder<span class="token punctuation">.</span><span class="token function">readTimeout</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">applyToClusterSettings</span><span class="token punctuation">(</span>builder <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                builder<span class="token punctuation">.</span><span class="token function">serverSelectionTimeout</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 服务信息</span>                builder<span class="token punctuation">.</span><span class="token function">hosts</span><span class="token punctuation">(</span>serverList<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 账号信息</span>            <span class="token punctuation">.</span><span class="token function">credential</span><span class="token punctuation">(</span>MongoCredential<span class="token punctuation">.</span><span class="token function">createScramSha256Credential</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> database<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建客户端</span>    MongoClient client <span class="token operator">=</span> MongoClients<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-URI连接"><a href="#3-URI连接" class="headerlink" title="3. URI连接"></a>3. URI连接</h4><p><code>MongoDB</code> 支持多种连接格式，除了上述的连接方式外 <code>MongoDB</code> 同时支持以 <code>URI</code> 方式，其连接格式如下：</p><pre class="line-numbers language-sql"><code class="language-sql">mongodb:<span class="token comment" spellcheck="true">//&lt;username>:&lt;passsword>@&lt;host>:&lt;port>/&lt;collection></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需注意一点，当用户名或密码中包含特殊字符时，在配置 <code>uri</code> 时需要替换为对应的转义字符，否则将无法连接。</p><p>常用的特殊字符及其转义字符参照下表：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">字符</td>        <th style="text-align: center;">编码</td>    </tr>    <tr>        <td style="text-align: center;">@</td>        <td style="text-align: center;">%40</td>    </tr>    <tr>        <td style="text-align: center;">:</td>        <td style="text-align: center;">%3A</td>    </tr>    <tr>        <td style="text-align: center;">/</td>        <td style="text-align: center;">%2F</td>    </tr>    <tr>        <td style="text-align: center;">?</td>        <td style="text-align: center;">%3F</td>    </tr>    <tr>        <td style="text-align: center;">#</td>        <td style="text-align: center;">%23</td>    </tr>    <tr>        <td style="text-align: center;">&</td>        <td style="text-align: center;">%26</td>    </tr>    <tr>        <td style="text-align: center;">=</td>        <td style="text-align: center;">%3D</td>    </tr></table></br><p>其客户端创建类似，将上述的 <code>credential()</code> 替换为 <code>applyConnectionString()</code> 即可，实现代码如下：</p><pre class="line-numbers language-java"><code class="language-java">String url <span class="token operator">=</span> <span class="token string">"mongodb://root:123456@192.168.0.21:27017/test_col?authSource=admin"</span><span class="token punctuation">;</span>MongoClientSettings settings <span class="token operator">=</span> MongoClientSettings<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 超时配置</span>        <span class="token punctuation">.</span><span class="token function">applyToSocketSettings</span><span class="token punctuation">(</span>builder <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            builder<span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">readTimeout</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">applyToClusterSettings</span><span class="token punctuation">(</span>builder <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            builder<span class="token punctuation">.</span><span class="token function">serverSelectionTimeout</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 服务信息</span>        <span class="token punctuation">.</span><span class="token function">applyConnectionString</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConnectionString</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-数据新增"><a href="#3-数据新增" class="headerlink" title="3. 数据新增"></a>3. 数据新增</h4><p>想要实现新增数据则十分简单，在获取 <code>MongoCollection</code> 实例后通过相应的 <code>insertOne()</code> 或 <code>insertMany()</code> 方法即可。</p><p>完整调用实现代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MongoRepository</span> <span class="token keyword">implements</span> <span class="token class-name">AutoCloseable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String database<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> MongoClient mongoClient<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MongoRepository</span><span class="token punctuation">(</span>String database<span class="token punctuation">,</span> MongoClient mongoClient<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>database <span class="token operator">=</span> database<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mongoClient <span class="token operator">=</span> mongoClient<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mongoClient <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mongoClient<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> MongoDatabase <span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mongoClient<span class="token punctuation">.</span><span class="token function">getDatabase</span><span class="token punctuation">(</span>database<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>String collection<span class="token punctuation">,</span> T t<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> tClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MongoCollection<span class="token operator">&lt;</span>T<span class="token operator">></span> mongoCollection <span class="token operator">=</span> <span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span>collection<span class="token punctuation">,</span> tClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        mongoCollection<span class="token punctuation">.</span><span class="token function">insertOne</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">insertAll</span><span class="token punctuation">(</span>String collection<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> list<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> tClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MongoCollection<span class="token operator">&lt;</span>T<span class="token operator">></span> mongoCollection <span class="token operator">=</span> <span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span>collection<span class="token punctuation">,</span> tClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        mongoCollection<span class="token punctuation">.</span><span class="token function">insertMany</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-数据查询"><a href="#4-数据查询" class="headerlink" title="4. 数据查询"></a>4. 数据查询</h4><p><code>MongoDB</code> 查询数据与新增方式类似，这里直接通过代码演示：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">count</span><span class="token punctuation">(</span>String collection<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> condition<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> tClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>    MongoCollection<span class="token operator">&lt;</span>T<span class="token operator">></span> mongoCollection <span class="token operator">=</span> <span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span>collection<span class="token punctuation">,</span> tClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    mongoCollection<span class="token punctuation">.</span><span class="token function">countDocuments</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">findOne</span><span class="token punctuation">(</span>String collection<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> condition<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> tClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>    MongoCollection<span class="token operator">&lt;</span>T<span class="token operator">></span> mongoCollection <span class="token operator">=</span> <span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span>collection<span class="token punctuation">,</span> tClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> mongoCollection<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">find</span><span class="token punctuation">(</span>String collection<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> condition<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> tClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>    MongoCollection<span class="token operator">&lt;</span>T<span class="token operator">></span> mongoCollection <span class="token operator">=</span> <span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span>collection<span class="token punctuation">,</span> tClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    FindIterable<span class="token operator">&lt;</span>T<span class="token operator">></span> iterable <span class="token operator">=</span> mongoCollection<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>T<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>T t <span class="token operator">:</span> iterable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-数据删除"><a href="#5-数据删除" class="headerlink" title="5. 数据删除"></a>5. 数据删除</h4><p>同理，文档记录删除方式如下不再展开介绍。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">boolean</span> <span class="token function">delete</span><span class="token punctuation">(</span>String collection<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> condition<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> tClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>    MongoCollection<span class="token operator">&lt;</span>T<span class="token operator">></span> mongoCollection <span class="token operator">=</span> <span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span>collection<span class="token punctuation">,</span> tClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> mongoCollection<span class="token punctuation">.</span><span class="token function">deleteMany</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeletedCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">boolean</span> <span class="token function">deleteOne</span><span class="token punctuation">(</span>String collection<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> condition<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> tClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>    MongoCollection<span class="token operator">&lt;</span>T<span class="token operator">></span> mongoCollection <span class="token operator">=</span> <span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span>collection<span class="token punctuation">,</span> tClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> mongoCollection<span class="token punctuation">.</span><span class="token function">deleteOne</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeletedCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、Spring集成"><a href="#二、Spring集成" class="headerlink" title="二、Spring集成"></a>二、Spring集成</h3><h4 id="1-依赖管理-1"><a href="#1-依赖管理-1" class="headerlink" title="1. 依赖管理"></a>1. 依赖管理</h4><p>在 <code>Spring Boot</code> 中依赖就十分简单了，引入对应的 <code>starter</code> 即可，依赖如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-mongodb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-连接配置"><a href="#2-连接配置" class="headerlink" title="2. 连接配置"></a>2. 连接配置</h4><p>引入依赖后需在项目中配置 <code>MongoDB</code> 的连接信息，在 <code>application.yml</code> 中添加下述内容。</p><p>这里采用 <code>URI</code> 方式连接，与之前 <code>Maven</code> 方式集成中提到的类似，如果用户名或密码包含特殊字符转替换为转义字符。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">data</span><span class="token punctuation">:</span>    <span class="token key atrule">mongodb</span><span class="token punctuation">:</span>      <span class="token key atrule">uri</span><span class="token punctuation">:</span> mongodb<span class="token punctuation">:</span>//root<span class="token punctuation">:</span>123456@localhost<span class="token punctuation">:</span>27017/test_collection<span class="token punctuation">?</span>authSource=admin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-数据新增-1"><a href="#3-数据新增-1" class="headerlink" title="3. 数据新增"></a>3. 数据新增</h4><p>完成配置后即可开始相应访问交互，与 <code>Maven</code> 中不同的是你可以通过 <code>MongoTemplate</code> 便可轻易的实现与 <code>MongoDB</code> 的相应交互。</p><p>在 <code>MongoDB</code> 中提供了两种新增接口 <code>save()</code> 与 <code>insert()</code>，二者最大的区别前者新增时若数据已存在则会报错失败，而 <code>insert()</code> 方法则会直接覆盖旧数据。</p><p>相应的新增方法实现如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MongoRepository</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> MongoTemplate mongoTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mongoTemplate<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mongoTemplate<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">insertAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>T<span class="token operator">></span> collection<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mongoTemplate<span class="token punctuation">.</span><span class="token function">insertAll</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-数据查询-1"><a href="#4-数据查询-1" class="headerlink" title="4. 数据查询"></a>4. 数据查询</h4><p>在 <code>MongoDB</code> 中通过 <code>Criteria</code> 与 <code>Query</code> 构建查询条件，常用的查询接口参考下表：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">描述</td>    </tr>    <tr>        <td style="text-align: center;">count()</td>        <td style="text-align: center;">查询匹配的记录条数。</td>    </tr>    <tr>        <td style="text-align: center;">find()</td>        <td style="text-align: center;">返回所有匹配的记录结果。</td>    </tr>    <tr>        <td style="text-align: center;">findOne()</td>        <td style="text-align: center;">返回匹配记录结果中的一条。</td>    </tr>    <tr>        <td style="text-align: center;">findById()</td>        <td style="text-align: center;">根据文档 ID 精准匹配查询。</td>    </tr></table></br><p>表中所列接口其相应的实现如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MongoRepository</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> MongoTemplate mongoTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">long</span> <span class="token function">count</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> tClass<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token function">createQuery</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">,</span> tClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">find</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> tClass<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token function">createQuery</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">,</span> tClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">findById</span><span class="token punctuation">(</span>Object id<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> tClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> tClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> tClass<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token function">createQuery</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">,</span> tClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> Query <span class="token function">createQuery</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> conditions<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Criteria criteria <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Criteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> entry <span class="token operator">:</span> conditions<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            criteria<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span>criteria<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;MongoDB&lt;/code&gt; 作为典型的 &lt;code&gt;NoSQL&lt;/code&gt; 数据库拥有优秀的横向扩展能力，不拘束于关系型数据库中的表结构，无需调整便可实现结构变更。&lt;/p&gt;
&lt;p&gt;今天就让我们了解下如何在普通 &lt;code&gt;Maven&lt;/code&gt; 以及 &lt;c</summary>
      
    
    
    
    <category term="中间件" scheme="https://great-jin.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="MongoDB" scheme="https://great-jin.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Maven系统依赖打包</title>
    <link href="https://great-jin.github.io/build/maven/system/"/>
    <id>https://great-jin.github.io/build/maven/system/</id>
    <published>2025-01-17T16:00:00.000Z</published>
    <updated>2025-05-11T12:39:12.812Z</updated>
    
    <content type="html"><![CDATA[<p>在之前的博客中详细介绍了通过 <code>Maven</code> 实现项目的依赖管理，以及实现工程的编译构建。</p><p>熟话说巧妇难为无米之炊，实现依赖管理的前提都是需要中央仓库或本地仓库存在对应的依赖，如果依赖不存在也只能望洋兴叹。</p><p>但这类场景在开发中却又并不少见，对于某个功能涉及的依赖包经过一顿网上冲浪，终于找到了依赖文件，但依赖并未上传中央仓库无法直接集成依赖。</p><h4 id="1-系统依赖"><a href="#1-系统依赖" class="headerlink" title="1. 系统依赖"></a>1. 系统依赖</h4><p>幸运的是 <code>Maven</code> 的依赖导入提供了本地文件的引用导入，在定义依赖时将 <code>scope</code> 作用域定义为 <code>system</code> 同时通过 <code>systemPath</code> 用于指定依赖文件的路径。</p><p>例如下述示例即读取 <code>D:/repo/demo-one-1.0-SNAPSHOT.jar</code> 目录文件作为依赖包，而非从默认配置的 Maven 仓库中检索查找。如此一来，即便某个依赖文件不存在于仓库之中，仍能正常引入工程。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>xyz.ibudai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>demo-one<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>system<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>systemPath</span><span class="token punctuation">></span></span>D:/repo/demo-one-1.0-SNAPSHOT.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>systemPath</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-仓库结构"><a href="#2-仓库结构" class="headerlink" title="2. 仓库结构"></a>2. 仓库结构</h4><p>在继续下一步的介绍之前，让我们先来看一下 <code>Maven</code> 仓库对于依赖文件是以何种结构进行管理？</p><p>在定义一个 <code>Maven</code> 工程时，我们都知道 <code>groupId</code>，<code>artifactId</code> 与 <code>version</code> 三者是必不可少，分别声明了依赖的所属、名称以及版本信息，例如下述示例所展示：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>xyz.ibudai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>demo-one<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那你是否又好奇这个模块又是如何存储在 <code>Maven</code> 仓库之中？</p><p>实际上存储结构也简单明了，打开 <code>Maven</code> 配置的仓库目录中，可以看到依赖的存储路径是以 <code>groupId</code>，<code>artifactId</code> 与 <code>version</code> 三者作为目录路径存储，同时针对 <code>groupId</code> 中的 <code>.</code> 按次序拆分为多个目录。</p><p>例如上述定义的模块通过 <code>install</code> 命令后将生成的文件目录结构如下，而文件名默认以 <code>&lt;artifactId&gt;-&lt;version&gt;.jar</code> 的命名规则存在。<br><img src="/album/loading.gif" data-original="/album/article/java/maven/structure.png"></p><h4 id="3-工程编译"><a href="#3-工程编译" class="headerlink" title="3. 工程编译"></a>3. 工程编译</h4><p>了解了上述概念后，让我们来看一下 <code>Maven</code> 又是如何对工程进行编译打包。</p><p>默认 <code>Maven</code> 在打包构建时并不会将模块所依赖的模块一同打包进 jar 可执行文件，而是只会打包当前工程 <code>src/main</code>  包路径的代码文件。因此，若需要将工程的依赖一并打包通常需要利用到 <code>Assembly</code> 等构建插件，在之前的博客中分享过了如何使用这里就不再重复展开。</p><p>这里就直接贴出完整的 <code>Assembly</code> 插件打包配置，内容如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-assembly-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>${project.artifactId}-${project.version}-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appendAssemblyId</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appendAssemblyId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>descriptorRefs</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>descriptorRef</span><span class="token punctuation">></span></span>jar-with-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>descriptorRef</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>descriptorRefs</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attach</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>attach</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>archive</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span><span class="token punctuation">></span></span>                  <span class="token comment" spellcheck="true">&lt;!-- 替换为主类完整限定名 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">></span></span>fully.qualified.MainClass<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addDefaultSpecificationEntries</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>addDefaultSpecificationEntries</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addDefaultImplementationEntries</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>addDefaultImplementationEntries</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>archive</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>make-assembly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>single<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在工程 <code>pom.xml</code> 文件中添加上述配置之后执行 <code>packge</code> 命令即可在 <code>target</code> 目录下生成 <code>xxx-all.jar</code> 可执行文件，文件内包含了工程的源码以及所有依赖的模块。</p><p>但如果你仔细观察的话，文件的确是将依赖的模块一并打包，但是刚才提到的 <code>scope=system</code> 依赖却并没有出现在打包后的文件中。</p><p>是的，你并没有看错，<code>Assembly</code> 插件将会跳过 <code>scope=system</code> 依赖模块，那又该如何处理？</p><p>这里就要回到刚才介绍的依赖文件存储结构了，不仅文件的生成是基于 <code>groupId</code>，<code>artifactId</code> 与 <code>version</code> 三者，在定义 <code>dependency</code> 时 <code>Maven</code> 同样也是由此为依据在仓库中检索文件。但解决方案就有了，只要根据此规则为 <code>scope=system</code> 依赖创建同样的目录，那即可直接引用依赖无需将作用域定义于 <code>system</code>。</p><p>最简单的方式就是手动创建目录，但 <code>Maven</code> 对此提供了更方便的方式，命令模板如下：</p><pre class="line-numbers language-bash"><code class="language-bash">mvn install:install-file \  -Dfile<span class="token operator">=</span><span class="token operator">&lt;</span>path-to-file<span class="token operator">></span> \  -DgroupId<span class="token operator">=</span><span class="token operator">&lt;</span>my-groupId<span class="token operator">></span> \  -DartifactId<span class="token operator">=</span><span class="token operator">&lt;</span>my-artifactId<span class="token operator">></span> \  -Dversion<span class="token operator">=</span><span class="token operator">&lt;</span>my-version<span class="token operator">></span> \  -Dpackaging<span class="token operator">=</span><span class="token operator">&lt;</span>my-packaging<span class="token operator">></span> \  -DlocalRepositoryPath<span class="token operator">=</span><span class="token operator">&lt;</span>path-to-repo<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如之前提到 <code>demo-one-1.0-SNAPSHOT.jar</code> 文件，通过下述命令即可在 <code>Maven</code> 仓库中生成对应的结构的目录。</p><pre class="line-numbers language-bash"><code class="language-bash">mvn install:install-file \  -Dfile<span class="token operator">=</span> \  -DgroupId<span class="token operator">=</span>xyz.ibudai \  -DartifactId<span class="token operator">=</span>demo-one \  -Dversion<span class="token operator">=</span>1.0-SNAPSHOT \  -Dpackaging<span class="token operator">=</span>jar \  -DlocalRepositoryPath<span class="token operator">=</span>D:/repo/demo-one-1.0-SNAPSHOT.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那问题也迎刃而解，此时在项目中依赖 <code>demo-one</code> 模块则需要通过 <code>system</code> 执行，和其它依赖一样引用即可。与此同时，再通过 <code>Assembly</code> 插件也可正常实现打包构建。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>xyz.ibudai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>demo-one<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述的方式适用于本地的项目编译构建，依赖文件在本地仓库中是生成了，但线上私服仓库中仍然不存在此依赖文件。</p><p>因此，若需要实现在线编译，同样需要通过 <code>deploy</code> 命令将依赖推送到私服，命令格式如下：</p><pre class="line-numbers language-bash"><code class="language-bash">mvn deploy:deploy-file \  -Dfile<span class="token operator">=</span><span class="token operator">&lt;</span>path-to-file<span class="token operator">></span> \  -DgroupId<span class="token operator">=</span><span class="token operator">&lt;</span>my-groupId<span class="token operator">></span> \  -DartifactId<span class="token operator">=</span><span class="token operator">&lt;</span>my-artifactId<span class="token operator">></span> \  -Dversion<span class="token operator">=</span><span class="token operator">&lt;</span>my-version<span class="token operator">></span> \  -Dpackaging<span class="token operator">=</span><span class="token operator">&lt;</span>my-packaging<span class="token operator">></span> \  -DrepositoryId<span class="token operator">=</span><span class="token operator">&lt;</span>repository-id<span class="token operator">></span> \  -Durl<span class="token operator">=</span><span class="token operator">&lt;</span>repository-url<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在之前的博客中详细介绍了通过 &lt;code&gt;Maven&lt;/code&gt; 实现项目的依赖管理，以及实现工程的编译构建。&lt;/p&gt;
&lt;p&gt;熟话说巧妇难为无米之炊，实现依赖管理的前提都是需要中央仓库或本地仓库存在对应的依赖，如果依赖不存在也只能望洋兴叹。&lt;/p&gt;
&lt;p&gt;但这类场景在开发</summary>
      
    
    
    
    <category term="编译构建" scheme="https://great-jin.github.io/categories/%E7%BC%96%E8%AF%91%E6%9E%84%E5%BB%BA/"/>
    
    
    <category term="Maven" scheme="https://great-jin.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Java 模块化特性</title>
    <link href="https://great-jin.github.io/java/jdk/module/"/>
    <id>https://great-jin.github.io/java/jdk/module/</id>
    <published>2025-01-11T16:00:00.000Z</published>
    <updated>2025-05-11T12:39:12.936Z</updated>
    
    <content type="html"><![CDATA[<p>在 <code>Java</code> 的不断更新迭代中 <code>JDK</code> 加入了一系列新的特性，而在 <code>JDK 9</code> 中则引入了全新的模块化特性，为工程结构管理提供了基础保障。</p><p>我们都知道在 <code>Maven</code> 中可以通过 <code>module</code> 实现模块的管理，<code>JDK</code> 的模块化则有异曲同工之妙。</p><p>下面就让我们来看一下模块块的作用以及引入其的目的。</p><h4 id="1-基础介绍"><a href="#1-基础介绍" class="headerlink" title="1. 基础介绍"></a>1. 基础介绍</h4><p>首先让我们看一下在 <code>JDK 8</code> 以及之前 <code>Java</code> 类的存储方式，在 <code>Java</code> 的安装目录下，可以看到所有的 <code>Java</code> 类都被放在 <code>src.zip</code> 文件。<br><img src="/album/loading.gif" data-original="/album/article/java/module/1.png"></p><p>再看一下 <code>JDK 9</code> 之后的安装目录，这里以 <code>JDK 11</code> 为例，你会发现此时  <code>src.zip</code> 文件已然不存在，取而代之是新增了 <code>jmods</code> 目录，目录下存放着一系列 <code>.jmod</code> 文件。<br><img src="/album/loading.gif" data-original="/album/article/java/module/2.png"></p><p>那这些 <code>jmod</code> 文件又是什么？这个正是本文的重点，也是模块化的核心。</p><p>在 <code>JDK 8</code> 之前所有模块都是打包为一个文件，即便是只用到单个类，仍需要全局依赖。同时，在之前的版本中对于作用域的限制过于宽泛，虽然 <code>private</code> 等可以实现访问限制，但反射的存在让这个限制形同虚设。</p><p>因此，在 <code>JDK 9</code> 中引入了模块化概念，将 <code>src.zip</code> 拆分为独立的 <code>jmod</code> 文件，每个子模块之间相互独立，使得工程管理更为轻量化。</p><h4 id="2-模块创建"><a href="#2-模块创建" class="headerlink" title="2. 模块创建"></a>2. 模块创建</h4><p>了解了模块化的基本信息，让我们来看一下如何创建一个模块化工程？</p><p>实现方式也十分简单，通过 <code>module-info.java</code> 文件进程模块内类的管理，如果你打开上述提到的 <code>jmod</code> 文件，即可发现文件内正包含此文件。<br><img src="/album/loading.gif" data-original="/album/article/java/module/3.png"></p><p>接下来让我们来看一下 <code>module-info.java</code> 文件的内容结构，其定义模板如下：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">module</td>        <td style="text-align: center;">指定当前模块的模块名。</td>    </tr>    <tr>        <td style="text-align: center;">requires</td>        <td style="text-align: center;">定义此模块所依赖的模块。</td>    </tr>    <tr>        <td style="text-align: center;">exports</td>        <td style="text-align: center;">定义此模块对外可以访问的包路径。</td>    </tr></table></br><pre class="line-numbers language-java"><code class="language-java">module <span class="token operator">&lt;</span>module<span class="token punctuation">.</span>name<span class="token operator">></span> <span class="token punctuation">{</span>    requires <span class="token operator">&lt;</span>other<span class="token punctuation">.</span>module<span class="token punctuation">.</span>name<span class="token operator">></span><span class="token punctuation">;</span>    exports <span class="token operator">&lt;</span><span class="token keyword">package</span><span class="token punctuation">.</span>name<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果一个类所在的包路径没有通过 <code>exports</code> 对外暴露，则其它模块无法使用此类，对于类的访问进一步作出限制，即便通过反射方式调用仍无法访问。</p><p>在 <code>exports</code> 中同时提供了 <code>to</code> 关键字用于配置将包只暴露给指定的模块，实现更精细化的控制，如下述示例中即只将包 <code>xyz.ibudai.test</code> 开放给 <code>my.mod</code> 模块。</p><pre class="line-numbers language-java"><code class="language-java">module test<span class="token punctuation">.</span>mod <span class="token punctuation">{</span>    exports xyz<span class="token punctuation">.</span>ibudai<span class="token punctuation">.</span>test to my<span class="token punctuation">.</span>mod<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>同时每个模块默认都隐式依赖 <code>java.base</code> 模块，因此 <code>requires java.base;</code> 无需手动声明。</p><p>而 <code>java.base</code> 模块则正是 <code>Java</code> 的核心基础类模块，查看该模块文件即可看到其通过 <code>exports</code> 对外开放了 <code>java.lang</code> 等一系列核心包。<br><img src="/album/loading.gif" data-original="/album/article/java/module/4.png"></p><h4 id="3-模块编译"><a href="#3-模块编译" class="headerlink" title="3. 模块编译"></a>3. 模块编译</h4><p>那如何将编译自己的 <code>jmod</code> 模块文件呢？其实也十分简单，首先将工程编译为 <code>jar</code> 文件，再由 <code>jmod create</code> 命令即可，格式如下：</p><pre class="line-numbers language-bash"><code class="language-bash">jmod create --class-path <span class="token operator">&lt;</span>target.jar<span class="token operator">></span> <span class="token operator">&lt;</span>target.jmod<span class="token operator">></span><span class="token comment" spellcheck="true"># Example</span>jmod create --class-path hello.jar hello.jmod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-示例分析"><a href="#4-示例分析" class="headerlink" title="4. 示例分析"></a>4. 示例分析</h4><p>下面通过示例演示模块化的效果。</p><p>新建工程 <code>module-1</code>，并创建包目录 <code>xyz.ibudai.practice.jdk.pack1</code> 并定义类 <code>Demo1</code>，代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> xyz<span class="token punctuation">.</span>ibudai<span class="token punctuation">.</span>pack1<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Demo 1 say hello."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同理，新建包目录 <code>xyz.ibudai.practice.jdk.pack2</code> 并定义两个类 <code>Demo2</code>，这里就不再展示代码内容。</p><p>接下来让我们定义对应的 <code>module-info.java</code> 模块文件，注意文件名是固定的。在模块文件中通过 <code>exports</code> 关键字将包 <code>xyz.ibudai.practice.jdk.pack1</code> 对外暴露。</p><pre class="line-numbers language-java"><code class="language-java">module ibudai<span class="token punctuation">.</span>base1 <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 默认依赖 java.base，可省略 */</span>    requires java<span class="token punctuation">.</span>base<span class="token punctuation">;</span>    exports xyz<span class="token punctuation">.</span>ibudai<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>jdk<span class="token punctuation">.</span>pack1<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建另一工程 <code>module-2</code>，配置其模块文件 <code>module-info.java</code> 内容如下：</p><pre class="line-numbers language-java"><code class="language-java">module ibudai<span class="token punctuation">.</span>base2 <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 依赖 ibudai.base1 */</span>    requires ibudai<span class="token punctuation">.</span>base1<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在此新工程中新建测试类执行调用 <code>Demo1</code> 的静态方法能够正常执行，但如果尝试调用 <code>Demo2</code> 编译器则会提升包未对外导出。<br><img src="/album/loading.gif" data-original="/album/article/java/module/5.png"></p><h4 id="5-强制访问"><a href="#5-强制访问" class="headerlink" title="5. 强制访问"></a>5. 强制访问</h4><p>作为一身反骨的 <code>Javaer</code> 而言，如果某个包没有对外暴露，那应该如何解决？</p><p><code>Java</code> 仍给我们留了一条后路，在编译时添加下述命令：</p><pre class="line-numbers language-bash"><code class="language-bash">--add-exports ibudai.base/xyz.ibudai.practice.jdk.pack2<span class="token operator">=</span>ALL-UNNAMED<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/album/loading.gif" data-original="/album/article/java/module/6.png"></p><p>在启动时添加下述命令：</p><pre class="line-numbers language-bash"><code class="language-bash">--add-opens ibudai.base/xyz.ibudai.practice.jdk.pack2<span class="token operator">=</span>ALL-UNNAMED<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/album/loading.gif" data-original="/album/article/java/module/7.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 &lt;code&gt;Java&lt;/code&gt; 的不断更新迭代中 &lt;code&gt;JDK&lt;/code&gt; 加入了一系列新的特性，而在 &lt;code&gt;JDK 9&lt;/code&gt; 中则引入了全新的模块化特性，为工程结构管理提供了基础保障。&lt;/p&gt;
&lt;p&gt;我们都知道在 &lt;code&gt;Maven&lt;/c</summary>
      
    
    
    
    <category term="JAVA基础" scheme="https://great-jin.github.io/categories/JAVA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>GraalVM，自举的诞生！</title>
    <link href="https://great-jin.github.io/java/jvm/graalvm/"/>
    <id>https://great-jin.github.io/java/jvm/graalvm/</id>
    <published>2025-01-03T16:00:00.000Z</published>
    <updated>2025-05-11T12:39:12.939Z</updated>
    
    <content type="html"><![CDATA[<p>对于每一位 <code>Javer</code> 而言，想必对于 <code>JVM</code> 都并不陌生，即使在实际开发中并没有深入研究，但或多或少对其仍有一定的了解。</p><p>所谓 <code>JVM</code> 缩写于 <code>Java Virtual Machine</code> 即 <code>Java</code> 虚拟机，所以开发的程序都是运行于此虚拟机之前，也是 <code>Java</code> 引以为傲的特性即一次编译任意运行，作为应用程序于操作系统之间沟通的桥梁，只需安装了 <code>JRE</code> 环境即可跨平台运行。</p><h3 id="一、JIT编译"><a href="#一、JIT编译" class="headerlink" title="一、JIT编译"></a>一、JIT编译</h3><h4 id="1-基础介绍"><a href="#1-基础介绍" class="headerlink" title="1. 基础介绍"></a>1. 基础介绍</h4><p>若提到 <code>JVM</code>，那必然绕不开 <code>JIT(Just In Time)</code> 编译，故名思意即时编译。</p><p>我们都知道开发的应用程序想要运行在 <code>JVM</code> 之上，需要先将 <code>.java</code> 文件编译为 <code>.class</code> 字节文件。当编译完成之后，程序的字节文件则可在任意的 <code>JVM</code> 环境上运行，由 <code>JVM</code> 负责解析字节文件交由操作系统执行。</p><p>让我们将目光聚焦到 <code>JVM</code> 与操作系统交互上，操作系统并不认识编译之后的 <code>.class</code> 文件，需要由 <code>JVM</code> 承担其转译的工作，但通过此方式虽达到了效果但性能却并不令人满意。</p><p>那有什么方式能够解决呢？最简单的方式即将编译后的字节文件再次转译为操作系统可识别的底层汇编机器码，则操作系统可直接进行执行，省去了 <code>JVM</code> 解释的这一动作，而这个过程即称为 <code>JIT</code> 编译。</p><h4 id="2-编译类型"><a href="#2-编译类型" class="headerlink" title="2. 编译类型"></a>2. 编译类型</h4><p>简单来讲，<code>JIT</code> 的工作即将字节文件转化为操作系统可直接执行的机器码。</p><p>在之前介绍垃圾回收器的时候提到过程序的启动支持 <code>Client</code> 与 <code>Server</code> 两种模式，而同样 <code>JIT</code> 对应的也有 <code>C1</code> 与 <code>C2</code> 模式。</p><p>二者的区别在于 <code>Server</code> 模式即 <code>C2</code> 相对于 <code>C1</code> 而言在解析编译为机器码时做出更多的编译优化，对于长期运行于服务器上的引用而言相对更为合适。</p><h4 id="3-编译优化"><a href="#3-编译优化" class="headerlink" title="3. 编译优化"></a>3. 编译优化</h4><p>但在具体的场景中相对更为复杂，两种编译模式更多的是搭配进行。</p><p>当我们将编写程序编译为字节文件时，此时编译执行的策略是 <code>C1</code> 模式，即与实际编写的代码并无差异。而在 <code>JVM</code> 实时运行过程中，当 <code>JVM</code> 检测到某一代码块的执行频率提高时，则会动态基于 <code>C2</code> 模式实时调整优化，这也是即时编译名称的由来。</p><p>对于 <code>JIT</code> 编译的优化可谓门道颇深，在 <code>《Effective Java》</code> 第 <code>66</code> 节中也提到 <code>JIT</code> 优化中的一种 <code>hoisting</code> 即优化提升，感兴趣的可自行查看原文。</p><p>这里举个示例进行演示:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述示例中循环执行了 <code>1000</code> 次打印输出，按照直觉而言 <code>for</code> 循环结束判断的表达式 <code>10*100</code> 每次循环都执行计算一次，但实际上并非如此。</p><p>正是由于 <code>JIT</code> 编译优化的存在的，实际运行生效的结果将为下述代码，即 <code>hoisting</code> 优化提升会将计算前置，从而整个循环过程计算只会执行一次。</p><p>想要了解更多的推荐去看周志明老师出版的 <code>《深入理解 Java 虚拟机》</code>，在第 <code>11</code> 章详细介绍了 <code>JIT</code> 内容。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、AOT编译"><a href="#二、AOT编译" class="headerlink" title="二、AOT编译"></a>二、AOT编译</h3><h4 id="1-预编译"><a href="#1-预编译" class="headerlink" title="1. 预编译"></a>1. 预编译</h4><p>那讲了这么多 <code>JIT</code> 究竟和 <code>GraalVM</code> 又有什么关联呢？</p><p><code>Java</code> 诞生至今已发展数十年，且随着技术的不断演进想要在原有的 <code>JIT</code> 基础之上提出更多的特性以及优化所需要付出成本是十分高昂的，那最简单的方式就是推到重来。这也是 <code>GraalVM</code> 所诞生的一大原有，且不同于 <code>JVM</code> 的由 <code>C++</code> 实现，<code>GraalVM</code> 实现了自举即通过 <code>Java</code> 语言开发实现，同时引入新的虚拟机接口规范 <code>JVMCI(JVM Compiler Interface)</code>。</p><p>在 <code>GraalVM</code> 中一大亮点即提出了预编译 <code>AOT(Ahead-Of-Time)</code>，它不像 <code>JIT</code> 中的 <code>C2</code> 一样为运行时实时动态调整，<code>AOT</code> 在编译构建时即会对代码进行分析优化后编译，程序运行时则不再动态调整。</p><p>虽然 <code>AOT</code> 仍然达不到 <code>JIT</code> 的执行效率，但万物皆有取舍。在内存管理方面，<code>AOT</code> 由于预编译的特性无需动态分析调整，节省了方法堆栈等消耗，程序运行内存的消耗相对于 <code>JVM</code> 中的 <code>JIT</code> 取得了明显了降低。</p><h4 id="2-原生镜像"><a href="#2-原生镜像" class="headerlink" title="2. 原生镜像"></a>2. 原生镜像</h4><p>虽然 <code>GraalVM</code> 中引入了 <code>AOT</code>，不过在默认的运行模式下仍是基于 <code>JIT</code> 方法实现，值得一提的是 <code>GraalVM</code> 中的 <code>JIT</code> 同样基于 <code>Java</code> 重新设计开发。</p><p>因此，想要使用 <code>AOT</code> 则需要将 <code>Jar</code> 文件编译为 <code>Native Images</code>。所谓 <code>Native Images</code> 即将程序直接构建为镜像容器文件，与传统的可执行文件不同，此时 <code>Native Images</code> 运行不再依赖于 <code>JVM</code> 虚拟机可独立运行。</p><p><code>Native Images</code> 的构建方式也并不复杂，在安装完 <code>GraalVM</code> 并配置系统环境变量之后，<code>native-image</code> 便会可生效，可通过下述命令查看版本验证是否可用。</p><pre class="line-numbers language-bash"><code class="language-bash">native-image --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然想要编译为可执行二进制文件需要安装相应的环境依赖，以 <code>Windows</code> 环境为例则需要安装 <code>Vistual Studio</code>，官网教程描述的已十分详细，这里就不再介绍，<a href="https://medium.com/graalvm/using-graalvm-and-native-image-on-windows-10-9954dc071311">链接直达</a>。</p><blockquote><p><code>Windows</code> 下安装 <code>Vistual Studio</code> 时需要注意，<code>GraalVM</code> 中读取目录为默认安装路径，若安装 <code>Vistual Studio</code> 时修改了默认路径，则需要通过 <code>mklink /d</code> 命令为两个目录创建软链接。</p><p>详细内容可参考 <code>Issue</code>: <a href="https://github.com/oracle/graal/issues/7121#issuecomment-2264781017">Error: Failed to find ‘vcvarsall.bat’ in a Visual Studio installation.</a></p></blockquote><p>环境准备完成之后即可通过下述命令编译 <code>Jar</code> 包为 <code>Native Images</code>，命令执行后会生成同名的 <code>exe</code> 文件。</p><pre class="line-numbers language-bash"><code class="language-bash">native-image -jar <span class="token operator">&lt;</span>target-file<span class="token operator">></span>.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然你也可以选择在 <code>Maven</code> 工程 <code>pom.xml</code> 文件添加下述内容后执行 <code>mvn clean package -Pnative</code> 命令，完成后将在工程 <code>target</code> 目录下生成 <code>xxx.exe</code> 可执行文件。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>native<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.graalvm.buildtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>native-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.10.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>extensions</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>extensions</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>build-native<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>compile-no-fork<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-反射信息"><a href="#3-反射信息" class="headerlink" title="3. 反射信息"></a>3. 反射信息</h4><p>由于 <code>Native Image</code> 是静态编译的，任何在运行时使用的反射、动态代理等特性都需要显式声明，否则 <code>GraalVM</code> 编译器无法知道它们的存在。</p><p>通过下述方式使用 <code>native-image-agent</code> 来自动生成反射和动态代理的配置文件：</p><pre class="line-numbers language-bash"><code class="language-bash">java -agentlib:native-image-agent<span class="token operator">=</span>config-output-dir<span class="token operator">=</span>./configs -jar <span class="token operator">&lt;</span>target-file<span class="token operator">></span>.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行后 <code>configs</code> 目录中会生成配置文件如 <code>reflection-config.json</code> 和 <code>proxy-config.json</code>，可以将这些配置文件一起包含在原生镜像构建过程中。</p><p>在构建可以使用 <code>-H:ConfigurationFileDirectories=./configs</code> 选项将这些配置文件包含到构建过程中：</p><pre class="line-numbers language-bash"><code class="language-bash">native-image -jar <span class="token operator">&lt;</span>target-file<span class="token operator">></span>.jar -H:ConfigurationFileDirectories<span class="token operator">=</span>./configs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p><strong>参考链接</strong></p><ol><li><a href="https://www.baeldung.com/graal-java-jit-compiler">Deep Dive Into the New Java JIT Compiler – Graal</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;对于每一位 &lt;code&gt;Javer&lt;/code&gt; 而言，想必对于 &lt;code&gt;JVM&lt;/code&gt; 都并不陌生，即使在实际开发中并没有深入研究，但或多或少对其仍有一定的了解。&lt;/p&gt;
&lt;p&gt;所谓 &lt;code&gt;JVM&lt;/code&gt; 缩写于 &lt;code&gt;Java Virtual</summary>
      
    
    
    
    <category term="JVM虚拟机" scheme="https://great-jin.github.io/categories/JVM%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>不可不知的 Map 技巧</title>
    <link href="https://great-jin.github.io/java/collection/map/"/>
    <id>https://great-jin.github.io/java/collection/map/</id>
    <published>2024-12-14T16:00:00.000Z</published>
    <updated>2025-05-11T12:39:12.914Z</updated>
    
    <content type="html"><![CDATA[<p>如果说什么是 <code>Java</code> 集合中的性能天花板，那 <code>Map</code> 肯定是当仁不让。如果又问什么每个 <code>Crud Boy</code> 的终极噩梦，那空指针 <code>(NPE)</code> 必然将榜上有名。</p><p><code>HashMap</code> 作为 <code>JDK 1.2</code> 版本就被引入的结果在设计之初并没有针对空数据有着特殊的限制，一不留神就可能踩坑从而引发连锁反应。</p><p>因此，随着 <code>JDK</code> 的不断更新迭代，在 <code>JDK 8</code> 中引入 <code>compute()</code> 及 <code>merge()</code> 等一系列新方法进一步提高代码健壮性，今天就让我们来一探究竟。</p><h4 id="1-compute"><a href="#1-compute" class="headerlink" title="1. compute()"></a>1. compute()</h4><p><code>compute()</code> 是最基础也是最通用的方法，顾名思义即计算，可以针对指定 <code>Key</code> 进行重新计算赋值，作用相当于 <code>get()</code> + <code>put()</code> 结合体。</p><p>其第二个方法入参 <code>BiFunction</code> 输入两个值分表表示当前 <code>Key</code> 与 <code>Value</code>，最后返回的结果即新值。下述示例即将对应元素的值替换为新旧值字符串拼接后结果。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"a1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 计算赋值</span>    map<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        String interval <span class="token operator">=</span> <span class="token string">"^"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s%s%s"</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> interval<span class="token punctuation">,</span> <span class="token string">"a2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// {a=a1^a2}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当正像上述提到那样，其类似于 <code>get()</code> 与 <code>put()</code> 结合体，因此若 Key 不存在或对应值为空时上述的 <code>(k, v)</code> 中的 <code>v</code> 同样是为空，若无处理将会抛出 <code>NPE</code> 异常。</p><p>同样有一个相对容易让人忽略的事项，当 <code>compute()</code> 计算返回 <code>null</code> 时，其并非存入一个 <code>(key, null)</code> 的节点，而是将对应 <code>key</code> 从集合中删除，在通过 <code>containsKey()</code> 判断时将返回 <code>false</code>。</p><p>即与 <code>JDK 8</code> 之后许多新引入的特性秉持着同一理念，尽量避免 <code>key</code> 或 <code>value</code> 为空，当通过 <code>get()</code> 方式获取结果为空时理应代表着 <code>key</code> 不存在避免二义性。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"a1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 空则删除元素</span>    map<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 返回 false</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-computeIfAbsent"><a href="#2-computeIfAbsent" class="headerlink" title="2. computeIfAbsent()"></a>2. computeIfAbsent()</h4><p>从名字即可看出，<code>computeIfAbsent()</code> 是 <code>compute()</code> 的特例，即当 <code>Key</code> 不存在时执行，若存在则不会触发。</p><p>与 <code>compute()</code> 不同的其触发时 <code>Key</code> 肯定是不存在的，因此第二个参数输入为 <code>Function</code>，即仅支持输入一个参数代表 <code>Key</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// a 不存在，写入</span>    map<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> k <span class="token operator">-</span><span class="token operator">></span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s^%s"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token string">"v1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// a 存在，不执行</span>    map<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> k <span class="token operator">-</span><span class="token operator">></span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s^%s"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token string">"v2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// {a=a^v1}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-computeIfPresent"><a href="#3-computeIfPresent" class="headerlink" title="3. computeIfPresent()"></a>3. computeIfPresent()</h4><p><code>computeIfPresent()</code> 同样为 <code>compute()</code> 的一种特例，作用则刚好与 <code>computeIfAbsent()</code> 相反，即只在 <code>Key</code> 存在的时候执行计算并覆盖原值，这里就不再展示示例介绍。</p><h4 id="4-merge"><a href="#4-merge" class="headerlink" title="4. merge()"></a>4. merge()</h4><p>故名思意 <code>merge()</code> 即用于合并，即合并对应 <code>Key</code> 的新旧值后放回容器，旧值不存在则用新值替换，返回 <code>null</code> 时同样删除该元素节点。</p><p>其与 <code>compute()</code> 既有相当又有不同，最直观的表现即方法入参，<code>merge()</code> 方法接收 <code>3</code> 个参数：<code>(k, v, (o,n))</code>，分别代表着 <code>Key</code>，新的 <code>Value</code> 以及新旧值函数参数。</p><p>例如下述示例即拼接对应 <code>key=a</code> 的元素节点：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"v1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"v2"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>o<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        String interval <span class="token operator">=</span> <span class="token string">"^"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s%s%s"</span><span class="token punctuation">,</span> o<span class="token punctuation">,</span> interval<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// {a=v1^v2}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到这你或许会有疑惑，<code>merge()</code> 与 <code>compute()</code> 有和区别？能用 <code>merge()</code> 实现的通过 <code>compute()</code> 同样能够实现。</p><p>事实也的确如此，可以将 <code>merge()</code> 理解为 <code>compute()</code> 的一种特例，<code>compute()</code> 表示针对任意类型计算操作，而 <code>merge()</code> 则更倾向于针对数据的合并操作，同样其自带了部分数据预处理。</p><p>观察 <code>HashMap</code> 的 <code>merge()</code> 方法实现可以看到，除在元素不存在即 <code>old = null</code> 时直接替换，在元素存在时但旧值为空时仍会执行替换，如此一来即为我们省去空判断处理。<br><img src="/album/loading.gif" data-original="/album/article/java/collect/merge.png"></p><p>通过下面这个示例，就可以直观的看出二者所带来的代码差异，显然合并计算相关操作 <code>merge()</code> 实现简洁性更高。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">>></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        v<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> v<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">>></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> v1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>List<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> v1<span class="token punctuation">,</span> <span class="token punctuation">(</span>o<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        o<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> o<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如果说什么是 &lt;code&gt;Java&lt;/code&gt; 集合中的性能天花板，那 &lt;code&gt;Map&lt;/code&gt; 肯定是当仁不让。如果又问什么每个 &lt;code&gt;Crud Boy&lt;/code&gt; 的终极噩梦，那空指针 &lt;code&gt;(NPE)&lt;/code&gt; 必然将榜上有名。&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="JAVA集合" scheme="https://great-jin.github.io/categories/JAVA%E9%9B%86%E5%90%88/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>数据集合分组巧排</title>
    <link href="https://great-jin.github.io/java/collection/map-sort/"/>
    <id>https://great-jin.github.io/java/collection/map-sort/</id>
    <published>2024-11-30T16:00:00.000Z</published>
    <updated>2025-05-11T12:39:12.912Z</updated>
    
    <content type="html"><![CDATA[<p>在编程开发中，<code>List</code> 与 <code>Map</code> 可谓是 <code>Java</code> 集合体系中的左膀右臂，高频的应用于工程中的各个角落，今天就让我们进一步探究其中的门道。</p><h4 id="1-循环优化"><a href="#1-循环优化" class="headerlink" title="1. 循环优化"></a>1. 循环优化</h4><p><code>List</code> 对数据集合提供了丰富的操作方式，而 <code>Map</code> 则对性能优化发挥了举足轻重的作用，最经典的案例即通过 <code>Map</code> 解构嵌套循环，实现数量级的时间复杂度缩减。</p><p>让我们通过示例进行演示，假设需要获取两个对象集合中同名的元素，最简单的方式就是分别遍历两个集合并进行元素匹配，如下述代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token function">getUserList1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     List<span class="token operator">&lt;</span>User<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token function">getUserList2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> commonList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>User i <span class="token operator">:</span> list1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>User j <span class="token operator">:</span> list2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 匹配同名元素</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> j<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                commonList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Common element: "</span> <span class="token operator">+</span> commonList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，在上述的实现方式中代码的时间复杂度为 <code>O(n^2)</code>，若此时 <code>list1</code> 与 <code>list2</code> 集合数量达到一定量级时，显然性能将不尽人意。</p><p>那么应该如何改进呢？方式其实很简单，通过 <code>Map</code> 的哈希机制便可将时间复杂度降至 <code>O(n)</code>，改造上述的示例得到下述结果：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token function">getUserList1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     List<span class="token operator">&lt;</span>User<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token function">getUserList2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构建 Map 集合</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> User<span class="token operator">></span> userMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>it <span class="token operator">-</span><span class="token operator">></span> userMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> it<span class="token punctuation">)</span><span class="token punctuation">)</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> commonList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>User user <span class="token operator">:</span> list2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String username <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>userMap<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 不存在跳过</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        commonList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Common Friends: "</span> <span class="token operator">+</span> commonFriends<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-集合排序"><a href="#2-集合排序" class="headerlink" title="2. 集合排序"></a>2. 集合排序</h4><p><code>Map</code> 除了上述提到循环优化功能外，其数据分组在日常开发中同样频繁涉及，在 <code>stream</code> 流处理中更使提供了 <code>groupingBy()</code> 简化这一过程。 </p><p>但我们都知道 <code>HashMap</code> 基于哈希与链表/红黑树实现，集合内元素并无先后次序，因此想对其排序则需要另辟蹊径。<code>LinkedHashMap</code> 结构则刚好满足了这一需求场景，其元素存储顺序按照存入的先后进行排序，虽性能无法取得 <code>HashMap</code> 同样的效果，但其仍拥有哈希的特性。</p><p>如此一来基本思路就确定了，只要遍历 <code>HashMap</code> 集合后按特定顺序存入 <code>LinkedHashMap</code>，即可获得一个有序的 <code>Map</code> 集合。</p><p>那就只剩下一个问题？如何确认元素优先级像标题所提到的实现巧排？</p><p>回到数据本身，通过分组后的数组通常 <code>key</code> 为某类唯一标识符，而每个标识符都有其所对应的类型，这个每个类型又都有各自的优先级。此优先级即用于确定 <code>Map</code> 中的每个元素的优先级。</p><p>这里想分享的一个技巧就是通过 <code>List</code> 定义类型集合，总所周知 <code>List</code> 为有序集合，那通过 <code>indexOf()</code> 获取每个元素的下标即可作为其优先级。因此，只需要对应的类型优先级集合以及唯一标识和类型的映射关系，即可实现 <code>Map</code> 集合的元素排序。</p><p>将上述提到的思路转化为代码，即可得到下述排序算法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 类型枚举</span><span class="token keyword">public</span> <span class="token keyword">enum</span> Type <span class="token punctuation">{</span>    A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> C<span class="token punctuation">,</span> MAX<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">groupSortData</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Type<span class="token operator">></span> priority<span class="token punctuation">,</span>                            List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList<span class="token punctuation">,</span>                           Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Type<span class="token operator">></span> typeMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 分组</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>User<span class="token operator">>></span> userMap <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 排序</span>    LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>User<span class="token operator">>></span> sortMap <span class="token operator">=</span> userMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 获取数据类型</span>                Type type1 <span class="token operator">=</span> typeMap<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>                Type type2 <span class="token operator">=</span> typeMap<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>e2<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 根据类型取优先级</span>                <span class="token keyword">int</span> index1 <span class="token operator">=</span> priority<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>type1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> index2 <span class="token operator">=</span> priority<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>type2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>index1<span class="token punctuation">,</span> index2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>                    Map<span class="token punctuation">.</span>Entry<span class="token operator">:</span><span class="token operator">:</span>getKey<span class="token punctuation">,</span>                    Map<span class="token punctuation">.</span>Entry<span class="token operator">:</span><span class="token operator">:</span>getValue<span class="token punctuation">,</span>                    <span class="token punctuation">(</span>r1<span class="token punctuation">,</span> r2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> r1<span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">// 使用 LinkedHashMap 有序集合</span>                    LinkedHashMap<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span>            <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 打印输出</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sortMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面通过示例验证一下这个思路是否可行，通过有序集合 <code>List</code> 定义优先级集合 <code>priority</code>，元素下标越小则优先级越高。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 优先级映射</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Type<span class="token operator">></span> typeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    typeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Alex"</span><span class="token punctuation">,</span> Type<span class="token punctuation">.</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span>    typeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Beth"</span><span class="token punctuation">,</span> Type<span class="token punctuation">.</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>    typeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> Type<span class="token punctuation">.</span>C<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义优先级</span>    List<span class="token operator">&lt;</span>Type<span class="token operator">></span> priority <span class="token operator">=</span> List<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>        Type<span class="token punctuation">.</span>C<span class="token punctuation">,</span> Type<span class="token punctuation">.</span>A<span class="token punctuation">,</span> Type<span class="token punctuation">.</span>B<span class="token punctuation">,</span> Type<span class="token punctuation">.</span>MAX    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造数据</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Alex"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Alex"</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Beth"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Beth"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 排序</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">groupSortData</span><span class="token punctuation">(</span>priority<span class="token punctuation">,</span> userList<span class="token punctuation">,</span> typeMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行上述示例，在控制台输出下述结果，可以看到结果正是按照所定义的 <code>C &gt; B &gt; A</code> 次序进行排序。</p><pre class="line-numbers language-txt"><code class="language-txt">{    Jack=[User{id=3}, User{id=33}],     Alex=[User{id=1}, User{id=11}],    Beth=[User{id=2}, User{id=22}]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在编程开发中，&lt;code&gt;List&lt;/code&gt; 与 &lt;code&gt;Map&lt;/code&gt; 可谓是 &lt;code&gt;Java&lt;/code&gt; 集合体系中的左膀右臂，高频的应用于工程中的各个角落，今天就让我们进一步探究其中的门道。&lt;/p&gt;
&lt;h4 id=&quot;1-循环优化&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="JAVA集合" scheme="https://great-jin.github.io/categories/JAVA%E9%9B%86%E5%90%88/"/>
    
    
    <category term="算法" scheme="https://great-jin.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 结构详解</title>
    <link href="https://great-jin.github.io/db/es/advance/"/>
    <id>https://great-jin.github.io/db/es/advance/</id>
    <published>2024-11-17T16:00:00.000Z</published>
    <updated>2025-05-11T12:39:12.814Z</updated>
    
    <content type="html"><![CDATA[<p>随着互联网的发展，各类数据库以及模型层出不穷，可谓让开发者眼花缭乱不知如何抉择。</p><p>对于传统的 <code>OLTP(Online Transaction Processing)</code> 关系型数据库例如 <code>MySQL</code>、<code>Oracle</code> 等凭借有效的事务性常作于项目基础数据库，而 Redis 此类数据库通过内存的高性能通常用于作为热点数据缓存节点。</p><p>那么问题来了？<code>Elasticsearch</code> 的优势是什么，又应该在何时引入项目又能解决什么难点？</p><h3 id="一、存储机制"><a href="#一、存储机制" class="headerlink" title="一、存储机制"></a>一、存储机制</h3><p>在 <code>Elasticsearch</code> 中，内存缓冲区和事务日志是确保数据可靠写入和实现“近实时”搜索的两个关键机制。</p><h4 id="1-内存缓冲区"><a href="#1-内存缓冲区" class="headerlink" title="1. 内存缓冲区"></a>1. 内存缓冲区</h4><p>在数据写入上通常可以分为两大类：有序和无序。</p><p>以 <code>Kafka</code> 的无序为例，数据直接添加至文件末端，数据间只存在先后关系而无其它关联。而常见的关系型数据库等存在索引需要将数据以一定规则进行存储，通常会采用缓存 + 异步写入的方式实现，例如 <code>MySQL</code> 中的 <code>Change Buffer</code>。</p><p>在 <code>Elasticsearch</code> 中同样也不例外，当执行数据新增时，会先将数据写入到内存缓冲区中，避免即刻的硬盘 <code>IO</code> 耗时操作，同时也能够提高数据吞吐量。</p><h4 id="2-事务日志"><a href="#2-事务日志" class="headerlink" title="2. 事务日志"></a>2. 事务日志</h4><p>事务日志是为了保证数据可靠性和持久性而存在的日志文件，每当数据写入内存缓冲区后，会根据特定间隔将数据刷入硬盘内。</p><p>在 <code>Elasticsearch</code> 中这个刷新的间隔通过 <code>refresh_interval</code> 参数进行管理，每个索引的刷新时间都是独立的，默认刷新时间为 <code>1s</code>。</p><p>即当用户执行新增时，数据会先行写入内存缓存区中，内存缓冲区中的数据在 <code>1s</code> 内刷新到一个新的 <code>段</code>，并写入磁盘，而这默认 <code>1s</code> 的差额也是 <code>Elasticsearch</code> 被称为近实时搜索引擎一大原因。</p><h3 id="二、应用场景"><a href="#二、应用场景" class="headerlink" title="二、应用场景"></a>二、应用场景</h3><h4 id="1-集成模式"><a href="#1-集成模式" class="headerlink" title="1. 集成模式"></a>1. 集成模式</h4><p>在实际的开发当中，与常见的 <code>MySQL</code> 的等即写即读不同，<code>Elasticsearch</code> 通常采用异步离线写入方式集成于项目。即利用 <code>MySQL</code> 的 <code>binlog</code> 等机制通过 <code>CDC</code> 的模式异步同步数据，而非采用实现的双写模式，从而进一步提高效率。</p><p>当然，对于实时性要求相对较高的场景，采用实时写入的方式也并无不妥。</p><h4 id="2-优势特点"><a href="#2-优势特点" class="headerlink" title="2. 优势特点"></a>2. 优势特点</h4><p>回归到正题，<code>Elasticsearch</code> 拥有哪些优势，以及应该何时选择 <code>Elasticsearch</code>?</p><p>对于 <code>MySQL</code> 相比大家都并不陌生，其最基础的索引即通过索引建从而搜索定位到相应的数据记录，例如主键索引，而此类索引方式又称之为正向索引，通过唯一查询记录。</p><p>而 <code>Elasticsearch</code> 的优势之外在于支持反向搜索，即通过记录关键字反向查询唯一标识。最为常见的例子即全文搜索，若需要在 <code>MySQL</code> 等常见数据库中实现最简单的方式即通过 <code>like %xxx%</code> 实现模糊搜索，但存在索引失效所带来的性能问题。</p><p><code>Elasticsearch</code> 的反向索引强大之处即可以通过分词器进行拆词为关键字，从而为关键字反向关联数据记录，从而实现快速的全文搜索能力。</p><h4 id="3-缺点不足"><a href="#3-缺点不足" class="headerlink" title="3. 缺点不足"></a>3. 缺点不足</h4><p><code>Elasticsearch</code> 虽又有不菲的性能，但也并无铁板一块仍存在自身的不足之处。</p><p>在搜索查询上 <code>Elasticsearch</code> 能够表现出让人眼前一亮的效果，但在面对频繁的删改时却稍逊一筹。同样在事务管理上，并不能像传统的关系型数据一样强大，且其采用最终一致性模型，对于要求高一致性的数据处理或许并非最佳选择。</p><p>因此，基于 <code>Elasticsearch</code> 高效搜索的特性。其通常应用于全文搜索、日志分析以及大数据集的聚合分析之中，其中较为常见的一大应用即 <code>ELK</code> 日志管理，能够实现日志搜索检索。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;随着互联网的发展，各类数据库以及模型层出不穷，可谓让开发者眼花缭乱不知如何抉择。&lt;/p&gt;
&lt;p&gt;对于传统的 &lt;code&gt;OLTP(Online Transaction Processing)&lt;/code&gt; 关系型数据库例如 &lt;code&gt;MySQL&lt;/code&gt;、&lt;code&gt;</summary>
      
    
    
    
    <category term="大数据" scheme="https://great-jin.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Elasticsearch" scheme="https://great-jin.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ消息队列入门</title>
    <link href="https://great-jin.github.io/db/mq/basic/"/>
    <id>https://great-jin.github.io/db/mq/basic/</id>
    <published>2024-10-13T16:00:00.000Z</published>
    <updated>2025-05-12T12:17:26.834Z</updated>
    
    <content type="html"><![CDATA[<p>一提到消息队列，想必你即便没真正上手实践过，也一定对其有所耳闻，在之前的博客中以 <code>Kafka</code> 为例深入解析了消息队列模型以及其所解决的一些痛点。</p><p>针对 <code>Kafka</code> 队列部分，感兴趣的小伙伴可以去考古，传送门放这了：</p><ul><li><a href="https://great-jin.github.io/db/kafka/basis/">Kafka消息队列详解</a></li><li><a href="https://great-jin.github.io/db/kafka/subscribe/">Kafka发布订阅实战</a></li></ul><p>将视线收回到现在，不论是 <code>Kafka</code> 又或是今天的主角 <code>RabbitMQ</code>，其核心都在消息队列上，基于二者的存储方式以及数据传输模型从而衍生出不同的特性以及适用场景。</p><p>以 <code>Kafka</code> 为例，其为队列数据提供了持久化功能，基于主题与消费组的形式拉取生产者所产生的数据，拥有极高的吞吐量广泛应用于大数据领域。而 <code>RabbitMQ</code> 的一大特点即将交换器与队列相结合，通过交换器可实现复杂的数据路由功能。</p><p>在数据传输中 <code>RabbitMQ</code> 虽然也提供了持久化，但默认还是以内存为主，当数据消费完成后即会被删除。同时与 <code>Kafka</code> 消费者主动拉取数据相比，<code>RabbitMQ</code> 则恰好相反由生产者主动推送数据，通过消息确认机制避免了数据丢失与重复消费。</p><blockquote><p>下面通过项目集成实战介绍 <code>RabbitMQ</code> 的集成应用</p></blockquote><h3 id="一、基础介绍"><a href="#一、基础介绍" class="headerlink" title="一、基础介绍"></a>一、基础介绍</h3><h4 id="1-服务部署"><a href="#1-服务部署" class="headerlink" title="1. 服务部署"></a>1. 服务部署</h4><p><code>RabbitMQ</code> 需要单独的应用服务部署，在开始前先以 <code>Docker</code> 方式快速部署测试服务。</p><p>创建对应的数据映射目录并拉取镜像，这里注意一点拉取的镜像带 <code>management</code> 表示其内置了后台管理页面。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建数据目录</span><span class="token function">mkdir</span> -p /home/dockerdata/rabbitmq<span class="token comment" spellcheck="true"># 拉取镜像</span>docker pull rabbitmq:management<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成镜像拉取之后就可以启动容器了，这里配置的默认账号为：<code>ibudai/123456</code>，可根据偏好自行调整。</p><p>完成部署后应用服务运行在 <code>5672</code> 端口，默认自带的后台管理在 <code>15672</code> 端口。</p><pre class="line-numbers language-bash"><code class="language-bash">docker run -id \-p 15672:15672 \-p 5672:5672 \--name<span class="token operator">=</span>rabbitmq \-v /home/dockerdata/rabbitmq:/var/lib/rabbitmq \-e RABBITMQ_DEFAULT_USER<span class="token operator">=</span>ibudai \-e RABBITMQ_DEFAULT_PASS<span class="token operator">=</span>123456 \rabbitmq:management<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-核心概念"><a href="#2-核心概念" class="headerlink" title="2. 核心概念"></a>2. 核心概念</h4><p>在 <code>RabbitMQ</code> 中包含了三个核心概念，下面分别进行讲解。</p><h5 id="1-交换机"><a href="#1-交换机" class="headerlink" title="(1) 交换机"></a>(1) 交换机</h5><p>顾名思义交互机 <code>(Exchange)</code> 即消息的中转站，当生产者发送数据后，消息将先发送至交换机，再进行转发的对应的队列。</p><h5 id="2-路由KEY"><a href="#2-路由KEY" class="headerlink" title="(2) 路由KEY"></a>(2) 路由KEY</h5><p>路由键 <code>(Router Key)</code> 则是交换机与消息队列的缓冲层，通过路由键决定一个消息应该发送至哪个队列。</p><p>通过路由键的存在实现交换机与队列之间的解耦，并且能够实现更复杂的消息转发机制。</p><h5 id="3-消息队列"><a href="#3-消息队列" class="headerlink" title="(3) 消息队列"></a>(3) 消息队列</h5><p>消息队列即最终消息的临时存储媒介，经过路由转发的消息将暂存于队列中，等待被消费者所消费。</p><h3 id="二、项目集成"><a href="#二、项目集成" class="headerlink" title="二、项目集成"></a>二、项目集成</h3><p>接下来就让我们开始正式介绍如何在 <code>Spring</code> 工程中集成使用。</p><h4 id="1-依赖导入"><a href="#1-依赖导入" class="headerlink" title="1. 依赖导入"></a>1. 依赖导入</h4><p>在 <code>Spring</code> 中提供了开箱即用的 <code>rabbitmq</code> 依赖，在工程 <code>pom</code> 中引入相应的 <code>starter</code> 依赖。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-服务配置"><a href="#2-服务配置" class="headerlink" title="2. 服务配置"></a>2. 服务配置</h4><p>当然必不可少的需要在工程的 <code>yaml</code> 配置中添加 <code>RabbitMQ</code> 对应的服务连接信息。</p><p>以刚才部署的测试服务为例，对应的配置内容如下：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>        <span class="token key atrule">host</span><span class="token punctuation">:</span> 127.0.0.1        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>        <span class="token key atrule">username</span><span class="token punctuation">:</span> ibudai        <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、交换模型"><a href="#三、交换模型" class="headerlink" title="三、交换模型"></a>三、交换模型</h3><p>在 <code>RabbitMQ</code> 的交换机中存在多种模型，不同模型有着自己的传输特点，下面分别进行介绍。</p><h4 id="1-精准匹配"><a href="#1-精准匹配" class="headerlink" title="1. 精准匹配"></a>1. 精准匹配</h4><p><code>DirectExchange</code> 顾名思义即直接交换，路由键与消息队列之间一一对应。</p><p>下述示例中创建了 <code>topic_logs</code> 交换机并绑定了两个消息队列，代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 定义 Direct Exchange     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> TopicExchange <span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">"topic_logs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">infoQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"queue.info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">errorQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"queue.error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">bindingInfoQueue</span><span class="token punctuation">(</span>Queue infoQueue<span class="token punctuation">,</span> TopicExchange topicExchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>infoQueue<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 绑定交换机</span>                <span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>topicExchange<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 绑定路由 Key</span>                <span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">"log.info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">bindingErrorQueue</span><span class="token punctuation">(</span>Queue errorQueue<span class="token punctuation">,</span> TopicExchange topicExchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>errorQueue                <span class="token comment" spellcheck="true">// 绑定交换机</span>                <span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>topicExchange<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 绑定路由 Key</span>                <span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">"log.error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-模糊匹配"><a href="#2-模糊匹配" class="headerlink" title="2. 模糊匹配"></a>2. 模糊匹配</h4><p>在 <code>TopicExchange</code> 传输模式中，除了与 <code>DirectExchange</code> 的精准匹配外，支持根据路由键模糊匹配。</p><p>如定义了路由键: <code>test.m1.1</code>、<code>test.m1.2</code> 与 <code>test.m2.1</code>，在发送消息时将路由键配置为 <code>test.m1.*</code> 则可以同时发送消息至 <code>test.m1.1</code> 与 <code>test.m1.2</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 定义 Topic Exchange     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> TopicExchange <span class="token function">topicExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TopicExchange</span><span class="token punctuation">(</span><span class="token string">"topic_logs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 略去其它，同 DirectExchange</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-消息广播"><a href="#3-消息广播" class="headerlink" title="3. 消息广播"></a>3. 消息广播</h4><p>广播队列 <code>(FanoutExchange)</code> 即发送消息时交换机绑定的所有队列都能收到消息。<br><img src="/album/loading.gif" data-original="/album/article/db/mq/2.png"></p><p>通过 <code>FanoutExchange</code> 创建交换机实例，因为是全局广播不存在路由键因此无需通过 <code>with()</code> 绑定。</p><p>相应的代码示例如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 定义 Fanout Exchange     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> FanoutExchange <span class="token function">fanoutExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FanoutExchange</span><span class="token punctuation">(</span><span class="token string">"fanout_logs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">queue1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"queue.fan1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">queue2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"queue.fan2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">bindingQueue1</span><span class="token punctuation">(</span>Queue queue1<span class="token punctuation">,</span> FanoutExchange fanoutExchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>fanoutExchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>       <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">bindingQueue2</span><span class="token punctuation">(</span>Queue queue2<span class="token punctuation">,</span> FanoutExchange fanoutExchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>fanoutExchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、服务收发"><a href="#四、服务收发" class="headerlink" title="四、服务收发"></a>四、服务收发</h3><h4 id="1-消息发送"><a href="#1-消息发送" class="headerlink" title="1. 消息发送"></a>1. 消息发送</h4><p>在发送消息时，通过 <code>RabbitTemplate</code> 实例的 <code>convertAndSend(exchange, routingKey, message) </code> 方法，入参分别代表：交换机、路由 <code>KEY</code> 与需发送的消息。</p><p>传输的消息数据对象默认为字符串，对于复杂对象通常使用 <code>Jackson</code> 或 <code>Gson</code> 等类库序列化后传输。</p><p>在 <code>FanoutExchange</code> 传输模式下则不指定 <code>routingKey</code>，表示发送消息至所有绑定的消息队列。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopicProducer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String message <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 精准匹配</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"topic_logs"</span><span class="token punctuation">,</span> <span class="token string">"log.info"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String message <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 模糊匹配</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"topic_logs"</span><span class="token punctuation">,</span> <span class="token string">"log.*"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String message <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 全局广播</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"fanout_logs"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-消息消费"><a href="#2-消息消费" class="headerlink" title="2. 消息消费"></a>2. 消息消费</h4><p>对于数据的消费同样十分简单，通过 <code>@RabbitListener</code> 注解即可，其中 <code>queues</code> 参数即对应的消息队列名称。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopicConsumer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"infoQueue"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveInfo</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Received INFO message: "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"errorQueue"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveError</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Received ERROR message: "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、多服务配置"><a href="#五、多服务配置" class="headerlink" title="五、多服务配置"></a>五、多服务配置</h3><h4 id="1-连接配置"><a href="#1-连接配置" class="headerlink" title="1. 连接配置"></a>1. 连接配置</h4><p>在之前的示例中，我们是通过默认的配置连接服务收发消息，但在某些场景下系统可能会对接多个消息队列。</p><p>因此，在 <code>Spring</code> 中提供了自定义 <code>RabbitTemplate</code> 服务连接实例的能力。</p><p>如系统中存在两个 <code>Rabbit</code> 服务实例，连接配置如下：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">rabbit</span><span class="token punctuation">:</span>  <span class="token key atrule">primary</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> host1    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> user1    <span class="token key atrule">password</span><span class="token punctuation">:</span> pwd1    <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> /  <span class="token key atrule">secondary</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> host2    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> user2    <span class="token key atrule">password</span><span class="token punctuation">:</span> pwd2    <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> /<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成后通过 <code>ConnectionFactory</code> 创建连接工厂实例，其中虚拟主机 <code>(VirtualHost)</code> 是 <code>RabbitMQ</code> 提供的一种逻辑隔离机制，相当于一个命名空间，用来隔离不同的连接、交换机、队列、用户权限等。</p><p>定义 <code>ConnectionFactory</code> 后便可注入到 <code>RabbitTemplate</code> 实例之中。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"primaryConnectionFactory"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ConnectionFactory <span class="token function">primaryConnectionFactory</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rabbit.primary.host}"</span><span class="token punctuation">)</span> String host<span class="token punctuation">,</span>                                                      <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rabbit.primary.port}"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span>                                                      <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rabbit.primary.username}"</span><span class="token punctuation">)</span> String username<span class="token punctuation">,</span>                                                      <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rabbit.primary.password}"</span><span class="token punctuation">)</span> String password<span class="token punctuation">,</span>                                                      <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rabbit.primary.virtual-host}"</span><span class="token punctuation">)</span> String virtualHost<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CachingConnectionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CachingConnectionFactory</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span>virtualHost<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"secondaryConnectionFactory"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ConnectionFactory <span class="token function">secondaryConnectionFactory</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rabbit.secondary.host}"</span><span class="token punctuation">)</span> String host<span class="token punctuation">,</span>                                                        <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rabbit.secondary.port}"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span>                                                        <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rabbit.secondary.username}"</span><span class="token punctuation">)</span> String username<span class="token punctuation">,</span>                                                        <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rabbit.secondary.password}"</span><span class="token punctuation">)</span> String password<span class="token punctuation">,</span>                                                        <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rabbit.secondary.virtual-host}"</span><span class="token punctuation">)</span> String virtualHost<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CachingConnectionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CachingConnectionFactory</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span>virtualHost<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"primaryRabbitTemplate"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> RabbitTemplate <span class="token function">primaryRabbitTemplate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"primaryConnectionFactory"</span><span class="token punctuation">)</span> ConnectionFactory connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RabbitTemplate</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"secondaryRabbitTemplate"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> RabbitTemplate <span class="token function">secondaryRabbitTemplate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"secondaryConnectionFactory"</span><span class="token punctuation">)</span> ConnectionFactory connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RabbitTemplate</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么现在即可通过对应的 <code>RabbitTemplate</code> 实例发送消息至指定服务节点。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopicProducer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RabbitTemplate primaryRabbitTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RabbitTemplate secondaryRabbitTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        primaryRabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"topic_logs"</span><span class="token punctuation">,</span> <span class="token string">"log.info"</span><span class="token punctuation">,</span> <span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        secondaryRabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"topic_logs"</span><span class="token punctuation">,</span> <span class="token string">"log.info"</span><span class="token punctuation">,</span> <span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-消费实例"><a href="#2-消费实例" class="headerlink" title="2. 消费实例"></a>2. 消费实例</h4><p>同样的，在创建了多个连接实例后相应的也需要创建对应的消息接收工厂。</p><p>在之前 <code>@RabbitListener</code> 注解接收消息示例中，通过 <code>queues</code> 指定消息队列。而在多连接实例下，则可通过 <code>containerFactory</code> 配置对应的服务实例。</p><p>完成的配置示例如下，其中 <code>ConnectionFactory</code> 即上述的连接服务实例。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> SimpleRabbitListenerContainerFactory <span class="token function">primaryContainerFactory</span><span class="token punctuation">(</span>ConnectionFactory primaryConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SimpleRabbitListenerContainerFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleRabbitListenerContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>primaryConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 手动 ack</span>        factory<span class="token punctuation">.</span><span class="token function">setAcknowledgeMode</span><span class="token punctuation">(</span>AcknowledgeMode<span class="token punctuation">.</span>MANUAL<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 <code>AcknowledgeMode</code> 为接收消息之后的确认机制，可选项参考下表：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">AcknowledgeMode.AUTO</td>        <td style="text-align: center;">消息自动确认。</td>    </tr>    <tr>        <td style="text-align: center;">AcknowledgeMode.MANUAL</td>        <td style="text-align: center;">消息手动 ACK 确认。</td>    </tr>    <tr>        <td style="text-align: center;">AcknowledgeMode.NONE</td>        <td style="text-align: center;">消息不确认，可重复消费。</td>    </tr></table></br><p>在定义实例之后，即可通过 <code>containerFactory</code> 属性进行指定，完整代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"infoQueue"</span><span class="token punctuation">,</span> containerFactory <span class="token operator">=</span> <span class="token string">"primaryContainerFactory"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveMessage</span><span class="token punctuation">(</span>String msg<span class="token punctuation">,</span> Channel channel<span class="token punctuation">,</span> Message message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 手动 ack</span>    channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一提到消息队列，想必你即便没真正上手实践过，也一定对其有所耳闻，在之前的博客中以 &lt;code&gt;Kafka&lt;/code&gt; 为例深入解析了消息队列模型以及其所解决的一些痛点。&lt;/p&gt;
&lt;p&gt;针对 &lt;code&gt;Kafka&lt;/code&gt; 队列部分，感兴趣的小伙伴可以去考古，传送门放</summary>
      
    
    
    
    <category term="中间件" scheme="https://great-jin.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="RabbitMQ" scheme="https://great-jin.github.io/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>小小注解验证轻松拿捏</title>
    <link href="https://great-jin.github.io/java/tool/validation/"/>
    <id>https://great-jin.github.io/java/tool/validation/</id>
    <published>2024-09-05T16:00:00.000Z</published>
    <updated>2025-05-11T12:39:13.004Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、需求分析"><a href="#一、需求分析" class="headerlink" title="一、需求分析"></a>一、需求分析</h3><h4 id="1-场景需求"><a href="#1-场景需求" class="headerlink" title="1. 场景需求"></a>1. 场景需求</h4><p>所谓注解验证即将通过注解的方法实现对象属性的合法性校验，从而让代码专注于业务功能实现，使得代码更为简洁可读性更高。</p><p>试想这么一个场景，你需要在当前系统开发一个对外接口，而对于接口入口数据需要根据一定规则进行校验，对于非法数据的需要对应进行的拦截。</p><p>针对这类场景，最简单的方式即对于接口入参数据通过 <code>if</code> 逐个判断是否合法，但当参数属性过多时，整个代码结构将会便会十分繁杂。相对于此类处理方法，如果能通过注解的方法直接定义相应的规则显然代码则更为简洁。</p><h4 id="2-实现思路"><a href="#2-实现思路" class="headerlink" title="2. 实现思路"></a>2. 实现思路</h4><p>注解验证的实现思路也十分简单，通过定义不同的注解对应不同的验证规则，在使用时将其作用于对应的属性之上，在运行时通过反射的方式获取属性的值并根据对应的注解规则执行校验。</p><h4 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h4><p>下面通过最基本属性非空校验为例，首先让定义注解 <code>@NotBlank</code>，声明其作用域为 <code>FIELD</code> 即类属性。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">NotBlank</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * message 定义抛出的异常信息     */</span>    String <span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成注解定义后实现对应的规则验证类，分为两个步骤：</p><blockquote><ul><li>判断属性是否标识了对应注解;</li><li>如果不存在则返回，存在则按照对应的规则执行处理;</li></ul></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotBlankChecker</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Field field<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 若不存在注解则返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>NotBlank<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 反射获取对象属性值</span>        Object o <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">||</span> StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 为空根据 message 抛出异常</span>            String msg <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                msg <span class="token operator">=</span> <span class="token string">"The field of {"</span> <span class="token operator">+</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"} can't be blank"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义了对应的规则校验器之后就可以创建统一的验证入口，新建 <code>FieldValidate</code> 类，其实现内容如下：</p><blockquote><ul><li>通过反射获取对应类中定义的所有字段；</li><li>遍历字段集合执行上述定义的校验规则器；</li></ul></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FieldValidate</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> NotBlankChecker checker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NotBlankChecker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">validate</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cls <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取对象的所有字段</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 设置反射访问权限</span>            field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">// 执行对应的验证规则</span>            checker<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> field<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-示例演示"><a href="#4-示例演示" class="headerlink" title="4. 示例演示"></a>4. 示例演示</h4><p>至此所有的准备工作都已经完成，下面通过示例演示效果。</p><p>首先定义一个参数实体类 <code>User</code>，并在字段添加上 <code>@NotBlank</code> 注解。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@NotBlank</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其对应的使用方式如下，在业务代码中即可避免编写重复的 <code>if</code> 判断逻辑。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 执行规则校验</span>    FieldValidate<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、分组关联"><a href="#二、分组关联" class="headerlink" title="二、分组关联"></a>二、分组关联</h3><h4 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h4><p>上述的示例已经实现我们最开始的功能，但还存在一类场景没有覆盖到。</p><p>即定义参数实体可能用于多个接口，而上述的定义方式针对此类场景则无法根据不同接口进行区分，因此需要添加分组功能以达到该目的。</p><h4 id="2-功能实现"><a href="#2-功能实现" class="headerlink" title="2. 功能实现"></a>2. 功能实现</h4><p>分组实现思路也并不难，需要定义注解为可重复声明，之前介绍注解的文章中已经详细展开介绍了，这里实现机制就不再具体展开了，可参考之前的文章: <a href="https://great-jin.github.io/java/advance/annotation/">Java注解基础介绍</a>。</p><p>除了改造为可重复之外，还需要在注解中添加参数 <code>group</code> 进行分组。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">NotBlankGroup</span> <span class="token punctuation">{</span>    NotBlank<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span>NotBlankGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">NotBlank</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 分组     */</span>    Integer <span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>    String <span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样修改之前的 <code>NotBlankChecker</code> 规则验证器，在 <code>filter</code> 方法中过滤了指定 <code>group</code> 的分组注解。</p><p>除此之外实现上并无区别，完整代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotBlankChecker</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Field field<span class="token punctuation">,</span> Integer group<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 若不存在注解则返回</span>        NotBlank annotation <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> group<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>annotation<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 反射获取对象属性值</span>        Object o <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">||</span> StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 为空根据 message 抛出异常</span>            String msg <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                msg <span class="token operator">=</span> <span class="token string">"The field of {"</span> <span class="token operator">+</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"} can't be blank"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据分组过滤     */</span>    <span class="token keyword">private</span> NotBlank <span class="token function">filter</span><span class="token punctuation">(</span>Field field<span class="token punctuation">,</span> <span class="token keyword">int</span> group<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>field<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>NotBlank<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>field<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>NotBlankGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        NotBlank<span class="token punctuation">[</span><span class="token punctuation">]</span> annotations <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotationsByType</span><span class="token punctuation">(</span>NotBlank<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        annotations <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>annotations<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>it <span class="token operator">-</span><span class="token operator">></span> it<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> group<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>NotBlank<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>annotations<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>annotations<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ValidateException</span><span class="token punctuation">(</span><span class="token string">"Field group is duplicate!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> annotations<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-示例演示"><a href="#3-示例演示" class="headerlink" title="3. 示例演示"></a>3. 示例演示</h4><p>修改之前定义的参数实体类，添加上对应的分组 <code>group</code> 参数。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>group <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应测试示例如下，可以看到上述定义的分组为 <code>1</code>，因此在执行 <code>validate(user, 0)</code> 则不会触发空校验。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FieldValidate<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FieldValidate<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、字段联动"><a href="#三、字段联动" class="headerlink" title="三、字段联动"></a>三、字段联动</h3><h4 id="1-基本介绍-1"><a href="#1-基本介绍-1" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h4><p>除了上述提到的这些功能，<code>Spring</code> 中提供了 <code>EL</code> 表达式可以动态执行校验，因此我们即可利用该特性实现字段属性间的联动效果。</p><h4 id="2-EL表达式"><a href="#2-EL表达式" class="headerlink" title="2. EL表达式"></a>2. EL表达式</h4><p>在项目工程中添加 <code>spring-context</code> 依赖，配置如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引入依赖后我们编写一个验证工具类校验 <code>EL</code> 表达式结果是否为 <code>True</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExpressionUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ExpressionParser parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @param t  对象     * @param el EL表达式     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">boolean</span> <span class="token function">evaluateBoolean</span><span class="token punctuation">(</span>T t<span class="token punctuation">,</span> String el<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Expression expression <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>        StandardEvaluationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardEvaluationContext</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        Boolean result <span class="token operator">=</span> expression<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面主要介绍一下 <code>EL</code> 表达式的编写方式，表达式编写并不复杂下面直接通过示例演示。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExpressionTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        User alex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Alex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User beth <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Beth"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String expression <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ExpressionUtils<span class="token punctuation">.</span><span class="token function">evaluateBoolean</span><span class="token punctuation">(</span>alex<span class="token punctuation">,</span> expression<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ExpressionUtils<span class="token punctuation">.</span><span class="token function">evaluateBoolean</span><span class="token punctuation">(</span>beth<span class="token punctuation">,</span> expression<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * $: 用于属性占位符解析。     * #: 用于引用上下文中的变量和方法。     * {}: 与 $ 一起使用，用于明确标识属性占位符的边界，特别是在复杂字符串中。     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        User alex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Alex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User beth <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Beth"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// "#root" 表示当前对象引用</span>        String expression1 <span class="token operator">=</span> <span class="token string">"#root.name =='Alex'"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ExpressionUtils<span class="token punctuation">.</span><span class="token function">evaluateBoolean</span><span class="token punctuation">(</span>alex<span class="token punctuation">,</span> expression1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ExpressionUtils<span class="token punctuation">.</span><span class="token function">evaluateBoolean</span><span class="token punctuation">(</span>beth<span class="token punctuation">,</span> expression1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 可省略直接通过字段属性名进行引用</span>        String expression2 <span class="token operator">=</span> <span class="token string">"name =='Alex'"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ExpressionUtils<span class="token punctuation">.</span><span class="token function">evaluateBoolean</span><span class="token punctuation">(</span>alex<span class="token punctuation">,</span> expression2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ExpressionUtils<span class="token punctuation">.</span><span class="token function">evaluateBoolean</span><span class="token punctuation">(</span>beth<span class="token punctuation">,</span> expression2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过 "T()" 调用类     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        User alex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String expression <span class="token operator">=</span> <span class="token string">"T(xyz.ibudai.validate.core.util.StringUtils).isNotBlank(name)"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ExpressionUtils<span class="token punctuation">.</span><span class="token function">evaluateBoolean</span><span class="token punctuation">(</span>alex<span class="token punctuation">,</span> expression<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-功能实现"><a href="#3-功能实现" class="headerlink" title="3. 功能实现"></a>3. 功能实现</h4><p>因此，我们即可利用该特性在注解中添加参数 <code>triggered</code> 用于声明 <code>EL</code> 表达式，修改代码为如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span>NotBlankGroup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">NotBlank</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>    String <span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    String <span class="token function">triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"true"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样在规则校验器添加 EL 表达式解析模块，解析结果若为否则退出。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotBlankChecker</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Field field<span class="token punctuation">,</span> Integer group<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 若不存在注解则返回</span>        NotBlank annotation <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> group<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>annotation<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 过滤是否触发校验规则</span>        String triggered <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>triggered<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>ExpressionUtils<span class="token punctuation">.</span><span class="token function">evaluateBoolean</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> triggered<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 反射获取对象属性值</span>        Object o <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">||</span> StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 为空根据 message 抛出异常</span>            String msg <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                msg <span class="token operator">=</span> <span class="token string">"The field of {"</span> <span class="token operator">+</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"} can't be blank"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> NotBlank <span class="token function">filter</span><span class="token punctuation">(</span>Field field<span class="token punctuation">,</span> <span class="token keyword">int</span> group<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 省略，代码同上</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-示例演示-1"><a href="#4-示例演示-1" class="headerlink" title="4. 示例演示"></a>4. 示例演示</h4><p>创建参数实体类并通过 <code>triggered</code> 编写表达式，如下述则标识只有当 <code>id</code> 值为 <code>2</code> 时才触发校验。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>triggered <span class="token operator">=</span> <span class="token string">"id =='123'"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写对应的测试用例，执行后可以发现 <code>validate(user1)</code> 并不会触发空校验。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    User user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Alex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Beth"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FieldValidate<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>    FieldValidate<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、拦截切面"><a href="#四、拦截切面" class="headerlink" title="四、拦截切面"></a>四、拦截切面</h3><h4 id="1-基本介绍-2"><a href="#1-基本介绍-2" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h4><p>在上面的上面的示例中在执行规则验证时通过 <code>FieldValidate</code> 手动执行，如若在 <code>Spring</code> 项目中则可通过切面方式从而更便捷的实现。</p><p>在项目工程中引入 <code>Spring AOP</code> 依赖，配置如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义注解 <code>@Validate</code>，注意其作用对象为 <code>PARAMETER</code> 即方法参数。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>PARAMETER<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Validate</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-切面实现"><a href="#2-切面实现" class="headerlink" title="2. 切面实现"></a>2. 切面实现</h4><p>新建切面类 <code>ValidateAspect</code>，实现并不复杂这里就不展开介绍。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidateAspect</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 定义切点拦截 Validate 注解     */</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(validate) &amp;&amp; @annotation(xyz.ibudai.validate.core.annotation.Validate) "</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointcut</span><span class="token punctuation">(</span>Validate validate<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 定义切面处理逻辑     */</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"pointcut(validate)"</span><span class="token punctuation">,</span> argNames <span class="token operator">=</span> <span class="token string">"joinPoint, validate"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">around</span><span class="token punctuation">(</span>ProceedingJoinPoint joinPoint<span class="token punctuation">,</span> Validate validate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            MethodSignature signature <span class="token operator">=</span> <span class="token punctuation">(</span>MethodSignature<span class="token punctuation">)</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Get target method</span>            Method method <span class="token operator">=</span> signature<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Parameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parameters <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> parameters<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Parameter param <span class="token operator">=</span> parameters<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 方法参数若未标识注解则跳过</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>param<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>Validate<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 执行校验</span>                Validate annotation <span class="token operator">=</span> param<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Validate<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                FieldValidate<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> annotation<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-示例演示-1"><a href="#3-示例演示-1" class="headerlink" title="3. 示例演示"></a>3. 示例演示</h4><p>通过上述定义注解以及切面，在 <code>Spring</code> 工程中即可在方法中通过 <code>@Validate</code> 注解标识即可，无需手动调用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validate</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// do something</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>文中涉及完整工程已上传 <code>GitHub</code>，<a href="https://github.com/great-jin/Property-Validation">仓库直达</a>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、需求分析&quot;&gt;&lt;a href=&quot;#一、需求分析&quot; class=&quot;headerlink&quot; title=&quot;一、需求分析&quot;&gt;&lt;/a&gt;一、需求分析&lt;/h3&gt;&lt;h4 id=&quot;1-场景需求&quot;&gt;&lt;a href=&quot;#1-场景需求&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="JAVA进阶" scheme="https://great-jin.github.io/categories/JAVA%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>遭了，屎山竟是我自己</title>
    <link href="https://great-jin.github.io/java/jvm/memory/"/>
    <id>https://great-jin.github.io/java/jvm/memory/</id>
    <published>2024-08-08T16:00:00.000Z</published>
    <updated>2025-05-11T12:39:12.943Z</updated>
    
    <content type="html"><![CDATA[<p>事情是这样的，在不久之前我不是分享了一篇文章说我写了端口检测关闭的 <code>GUI</code> 工具，如果你还没看过可以去瞧一眼：<a href="https://great-jin.github.io/windows/software/process/">我写了一个程序，让端口占用无路可逃</a>。</p><p>一切本都平平无奇，直到今天在使用时在任务管理器瞄了一眼，好家伙内存占用怎么有百来兆。<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/1.png"></p><p>不知道你第一眼看到这个内存是作何反应，反正我是挺惊讶的，按我理解 <code>10MB</code> 就已经不得了了，这直接王炸翻了个量级。</p><p>作为一个遥遥领先的 <code>Javer</code>，对于内存爆炸早已见怪不怪，没有什么是加条内存不能解决的，如果不能那就再加一条。但这时候没有甲方，机子的一分一毛全靠自己，况且这稀碎的内存表现怎么让我好意思分享。</p><blockquote><p>今天，我还就一定要把它底裤都都扒光。</p></blockquote><p>首先，当然还是需要确定这么大的内存到底耗费在了哪个地方？一开始，由于程序是通过 <code>exe4j</code> 工具将 <code>Jar</code> 打包为 <code>exe</code> 执行程序，我最先怀疑的就是是不是哪里配置我缺失了导致内存狂飙。</p><p>验证方式也相当简单，分别通过 <code>Jar</code> 以及 <code>Exe</code> 两种方式分别运行，但最后发现的两种方式的内存占用都在 <code>100MB</code> 上下波动，那说明问题的根源还是在程序本身。</p><p>这就让人蛋疼了，程序中并没有涉及到复杂的对象操作，主线流程可谓简洁明了：启动 <code>Swing</code> 窗口后填充表格数据，若硬要扯那就只有表格的数据对象。</p><h4 id="1-工具排查"><a href="#1-工具排查" class="headerlink" title="1. 工具排查"></a>1. 工具排查</h4><p>没办法，只能祭出 <code>JDK</code> 自带神器 <code>VisualVM</code> 了，其提供了针对 <code>Java</code> 运行程序的可视化 <code>JVM</code> 监控能力，可谓是让人每用一次都能大喊一声卧槽的存在。</p><p>在 <code>Windows</code> 中完成 <code>JDK 8</code> 安装后其程序默认路径为 <code>C:\Program Files\Java\jdk1.8.0_202\bin</code> 下的 <code>jvisualvm.exe</code>，双击即可运行。而在 <code>JDK 11</code> 后续版本中其已经剥离出来了，需要自行安装，别担心，下载链接已经给你准备好了：<a href="https://visualvm.github.io/download.html">官网直达</a>。</p><p>打开后在左侧树选中运行的 <code>Java</code> 应用并选中监视，即可看到下图所示内容：<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/2.png"></p><p>仔细看第二个图，可以看到项目一运行默认的内存初始大小为 <code>500MB</code>，已使用的为 <code>50MB</code> 左右。<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/3.png"></p><p>那这个 <code>500MB</code> 又是根据依据来的？我们都知道可以通过 <code>-Xms</code> 和 <code>-Xmx</code> 限制堆的大小，但在未手动指定的前提下，<code>JVM</code> 同样会为其设置一个默认值，这个默认值取值如下：</p><ul><li><strong>最小值</strong>：通常是物理内存大小的 <code>1/64</code>，但不超过 <code>1GB</code>，可通过 <code>-Xms</code> 参数修改。</li><li><strong>最大值</strong>：通常是物理内存大小的 <code>1/4</code>，但不超过 <code>32GB</code>，可通过 <code>-Xmx</code> 参数修改。</li></ul><p>我的电脑内存是 <code>32G</code>，那 <code>1/64</code> 和 <code>1/4</code> 就刚好是 <code>500MB</code> 和 <code>8G</code>，也就跟上图的中的数据对上了。</p><p>但问题又来了，<code>JVM</code> 只是为程序设定的初始的内存为 <code>500MB</code>，并不代表程序一开始就会全部用到，图中的信息显示内存占用了 <code>50MB</code>，但这个数据显然也并不合理。</p><h4 id="2-对象大小"><a href="#2-对象大小" class="headerlink" title="2. 对象大小"></a>2. 对象大小</h4><p>那是由于程序中存在大对象导致的吗？直觉告诉我也不太可能，但还是通过证据说话。</p><p>程序中涉及到数据对象的主要在于存储执行端口进程查询后返回的集合对象，那就先测一下这个对象到底能有多大？</p><p>这里同样推荐一个工具库 <code>JOL</code>，同样是有 <code>JDK</code> 原班人马开发，可以便捷的查看一个对象的内存占用。</p><p>使用方式也十分简单，在 <code>Maven</code> 的 <code>pom.xml</code> 文件中引入插入依赖：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.openjdk.jol<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jol-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引入依赖后即可直接调用 GraphLayout 类打印对象的占用信息，如下述定义了一个 1024 的字节数组并打印其占用信息：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        String usage <span class="token operator">=</span> GraphLayout<span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFootprint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>usage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序后可以看到下图内容，其中 <code>1040</code> 即 <code>data</code> 对象的内存占用大小，单位为字节。你可能会疑惑为什么不是 <code>1024</code> 而是 <code>1040</code>，那是因为 <code>1024</code> 是真正的数据内容大小，但 <code>data</code> 还包含一些基础的对象属性等信息。<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/4.png"></p><p>在程序里所涉及的两个数据对象分别为如下，同样通过 <code>JOL</code> 打印输出内存占用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProcessTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// [进程名与内存占用]</span>        List<span class="token operator">&lt;</span>ServiceDetail<span class="token operator">></span> serviceDetail <span class="token operator">=</span> ProcessUtils<span class="token punctuation">.</span><span class="token function">getServiceDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object count1 <span class="token operator">=</span> GraphLayout<span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>serviceDetail<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFootprint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Count-1: "</span> <span class="token operator">+</span> count1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// [进程端口等信息]</span>        List<span class="token operator">&lt;</span>ProcessDetail<span class="token operator">></span> taskDetail <span class="token operator">=</span> ProcessUtils<span class="token punctuation">.</span><span class="token function">getTaskDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object count2 <span class="token operator">=</span> GraphLayout<span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>taskDetail<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFootprint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Count-2: "</span> <span class="token operator">+</span> count2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序可以看到打印的结果分别为 <code>59760</code> 与 <code>131280</code> 字节，也就是 <code>0.05MB</code> 与 <code>0.12MB</code> 左右，加起来甚至不到 <code>1MB</code>，也跟我之前的直觉相符，内存占用显然也不是在这。<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/5.png"></p><h4 id="3-内存分析"><a href="#3-内存分析" class="headerlink" title="3. 内存分析"></a>3. 内存分析</h4><p>既然看不出个所以然来，那就直接看下程序的内存堆信息这个百来兆到底存了个啥玩意。</p><p>在之前博客中已经分享过通过 <code>jmap</code> 可以查看程序的内存快照信息，可以快速回顾下：<a href="https://great-jin.github.io/java/jvm/optimize/">JVM参数调优记录</a>。在命令行执行 <code>jmap -heap &lt;pid&gt;</code> 可以得到下图结果：<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/6.png"></p><p>让我们拆开进行分析，在第一块信息中展示了程序的内存堆基本信息，其中包含以往介绍过的最大内存 <code>(MaxHeapSize)</code>、元空间 <code>(MetaspaceSize)</code> 以及指针压缩空间 <code>(CompressedClassSpaceSize)</code> 等等。</p><p>你可能会疑惑 <code>NewSize</code> 与 <code>OldSize</code> 这两又是啥东西？在之前介绍 <code>JVM</code> 的文章中有提到过，<code>Java 8</code> 默认使用 <code>Parallel</code> 垃圾收集器，而其又是基于标记复制模式，更具体的即其是使用 <code>Appeal</code> 模式执行内存回收。简单的讲就是将堆内存拆分为了两个部分，青年代及老年代，二者的比例为 <code>1:2</code>，感兴趣的可以回去看下之前的文章：<a href="https://great-jin.github.io/java/jvm/gc/">Java JVM虚拟机详解</a>。</p><p>而之前提到了 <code>JVM</code> 为程序默认分配的初始堆内存大小为 <code>500MB</code>，根据 <code>Appeal</code> 方式的分配比例则青年代及老年代的内存分配大致为：<code>170MB</code> 与 <code>340MB</code>，正好对应了图中的 <code>NewSize</code> 与 <code>OldSize</code>。</p><p>上图中的第二及第三部分，则对应这 <code>Appeal</code> 方式对于堆内存的具体分配，配置逻辑参考下图：<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/8.png"></p><p>观察图中的数据可以看到对象基本都处于青年代的 <code>Eden</code> 分区，大小为 <code>39MB</code>，而对于青年代的另两个分区 <code>From Space</code> 与 <code>To Space</code> 占用率均为 <code>0</code>，同时老年代也仅有 <code>3MB</code> 左右的对象内存占用。</p><p>这也看出一个问题，有大量的对象堆积于青年代没有被垃圾回收及时清理，根据之前的 <code>JOL</code> 验证结果，显然程序中涉及了其它对象。<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/9.png"></p><p>那既然在刚才 <code>JOL</code> 排查中可以看到数据对象的内存占用并不大，那青年代中的几十兆内存又是被什么对象占用呢？通过 <code>jmap -histo &lt;pid&gt;</code> 命令，则可以看到进程对象数据量与内存占用。</p><p>返回结果的各列描述信息如下：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">列名</td>        <th style="text-align: center;">描述</td>    </tr>    <tr>        <td style="text-align: center;">num</td>        <td style="text-align: center;">序号，根据内存占用倒排。</td>    </tr>    <tr>        <td style="text-align: center;">#instances</td>        <td style="text-align: center;">实例对象数量。</td>    </tr>    <tr>        <td style="text-align: center;">#bytes</td>        <td style="text-align: center;">所有实例对象所占的内存。</td>    </tr>    <tr>        <td style="text-align: center;">class name</td>        <td style="text-align: center;">实例对象对应的类名。</td>    </tr></table><p>执行后在下图可以看到，其中内存占用最大的前三项为 <code>[I</code>，<code>[B</code> 与 <code>[C</code>，分别代表 <code>int[]</code>，<code>byte[]</code> 与 <code>char[]</code>，其中 <code>int</code> 数据占用最多达到近 <code>30MB</code>。<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/10.png"></p><h4 id="4-参数调优"><a href="#4-参数调优" class="headerlink" title="4. 参数调优"></a>4. 参数调优</h4><p>经过一顿猛如虎的操作，一看结果还是没能定位到根本原因。</p><p>我们就换个思路来看，以内存占用为切入点，既然青年代存留大量的对象实例没能被垃圾回收，那我就逼你执行触发回收动作。</p><p>最简单粗暴，启动程序时直接将 <code>JVM</code> 虚拟机内存限制到 <code>50MB</code> 先看下效果，在启动时添加下述参数：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 设置 JVM 堆内存最小值为 50m</span>-Xms50m<span class="token comment" spellcheck="true"># 设置 JVM 堆内存最大值为 50m</span>-Xmx50m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序后再次通过 <code>jmap</code> 查看内存布局情况，可以看到此时青年代的 <code>From Space</code> 大小为 <code>2MB</code> 且处于满状态，老年代的占用比例也有所提升，这说明 <code>Young GC</code> 的次数相较于上次也是有所提升。<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/11.png"></p><p>显然上述的配置是有所效果的，我们目的是以一个合理的频次触发 <code>Young GC</code> 以回收内存，同时降低 <code>Full GC</code> 的次数，那如何验证效果呢？</p><p>我们可以同 <code>jstat -gcutil</code> 命令打印进程 <code>GC</code> 的相关信息，以下述为例每间隔 <code>5s</code> 执行一次打印输出。<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/12.png"></p><p>在上图可以看到最开始进程执行过的 <code>YGC</code> 次数为 <code>8</code>，此时在程序页面选中查询模拟操作可以看到 <code>YGC</code> 的次数在逐次增加，但 <code>FGC</code> 还是保持在 <code>0</code>，而程序只要不频繁的触及 <code>FGC</code>，都是在我们的可接收范围之内。</p><p>那如何判断堆内存的设置是否合理呢？很简单，就是一个个试，将上面的参数设置为 <code>30MB</code> 后我们再以同样的方式进行观察。</p><p>将 <code>GC</code> 活动日志打印调整为 <code>1s</code> 并在程序随机选择查询模拟操作，得到下述结果：<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/13.png"></p><p>此时我们再看一眼堆内存的分布，重复几次可以看到随着 <code>YGC</code> 的执行，老年代的占用比例维持在 <code>30%</code> 左右，不至于太低也不至于太高从而触发 <code>FGC</code>。</p><p>当然，你可以重复上述步骤直至试了一个你觉得最佳的临界点，这里我就不啰嗦展开了。</p><p>至此，整个问题的排查也告一段落了，终于又可以安心的网上冲浪了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;事情是这样的，在不久之前我不是分享了一篇文章说我写了端口检测关闭的 &lt;code&gt;GUI&lt;/code&gt; 工具，如果你还没看过可以去瞧一眼：&lt;a href=&quot;https://great-jin.github.io/windows/software/process/&quot;&gt;我写了一个</summary>
      
    
    
    
    <category term="JVM虚拟机" scheme="https://great-jin.github.io/categories/JVM%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Exe4j 软件使用教程</title>
    <link href="https://great-jin.github.io/build/exe4j/"/>
    <id>https://great-jin.github.io/build/exe4j/</id>
    <published>2024-08-03T16:00:00.000Z</published>
    <updated>2025-05-11T12:39:12.805Z</updated>
    
    <content type="html"><![CDATA[<p><code>Exe4j</code> 是一款能够快速实现将 <code>Jar</code> 文件打包为 <code>Windows</code> 下可执行的 <code>exe</code> 程序，省去一系列非必要麻烦。</p><p>在开始之前先下载对应的工具，其提供了解压即用的便捷版本，<a href="https://www.ej-technologies.com/download/exe4j/files">官网直达</a>。</p><h4 id="1-基本配置"><a href="#1-基本配置" class="headerlink" title="1. 基本配置"></a>1. 基本配置</h4><p>下载完成后解压文件并启动，打开后展示下图内容，选择下一步。<br><img src="/album/loading.gif" data-original="/album/article/win/exe4j/1.png"></p><p>选择 <code>JAR</code> 模式执行文件打包，完成后选择下一步。<br><img src="/album/loading.gif" data-original="/album/article/win/exe4j/2.png"></p><p>输入最后的程序名以及文件输出路径，完成后选择下一步。<br><img src="/album/loading.gif" data-original="/album/article/win/exe4j/3.png"></p><p>输入文件执行名称，可与上一步一致，完成后选择下一步。<br><img src="/album/loading.gif" data-original="/album/article/win/exe4j/4.png"></p><h4 id="2-文件配置"><a href="#2-文件配置" class="headerlink" title="2. 文件配置"></a>2. 文件配置</h4><p>按下图指示选择需要打包为 <code>exe</code> 的 <code>Jar</code> 运行文件。<br><img src="/album/loading.gif" data-original="/album/article/win/exe4j/5.png"><br><img src="/album/loading.gif" data-original="/album/article/win/exe4j/6.png"></p><p>选择 <code>Jar</code> 文件后还需要指定 <code>Jar</code> 包的主类，完成后选择下一步。<br><img src="/album/loading.gif" data-original="/album/article/win/exe4j/7.png"></p><p>在此页面配置程序所需的 <code>JDK</code> 版本最低以及最高要求，完成后选择下一步。<br><img src="/album/loading.gif" data-original="/album/article/win/exe4j/8.png"></p><h4 id="3-程序打包"><a href="#3-程序打包" class="headerlink" title="3. 程序打包"></a>3. 程序打包</h4><p>完成上述配置后一路选择下一步到最后提示完成即可。<br><img src="/album/loading.gif" data-original="/album/article/win/exe4j/9.png"><br><img src="/album/loading.gif" data-original="/album/article/win/exe4j/10.png"></p><p>最后提示下图信息即代表程序已经打包成功了。<br><img src="/album/loading.gif" data-original="/album/article/win/exe4j/11.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;Exe4j&lt;/code&gt; 是一款能够快速实现将 &lt;code&gt;Jar&lt;/code&gt; 文件打包为 &lt;code&gt;Windows&lt;/code&gt; 下可执行的 &lt;code&gt;exe&lt;/code&gt; 程序，省去一系列非必要麻烦。&lt;/p&gt;
&lt;p&gt;在开始之前先下载对应的工具，其提供了</summary>
      
    
    
    
    <category term="编译构建" scheme="https://great-jin.github.io/categories/%E7%BC%96%E8%AF%91%E6%9E%84%E5%BB%BA/"/>
    
    
    <category term="Windows" scheme="https://great-jin.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Git 合并进阶教程</title>
    <link href="https://great-jin.github.io/git/advance/"/>
    <id>https://great-jin.github.io/git/advance/</id>
    <published>2024-07-30T16:00:00.000Z</published>
    <updated>2025-05-11T12:39:12.877Z</updated>
    
    <content type="html"><![CDATA[<p>在 <code>Git</code> 代码合并中 <code>rebase</code> 与 <code>merge</code> 都是十分常用的方式，本文将通过具体场景讲解二者有哪些区别。</p><h3 id="一、Rebase"><a href="#一、Rebase" class="headerlink" title="一、Rebase"></a>一、Rebase</h3><h4 id="1-需求场景"><a href="#1-需求场景" class="headerlink" title="1. 需求场景"></a>1. 需求场景</h4><p>假设存在下述开发场景：</p><ul><li>在 <code>master</code> 分支开发提交 <code>work-1</code>;</li><li>接收到新需求，从 <code>master</code> 切分支到 <code>dev</code> 并提交 <code>work-2</code>；</li><li>原功能变更，回到 <code>master</code> 提交 <code>work-1.1</code>;</li><li>回到 <code>dev</code> 继续开发；</li></ul><p>经过上述的步骤操作之后，工程的 <code>git</code> 提交日志如下，分支 <code>dev</code> 为另一条分叉。<br><img src="/album/loading.gif" data-original="/album/article/git/merge/1.png"></p><h4 id="2-分支合并"><a href="#2-分支合并" class="headerlink" title="2. 分支合并"></a>2. 分支合并</h4><p>在上述的流程中可以看到，<code>master</code> 分支的与 <code>dev</code> 发生了内容异步。因此若继续在 <code>dev</code> 上进行开发需要先将 <code>master</code> 内容同步到 dev 分支。</p><p>先以 <code>rebase</code> 方式为例，继续上面的场景，在切换至 <code>dev</code> 后按下图选择：<br><img src="/album/loading.gif" data-original="/album/article/git/merge/2.png"></p><p>此时若两个分支修改了同一内容将会提示冲突需要进行手动处理，完成后选择 <code>Apply</code>。<br><img src="/album/loading.gif" data-original="/album/article/git/merge/3.png"></p><p>再次查看 <code>git</code> 记录可以看到刚才分叉的分支现在已经合并为一条线性的流程。<br><img src="/album/loading.gif" data-original="/album/article/git/merge/4.png"></p><p>这时候同样的我们需要 <code>dev</code> 分支的内容合并回 <code>master</code>，且由于刚才已经解决完冲突问题，这时候就可以选择切换到 <code>master</code> 分支选择将 <code>dev</code> 分支 <code>merge</code> 过来。<br><img src="/album/loading.gif" data-original="/album/article/git/merge/5.png"></p><p>完成后 <code>master</code> 和 <code>dev</code> 此时都实现了内容的同步，这便是一个相对将为完善的协同流程。</p><h3 id="二、Merge"><a href="#二、Merge" class="headerlink" title="二、Merge"></a>二、Merge</h3><h4 id="1-分支合并"><a href="#1-分支合并" class="headerlink" title="1. 分支合并"></a>1. 分支合并</h4><p><code>Rebase</code> 与 <code>Merge</code> 二者都能实现分支的合并，那二者的区别在哪呢？</p><p>还是以上述的场景为例，按照同样的步骤得到下述结果。<br><img src="/album/loading.gif" data-original="/album/article/git/merge/1.png"></p><p>回到 <code>dev</code> 分支，但这时候我们不选择 <code>rebase</code>，而是按下图选择将 <code>master</code> 合并到 <code>dev</code>:<br><img src="/album/loading.gif" data-original="/album/article/git/merge/6.png"></p><p>完成后查看 <code>git</code> 提交日志可以看到与 <code>rebase</code> 不同的是其保留了图中紫色的分支提交记录，生成了一个新的节点拼接于两个分支之后。<br><img src="/album/loading.gif" data-original="/album/article/git/merge/7.png"></p><h4 id="2-差异分析"><a href="#2-差异分析" class="headerlink" title="2. 差异分析"></a>2. 差异分析</h4><p>那么这又有什么弊端呢？显然易见，当多人协议时重复上述步骤，那 <code>git</code> 提交记录就会像怀孕一样向右突出多条分支记录。</p><p>这里仅以三个需求分支为例，执行刚才的提交步骤得到下图结果：<br><img src="/album/loading.gif" data-original="/album/article/git/merge/8.png"></p><p>分别将 <code>master</code> 分支 <code>merge</code> 到对应的需求分支，再次查看 <code>git</code> 记录可以看到此时的分叉已经就不是很美观了。<br><img src="/album/loading.gif" data-original="/album/article/git/merge/9.png"></p><p>那如果选择的是通过 <code>rebase</code> 执行上步操作呢？可以看到此时的 <code>git</code> 记录明显更为简洁。<br><img src="/album/loading.gif" data-original="/album/article/git/merge/10.png"></p><p>因此在实际开发中，通过首次选择 <code>rebase</code> 将公共分支合并到本地分支解决冲突，完成后通过 <code>merge</code> 再将本地分支合并到公共分支，由于此时冲突已经解决完毕因此可以直接进行合并，同时 <code>git</code> 日志也更为简洁。</p><h4 id="3-提交合并"><a href="#3-提交合并" class="headerlink" title="3. 提交合并"></a>3. 提交合并</h4><p>在 <code>git</code> 中另涉及的一个较为实用的即 <code>Squash</code>，在一个需求分支开发中，通常会涉及到多次提交例如下图：<br><img src="/album/loading.gif" data-original="/album/article/git/merge/11.png"></p><p>但在发起合并请求时这些提交同属于一个需求，我希望将其合并为单个 <code>commit</code> 再发起合并请求，此时即可选择 <code>Squash</code>。</p><p>在 IDEA 的 git 记录中选择需要本地分支中需要合并的 <code>commit</code>，并选择 <code>Squash commit</code>。<br><img src="/album/loading.gif" data-original="/album/article/git/merge/12.png"></p><p>此时会提示你为合并后的 <code>commit</code> 重新设置提交信息。<br><img src="/album/loading.gif" data-original="/album/article/git/merge/13.png"></p><p>完成后即可看到刚才的三个提交记录此时已经合并为单个，这时候再发起合并请求则只会有单个的 <code>commit</code> 记录。<br><img src="/album/loading.gif" data-original="/album/article/git/merge/14.png"></p><h3 id="三、总结归纳"><a href="#三、总结归纳" class="headerlink" title="三、总结归纳"></a>三、总结归纳</h3><h4 id="1-Merge"><a href="#1-Merge" class="headerlink" title="1. Merge"></a>1. Merge</h4><p>在 <code>merge</code> 合并中，会先找到两个分支的首个岔路点（黄色），再找到两个分支的最新节点（红色），将这个两个节点合并生成一个新提交（率色），同时保留原有的分支结构。<br><img src="/album/loading.gif" data-original="/album/article/git/merge/15.png"></p><h4 id="2-Rebase"><a href="#2-Rebase" class="headerlink" title="2. Rebase"></a>2. Rebase</h4><p>在 <code>rebase</code> 中，当合并时同样是先找到首个岔路点，但之后不同与 <code>merge</code> 的为其是执行拼接动作。</p><p>以刚才的示例而言，在 <code>dev</code> 中选择 <code>rebase master onto dev</code>，即将当前 <code>dev</code> 分支内容拼接到 <code>master</code> 的最新提交之后。<br><img src="/album/loading.gif" data-original="/album/article/git/merge/16.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 &lt;code&gt;Git&lt;/code&gt; 代码合并中 &lt;code&gt;rebase&lt;/code&gt; 与 &lt;code&gt;merge&lt;/code&gt; 都是十分常用的方式，本文将通过具体场景讲解二者有哪些区别。&lt;/p&gt;
&lt;h3 id=&quot;一、Rebase&quot;&gt;&lt;a href=&quot;#一、Rebase&quot;</summary>
      
    
    
    
    <category term="开发工具" scheme="https://great-jin.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Git" scheme="https://great-jin.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>IDEA接口导出教程</title>
    <link href="https://great-jin.github.io/app/idea/plugin/easy-yapi/"/>
    <id>https://great-jin.github.io/app/idea/plugin/easy-yapi/</id>
    <published>2024-07-26T16:00:00.000Z</published>
    <updated>2025-05-11T12:39:12.790Z</updated>
    
    <content type="html"><![CDATA[<p>在后端开发中，对于接口测试 <code>Postman</code> 是当下较为流行的接口工具，但对于大新工程而言，逐个手动输入接口信息显然过于繁杂。因此，本文将介绍如何利用插件将工程接口批量导出至 <code>Postman</code>。</p><h4 id="1-认证信息"><a href="#1-认证信息" class="headerlink" title="1. 认证信息"></a>1. 认证信息</h4><p>在开始之前需要在 <code>Postman</code> 官网中生成账号对应的 <code>Token</code> 用于后续接口导入，<a href="https://postman.xiniushu.com/docs/developer/postman-api/authentication">官方文档</a>。</p><p>进入官网登录后按下图提示选择生成 <code>Key</code>，需要注意生成的 <code>Key</code> 仅展示一次，注意保存好。<br><img src="/album/loading.gif" data-original="/album/article/idea/easyyapi/2.png"></p><p>另一个需要注意的是 <code>Postman</code> 以 <code>Team</code> 区分工作空间，即同个账号下不同 <code>Team</code> 对应的 <code>Key</code> 并不是相通的，在生成 <code>Key</code> 之前可以在右上角切换 <code>Team</code>。<br><img src="/album/loading.gif" data-original="/album/article/idea/easyyapi/4.png"></p><h4 id="2-插件配置"><a href="#2-插件配置" class="headerlink" title="2. 插件配置"></a>2. 插件配置</h4><p>在 <code>IDEA</code> 插件市场下载 <code>EasyYapi</code> 插件。<br><img src="/album/loading.gif" data-original="/album/article/idea/easyyapi/1.png"></p><p>下载完成后在 <code>IDEA</code> 设置的 <code>Other Settings</code> 里找到 <code>EasyApi</code> 并将第一步生成的 <code>Key</code> 填入。<br><img src="/album/loading.gif" data-original="/album/article/idea/easyyapi/5.png"></p><h4 id="3-接口导出"><a href="#3-接口导出" class="headerlink" title="3. 接口导出"></a>3. 接口导出</h4><p>完成上述配置后即可进行接口的导出工作了，以下述接口为例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestResource</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"demo1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 测试接口     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"demo2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>IDEA</code> 中右击工程选择 <code>EasyApi</code> 并导出至 <code>Postman</code>。<br><img src="/album/loading.gif" data-original="/album/article/idea/easyyapi/6.png"></p><p>选择后将会提示导出到那个工作空间，<code>My Workspace</code> 即本地仅自己可见，而 <code>Team Workspace</code> 顾名思义即团队成员都可见。<br><img src="/album/loading.gif" data-original="/album/article/idea/easyyapi/7.png"></p><p>完成后重新打开 <code>Postman</code> 即可看到此时接口已经被导入了，以上述的接口代码为例，若接口不存在注释则以接口方法名为名字，否则取注解名。<br><img src="/album/loading.gif" data-original="/album/article/idea/easyyapi/8.png"></p><h4 id="4-变量配置"><a href="#4-变量配置" class="headerlink" title="4. 变量配置"></a>4. 变量配置</h4><p>查看导入口的接口可以看到接口地址中是以 <code>&#123;&#123;xxx&#125;&#125;</code> 为占位符，占位符名称为工程的模块名。<br><img src="/album/loading.gif" data-original="/album/article/idea/easyyapi/9.png"></p><p>因此，我们需要手动添加环境变量，按照下图提示进行添加。<br><img src="/album/loading.gif" data-original="/album/article/idea/easyyapi/10.png"></p><h4 id="5-请求认证"><a href="#5-请求认证" class="headerlink" title="5. 请求认证"></a>5. 请求认证</h4><p>通过工程的接口都带有认证信息，在上述导入的接口中可以看到接口默认的认证信息都是继承于父级。<br><img src="/album/loading.gif" data-original="/album/article/idea/easyyapi/11.png"></p><p>因此，我们只需要在父级设置认证信息后，模块下所有接口即可全局生效。<br><img src="/album/loading.gif" data-original="/album/article/idea/easyyapi/12.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在后端开发中，对于接口测试 &lt;code&gt;Postman&lt;/code&gt; 是当下较为流行的接口工具，但对于大新工程而言，逐个手动输入接口信息显然过于繁杂。因此，本文将介绍如何利用插件将工程接口批量导出至 &lt;code&gt;Postman&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;1-认</summary>
      
    
    
    
    <category term="IDEA" scheme="https://great-jin.github.io/categories/IDEA/"/>
    
    
    <category term="IDEA" scheme="https://great-jin.github.io/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>MySQL执行计划详解</title>
    <link href="https://great-jin.github.io/db/mysql/explain/"/>
    <id>https://great-jin.github.io/db/mysql/explain/</id>
    <published>2024-07-20T16:00:00.000Z</published>
    <updated>2025-05-11T12:39:12.854Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、执行计划"><a href="#一、执行计划" class="headerlink" title="一、执行计划"></a>一、执行计划</h3><h4 id="1-基础介绍"><a href="#1-基础介绍" class="headerlink" title="1. 基础介绍"></a>1. 基础介绍</h4><p>执行计划可谓是每个数据库中十分重要的一环，故名思意即通过执行计划可以了解 <code>SQL</code> 脚本对应的执行信息。</p><p>在排查慢 <code>SQL</code> 时更尤为重要，通过执行计划可以查看到语句的执行顺序，是否使用索引等等信息，帮助我们更好的优化语句脚本。</p><h4 id="2-数据测试"><a href="#2-数据测试" class="headerlink" title="2. 数据测试"></a>2. 数据测试</h4><p>在开始之前先准备两张测试表，结构相对简单对应的脚本语句如下，另一测试表 <code>tb_02</code> 表结构与其相同。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>tb_01<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>Column1<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>Column2<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>Column3<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>Column4<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>Column1<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-使用方式"><a href="#3-使用方式" class="headerlink" title="3. 使用方式"></a>3. 使用方式</h4><p>执行计划的使用方式十分简单，只需要在对应的语句前添加 <code>explain</code> 关键字执行即可，执行结果将返回语句执行的详细信息。<br><img src="/album/loading.gif" data-original="/album/article/db/mysql/explain/1.png"></p><p>上图执行结果中字段的描述信息参考下表，后面会详细介绍。</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">字段</td>        <th style="text-align: center;">描述</td>    </tr>    <tr>        <td style="text-align: center;">id</td>        <td style="text-align: center;">选择标识符。</td>    </tr>    <tr>        <td style="text-align: center;">select_type</td>        <td style="text-align: center;">表示查询的类型</td>    </tr>    <tr>        <td style="text-align: center;">table</td>        <td style="text-align: center;">输出结果集的表，若定义了别名则展示别名。</td>    </tr>    <tr>        <td style="text-align: center;">partitions</td>        <td style="text-align: center;">执行匹配的分区。</td>    </tr>    <tr>        <td style="text-align: center;">type</td>        <td style="text-align: center;">表示表的连接类型</td>    </tr>    <tr>        <td style="text-align: center;">possible_keys</td>        <td style="text-align: center;">表示查询时，可能使用的索引。</td>    </tr>    <tr>        <td style="text-align: center;">key</td>        <td style="text-align: center;">表示实际使用的索引。</td>    </tr>    <tr>        <td style="text-align: center;">key_len</td>        <td style="text-align: center;">索引字段的长度。</td>    </tr>    <tr>        <td style="text-align: center;">ref</td>        <td style="text-align: center;">列与索引的比较。</td>    </tr>    <tr>        <td style="text-align: center;">rows</td>        <td style="text-align: center;">扫描出的行数(估算的行数)。</td>    </tr>    <tr>        <td style="text-align: center;">filtered</td>        <td style="text-align: center;">按表条件过滤的行百分比。</td>    </tr>    <tr>        <td style="text-align: center;">Extra</td>        <td style="text-align: center;">执行情况的描述和说明。</td>    </tr></table><h3 id="二、属性解读"><a href="#二、属性解读" class="headerlink" title="二、属性解读"></a>二、属性解读</h3><p>在上面的表格中可以看到执行结果所返回的属性并不少，下面挑选几个比较重要的属性进行介绍。</p><h4 id="1-ID"><a href="#1-ID" class="headerlink" title="1. ID"></a>1. ID</h4><p><code>ID</code> 属性返回的值是一个由 <code>1</code> 开始递增的数据，用于标识查询时每张表的查询顺序，当都为 <code>1</code> 时则执行顺序为依次向下。</p><p>例如下述示例中执行连表查询，返回结果中两张表对应的 <code>ID</code> 均为 <code>1</code>，则二者的执行顺序从上执行即 <code>t1</code> 先于 <code>t2</code>。<br><img src="/album/loading.gif" data-original="/album/article/db/mysql/explain/2.png"></p><p>可以看出对于 <code>ID</code> 相同的查询属于归属同一分组，执行优先级自上而下，而当涉及到子查询等操作时，子查询的优先级更高相对的 <code>ID</code> 值也越大。如下图中子查询 <code>tb_02</code> 对应的 <code>ID</code> 为 <code>2</code>，表明其执行优先级高于 <code>tb_01</code>。<br><img src="/album/loading.gif" data-original="/album/article/db/mysql/explain/3.png"></p><h4 id="2-Type"><a href="#2-Type" class="headerlink" title="2. Type"></a>2. Type</h4><p><code>Type</code> 属性是执行计划中十分重要的一项指标，也是我们判断一条语句是否高效的一大依据。其表示连接类型，常见的类型如下，性能从上至下越来越高，一般好的 <code>SQL</code> 语句至少要达到 <code>range</code> 级别，而 <code>all</code> 级别应当杜绝。</p><blockquote><ul><li><strong>ALL</strong>：全表扫描，应当避免该类型;</li><li><strong>index</strong>：索引全局扫描，<code>index</code> 与 <code>ALL</code> 区别为 <code>index</code> 类型只遍历索引树;</li><li><strong>range</strong>：检索索引一定范围的行;</li><li><strong>ref</strong>：非唯一性索引扫描，返回匹配某个单独值的所有行;</li><li><strong>eq_ref</strong>：唯一索引扫描，对于每个索引键，表中只有一条记录与之匹配，常见主键或唯一索引扫描;</li><li><strong>const</strong>：表示通过一次索引就找到了结果，常见主键或唯一索引扫描;</li><li><strong>system</strong>：<code>system</code> 是 <code>const</code> 类型的特例，当查询的表只有一行的情况下使用 <code>system</code>;</li><li><strong>NULL</strong>：<code>MySQL</code> 在优化过程中分解语句，执行时甚至不用访问表或索引，是最高的登记;</li></ul></blockquote><p>以之前的测试表为例，查询主键字段 <code>column1</code> 为 <code>1</code> 的数据，查看返回结果可以看到对应 <code>type</code> 的值为 <code>const</code>，即通过主键索引单次即实现数据查询。<br><img src="/album/loading.gif" data-original="/album/article/db/mysql/explain/4.png"></p><h4 id="3-Possible-keys"><a href="#3-Possible-keys" class="headerlink" title="3. Possible_keys"></a>3. Possible_keys</h4><p><code>possible_keys</code> 与 <code>key</code> 属性都表示所用到的索引，前者是 <code>MySQL</code> 判断可能用到的索引，而后者是实际查询所用到的索引。</p><p>在上一点的查询中，通过主键查询数据时可以看到返回 <code>possible_keys</code> 与 <code>key</code> 均为 <code>PRIMARY</code>，表示预测和实际查询的所使用的索引都是主键索引。</p><p>同理，在查询中将条件中的字段替换为普通属性，可以看到结果中的  <code>possible_keys</code> 与 <code>key</code> 都为 <code>null</code>，且结果中的 <code>type</code> 为 <code>ALL</code>，表明查询没有使用任何索引而是执行了全表扫描。<br><img src="/album/loading.gif" data-original="/album/article/db/mysql/explain/5.png"></p><p>对于这种全表扫描通常则需要进行优化，最简单的方式即给对应的条件字段条件索引，执行下述脚本添加索引后重新执行上述语句。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">index</span> c2_idx<span class="token keyword">on</span> tb_01 <span class="token punctuation">(</span>column2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从下图中的结果可以看到此时的 <code>type</code> 为 <code>ref</code> 且 <code>possible_keys</code> 与 <code>key</code> 则为 <code>c2_idx</code>，表明此时查询已经通过索引执行。<br><img src="/album/loading.gif" data-original="/album/article/db/mysql/explain/6.png"></p><h4 id="3-Extra"><a href="#3-Extra" class="headerlink" title="3. Extra"></a>3. Extra</h4><p><code>Extra</code> 表示详细说明，一般该列存在下列值，常见的不太友好的值有：<code>Using filesort</code>，<code>Using temporary</code>。</p><blockquote><ul><li><strong>Using where</strong>: 表示不用读取表中所有信息，仅通过索引就可以获取所需数据，即使用列覆盖索引;</li><li><strong>Using temporary</strong>: 表示需要使用临时表来存储结果集，常见于 <code>group by</code> 与 <code>order by</code>;</li><li><strong>Using filesort</strong>: 表示无法利用索引完成的排序，此类情景通常需要进行优化;</li><li><strong>Using join buffer</strong>: 表示使用了连接缓存，如果出现了这个值，建议根据查询的添加索引;</li><li><strong>Impossible where</strong>: 表示 <code>where</code> 语句会一直 <code>false</code>，导致没有符合条件的行;</li><li><strong>Select tables optimized away</strong>: 这个值意味着 <code>sql</code> 优化到不能在优化了;</li><li><strong>No tables used</strong>: <code>Query</code> 语句中使用 <code>from dual</code> 或不含任何 <code>from</code> 子句;</li></ul></blockquote><h3 id="三、操作句柄"><a href="#三、操作句柄" class="headerlink" title="三、操作句柄"></a>三、操作句柄</h3><h4 id="1-基础介绍-1"><a href="#1-基础介绍-1" class="headerlink" title="1. 基础介绍"></a>1. 基础介绍</h4><p>除了执行计划之外，在 <code>MySQL</code> 还提供了操作句柄 <code>Handler</code> 用于描述脚本对数据发生的变更。</p><p>通过下述命令即可查看当前会话的脚本执行句柄信息，通常在执行查询之前通过 <code>FLUSH</code> 先执行清空。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 清空句柄</span>FLUSH <span class="token keyword">STATUS</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 查询句柄信息</span><span class="token keyword">SHOW</span> <span class="token keyword">SESSION</span> <span class="token keyword">STATUS</span> <span class="token operator">LIKE</span> <span class="token string">'Handler%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行查询返回的结果如下：<br><img src="/album/loading.gif" data-original="/album/article/db/mysql/explain/6.png"></p><p>各项属性描述参考下表，其中若 <code>Handler_read_rnd_next</code> 值很高，可能表示表的全表扫描次数很多；若 <code>Handler_read_key</code> 值很高，说明通过索引查找行的次数很多，索引在查询中被有效利用；若 <code>Handler_update</code> 和 <code>Handler_delete</code> 的值很高，说明有很多行更新和删除操作。</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">属性</td>        <th style="text-align: center;">描述</td>    </tr>    <tr>        <td style="text-align: center;">Handler_commit</td>        <td style="text-align: center;">会话中提交的次数。每执行 COMMIT 语句或自动提交事务时，该计数器会增加。</td>    </tr>    <tr>        <td style="text-align: center;">Handler_delete</td>        <td style="text-align: center;">会话中删除行的次数。每执行 DELETE 语句删除一行时，该计数器会增加。</td>    </tr>    <tr>        <td style="text-align: center;">Handler_discover</td>        <td style="text-align: center;">会话中自动发现表的次数。这通常用于 NDB Cluster 和某些存储引擎。</td>    </tr>    <tr>        <td style="text-align: center;">Handler_external_lock</td>        <td style="text-align: center;">会话中外部锁定操作的次数，主要用于内部目的。</td>    </tr>    <tr>        <td style="text-align: center;">Handler_mrr_init</td>        <td style="text-align: center;">会话中多范围读取（Multi-Range Read, MRR）初始化的次数。</td>    </tr>    <tr>        <td style="text-align: center;">Handler_prepare</td>        <td style="text-align: center;">会话中准备事务的次数，主要用于内部目的。</td>    </tr>    <tr>        <td style="text-align: center;">Handler_read_first</td>        <td style="text-align: center;">会话中读取索引中的第一行的次数。通常在查询需要读取索引中的第一行时增加。</td>    </tr>    <tr>        <td style="text-align: center;">Handler_read_key</td>        <td style="text-align: center;">会话中通过键读取行的次数。每次通过索引键查找行时该计数器会增加。</td>    </tr>    <tr>        <td style="text-align: center;">Handler_read_last</td>        <td style="text-align: center;">会话中读取索引中的最后一行的次数。通常在查询需要读取索引中的最后一行时增加。</td>    </tr>    <tr>        <td style="text-align: center;">Handler_read_next</td>        <td style="text-align: center;">会话中读取索引中的下一行的次数。通常在索引扫描中使用。</td>    </tr>    <tr>        <td style="text-align: center;">Handler_read_prev</td>        <td style="text-align: center;">会话中读取索引中的前一行的次数。通常在倒序索引扫描中使用。</td>    </tr>    <tr>        <td style="text-align: center;">Handler_read_rnd</td>        <td style="text-align: center;">会话中通过固定位置读取行的次数。通常在需要直接读取行而不通过索引时使用。</td>    </tr>    <tr>        <td style="text-align: center;">Handler_read_rnd_next</td>        <td style="text-align: center;">会话中读取下一行的次数。通常在全表扫描时使用。</td>    </tr>    <tr>        <td style="text-align: center;">Handler_rollback</td>        <td style="text-align: center;">会话中回滚的次数。每次执行 ROLLBACK 语句或事务失败回滚时，该计数器会增加。</td>    </tr>    <tr>        <td style="text-align: center;">Handler_savepoint</td>        <td style="text-align: center;">会话中保存点操作的次数。</td>    </tr>    <tr>        <td style="text-align: center;">Handler_savepoint_rollback</td>        <td style="text-align: center;">会话中回滚到保存点的次数。</td>    </tr>    <tr>        <td style="text-align: center;">Handler_update</td>        <td style="text-align: center;">会话中更新行的次数。每执行 UPDATE 语句更新一行时，该计数器会增加。</td>    </tr>    <tr>        <td style="text-align: center;">Handler_write</td>        <td style="text-align: center;">会话中插入行的次数。每执行 INSERT 语句插入一行时，该计数器会增加。</td>    </tr></table><h4 id="2-示例演示"><a href="#2-示例演示" class="headerlink" title="2. 示例演示"></a>2. 示例演示</h4><p>下面通过具体的示例介绍效果，依次执行下述的三个语句。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 清空</span>FLUSH <span class="token keyword">STATUS</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 执行脚本</span><span class="token keyword">select</span>     <span class="token operator">*</span><span class="token keyword">from</span>    tb_01<span class="token keyword">where</span>    column1 <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">-- 查询句柄</span><span class="token keyword">SHOW</span> <span class="token keyword">SESSION</span> <span class="token keyword">STATUS</span> <span class="token operator">LIKE</span> <span class="token string">'Handler%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行后得到下图结果，由于默认的增删改是自动提交的因此可以看出 <code>Handler_commit</code> 值为 <code>1</code>，同时根据主键字段查询整个查询过程中的涉及的索引数量为 <code>1</code>，因此 <code>Handler_read_key</code> 为 <code>1</code>。</p><p>同时，对于 <code>MySQL</code> 而言默认的事务级别为 <code>REPEATABLE_READ</code>，在执行查询时将会添加写锁，每次加锁与释放锁 <code>Handler_external_lock</code> 值都将会增加，因此整个查询动作过程 <code>Handler_external_lock</code> 值为 <code>2</code>。<br><img src="/album/loading.gif" data-original="/album/article/db/mysql/explain/7.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、执行计划&quot;&gt;&lt;a href=&quot;#一、执行计划&quot; class=&quot;headerlink&quot; title=&quot;一、执行计划&quot;&gt;&lt;/a&gt;一、执行计划&lt;/h3&gt;&lt;h4 id=&quot;1-基础介绍&quot;&gt;&lt;a href=&quot;#1-基础介绍&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="数据库" scheme="https://great-jin.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MySQL" scheme="https://great-jin.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>我写了一个程序，让端口占用无路可逃</title>
    <link href="https://great-jin.github.io/windows/software/process/"/>
    <id>https://great-jin.github.io/windows/software/process/</id>
    <published>2024-06-29T16:00:00.000Z</published>
    <updated>2025-05-11T12:39:13.057Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h3><p>作为一个 <code>Java</code> 工程师，经常会遇到这么个场景：<code>IDEA</code> 里的程序正在运行，此时直接关闭了 <code>IDEA</code> 而没有先关闭正在运行的服务。</p><p>在绝大多数情境下，此方式都无伤大雅，但总有一些抽风的场景运行的程序并没有被正常的关闭，也就导致了重启项目时将会提示 <code>xxxx</code> 端口已被占用。</p><p>在 <code>Windows</code> 下此方式解决也十分简单，在命令行输入下述两个命令即可根据端口关闭对应的进程。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 端口占用进程</span><span class="token function">netstat</span> -ano <span class="token operator">|</span> findstr <span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token comment" spellcheck="true"># 进程关闭</span>taskkill -PID <span class="token operator">&lt;</span>pid<span class="token operator">></span> -F<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然说也不麻烦但却很繁杂，试想一下当遇到这种情况下，我需要先翻笔记找出这两个命令，在打开命令行窗口执行，一套连招下来相当影响编程情绪。</p><p>因此，我决定写一个程序能够便捷的实现这个操作，最好是带 <code>GUI</code> 页面。</p><h3 id="2-实现机制"><a href="#2-实现机制" class="headerlink" title="2. 实现机制"></a>2. 实现机制</h3><p>说干就干，整个程序功能其实并不复杂，对于页面的展示要求也不高，我就确定下来了直接通过 <code>Java Swing</code> 实现 <code>GUI</code> 部分。而对于命令执行部分，在 <code>Java</code> 中提供了 <code>Process</code> 类可用于执行命令。</p><p>先让我们看下 <code>Process</code> 的作用方式，以最简单的 <code>ping baidu.com</code> 测试为例。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      ProcessBuilder processBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProcessBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      List<span class="token operator">&lt;</span>String<span class="token operator">></span> command <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      command<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ping"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      command<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      processBuilder<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>          Process process <span class="token operator">=</span> processBuilder<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">try</span> <span class="token punctuation">(</span>              InputStreamReader ir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>ir<span class="token punctuation">)</span>          <span class="token punctuation">)</span> <span class="token punctuation">{</span>              String line<span class="token punctuation">;</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行上述的代码，在控制台可以得到下图结果：<br><img src="/album/loading.gif" data-original="/album/article/java/process/1.png"></p><p>在上述程序中，<code>ProcessBuilder</code> 用于构建命令，<code>processBuilder.start()</code> 则相当于你敲下回车执行，而执行的结果的则以 <code>IO</code> 流的形式返回，这里通过 <code>readLine()</code> 将返回的结果逐行的形式进行读取。</p><p>了解的大概原理之后，剩下的事情就简单了，只需要将之前提到的两个命令以同样的方式通过 <code>Process</code> 执行就可以，再通过 Java Swing 进行一个页面展示就可以。</p><p>具体的实现并不复杂，这里就不详细展开介绍，完整的项目代码已经上传到 <code>GitHub</code>，感兴趣的小伙伴可自行前往查看，仓库地址：<a href="https://github.com/great-jin/windows-process">windows-process</a>。</p><h3 id="3-程序介绍"><a href="#3-程序介绍" class="headerlink" title="3. 程序介绍"></a>3. 程序介绍</h3><p>下面主要介绍程序的使用与效果，开始前可以去上述提到的仓库 <code>relase</code> 里将打包完成的 <code>exe</code> 程序下载，<a href="https://github.com/great-jin/windows-process/releases">下载地址</a>。</p><p>下载后启动 <code>window process.exe</code> 程序，在启动之后会先弹出下图的提示，这是因为使用了 <code>exe4j</code> 打包程序，选择确认即可。<br><img src="/album/loading.gif" data-original="/album/article/java/process/2.png"></p><p>选择确认之后即会展示下图页面，列表中展示的数据即 <code>netstat -ano</code> 命令返回的结果。<br><img src="/album/loading.gif" data-original="/album/article/java/process/3.png"></p><p>在选中列表任意一条进程记录后，会将该进程对应的端口号和 <code>PID</code> 填充至上面的输入框中。<br><img src="/album/loading.gif" data-original="/album/article/java/process/4.gif"></p><p>同时，可在 <code>Port</code> 输入框中输入对应的端口号实现快速查询，若需要停止某个进程，则将点击对应端口进程记录其 <code>PID</code> 会自动填入输入框中，然后单击 <code>Kill</code> 按钮，成功停止进程后将会进行相应的提示。</p><p>最后的最后，再臭不要脸的给自己要个赞，觉得不错的可以去 <code>GitHub</code> 仓库上下载下来看看，如果能点个 <code>star</code> 更是万分感谢，这里再贴一下仓库地址：<a href="https://github.com/great-jin/windows-process">windows-process</a>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-基本介绍&quot;&gt;&lt;a href=&quot;#1-基本介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 基本介绍&quot;&gt;&lt;/a&gt;1. 基本介绍&lt;/h3&gt;&lt;p&gt;作为一个 &lt;code&gt;Java&lt;/code&gt; 工程师，经常会遇到这么个场景：&lt;code&gt;IDEA&lt;/co</summary>
      
    
    
    
    <category term="软件应用" scheme="https://great-jin.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BA%94%E7%94%A8/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Stream很好，Map很酷，但答应我别用toMap</title>
    <link href="https://great-jin.github.io/java/collection/tomap/"/>
    <id>https://great-jin.github.io/java/collection/tomap/</id>
    <published>2024-06-28T16:00:00.000Z</published>
    <updated>2025-05-11T12:39:12.916Z</updated>
    
    <content type="html"><![CDATA[<p>在 <code>JDK 8</code> 中 <code>Java</code> 引入了让人欲罢不能的 <code>stream</code> 流处理，可以说已经成为了我日常开发中不可或缺的一部分。</p><p>当完成一次流处理之后需要返回一个集成对象时，已经肌肉记忆的敲下 <code>collect(Collectors.toList())</code> 或者 <code>collect(Collectors.toSet())</code>。你可能会想，<code>toList</code> 和 <code>toSet</code> 都这么便捷顺手了，当又怎么能少得了 <code>toMap()</code> 呢。</p><p>答应我，一定打消你的这个想法，否则这将成为你噩梦的开端。<br><img src="/album/loading.gif" data-original="/album/emoji/heart/1.png"></p><p>什么？你不信，没有什么比代码让人更痛彻心扉，让我们直接上代码。</p><p>让我们先准备一个用户实体类。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>          <span class="token keyword">private</span> String name<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假设有这么一个场景，你从数据库读取 <code>User</code> 集合，你需要将其转为 <code>Map</code> 结构数据，<code>key</code> 和 <code>value</code> 分别为 <code>user</code> 的 <code>id</code> 和 <code>name</code>。</p><p>很快，你啪的一下就写出了下面的代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 模拟数据</span>        userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Alex"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Beth"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getId<span class="token punctuation">,</span> User<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序，你已经想好了开始怎么摸鱼，结果啪的一下 <code>IllegalStateException</code> 报错就拍你脸上，你定睛一看怎么提示 <code>Key</code> 值重复。<br><img src="/album/loading.gif" data-original="/album/emoji/heart/2.png"></p><p>作为优秀的八股文选手，你清楚的记得 <code>HashMap</code> 对象 <code>Key</code> 重复是进行替换。你不信邪，断点一打，堆栈一看，硕大的 <code>uniqKeys</code> 摆在了面前，凭借四级 <code>424</code> 分的优秀战绩你顿时菊花一紧，点开一看，谁家好人 <code>map key</code> 还要去重判断啊。<br><img src="/album/loading.gif" data-original="/album/article/java/collect/map/1.png"><br><img src="/album/loading.gif" data-original="/album/article/java/collect/map/2.png"></p><p>好好好，这么玩是吧，你转身打开浏览器一搜，原来需要自己手动处理重复场景，啪的一下你又重新改了一下代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 模拟数据</span>        userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Alex"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getId<span class="token punctuation">,</span> User<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">,</span> <span class="token punctuation">(</span>oldData<span class="token punctuation">,</span> newData<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> newData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次执行程序，你似乎已经看到知乎的摸鱼贴在向你招手了，结果啪的一下 <code>NPE</code> 又拍在你那笑容渐渐消失的脸上。<br><img src="/album/loading.gif" data-original="/album/emoji/heart/6.png"></p><p>静下心来，本着什么大风大浪我没见过的心态，断点堆栈一气呵成，而下一秒你又望着代码陷入了沉思，我是谁？我在干什么？<br><img src="/album/loading.gif" data-original="/album/article/java/collect/map/4.png"></p><p>鼓起勇气，你还不信今天就过不去这个坎了，大手一挥，又一段优雅的代码孕育而生。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 模拟数据</span>        userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Alex"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Beth"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>                      User<span class="token operator">:</span><span class="token operator">:</span>getId<span class="token punctuation">,</span>                      it <span class="token operator">-</span><span class="token operator">></span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      <span class="token punctuation">(</span>oldData<span class="token punctuation">,</span> newData<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> newData<span class="token punctuation">)</span>                  <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优雅，真是太优雅了，又是 <code>Stream</code> 又是 <code>Optional</code>，可谓是狠狠拿捏技术博文的 <code>G</code> 点了。<br><img src="/album/loading.gif" data-original="/album/emoji/confidence/5.png"></p><p>这时候你回头一看，我需要是什么来着？这 <code>TM</code> 不是一个循环就万事大吉了吗，不信邪的你回归初心，回归了 <code>for</code> 循环的怀抱，又写了一版。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 模拟数据</span>        userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Alex"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Beth"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          userList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>it <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看着运行完美无缺的代码，你一时陷入了沉思，数分钟过去了，你删除了 <code>for</code> 循环，换上 <code>Stream</code> 与 <code>Optional</code> 不羁的外衣，安心的提交了代码，这口细糠一定也要让好同事去尝一尝。<br><img src="/album/loading.gif" data-original="/album/emoji/mix/1.png"></p><p>让我们回到 <code>HashMap</code> 的身上，作为八股十级选手而言的你，什么数据结构红黑树可谓信手拈来，但我们今天不谈八股，只聊聊背后的一些设计理念。</p><p>众所周知，在 <code>HashMap</code> 中有且仅允许存在一个 <code>key</code> 为 <code>null</code> 的元素，当 key 已存在默认的策略是进行覆盖，比如下面的示例最终 <code>map</code> 的值即 <code>&#123;null=2&#125;</code>。</p><pre class="line-numbers language-java"><code class="language-java">Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>同时 <code>HashMap</code> 对于 <code>value</code> 的值并没有额外限制，只要你愿意，你甚至可以放几百万 <code>value</code> 为空的元素像下面这个例子：</p><pre class="line-numbers language-java"><code class="language-java">Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>这也就引出了今天的重点！</strong></p></blockquote><p>在 <code>stream</code> 中使用 <code>Collectors.toMap()</code> 时，如果你不注意还是按照惯性思维那么它就会让你感受一下什么叫做暴击。就像上一篇文章提到的其异常触发机制，但却并不知道为什么要这么设计？</p><p>作为网络冲浪小能手，我反手就是在 <code>stackoverflow</code> 发了提问，咱虽然笨但主打一个好学。<br><img src="/album/loading.gif" data-original="/album/article/java/collect/map/5.png"></p><p>值得一提的是，评论区有个老哥回复的有点意思，他的回复如下:<br><img src="/album/loading.gif" data-original="/album/article/java/collect/map/6.png"></p><p>用我三脚猫的英语水平翻译一下，大概意思如下：</p><blockquote><p>因为人家 <code>toMap()</code> 并没有说返回的是 <code>HashMap</code>，所以你凭什么想要人家遵循跟 <code>HashMap</code> 一样的规则呢？</p></blockquote><p>我滴个乖乖，他讲的似乎好有道理的样子。</p><p>我一开始也差点信了，但其实你认真看 <code>toMap()</code> 的内部实现，你会发现其返回的不偏不倚正好就是 <code>HashMap</code>。<br><img src="/album/loading.gif" data-original="/album/article/java/collect/map/7.png"></p><p>如果你还不信，以上篇文章的代码为例，执行后获取其类型可以看到输出就是 <code>HashMap</code>。<br><img src="/album/loading.gif" data-original="/album/article/java/collect/map/8.png"></p><p>这时候我的 <code>CPU</code> 又烧了，这还是我认识的 <code>HashMap</code>，怎么开始跟 <code>stream</code> 混之后就开始六亲不认了，是谁说的代码永远不会变心的？</p><p>一切彷佛又回到了起点，为什么在新的 <code>stream</code> 中不遵循大家已经熟悉规范，而是要改变习惯对此做出限制？</p><p><code>stackoverflow</code> 上另外的一个老哥给出的他的意见：<br><img src="/album/loading.gif" data-original="/album/article/java/collect/map/9.png"></p><p>让我这个四级 <code>751</code> 分老手再给大家做个免费翻译官简化一下观点：</p><blockquote><p>在 <code>Collectors.toMap()</code> 的文档中已经标注其并不保证返回 <code>Map</code> 的具体类型，以及是否可变、序列化性以及是否线程安全，而 <code>JDK</code> 拥有众多的版本，可能在你的环境已经平稳运行了数年，但换个环境之后在不同的 <code>JDK</code> 下可能程序就发生了崩溃。因此，这些额外的保障实际上还帮了你的忙。</p></blockquote><p>回头去看 <code>toMap()</code> 方法上的文档说明，确实也像这位老哥提到的那样。<br><img src="/album/loading.gif" data-original="/album/article/java/collect/map/10.png"></p><p>而在 <code>HashMap</code> 中允许 <code>Key</code> 与 <code>Value</code> 为空带来的一个问题在此时也浮现了出来，当存入一个 <code>value</code> 为空的元素时，再后续执行 <code>get()</code> 再次读取时，存在一个问题那就是二义性。</p><p>很显然执行 <code>get()</code> 返回的结果将为空，那这个空究竟是 Map 中不存在这个元素？还是我存入的元素其 <code>value</code> 为空？这一点我想只有老天爷知道，而这种二义性所带来的问题在设计层面显然是一个失误。</p><p>那么到这里，我们就可以得到一个暴论：<strong>HashMap 允许 key 和 value 为空就是 JDK 留下的“屎山”！</strong></p><p>为了验证这一结论，我们可以看看在新的 <code>ConcurrentHashMap</code> 中 <code>JDK</code> 是怎么做的？查看源码可以看到，在 <code>put()</code> 方法的一开始就执行了 <code>key</code> 与 <code>value</code> 的空值校验，也验证了上面的猜想。<br><img src="/album/loading.gif" data-original="/album/article/java/collect/map/11.png"></p><p>这还原不够支撑我们的结论，让我们继续深挖这背后还有什么猫腻。</p><p>首先让我看看是谁写的 <code>ConcurrentHashMap</code>，在 <code>openjdk</code> 的 <code>GitHub</code> 仓库类文档注释可以看到主要的开发者是 <code>Doug Lea</code>。<br><img src="/album/loading.gif" data-original="/album/article/java/collect/map/12.png"></p><p>那 <code>Doug Lea</code> 又是何方大佬，通过维基百科的可以看到其早期是 <code>Java</code> 并发社区的主席，他参与了一众的 <code>JDK</code> 并发设计工作，可谓吾辈偶像。<br><img src="/album/loading.gif" data-original="/album/article/java/collect/map/13.png"></p><p>在网络搜罗相关的资讯找到对应的话题，虽然图中的链接已经不存在了，但还是能从引用的内容看出其核心的原因正是为了规避的结果的模糊性，与前文我们讨论的二义性不尽相同。<br><img src="/album/loading.gif" data-original="/album/article/java/collect/map/14.png"></p><p>那为什么 <code>JDK</code> 不同步更新 <code>HashMap</code> 的设计理念，在新版 <code>HashMap</code> 中引入 <code>key</code> 与 <code>value</code> 的非空校验？</p><p>我想剩下的理由只有一个：<code>HashMap</code> 的使用范围实在太广，就算是 <code>JDK</code> 自己也很难在不变更原有结构的基础上进行改动，而在 <code>JDK 1.2</code> 便被提出并广泛应用，对于一个发展了数十年的语言而言，兼容性是十分重要的一大考量。</p><p>因此，我们可以看到，在后续推出的 <code>Map</code> 中，往往对 <code>key</code> 与 <code>Value</code> 都作了进一步的限制，而对于 <code>HashMap</code> 而言，可能 <code>JDK</code> 官方也是有心无力吧。<br><img src="/album/loading.gif" data-original="/album/emoji/mix/2.png"></p><p>到这里基本也就盖棺定论了，但本着严谨的态度大胆假设小心求证，让我们再来看看大家伙的意见，万一不小心就被人网暴了。</p><p>在 <code>stackoverflow</code> 上一篇相关的回答中看到，许多人都认为 <code>HashMap</code> 支持空值是一个存在缺陷的设计。<br><img src="/album/loading.gif" data-original="/album/article/java/collect/map/15.png"></p><p>感兴趣的小伙伴可以去原帖查看，这里我就不再展开介绍了，原帖链接：<a href="https://stackoverflow.com/questions/45210398/why-does-map-of-not-allow-null-keys-and-values">Why does Map.of not allow null keys and values?</a>。</p><p>看到这里，下次别人或者老板再说你写的代码是屎山的时候，请昂首挺胸自信的告诉他 <code>JDk</code> 都会犯错，我写的这点又算得了什么？<br><img src="/album/loading.gif" data-original="/album/emoji/confidence/2.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 &lt;code&gt;JDK 8&lt;/code&gt; 中 &lt;code&gt;Java&lt;/code&gt; 引入了让人欲罢不能的 &lt;code&gt;stream&lt;/code&gt; 流处理，可以说已经成为了我日常开发中不可或缺的一部分。&lt;/p&gt;
&lt;p&gt;当完成一次流处理之后需要返回一个集成对象时，已经肌肉记忆的敲</summary>
      
    
    
    
    <category term="JAVA集合" scheme="https://great-jin.github.io/categories/JAVA%E9%9B%86%E5%90%88/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Maven 模块化实战</title>
    <link href="https://great-jin.github.io/java/design/module/"/>
    <id>https://great-jin.github.io/java/design/module/</id>
    <published>2024-06-15T16:00:00.000Z</published>
    <updated>2025-05-11T12:39:12.926Z</updated>
    
    <content type="html"><![CDATA[<p>如果说 <code>Spring Boot</code> 解决了 <code>Java</code> 工程师 <code>Web</code> 开发的痛点，那 <code>Maven</code> 则是当之无愧的 <code>Java</code> 依赖管理大师。回顾没有 <code>Maven</code> 的日子，手动下载管理工程依赖的各个 <code>jar</code> 包可谓是每个开发者的噩梦。</p><p>时至今日，<code>Maven</code> 的社区生态已然蓬勃发展，不仅提供了快速的依赖管理，同时对项目的模块化管理也提供了优秀的设计思路。</p><p>今天，文章的核心重点将侧重于如何通过 <code>Maven</code> 合理的管理项目结构，实现的工程的整洁性。</p><h4 id="1-工程结构"><a href="#1-工程结构" class="headerlink" title="1. 工程结构"></a>1. 工程结构</h4><p>以流行的前端后分离项目为例，在具体展开之前先看一下完整的项目模块结构，如下图所示：<br><img src="/album/loading.gif" data-original="/album/article/java/design/maven.png"></p><p>想要一个合理的项目结构，最重要的就是将功能进行拆分，而不是一股脑塞进单个模块。以上图的示例，其同样也可以合并为两个子模块：前端<code>Web</code> 与后端 <code>Server</code>，但后端模块也随之变得臃肿不堪。</p><h4 id="2-模块拆分"><a href="#2-模块拆分" class="headerlink" title="2. 模块拆分"></a>2. 模块拆分</h4><p>在上述提到了应对工程进行模块拆分，但也需注意一点，并不是一定说模块合并就是不好，而是应根据工程的规模进行抉择。</p><p>举个例子，需要开发系统仅包含一两个页面数据简单展示，此时完全可以单个工程模块一把梭哈。而若需要开发一个复杂的系统，包含用户权限以及多个功能的业务逻辑处理，此时宏观上根据系统功能拆分为单独的子模块显然更为合理。</p><p>以前文图示为例，将一个系统分为四个大类：权限管理 <code>(basic)</code>、业务处理 <code>(logic)</code>、对外服务 <code>(protocol)</code> 以及前端页面 <code>(web)</code>。每一个子模块仅负责单独业务功能，同时模块拆分也带来另一项额外收益，以权限管理模块为例，当其它项目同样涉及到此类需求时，可通过 <code>Maven</code> 依赖实现代码复用。倘若未执行模块拆分想要实现复用，采用整个完成完整引用的方式将会引入大量无用功能从而无端膨胀项目体积，另一种方式则需要手动继续代码剥离从而拷贝到新项目，二者都并非最优解。</p><h4 id="3-依赖管理"><a href="#3-依赖管理" class="headerlink" title="3. 依赖管理"></a>3. 依赖管理</h4><p>通过模块的拆分实现了工程的规整性，而系统的依赖则通过 <code>dependencyManagement</code> 实现统一管理。</p><p>所谓统一依赖管理，核心即在于对依赖库的版本管理，目的是实现单一入口的版本管理，更通俗的讲即版本集中统一定义，一旦定义则全局生效。</p><h5 id="1-bom模块"><a href="#1-bom模块" class="headerlink" title="(1) bom模块"></a>(1) bom模块</h5><p>在 <code>Maven</code> 中规定俗成即 <code>bom</code> 模块通过 <code>dependencyManagement</code> 实现依赖库版本的统一管理。</p><p>在之前介绍 <code>Maven</code> 的文章中已经详细介绍了 <code>dependencyManagement</code> 的作用，即定义依赖版本作用域等信息，子模块通过继承或导入该 bom 模块后，使用依赖时通过 <code>groupId</code> 与 <code>artifactId</code> 标签即可。</p><p>详细的 <code>Maven</code> 使用教程可参考以往文章：<a href="https://great-jin.github.io/java/maven/basis/">史上最全Maven教程，没有之一</a>。</p><p>下述则是一个 <code>bom</code> 模块的定义示例，需要注意模块的 <code>packaging</code> 需设置为 <code>pom</code> 而非 <code>jar</code>，因其为依赖定义管理而不存在具体的依赖引用。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>xyz.ibudai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>blank-web-template<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>template-bom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commons-lang3.version</span><span class="token punctuation">></span></span>3.12.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commons-lang3.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${commons-lang3.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-parent模块"><a href="#2-parent模块" class="headerlink" title="(2) parent模块"></a>(2) parent模块</h5><p>完成 <code>bom</code> 模块的定义之后，则定义工程的父模块，核心即将上述定义的 bom 模块进行导入，而后其它子模块继承此 <code>parent</code> 模块即可读取 <code>bom</code> 中定义依赖版本信息。</p><p>值得一提的是 <code>bom</code> 模块的 <code>dependencyManagement</code> 不仅可通过下述示例的 <code>import</code> 方式导入，同时也可通过 <code>&lt;parent&gt;</code> 标签从而直接继承获取，只是在 <code>Spring Boot</code> 项目中通常 <code>parent</code> 习惯继承于 <code>springframework</code> 因此采用导入方式引入 <code>bom</code> 模块。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>xyz.ibudai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>template-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>xyz.ibudai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>template-bom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-业务模块"><a href="#3-业务模块" class="headerlink" title="(3) 业务模块"></a>(3) 业务模块</h5><p>针对其它拆分的子模块而言，只需继承上述定义的 <code>parent</code> 模块即可。</p><p>在继承定义的 <code>parent</code> 模块后同理会继承其 <code>dependencyManagement</code> 信息，因此在模块中引入依赖时仅需 <code>groupId</code> 与 <code>artifactId</code> 标签引用即可，无需额外指定版本信息其将会读取 <code>bom</code> 模块中的信息。</p><p>通过此种方式，即实现了工程依赖的统一管理，所有涉及的依赖库其版本与作用域等信息统一定义入口于 <code>bom</code> 模块，当需要进行版本升级等操作时，只需修改 <code>bom</code> 定义的信息即可全局生效。</p><p>需要注意的一点是此处 <code>&lt;parent&gt;</code> 中指定了 <code>&lt;relativePath&gt;</code> 是因为 <code>Maven</code> 默认的父模块寻址逻辑为当前模块的上一级，若不存在则读取仓库信息。在之前的图示中可以看到，子模块 <code>basic</code> 与 <code>logic</code> 等本应建于 <code>parent</code> 模块下，但为了结构统一将其创建于同级目录下，因此这里手动通过 relativePath 指定父模块配置路径。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>xyz.ibudai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>template-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">></span></span>../template-parent/pom.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>relativePath</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>template-logic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>示例项目</strong>：<a href="https://github.com/great-jin/blank-web-template/tree/dev-micro">GitHub直达</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如果说 &lt;code&gt;Spring Boot&lt;/code&gt; 解决了 &lt;code&gt;Java&lt;/code&gt; 工程师 &lt;code&gt;Web&lt;/code&gt; 开发的痛点，那 &lt;code&gt;Maven&lt;/code&gt; 则是当之无愧的 &lt;code&gt;Java&lt;/code&gt; 依赖管理大师。回顾没有 </summary>
      
    
    
    
    <category term="设计模式" scheme="https://great-jin.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
    <category term="Maven" scheme="https://great-jin.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Linux Shell 入门教程</title>
    <link href="https://great-jin.github.io/linux/shell/"/>
    <id>https://great-jin.github.io/linux/shell/</id>
    <published>2024-05-25T16:00:00.000Z</published>
    <updated>2025-05-11T12:39:13.024Z</updated>
    
    <content type="html"><![CDATA[<p><code>Linux Shell</code> 是 <code>Linux</code> 中提供的一种强大的脚本工具，通过编写脚本可实现一系列动作，本文将介绍 <code>Shell</code> 脚本的基本语法以及应用。</p><h3 id="一、基础命令"><a href="#一、基础命令" class="headerlink" title="一、基础命令"></a>一、基础命令</h3><h4 id="1-内容格式"><a href="#1-内容格式" class="headerlink" title="1. 内容格式"></a>1. 内容格式</h4><p><code>Shell</code> 脚本的定义相对简单，新建 <code>.sh</code> 文件并在文件中首行添加 <code>#!/bin/bash</code> 即可，文件中后续的内容一行即为一条命令，当执行文件时将会自顶向下开始执行命令。</p><pre class="line-numbers language-sh"><code class="language-sh">#!/bin/bashcontent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当完成脚本文件的定义之后，通过还需要为文件授权为可执行文件，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建脚本文件</span><span class="token function">touch</span> <span class="token operator">&lt;</span>filename<span class="token operator">></span>.sh<span class="token comment" spellcheck="true"># 授权文件为可执行</span><span class="token function">chmod</span> +x <span class="token operator">&lt;</span>filename<span class="token operator">></span>.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-打印输出"><a href="#2-打印输出" class="headerlink" title="2. 打印输出"></a>2. 打印输出</h4><p>在 <code>Linux</code> 中通过 <code>echo</code> 命令可执行内容的打印输出，默认其将直接输出到控制台，可以通过 <code>&gt;</code> 或 <code>&gt;&gt;</code> 将其保存至指定文件中。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 输出到控制台</span><span class="token keyword">echo</span> <span class="token string">"Hello World!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在使用 <code>&gt;</code> 或 <code>&gt;&gt;</code> 将其保存到文件时需要注意，前者将会覆盖文件中原有的数据内容，后 <code>&gt;&gt;</code> 则是继续将内容添加到文件末端。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 输出到文件，覆盖原内容</span><span class="token keyword">echo</span> <span class="token string">"Hello World!"</span> <span class="token operator">></span> info.log<span class="token comment" spellcheck="true"># 输出到文件，追加到文件末端</span><span class="token keyword">echo</span> <span class="token string">"Hello World!"</span> <span class="token operator">>></span> info.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-变量管理"><a href="#3-变量管理" class="headerlink" title="3. 变量管理"></a>3. 变量管理</h4><p><code>Shell</code> 中存在两种方式的变量定义获取方式，下面分开进行介绍。</p><h5 id="1"><a href="#1" class="headerlink" title="(1) ${}"></a>(1) ${}</h5><p>通过 <code>$&#123;&#125;</code> 即可读取已定义的变量信息，如下示例即通过 <code>$&#123;msg&#125;</code> 读取已经定义的 <code>msg</code> 变量。</p><pre class="line-numbers language-bash"><code class="language-bash">msg <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token keyword">echo</span> <span class="token variable">${msg}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同时也可以直接通过 <code>$</code> 读取变量，上述的读取也可替换为 <code>$msg</code> 但此方式不便于规范变量名从而造成歧义。</p><p>例如下述例子中，变量 <code>$msg</code> 输出即存在多种可能结果，既有可能为 <code>Hellog</code> 也有可能为 <code>World</code>。</p><pre class="line-numbers language-bash"><code class="language-bash">ms <span class="token operator">=</span> <span class="token string">"Hello"</span>msg <span class="token operator">=</span> <span class="token string">"World"</span><span class="token keyword">echo</span> <span class="token variable">$msg</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="2"><a href="#2" class="headerlink" title="(2) $()"></a>(2) $()</h5><p>通过 <code>$()</code> 获取命令执行的结果，如下述示例通过 <code>$(pwd)</code> 读取 <code>pwd</code> 命令的执行结果。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">pwd</span><span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-执行参数"><a href="#4-执行参数" class="headerlink" title="4. 执行参数"></a>4. 执行参数</h4><p>在 <code>Shell</code> 中通过 <code>$数字</code> 接收脚本执行时的参数。</p><p>例如在下述示例中 <code>$0</code> 即为 <code>test.sh</code>，而 <code>$1</code> 为 <code>params</code>。</p><pre class="line-numbers language-bash"><code class="language-bash">sh test.sh params<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="二、语法介绍"><a href="#二、语法介绍" class="headerlink" title="二、语法介绍"></a>二、语法介绍</h3><h4 id="1-IF条件"><a href="#1-IF条件" class="headerlink" title="1. IF条件"></a>1. IF条件</h4><p>在 <code>Shell</code> 脚本中，条件判断 <code>IF</code> 的基本语法格式如下，其中通过 <code>fi</code> 标记结束，需要注意的是 <code>if</code> 和 <code>[</code> 以及条件 <code>command</code> 执行相隔的空格不能缺省。</p><pre class="line-numbers language-sh"><code class="language-sh">if [ command ]; then    march_command_1else    march_command_2fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当存在多分支时，其语法格式如下，通过 <code>elif</code> 判断多分支。</p><pre class="line-numbers language-sh"><code class="language-sh">if [ command ]; then    march_command_1elif [ command ]; then    march_command_2else    march_command_3fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Switch"><a href="#2-Switch" class="headerlink" title="2. Switch"></a>2. Switch</h4><p><code>Shell</code> 脚本中的 <code>switch case</code> 语句规则如下：</p><blockquote><ul><li><code>case</code> 开头，以 <code>esac</code> 结尾；</li><li><code>;;</code> 作用等价于 <code>break</code>;</li><li><code>*</code> 等价于 <code>default</code>;</li><li><code>exit</code> 等价于 <code>return</code>;</li></ul></blockquote><p>下面通过一个具体的示例讲解：</p><pre class="line-numbers language-sh"><code class="language-sh">#!/bin/bashmethod_1() {    echo "Hello"}method_2() {    echo "World"}case "$1" in    p1)        method_1        ;;    p2)        method_2        ;;    *)        echo "default branch"        exit 1    ;;esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了更好的对比，将上述 <code>Shell</code> 逻辑转为 <code>Java</code> 代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span>String params<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">swtich</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">"p1"</span><span class="token operator">:</span>            <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"p2"</span><span class="token operator">:</span>            <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"default branch"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;Linux Shell&lt;/code&gt; 是 &lt;code&gt;Linux&lt;/code&gt; 中提供的一种强大的脚本工具，通过编写脚本可实现一系列动作，本文将介绍 &lt;code&gt;Shell&lt;/code&gt; 脚本的基本语法以及应用。&lt;/p&gt;
&lt;h3 id=&quot;一、基础命令&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="Linux运维" scheme="https://great-jin.github.io/categories/Linux%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Linux" scheme="https://great-jin.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Gitlab 服务部署教程</title>
    <link href="https://great-jin.github.io/app/install/gitlab/"/>
    <id>https://great-jin.github.io/app/install/gitlab/</id>
    <published>2024-05-17T16:00:00.000Z</published>
    <updated>2025-05-11T12:39:12.794Z</updated>
    
    <content type="html"><![CDATA[<p><code>Gitlab</code> 是一款广受好评的 <code>GIT</code> 项目管理平台，其中 <code>Gitlab-CE</code> 为免费版本，下面介绍如何通过 <code>Docker</code> 实现 <code>Gitlab</code> 服务部署。</p><h4 id="1-目录创建"><a href="#1-目录创建" class="headerlink" title="1. 目录创建"></a>1. 目录创建</h4><p>老规矩第一步还是先创建数据目录用于文件映射。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /usr/local/dockerdata/gitlab/config<span class="token function">mkdir</span> -p /usr/local/dockerdata/gitlab/data<span class="token function">mkdir</span> -p /usr/local/dockerdata/gitlab/logs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-服务启动"><a href="#2-服务启动" class="headerlink" title="2. 服务启动"></a>2. 服务启动</h4><p>完成目录创建后通过到下述命令启动 <code>Gitlab</code> 服务，其中端口映射服务可根据自身情况调整。</p><pre class="line-numbers language-bash"><code class="language-bash">docker run -d \--name gitlab \--restart always \--privileged<span class="token operator">=</span>true \-p 8080:80 \-p 8081:443 \-p 8082:22 \-v /etc/localtime:/etc/localtime:ro \-v /usr/local/dockerdata/gitlab/config:/etc/gitlab \-v /usr/local/dockerdata/gitlab/logs:/var/log/gitlab \-v /usr/local/dockerdata/gitlab/data:/var/opt/gitlab \gitlab/gitlab-ce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-配置修改"><a href="#3-配置修改" class="headerlink" title="3. 配置修改"></a>3. 配置修改</h4><p>启动容器后进入会 <code>Gitlab</code> 映射的文件目录中编辑配置信息。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">vi</span> /usr/local/dockerdata/gitlab/config/gitlab.rb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改文件中的下述内容，将 <code>192.168.0.20</code> 替换为你的服务器 <code>IP</code>。</p><p>完成后保存退出，并通过 <code>docker restart gitlab</code> 重启服务使其生效。</p><pre class="line-numbers language-txt"><code class="language-txt">external_url 'http://192.168.0.20'gitlab_rails['gitlab_ssh_host'] = '192.168.0.20'# 配置 22 端口映射的值gitlab_rails['gitlab_shell_ssh_port'] = 8082gitlab_rails['time_zone'] = 'Asia/Shanghai'  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-端口修改"><a href="#4-端口修改" class="headerlink" title="4. 端口修改"></a>4. 端口修改</h4><p>完成上述步骤后进入 <code>Gitlab</code> 容器内，配置服务对应的端口信息。</p><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it gitlab <span class="token function">bash</span><span class="token function">vi</span> /opt/gitlab/embedded/service/gitlab-rails/config/gitlab.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改配置文件的 <code>port</code> 值，将其改成之前启动容器时 <code>80</code> 端口映射的值。</p><p>完成后同样在容器中通过 <code>gitlab-ctl restart</code> 重启服务。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">production</span><span class="token punctuation">:</span> <span class="token important">&amp;base</span>  <span class="token key atrule">gitlab</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 替换为 80 端口映射的值</span>   <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-用户账号"><a href="#5-用户账号" class="headerlink" title="5. 用户账号"></a>5. 用户账号</h4><p>完成上述配置之后即可浏览器访问 <code>IP:8080</code>，默认用户名为 <code>root</code>，密码通过下述命令查看：</p><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it <span class="token operator">&lt;</span>container_id<span class="token operator">></span> <span class="token function">grep</span> <span class="token string">'Password:'</span> /etc/gitlab/initial_root_password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;Gitlab&lt;/code&gt; 是一款广受好评的 &lt;code&gt;GIT&lt;/code&gt; 项目管理平台，其中 &lt;code&gt;Gitlab-CE&lt;/code&gt; 为免费版本，下面介绍如何通过 &lt;code&gt;Docker&lt;/code&gt; 实现 &lt;code&gt;Gitlab&lt;/code&gt; </summary>
      
    
    
    
    <category term="应用部署" scheme="https://great-jin.github.io/categories/%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/"/>
    
    
    <category term="Linux" scheme="https://great-jin.github.io/tags/Linux/"/>
    
  </entry>
  
</feed>

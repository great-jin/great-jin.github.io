<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>布袋青年</title>
  
  <subtitle>布袋青年</subtitle>
  <link href="https://great-jin.github.io/atom.xml" rel="self"/>
  
  <link href="https://great-jin.github.io/"/>
  <updated>2024-08-11T08:29:45.026Z</updated>
  <id>https://great-jin.github.io/</id>
  
  <author>
    <name>烽火戏诸诸诸侯</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>遭了，屎山竟是我自己</title>
    <link href="https://great-jin.github.io/java/tool/visualvm/"/>
    <id>https://great-jin.github.io/java/tool/visualvm/</id>
    <published>2024-08-08T16:00:00.000Z</published>
    <updated>2024-08-11T08:29:45.026Z</updated>
    
    <content type="html"><![CDATA[<p>事情是这样的，在不久之前我不是分享了一篇文章说我写了端口检测关闭的 <code>GUI</code> 工具，如果你还没看过可以去瞧一眼：<a href="https://great-jin.github.io/windows/software/process/">我写了一个程序，让端口占用无路可逃</a>。</p><p>一切本都平平无奇，直到今天在使用时在任务管理器瞄了一眼，好家伙内存占用怎么有百来兆。<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/1.png"></p><p>不知道你第一眼看到这个内存是作何反应，反正我是挺惊讶的，按我理解 <code>10MB</code> 就已经不得了了，这直接王炸翻了个量级。</p><p>作为一个遥遥领先的 <code>Javer</code>，对于内存爆炸早已见怪不怪，没有什么是加条内存不能解决的，如果不能那就再加一条。但这时候没有甲方，机子的一分一毛全靠自己，况且这稀碎的内存表现怎么让我好意思分享。</p><blockquote><p>今天，我还就一定要把它底裤都都扒光。</p></blockquote><p>首先，当然还是需要确定这么大的内存到底耗费在了哪个地方？一开始，由于程序是通过 <code>exe4j</code> 工具将 <code>Jar</code> 打包为 <code>exe</code> 执行程序，我最先怀疑的就是是不是哪里配置我缺失了导致内存狂飙。</p><p>验证方式也相当简单，分别通过 <code>Jar</code> 以及 <code>Exe</code> 两种方式分别运行，但最后发现的两种方式的内存占用都在 <code>100MB</code> 上下波动，那说明问题的根源还是在程序本身。</p><p>这就让人蛋疼了，程序中并没有涉及到复杂的对象操作，主线流程可谓简洁明了：启动 <code>Swing</code> 窗口后填充表格数据，若硬要扯那就只有表格的数据对象。</p><h4 id="1-工具排查"><a href="#1-工具排查" class="headerlink" title="1. 工具排查"></a>1. 工具排查</h4><p>没办法，只能祭出 <code>JDK</code> 自带神器 <code>VisualVM</code> 了，其提供了针对 <code>Java</code> 运行程序的可视化 <code>JVM</code> 监控能力，可谓是让人每用一次都能大喊一声卧槽的存在。</p><p>在 <code>Windows</code> 中完成 <code>JDK 8</code> 安装后其程序默认路径为 <code>C:\Program Files\Java\jdk1.8.0_202\bin</code> 下的 <code>jvisualvm.exe</code>，双击即可运行。而在 <code>JDK 11</code> 后续版本中其已经剥离出来了，需要自行安装，别担心，下载链接已经给你准备好了：<a href="https://visualvm.github.io/download.html">官网直达</a>。</p><p>打开后在左侧树选中运行的 <code>Java</code> 应用并选中监视，即可看到下图所示内容：<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/2.png"></p><p>仔细看第二个图，可以看到项目一运行默认的内存初始大小为 <code>500MB</code>，已使用的为 <code>50MB</code> 左右。<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/3.png"></p><p>那这个 <code>500MB</code> 又是根据依据来的？我们都知道可以通过 <code>-Xms</code> 和 <code>-Xmx</code> 限制堆的大小，但在未手动指定的前提下，<code>JVM</code> 同样会为其设置一个默认值，这个默认值取值如下：</p><ul><li><strong>最小值</strong>：通常是物理内存大小的 <code>1/64</code>，但不超过 <code>1GB</code>，可通过 <code>-Xms</code> 参数修改。</li><li><strong>最大值</strong>：通常是物理内存大小的 <code>1/4</code>，但不超过 <code>32GB</code>，可通过 <code>-Xmx</code> 参数修改。</li></ul><p>我的电脑内存是 <code>32G</code>，那 <code>1/64</code> 和 <code>1/4</code> 就刚好是 <code>500MB</code> 和 <code>8G</code>，也就跟上图的中的数据对上了。</p><p>但问题又来了，<code>JVM</code> 只是为程序设定的初始的内存为 <code>500MB</code>，并不代表程序一开始就会全部用到，图中的信息显示内存占用了 <code>50MB</code>，但这个数据显然也并不合理。</p><h4 id="2-对象大小"><a href="#2-对象大小" class="headerlink" title="2. 对象大小"></a>2. 对象大小</h4><p>那是由于程序中存在大对象导致的吗？直觉告诉我也不太可能，但还是通过证据说话。</p><p>程序中涉及到数据对象的主要在于存储执行端口进程查询后返回的集合对象，那就先测一下这个对象到底能有多大？</p><p>这里同样推荐一个工具库 <code>JOL</code>，同样是有 <code>JDK</code> 原班人马开发，可以便捷的查看一个对象的内存占用。</p><p>使用方式也十分简单，在 <code>Maven</code> 的 <code>pom.xml</code> 文件中引入插入依赖：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.openjdk.jol<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jol-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引入依赖后即可直接调用 GraphLayout 类打印对象的占用信息，如下述定义了一个 1024 的字节数组并打印其占用信息：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        String usage <span class="token operator">=</span> GraphLayout<span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFootprint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>usage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序后可以看到下图内容，其中 <code>1040</code> 即 <code>data</code> 对象的内存占用大小，单位为字节。你可能会疑惑为什么不是 <code>1024</code> 而是 <code>1040</code>，那是因为 <code>1024</code> 是真正的数据内容大小，但 <code>data</code> 还包含一些基础的对象属性等信息。<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/4.png"></p><p>在程序里所涉及的两个数据对象分别为如下，同样通过 <code>JOL</code> 打印输出内存占用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProcessTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// [进程名与内存占用]</span>        List<span class="token operator">&lt;</span>ServiceDetail<span class="token operator">></span> serviceDetail <span class="token operator">=</span> ProcessUtils<span class="token punctuation">.</span><span class="token function">getServiceDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object count1 <span class="token operator">=</span> GraphLayout<span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>serviceDetail<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFootprint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Count-1: "</span> <span class="token operator">+</span> count1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// [进程端口等信息]</span>        List<span class="token operator">&lt;</span>ProcessDetail<span class="token operator">></span> taskDetail <span class="token operator">=</span> ProcessUtils<span class="token punctuation">.</span><span class="token function">getTaskDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object count2 <span class="token operator">=</span> GraphLayout<span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>taskDetail<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFootprint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Count-2: "</span> <span class="token operator">+</span> count2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序可以看到打印的结果分别为 <code>59760</code> 与 <code>131280</code> 字节，也就是 <code>0.05MB</code> 与 <code>0.12MB</code> 左右，加起来甚至不到 <code>1MB</code>，也跟我之前的直觉相符，内存占用显然也不是在这。<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/5.png"></p><h4 id="3-内存分析"><a href="#3-内存分析" class="headerlink" title="3. 内存分析"></a>3. 内存分析</h4><p>既然看不出个所以然来，那就直接看下程序的内存堆信息这个百来兆到底存了个啥玩意。</p><p>在之前博客中已经分享过通过 <code>jmap</code> 可以查看程序的内存快照信息，可以快速回顾下：<a href="https://great-jin.github.io/java/advance/optimize/">JVM参数调优记录</a>。在命令行执行 <code>jmap -heap &lt;pid&gt;</code> 可以得到下图结果：<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/6.png"></p><p>让我们拆开进行分析，在第一块信息中展示了程序的内存堆基本信息，其中包含以往介绍过的最大内存 <code>(MaxHeapSize)</code>、元空间 <code>(MetaspaceSize)</code> 以及指针压缩空间 <code>(CompressedClassSpaceSize)</code> 等等。</p><p>你可能会疑惑 <code>NewSize</code> 与 <code>OldSize</code> 这两又是啥东西？在之前介绍 <code>JVM</code> 的文章中有提到过，<code>Java 8</code> 默认使用 <code>Parallel</code> 垃圾收集器，而其又是基于标记复制模式，更具体的即其是使用 <code>Appeal</code> 模式执行内存回收。简单的讲就是将堆内存拆分为了两个部分，青年代及老年代，二者的比例为 <code>1:2</code>，感兴趣的可以回去看下之前的文章：<a href="https://great-jin.github.io/java/advance/jvm/">Java JVM虚拟机详解</a>。</p><p>而之前提到了 <code>JVM</code> 为程序默认分配的初始堆内存大小为 <code>500MB</code>，根据 <code>Appeal</code> 方式的分配比例则青年代及老年代的内存分配大致为：<code>170MB</code> 与 <code>340MB</code>，正好对应了图中的 <code>NewSize</code> 与 <code>OldSize</code>。</p><p>上图中的第二及第三部分，则对应这 <code>Appeal</code> 方式对于堆内存的具体分配，配置逻辑参考下图：<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/8.png"></p><p>观察图中的数据可以看到对象基本都处于青年代的 <code>Eden</code> 分区，大小为 <code>39MB</code>，而对于青年代的另两个分区 <code>From Space</code> 与 <code>To Space</code> 占用率均为 <code>0</code>，同时老年代也仅有 <code>3MB</code> 左右的对象内存占用。</p><p>这也看出一个问题，有大量的对象堆积于青年代没有被垃圾回收及时清理，根据之前的 <code>JOL</code> 验证结果，显然程序中涉及了其它对象。<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/9.png"></p><p>那既然在刚才 <code>JOL</code> 排查中可以看到数据对象的内存占用并不大，那青年代中的几十兆内存又是被什么对象占用呢？通过 <code>jmap -histo &lt;pid&gt;</code> 命令，则可以看到进程对象数据量与内存占用。</p><p>返回结果的各列描述信息如下：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">列名</td>        <th style="text-align: center;">描述</td>    </tr>    <tr>        <td style="text-align: center;">num</td>        <td style="text-align: center;">序号，根据内存占用倒排。</td>    </tr>    <tr>        <td style="text-align: center;">#instances</td>        <td style="text-align: center;">实例对象数量。</td>    </tr>    <tr>        <td style="text-align: center;">#bytes</td>        <td style="text-align: center;">所有实例对象所占的内存。</td>    </tr>    <tr>        <td style="text-align: center;">class name</td>        <td style="text-align: center;">实例对象对应的类名。</td>    </tr></table><p>执行后在下图可以看到，其中内存占用最大的前三项为 <code>[I</code>，<code>[B</code> 与 <code>[C</code>，分别代表 <code>int[]</code>，<code>byte[]</code> 与 <code>char[]</code>，其中 <code>int</code> 数据占用最多达到近 <code>30MB</code>。<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/10.png"></p><h4 id="4-参数调优"><a href="#4-参数调优" class="headerlink" title="4. 参数调优"></a>4. 参数调优</h4><p>经过一顿猛如虎的操作，一看结果还是没能定位到根本原因。</p><p>我们就换个思路来看，以内存占用为切入点，既然青年代存留大量的对象实例没能被垃圾回收，那我就逼你执行触发回收动作。</p><p>最简单粗暴，启动程序时直接将 <code>JVM</code> 虚拟机内存限制到 <code>50MB</code> 先看下效果，在启动时添加下述参数：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 设置 JVM 堆内存最小值为 50m</span>-Xms50m<span class="token comment" spellcheck="true"># 设置 JVM 堆内存最大值为 50m</span>-Xmx50m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序后再次通过 <code>jmap</code> 查看内存布局情况，可以看到此时青年代的 <code>From Space</code> 大小为 <code>2MB</code> 且处于满状态，老年代的占用比例也有所提升，这说明 <code>Young GC</code> 的次数相较于上次也是有所提升。<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/11.png"></p><p>显然上述的配置是有所效果的，我们目的是以一个合理的频次触发 <code>Young GC</code> 以回收内存，同时降低 <code>Full GC</code> 的次数，那如何验证效果呢？</p><p>我们可以同 <code>jstat -gcutil</code> 命令打印进程 <code>GC</code> 的相关信息，以下述为例每间隔 <code>5s</code> 执行一次打印输出。<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/12.png"></p><p>在上图可以看到最开始进程执行过的 <code>YGC</code> 次数为 <code>8</code>，此时在程序页面选中查询模拟操作可以看到 <code>YGC</code> 的次数在逐次增加，但 <code>FGC</code> 还是保持在 <code>0</code>，而程序只要不频繁的触及 <code>FGC</code>，都是在我们的可接收范围之内。</p><p>那如何判断堆内存的设置是否合理呢？很简单，就是一个个试，将上面的参数设置为 <code>30MB</code> 后我们再以同样的方式进行观察。</p><p>将 <code>GC</code> 活动日志打印调整为 <code>1s</code> 并在程序随机选择查询模拟操作，得到下述结果：<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/13.png"></p><p>此时我们再看一眼堆内存的分布，重复几次可以看到随着 <code>YGC</code> 的执行，老年代的占用比例维持在 <code>30%</code> 左右，不至于太低也不至于太高从而触发 <code>FGC</code>。</p><p>当然，你可以重复上述步骤直至试了一个你觉得最佳的临界点，这里我就不啰嗦展开了。</p><p>至此，整个问题的排查也告一段落了，终于又可以安心的网上冲浪了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;事情是这样的，在不久之前我不是分享了一篇文章说我写了端口检测关闭的 &lt;code&gt;GUI&lt;/code&gt; 工具，如果你还没看过可以去瞧一眼：&lt;a href=&quot;https://great-jin.github.io/windows/software/process/&quot;&gt;我写了一个</summary>
      
    
    
    
    <category term="JAVA进阶" scheme="https://great-jin.github.io/categories/JAVA%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Jar 打包 Exe 程序教程</title>
    <link href="https://great-jin.github.io/windows/develop/exe4j/"/>
    <id>https://great-jin.github.io/windows/develop/exe4j/</id>
    <published>2024-08-03T16:00:00.000Z</published>
    <updated>2024-08-04T05:41:48.114Z</updated>
    
    <content type="html"><![CDATA[<p><code>Exe4j</code> 是一款能够快速实现将 <code>Jar</code> 文件打包为 <code>Windows</code> 下可执行的 <code>exe</code> 程序，省去一系列非必要麻烦。</p><p>在开始之前先下载对应的工具，其提供了解压即用的便捷版本，<a href="https://www.ej-technologies.com/download/exe4j/files">官网直达</a>。</p><h4 id="1-基本配置"><a href="#1-基本配置" class="headerlink" title="1. 基本配置"></a>1. 基本配置</h4><p>下载完成后解压文件并启动，打开后展示下图内容，选择下一步。<br><img src="/album/loading.gif" data-original="/album/article/win/exe4j/1.png"></p><p>选择 <code>JAR</code> 模式执行文件打包，完成后选择下一步。<br><img src="/album/loading.gif" data-original="/album/article/win/exe4j/2.png"></p><p>输入最后的程序名以及文件输出路径，完成后选择下一步。<br><img src="/album/loading.gif" data-original="/album/article/win/exe4j/3.png"></p><p>输入文件执行名称，可与上一步一致，完成后选择下一步。<br><img src="/album/loading.gif" data-original="/album/article/win/exe4j/4.png"></p><h4 id="2-文件配置"><a href="#2-文件配置" class="headerlink" title="2. 文件配置"></a>2. 文件配置</h4><p>按下图指示选择需要打包为 <code>exe</code> 的 <code>Jar</code> 运行文件。<br><img src="/album/loading.gif" data-original="/album/article/win/exe4j/5.png"><br><img src="/album/loading.gif" data-original="/album/article/win/exe4j/6.png"></p><p>选择 <code>Jar</code> 文件后还需要指定 <code>Jar</code> 包的主类，完成后选择下一步。<br><img src="/album/loading.gif" data-original="/album/article/win/exe4j/7.png"></p><p>在此页面配置程序所需的 <code>JDK</code> 版本最低以及最高要求，完成后选择下一步。<br><img src="/album/loading.gif" data-original="/album/article/win/exe4j/8.png"></p><h4 id="3-程序打包"><a href="#3-程序打包" class="headerlink" title="3. 程序打包"></a>3. 程序打包</h4><p>完成上述配置后一路选择下一步到最后提示完成即可。<br><img src="/album/loading.gif" data-original="/album/article/win/exe4j/9.png"><br><img src="/album/loading.gif" data-original="/album/article/win/exe4j/10.png"></p><p>最后提示下图信息即代表程序已经打包成功了。<br><img src="/album/loading.gif" data-original="/album/article/win/exe4j/11.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;Exe4j&lt;/code&gt; 是一款能够快速实现将 &lt;code&gt;Jar&lt;/code&gt; 文件打包为 &lt;code&gt;Windows&lt;/code&gt; 下可执行的 &lt;code&gt;exe&lt;/code&gt; 程序，省去一系列非必要麻烦。&lt;/p&gt;
&lt;p&gt;在开始之前先下载对应的工具，其提供了</summary>
      
    
    
    
    <category term="软件应用" scheme="https://great-jin.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BA%94%E7%94%A8/"/>
    
    
    <category term="Windows" scheme="https://great-jin.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Git 合并进阶教程</title>
    <link href="https://great-jin.github.io/git/advance/"/>
    <id>https://great-jin.github.io/git/advance/</id>
    <published>2024-07-30T16:00:00.000Z</published>
    <updated>2024-07-31T14:11:20.498Z</updated>
    
    <content type="html"><![CDATA[<p>在 <code>Git</code> 代码合并中 <code>rebase</code> 与 <code>merge</code> 都是十分常用的方式，本文将通过具体场景讲解二者有哪些区别。</p><h3 id="一、Rebase"><a href="#一、Rebase" class="headerlink" title="一、Rebase"></a>一、Rebase</h3><h4 id="1-需求场景"><a href="#1-需求场景" class="headerlink" title="1. 需求场景"></a>1. 需求场景</h4><p>假设存在下述开发场景：</p><ul><li>在 <code>master</code> 分支开发提交 <code>work-1</code>;</li><li>接收到新需求，从 <code>master</code> 切分支到 <code>dev</code> 并提交 <code>work-2</code>；</li><li>原功能变更，回到 <code>master</code> 提交 <code>work-1.1</code>;</li><li>回到 <code>dev</code> 继续开发；</li></ul><p>经过上述的步骤操作之后，工程的 <code>git</code> 提交日志如下，分支 <code>dev</code> 为另一条分叉。<br><img src="/album/loading.gif" data-original="/album/article/git/merge/1.png"></p><h4 id="2-分支合并"><a href="#2-分支合并" class="headerlink" title="2. 分支合并"></a>2. 分支合并</h4><p>在上述的流程中可以看到，<code>master</code> 分支的与 <code>dev</code> 发生了内容异步。因此若继续在 <code>dev</code> 上进行开发需要先将 <code>master</code> 内容同步到 dev 分支。</p><p>先以 <code>rebase</code> 方式为例，继续上面的场景，在切换至 <code>dev</code> 后按下图选择：<br><img src="/album/loading.gif" data-original="/album/article/git/merge/2.png"></p><p>此时若两个分支修改了同一内容将会提示冲突需要进行手动处理，完成后选择 <code>Apply</code>。<br><img src="/album/loading.gif" data-original="/album/article/git/merge/3.png"></p><p>再次查看 <code>git</code> 记录可以看到刚才分叉的分支现在已经合并为一条线性的流程。<br><img src="/album/loading.gif" data-original="/album/article/git/merge/4.png"></p><p>这时候同样的我们需要 <code>dev</code> 分支的内容合并回 <code>master</code>，且由于刚才已经解决完冲突问题，这时候就可以选择切换到 <code>master</code> 分支选择将 <code>dev</code> 分支 <code>merge</code> 过来。<br><img src="/album/loading.gif" data-original="/album/article/git/merge/5.png"></p><p>完成后 <code>master</code> 和 <code>dev</code> 此时都实现了内容的同步，这便是一个相对将为完善的协同流程。</p><h3 id="二、Merge"><a href="#二、Merge" class="headerlink" title="二、Merge"></a>二、Merge</h3><h4 id="1-分支合并"><a href="#1-分支合并" class="headerlink" title="1. 分支合并"></a>1. 分支合并</h4><p><code>Rebase</code> 与 <code>Merge</code> 二者都能实现分支的合并，那二者的区别在哪呢？</p><p>还是以上述的场景为例，按照同样的步骤得到下述结果。<br><img src="/album/loading.gif" data-original="/album/article/git/merge/1.png"></p><p>回到 <code>dev</code> 分支，但这时候我们不选择 <code>rebase</code>，而是按下图选择将 <code>master</code> 合并到 <code>dev</code>:<br><img src="/album/loading.gif" data-original="/album/article/git/merge/6.png"></p><p>完成后查看 <code>git</code> 提交日志可以看到与 <code>rebase</code> 不同的是其保留了图中紫色的分支提交记录，生成了一个新的节点拼接于两个分支之后。<br><img src="/album/loading.gif" data-original="/album/article/git/merge/7.png"></p><h4 id="2-差异分析"><a href="#2-差异分析" class="headerlink" title="2. 差异分析"></a>2. 差异分析</h4><p>那么这又有什么弊端呢？显然易见，当多人协议时重复上述步骤，那 <code>git</code> 提交记录就会像怀孕一样向右突出多条分支记录。</p><p>这里仅以三个需求分支为例，执行刚才的提交步骤得到下图结果：<br><img src="/album/loading.gif" data-original="/album/article/git/merge/8.png"></p><p>分别将 <code>master</code> 分支 <code>merge</code> 到对应的需求分支，再次查看 <code>git</code> 记录可以看到此时的分叉已经就不是很美观了。<br><img src="/album/loading.gif" data-original="/album/article/git/merge/9.png"></p><p>那如果选择的是通过 <code>rebase</code> 执行上步操作呢？可以看到此时的 <code>git</code> 记录明显更为简洁。<br><img src="/album/loading.gif" data-original="/album/article/git/merge/10.png"></p><p>因此在实际开发中，通过首次选择 <code>rebase</code> 将公共分支合并到本地分支解决冲突，完成后通过 <code>merge</code> 再将本地分支合并到公共分支，由于此时冲突已经解决完毕因此可以直接进行合并，同时 <code>git</code> 日志也更为简洁。</p><h4 id="3-提交合并"><a href="#3-提交合并" class="headerlink" title="3. 提交合并"></a>3. 提交合并</h4><p>在 <code>git</code> 中另涉及的一个较为实用的即 <code>Squash</code>，在一个需求分支开发中，通常会涉及到多次提交例如下图：<br><img src="/album/loading.gif" data-original="/album/article/git/merge/11.png"></p><p>但在发起合并请求时这些提交同属于一个需求，我希望将其合并为单个 <code>commit</code> 再发起合并请求，此时即可选择 <code>Squash</code>。</p><p>在 IDEA 的 git 记录中选择需要本地分支中需要合并的 <code>commit</code>，并选择 <code>Squash commit</code>。<br><img src="/album/loading.gif" data-original="/album/article/git/merge/12.png"></p><p>此时会提示你为合并后的 <code>commit</code> 重新设置提交信息。<br><img src="/album/loading.gif" data-original="/album/article/git/merge/13.png"></p><p>完成后即可看到刚才的三个提交记录此时已经合并为单个，这时候再发起合并请求则只会有单个的 <code>commit</code> 记录。<br><img src="/album/loading.gif" data-original="/album/article/git/merge/14.png"></p><h3 id="三、总结介绍"><a href="#三、总结介绍" class="headerlink" title="三、总结介绍"></a>三、总结介绍</h3><h4 id="1-Merge"><a href="#1-Merge" class="headerlink" title="1. Merge"></a>1. Merge</h4><p>在 <code>merge</code> 合并中，会先找到两个分支的首个岔路点（黄色），再找到两个分支的最新节点（红色），将这个两个节点合并生成一个新提交（率色），同时保留原有的分支结构。<br><img src="/album/loading.gif" data-original="/album/article/git/merge/15.png"></p><h4 id="2-Rebase"><a href="#2-Rebase" class="headerlink" title="2. Rebase"></a>2. Rebase</h4><p>在 <code>rebase</code> 中，当合并时同样是先找到首个岔路点，但之后不同与 <code>merge</code> 的为其是执行拼接动作。</p><p>以刚才的示例而言，在 <code>dev</code> 中选择 <code>rebase master onto dev</code>，即将当前 <code>dev</code> 分支内容拼接到 <code>master</code> 的最新提交之后。<br><img src="/album/loading.gif" data-original="/album/article/git/merge/16.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 &lt;code&gt;Git&lt;/code&gt; 代码合并中 &lt;code&gt;rebase&lt;/code&gt; 与 &lt;code&gt;merge&lt;/code&gt; 都是十分常用的方式，本文将通过具体场景讲解二者有哪些区别。&lt;/p&gt;
&lt;h3 id=&quot;一、Rebase&quot;&gt;&lt;a href=&quot;#一、Rebase&quot;</summary>
      
    
    
    
    <category term="开发工具" scheme="https://great-jin.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Git" scheme="https://great-jin.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>工程接口导出教程</title>
    <link href="https://great-jin.github.io/app/idea/plugin/easy-yapi/"/>
    <id>https://great-jin.github.io/app/idea/plugin/easy-yapi/</id>
    <published>2024-07-26T16:00:00.000Z</published>
    <updated>2024-07-27T07:52:52.727Z</updated>
    
    <content type="html"><![CDATA[<p>在后端开发中，对于接口测试 <code>Postman</code> 是当下较为流行的接口工具，但对于大新工程而言，逐个手动输入接口信息显然过于繁杂。因此，本文将介绍如何利用插件将工程接口批量导出至 <code>Postman</code>。</p><h4 id="1-认证信息"><a href="#1-认证信息" class="headerlink" title="1. 认证信息"></a>1. 认证信息</h4><p>在开始之前需要在 <code>Postman</code> 官网中生成账号对应的 <code>Token</code> 用于后续接口导入，<a href="https://postman.xiniushu.com/docs/developer/postman-api/authentication">官方文档</a>。</p><p>进入官网登录后按下图提示选择生成 <code>Key</code>，需要注意生成的 <code>Key</code> 仅展示一次，注意保存好。<br><img src="/album/loading.gif" data-original="/album/article/idea/easyyapi/2.png"></p><p>另一个需要注意的是 <code>Postman</code> 以 <code>Team</code> 区分工作空间，即同个账号下不同 <code>Team</code> 对应的 <code>Key</code> 并不是相通的，在生成 <code>Key</code> 之前可以在右上角切换 <code>Team</code>。<br><img src="/album/loading.gif" data-original="/album/article/idea/easyyapi/4.png"></p><h4 id="2-插件配置"><a href="#2-插件配置" class="headerlink" title="2. 插件配置"></a>2. 插件配置</h4><p>在 <code>IDEA</code> 插件市场下载 <code>EasyYapi</code> 插件。<br><img src="/album/loading.gif" data-original="/album/article/idea/easyyapi/1.png"></p><p>下载完成后在 <code>IDEA</code> 设置的 <code>Other Settings</code> 里找到 <code>EasyApi</code> 并将第一步生成的 <code>Key</code> 填入。<br><img src="/album/loading.gif" data-original="/album/article/idea/easyyapi/5.png"></p><h4 id="3-接口导出"><a href="#3-接口导出" class="headerlink" title="3. 接口导出"></a>3. 接口导出</h4><p>完成上述配置后即可进行接口的导出工作了，以下述接口为例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestResource</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"demo1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 测试接口     */</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"demo2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>IDEA</code> 中右击工程选择 <code>EasyApi</code> 并导出至 <code>Postman</code>。<br><img src="/album/loading.gif" data-original="/album/article/idea/easyyapi/6.png"></p><p>选择后将会提示导出到那个工作空间，<code>My Workspace</code> 即本地仅自己可见，而 <code>Team Workspace</code> 顾名思义即团队成员都可见。<br><img src="/album/loading.gif" data-original="/album/article/idea/easyyapi/7.png"></p><p>完成后重新打开 <code>Postman</code> 即可看到此时接口已经被导入了，以上述的接口代码为例，若接口不存在注释则以接口方法名为名字，否则取注解名。<br><img src="/album/loading.gif" data-original="/album/article/idea/easyyapi/8.png"></p><h4 id="4-变量配置"><a href="#4-变量配置" class="headerlink" title="4. 变量配置"></a>4. 变量配置</h4><p>查看导入口的接口可以看到接口地址中是以 <code>&#123;&#123;xxx&#125;&#125;</code> 为占位符，占位符名称为工程的模块名。<br><img src="/album/loading.gif" data-original="/album/article/idea/easyyapi/9.png"></p><p>因此，我们需要手动添加环境变量，按照下图提示进行添加。<br><img src="/album/loading.gif" data-original="/album/article/idea/easyyapi/10.png"></p><h4 id="5-请求认证"><a href="#5-请求认证" class="headerlink" title="5. 请求认证"></a>5. 请求认证</h4><p>通过工程的接口都带有认证信息，在上述导入的接口中可以看到接口默认的认证信息都是继承于父级。<br><img src="/album/loading.gif" data-original="/album/article/idea/easyyapi/11.png"></p><p>因此，我们只需要在父级设置认证信息后，模块下所有接口即可全局生效。<br><img src="/album/loading.gif" data-original="/album/article/idea/easyyapi/12.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在后端开发中，对于接口测试 &lt;code&gt;Postman&lt;/code&gt; 是当下较为流行的接口工具，但对于大新工程而言，逐个手动输入接口信息显然过于繁杂。因此，本文将介绍如何利用插件将工程接口批量导出至 &lt;code&gt;Postman&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&quot;1-认</summary>
      
    
    
    
    <category term="IDEA" scheme="https://great-jin.github.io/categories/IDEA/"/>
    
    
    <category term="IDEA" scheme="https://great-jin.github.io/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>MySQL执行计划详解</title>
    <link href="https://great-jin.github.io/db/mysql/explain/"/>
    <id>https://great-jin.github.io/db/mysql/explain/</id>
    <published>2024-07-20T16:00:00.000Z</published>
    <updated>2024-07-21T08:06:14.741Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、执行计划"><a href="#一、执行计划" class="headerlink" title="一、执行计划"></a>一、执行计划</h3><h4 id="1-基础介绍"><a href="#1-基础介绍" class="headerlink" title="1. 基础介绍"></a>1. 基础介绍</h4><p>执行计划可谓是每个数据库中十分重要的一环，故名思意即通过执行计划可以了解 <code>SQL</code> 脚本对应的执行信息。</p><p>在排查慢 <code>SQL</code> 时更尤为重要，通过执行计划可以查看到语句的执行顺序，是否使用索引等等信息，帮助我们更好的优化语句脚本。</p><h4 id="2-数据测试"><a href="#2-数据测试" class="headerlink" title="2. 数据测试"></a>2. 数据测试</h4><p>在开始之前先准备两张测试表，结构相对简单对应的脚本语句如下，另一测试表 <code>tb_02</code> 表结构与其相同。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>tb_01<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>Column1<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>Column2<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>Column3<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>Column4<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>Column1<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-使用方式"><a href="#3-使用方式" class="headerlink" title="3. 使用方式"></a>3. 使用方式</h4><p>执行计划的使用方式十分简单，只需要在对应的语句前添加 <code>explain</code> 关键字执行即可，执行结果将返回语句执行的详细信息。<br><img src="/album/loading.gif" data-original="/album/article/db/mysql/explain/1.png"></p><p>上图执行结果中字段的描述信息参考下表，后面会详细介绍。</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">字段</td>        <th style="text-align: center;">描述</td>    </tr>    <tr>        <td style="text-align: center;">id</td>        <td style="text-align: center;">选择标识符。</td>    </tr>    <tr>        <td style="text-align: center;">select_type</td>        <td style="text-align: center;">表示查询的类型</td>    </tr>    <tr>        <td style="text-align: center;">table</td>        <td style="text-align: center;">输出结果集的表，若定义了别名则展示别名。</td>    </tr>    <tr>        <td style="text-align: center;">partitions</td>        <td style="text-align: center;">执行匹配的分区。</td>    </tr>    <tr>        <td style="text-align: center;">type</td>        <td style="text-align: center;">表示表的连接类型</td>    </tr>    <tr>        <td style="text-align: center;">possible_keys</td>        <td style="text-align: center;">表示查询时，可能使用的索引。</td>    </tr>    <tr>        <td style="text-align: center;">key</td>        <td style="text-align: center;">表示实际使用的索引。</td>    </tr>    <tr>        <td style="text-align: center;">key_len</td>        <td style="text-align: center;">索引字段的长度。</td>    </tr>    <tr>        <td style="text-align: center;">ref</td>        <td style="text-align: center;">列与索引的比较。</td>    </tr>    <tr>        <td style="text-align: center;">rows</td>        <td style="text-align: center;">扫描出的行数(估算的行数)。</td>    </tr>    <tr>        <td style="text-align: center;">filtered</td>        <td style="text-align: center;">按表条件过滤的行百分比。</td>    </tr>    <tr>        <td style="text-align: center;">Extra</td>        <td style="text-align: center;">执行情况的描述和说明。</td>    </tr></table><h3 id="二、属性解读"><a href="#二、属性解读" class="headerlink" title="二、属性解读"></a>二、属性解读</h3><p>在上面的表格中可以看到执行结果所返回的属性并不少，下面挑选几个比较重要的属性进行介绍。</p><h4 id="1-ID"><a href="#1-ID" class="headerlink" title="1. ID"></a>1. ID</h4><p><code>ID</code> 属性返回的值是一个由 <code>1</code> 开始递增的数据，用于标识查询时每张表的查询顺序，当都为 <code>1</code> 时则执行顺序为依次向下。</p><p>例如下述示例中执行连表查询，返回结果中两张表对应的 <code>ID</code> 均为 <code>1</code>，则二者的执行顺序从上执行即 <code>t1</code> 先于 <code>t2</code>。<br><img src="/album/loading.gif" data-original="/album/article/db/mysql/explain/2.png"></p><p>可以看出对于 <code>ID</code> 相同的查询属于归属同一分组，执行优先级自上而下，而当涉及到子查询等操作时，子查询的优先级更高相对的 <code>ID</code> 值也越大。如下图中子查询 <code>tb_02</code> 对应的 <code>ID</code> 为 <code>2</code>，表明其执行优先级高于 <code>tb_01</code>。<br><img src="/album/loading.gif" data-original="/album/article/db/mysql/explain/3.png"></p><h4 id="2-Type"><a href="#2-Type" class="headerlink" title="2. Type"></a>2. Type</h4><p><code>Type</code> 属性是执行计划中十分重要的一项指标，也是我们判断一条语句是否高效的一大依据。其表示连接类型，常见的类型如下，性能从上至下越来越高，一般好的 <code>SQL</code> 语句至少要达到 <code>range</code> 级别，而 <code>all</code> 级别应当杜绝。</p><blockquote><ul><li><strong>ALL</strong>：全表扫描，应当避免该类型;</li><li><strong>index</strong>：索引全局扫描，<code>index</code> 与 <code>ALL</code> 区别为 <code>index</code> 类型只遍历索引树;</li><li><strong>range</strong>：检索索引一定范围的行;</li><li><strong>ref</strong>：非唯一性索引扫描，返回匹配某个单独值的所有行;</li><li><strong>eq_ref</strong>：唯一索引扫描，对于每个索引键，表中只有一条记录与之匹配，常见主键或唯一索引扫描;</li><li><strong>const</strong>：表示通过一次索引就找到了结果，常见主键或唯一索引扫描;</li><li><strong>system</strong>：<code>system</code> 是 <code>const</code> 类型的特例，当查询的表只有一行的情况下使用 <code>system</code>;</li><li><strong>NULL</strong>：<code>MySQL</code> 在优化过程中分解语句，执行时甚至不用访问表或索引，是最高的登记;</li></ul></blockquote><p>以之前的测试表为例，查询主键字段 <code>column1</code> 为 <code>1</code> 的数据，查看返回结果可以看到对应 <code>type</code> 的值为 <code>const</code>，即通过主键索引单次即实现数据查询。<br><img src="/album/loading.gif" data-original="/album/article/db/mysql/explain/4.png"></p><h4 id="3-Possible-keys"><a href="#3-Possible-keys" class="headerlink" title="3. Possible_keys"></a>3. Possible_keys</h4><p><code>possible_keys</code> 与 <code>key</code> 属性都表示所用到的索引，前者是 <code>MySQL</code> 判断可能用到的索引，而后者是实际查询所用到的索引。</p><p>在上一点的查询中，通过主键查询数据时可以看到返回 <code>possible_keys</code> 与 <code>key</code> 均为 <code>PRIMARY</code>，表示预测和实际查询的所使用的索引都是主键索引。</p><p>同理，在查询中将条件中的字段替换为普通属性，可以看到结果中的  <code>possible_keys</code> 与 <code>key</code> 都为 <code>null</code>，且结果中的 <code>type</code> 为 <code>ALL</code>，表明查询没有使用任何索引而是执行了全表扫描。<br><img src="/album/loading.gif" data-original="/album/article/db/mysql/explain/5.png"></p><p>对于这种全表扫描通常则需要进行优化，最简单的方式即给对应的条件字段条件索引，执行下述脚本添加索引后重新执行上述语句。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">index</span> c2_idx<span class="token keyword">on</span> tb_01 <span class="token punctuation">(</span>column2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>从下图中的结果可以看到此时的 <code>type</code> 为 <code>ref</code> 且 <code>possible_keys</code> 与 <code>key</code> 则为 <code>c2_idx</code>，表明此时查询已经通过索引执行。<br><img src="/album/loading.gif" data-original="/album/article/db/mysql/explain/6.png"></p><h4 id="3-Extra"><a href="#3-Extra" class="headerlink" title="3. Extra"></a>3. Extra</h4><p><code>Extra</code> 表示详细说明，一般该列存在下列值，常见的不太友好的值有：<code>Using filesort</code>，<code>Using temporary</code>。</p><blockquote><ul><li><strong>Using where</strong>: 表示不用读取表中所有信息，仅通过索引就可以获取所需数据，即使用列覆盖索引;</li><li><strong>Using temporary</strong>: 表示需要使用临时表来存储结果集，常见于 <code>group by</code> 与 <code>order by</code>;</li><li><strong>Using filesort</strong>: 表示无法利用索引完成的排序，此类情景通常需要进行优化;</li><li><strong>Using join buffer</strong>: 表示使用了连接缓存，如果出现了这个值，建议根据查询的添加索引;</li><li><strong>Impossible where</strong>: 表示 <code>where</code> 语句会一直 <code>false</code>，导致没有符合条件的行;</li><li><strong>Select tables optimized away</strong>: 这个值意味着 <code>sql</code> 优化到不能在优化了;</li><li><strong>No tables used</strong>: <code>Query</code> 语句中使用 <code>from dual</code> 或不含任何 <code>from</code> 子句;</li></ul></blockquote><h3 id="三、操作句柄"><a href="#三、操作句柄" class="headerlink" title="三、操作句柄"></a>三、操作句柄</h3><h4 id="1-基础介绍-1"><a href="#1-基础介绍-1" class="headerlink" title="1. 基础介绍"></a>1. 基础介绍</h4><p>除了执行计划之外，在 <code>MySQL</code> 还提供了操作句柄 <code>Handler</code> 用于描述脚本对数据发生的变更。</p><p>通过下述命令即可查看当前会话的脚本执行句柄信息，通常在执行查询之前通过 <code>FLUSH</code> 先执行清空。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 清空句柄</span>FLUSH <span class="token keyword">STATUS</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 查询句柄信息</span><span class="token keyword">SHOW</span> <span class="token keyword">SESSION</span> <span class="token keyword">STATUS</span> <span class="token operator">LIKE</span> <span class="token string">'Handler%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行查询返回的结果如下：<br><img src="/album/loading.gif" data-original="/album/article/db/mysql/explain/6.png"></p><p>各项属性描述参考下表，其中若 <code>Handler_read_rnd_next</code> 值很高，可能表示表的全表扫描次数很多；若 <code>Handler_read_key</code> 值很高，说明通过索引查找行的次数很多，索引在查询中被有效利用；若 <code>Handler_update</code> 和 <code>Handler_delete</code> 的值很高，说明有很多行更新和删除操作。</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">属性</td>        <th style="text-align: center;">描述</td>    </tr>    <tr>        <td style="text-align: center;">Handler_commit</td>        <td style="text-align: center;">会话中提交的次数。每执行 COMMIT 语句或自动提交事务时，该计数器会增加。</td>    </tr>    <tr>        <td style="text-align: center;">Handler_delete</td>        <td style="text-align: center;">会话中删除行的次数。每执行 DELETE 语句删除一行时，该计数器会增加。</td>    </tr>    <tr>        <td style="text-align: center;">Handler_discover</td>        <td style="text-align: center;">会话中自动发现表的次数。这通常用于 NDB Cluster 和某些存储引擎。</td>    </tr>    <tr>        <td style="text-align: center;">Handler_external_lock</td>        <td style="text-align: center;">会话中外部锁定操作的次数，主要用于内部目的。</td>    </tr>    <tr>        <td style="text-align: center;">Handler_mrr_init</td>        <td style="text-align: center;">会话中多范围读取（Multi-Range Read, MRR）初始化的次数。</td>    </tr>    <tr>        <td style="text-align: center;">Handler_prepare</td>        <td style="text-align: center;">会话中准备事务的次数，主要用于内部目的。</td>    </tr>    <tr>        <td style="text-align: center;">Handler_read_first</td>        <td style="text-align: center;">会话中读取索引中的第一行的次数。通常在查询需要读取索引中的第一行时增加。</td>    </tr>    <tr>        <td style="text-align: center;">Handler_read_key</td>        <td style="text-align: center;">会话中通过键读取行的次数。每次通过索引键查找行时该计数器会增加。</td>    </tr>    <tr>        <td style="text-align: center;">Handler_read_last</td>        <td style="text-align: center;">会话中读取索引中的最后一行的次数。通常在查询需要读取索引中的最后一行时增加。</td>    </tr>    <tr>        <td style="text-align: center;">Handler_read_next</td>        <td style="text-align: center;">会话中读取索引中的下一行的次数。通常在索引扫描中使用。</td>    </tr>    <tr>        <td style="text-align: center;">Handler_read_prev</td>        <td style="text-align: center;">会话中读取索引中的前一行的次数。通常在倒序索引扫描中使用。</td>    </tr>    <tr>        <td style="text-align: center;">Handler_read_rnd</td>        <td style="text-align: center;">会话中通过固定位置读取行的次数。通常在需要直接读取行而不通过索引时使用。</td>    </tr>    <tr>        <td style="text-align: center;">Handler_read_rnd_next</td>        <td style="text-align: center;">会话中读取下一行的次数。通常在全表扫描时使用。</td>    </tr>    <tr>        <td style="text-align: center;">Handler_rollback</td>        <td style="text-align: center;">会话中回滚的次数。每次执行 ROLLBACK 语句或事务失败回滚时，该计数器会增加。</td>    </tr>    <tr>        <td style="text-align: center;">Handler_savepoint</td>        <td style="text-align: center;">会话中保存点操作的次数。</td>    </tr>    <tr>        <td style="text-align: center;">Handler_savepoint_rollback</td>        <td style="text-align: center;">会话中回滚到保存点的次数。</td>    </tr>    <tr>        <td style="text-align: center;">Handler_update</td>        <td style="text-align: center;">会话中更新行的次数。每执行 UPDATE 语句更新一行时，该计数器会增加。</td>    </tr>    <tr>        <td style="text-align: center;">Handler_write</td>        <td style="text-align: center;">会话中插入行的次数。每执行 INSERT 语句插入一行时，该计数器会增加。</td>    </tr></table><h4 id="2-示例演示"><a href="#2-示例演示" class="headerlink" title="2. 示例演示"></a>2. 示例演示</h4><p>下面通过具体的示例介绍效果，依次执行下述的三个语句。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 清空</span>FLUSH <span class="token keyword">STATUS</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 执行脚本</span><span class="token keyword">select</span>     <span class="token operator">*</span><span class="token keyword">from</span>    tb_01<span class="token keyword">where</span>    column1 <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">-- 查询句柄</span><span class="token keyword">SHOW</span> <span class="token keyword">SESSION</span> <span class="token keyword">STATUS</span> <span class="token operator">LIKE</span> <span class="token string">'Handler%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行后得到下图结果，由于默认的增删改是自动提交的因此可以看出 <code>Handler_commit</code> 值为 <code>1</code>，同时根据主键字段查询整个查询过程中的涉及的索引数量为 <code>1</code>，因此 <code>Handler_read_key</code> 为 <code>1</code>。</p><p>同时，对于 <code>MySQL</code> 而言默认的事务级别为 <code>REPEATABLE_READ</code>，在执行查询时将会添加写锁，每次加锁与释放锁 <code>Handler_external_lock</code> 值都将会增加，因此整个查询动作过程 <code>Handler_external_lock</code> 值为 <code>2</code>。<br><img src="/album/loading.gif" data-original="/album/article/db/mysql/explain/7.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、执行计划&quot;&gt;&lt;a href=&quot;#一、执行计划&quot; class=&quot;headerlink&quot; title=&quot;一、执行计划&quot;&gt;&lt;/a&gt;一、执行计划&lt;/h3&gt;&lt;h4 id=&quot;1-基础介绍&quot;&gt;&lt;a href=&quot;#1-基础介绍&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="数据库" scheme="https://great-jin.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MySQL" scheme="https://great-jin.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>我写了一个程序，让端口占用无路可逃</title>
    <link href="https://great-jin.github.io/windows/software/process/"/>
    <id>https://great-jin.github.io/windows/software/process/</id>
    <published>2024-06-29T16:00:00.000Z</published>
    <updated>2024-07-21T02:44:09.285Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h3><p>作为一个 <code>Java</code> 工程师，经常会遇到这么个场景：<code>IDEA</code> 里的程序正在运行，此时直接关闭了 <code>IDEA</code> 而没有先关闭正在运行的服务。</p><p>在绝大多数情境下，此方式都无伤大雅，但总有一些抽风的场景运行的程序并没有被正常的关闭，也就导致了重启项目时将会提示 <code>xxxx</code> 端口已被占用。</p><p>在 <code>Windows</code> 下此方式解决也十分简单，在命令行输入下述两个命令即可根据端口关闭对应的进程。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 端口占用进程</span><span class="token function">netstat</span> -ano <span class="token operator">|</span> findstr <span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token comment" spellcheck="true"># 进程关闭</span>taskkill -PID <span class="token operator">&lt;</span>pid<span class="token operator">></span> -F<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然说也不麻烦但却很繁杂，试想一下当遇到这种情况下，我需要先翻笔记找出这两个命令，在打开命令行窗口执行，一套连招下来相当影响编程情绪。</p><p>因此，我决定写一个程序能够便捷的实现这个操作，最好是带 <code>GUI</code> 页面。</p><h3 id="2-实现机制"><a href="#2-实现机制" class="headerlink" title="2. 实现机制"></a>2. 实现机制</h3><p>说干就干，整个程序功能其实并不复杂，对于页面的展示要求也不高，我就确定下来了直接通过 <code>Java Swing</code> 实现 <code>GUI</code> 部分。而对于命令执行部分，在 <code>Java</code> 中提供了 <code>Process</code> 类可用于执行命令。</p><p>先让我们看下 <code>Process</code> 的作用方式，以最简单的 <code>ping baidu.com</code> 测试为例。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      ProcessBuilder processBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProcessBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      List<span class="token operator">&lt;</span>String<span class="token operator">></span> command <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      command<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"ping"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      command<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"www.baidu.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      processBuilder<span class="token punctuation">.</span><span class="token function">command</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">try</span> <span class="token punctuation">{</span>          Process process <span class="token operator">=</span> processBuilder<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">try</span> <span class="token punctuation">(</span>              InputStreamReader ir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"GBK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              BufferedReader br <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>ir<span class="token punctuation">)</span>          <span class="token punctuation">)</span> <span class="token punctuation">{</span>              String line<span class="token punctuation">;</span>              <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> br<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行上述的代码，在控制台可以得到下图结果：<br><img src="/album/loading.gif" data-original="/album/article/java/process/1.png"></p><p>在上述程序中，<code>ProcessBuilder</code> 用于构建命令，<code>processBuilder.start()</code> 则相当于你敲下回车执行，而执行的结果的则以 <code>IO</code> 流的形式返回，这里通过 <code>readLine()</code> 将返回的结果逐行的形式进行读取。</p><p>了解的大概原理之后，剩下的事情就简单了，只需要将之前提到的两个命令以同样的方式通过 <code>Process</code> 执行就可以，再通过 Java Swing 进行一个页面展示就可以。</p><p>具体的实现并不复杂，这里就不详细展开介绍，完整的项目代码已经上传到 <code>GitHub</code>，感兴趣的小伙伴可自行前往查看，仓库地址：<a href="https://github.com/great-jin/windows-process">windows-process</a>。</p><h3 id="3-程序介绍"><a href="#3-程序介绍" class="headerlink" title="3. 程序介绍"></a>3. 程序介绍</h3><p>下面主要介绍程序的使用与效果，开始前可以去上述提到的仓库 <code>relase</code> 里将打包完成的 <code>exe</code> 程序下载，<a href="https://github.com/great-jin/windows-process/releases">下载地址</a>。</p><p>下载后启动 <code>window process.exe</code> 程序，在启动之后会先弹出下图的提示，这是因为使用了 <code>exe4j</code> 打包程序，选择确认即可。<br><img src="/album/loading.gif" data-original="/album/article/java/process/2.png"></p><p>选择确认之后即会展示下图页面，列表中展示的数据即 <code>netstat -ano</code> 命令返回的结果。<br><img src="/album/loading.gif" data-original="/album/article/java/process/3.png"></p><p>在选中列表任意一条进程记录后，会将该进程对应的端口号和 <code>PID</code> 填充至上面的输入框中。<br><img src="/album/loading.gif" data-original="/album/article/java/process/4.gif"></p><p>同时，可在 <code>Port</code> 输入框中输入对应的端口号实现快速查询，若需要停止某个进程，则将点击对应端口进程记录其 <code>PID</code> 会自动填入输入框中，然后单击 <code>Kill</code> 按钮，成功停止进程后将会进行相应的提示。</p><p>最后的最后，再臭不要脸的给自己要个赞，觉得不错的可以去 <code>GitHub</code> 仓库上下载下来看看，如果能点个 <code>star</code> 更是万分感谢，这里再贴一下仓库地址：<a href="https://github.com/great-jin/windows-process">windows-process</a>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-基本介绍&quot;&gt;&lt;a href=&quot;#1-基本介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 基本介绍&quot;&gt;&lt;/a&gt;1. 基本介绍&lt;/h3&gt;&lt;p&gt;作为一个 &lt;code&gt;Java&lt;/code&gt; 工程师，经常会遇到这么个场景：&lt;code&gt;IDEA&lt;/co</summary>
      
    
    
    
    <category term="软件应用" scheme="https://great-jin.github.io/categories/%E8%BD%AF%E4%BB%B6%E5%BA%94%E7%94%A8/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Stream很好，Map很酷，但答应我别用toMap</title>
    <link href="https://great-jin.github.io/java/collection/tomap/"/>
    <id>https://great-jin.github.io/java/collection/tomap/</id>
    <published>2024-06-28T16:00:00.000Z</published>
    <updated>2024-06-30T08:49:11.419Z</updated>
    
    <content type="html"><![CDATA[<p>在 <code>JDK 8</code> 中 <code>Java</code> 引入了让人欲罢不能的 <code>stream</code> 流处理，可以说已经成为了我日常开发中不可或缺的一部分。</p><p>当完成一次流处理之后需要返回一个集成对象时，已经肌肉记忆的敲下 <code>collect(Collectors.toList())</code> 或者 <code>collect(Collectors.toSet())</code>。你可能会想，<code>toList</code> 和 <code>toSet</code> 都这么便捷顺手了，当又怎么能少得了 <code>toMap()</code> 呢。</p><p>答应我，一定打消你的这个想法，否则这将成为你噩梦的开端。<br><img src="/album/loading.gif" data-original="/album/emoji/heart/1.png"></p><p>什么？你不信，没有什么比代码让人更痛彻心扉，让我们直接上代码。</p><p>让我们先准备一个用户实体类。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>          <span class="token keyword">private</span> String name<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假设有这么一个场景，你从数据库读取 <code>User</code> 集合，你需要将其转为 <code>Map</code> 结构数据，<code>key</code> 和 <code>value</code> 分别为 <code>user</code> 的 <code>id</code> 和 <code>name</code>。</p><p>很快，你啪的一下就写出了下面的代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 模拟数据</span>        userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Alex"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Beth"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getId<span class="token punctuation">,</span> User<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序，你已经想好了开始怎么摸鱼，结果啪的一下 <code>IllegalStateException</code> 报错就拍你脸上，你定睛一看怎么提示 <code>Key</code> 值重复。<br><img src="/album/loading.gif" data-original="/album/emoji/heart/2.png"></p><p>作为优秀的八股文选手，你清楚的记得 <code>HashMap</code> 对象 <code>Key</code> 重复是进行替换。你不信邪，断点一打，堆栈一看，硕大的 <code>uniqKeys</code> 摆在了面前，凭借四级 <code>424</code> 分的优秀战绩你顿时菊花一紧，点开一看，谁家好人 <code>map key</code> 还要去重判断啊。<br><img src="/album/loading.gif" data-original="/album/article/java/collect/map/1.png"><br><img src="/album/loading.gif" data-original="/album/article/java/collect/map/2.png"></p><p>好好好，这么玩是吧，你转身打开浏览器一搜，原来需要自己手动处理重复场景，啪的一下你又重新改了一下代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 模拟数据</span>        userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Alex"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getId<span class="token punctuation">,</span> User<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">,</span> <span class="token punctuation">(</span>oldData<span class="token punctuation">,</span> newData<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> newData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次执行程序，你似乎已经看到知乎的摸鱼贴在向你招手了，结果啪的一下 <code>NPE</code> 又拍在你那笑容渐渐消失的脸上。<br><img src="/album/loading.gif" data-original="/album/emoji/heart/6.png"></p><p>静下心来，本着什么大风大浪我没见过的心态，断点堆栈一气呵成，而下一秒你又望着代码陷入了沉思，我是谁？我在干什么？<br><img src="/album/loading.gif" data-original="/album/article/java/collect/map/4.png"></p><p>鼓起勇气，你还不信今天就过不去这个坎了，大手一挥，又一段优雅的代码孕育而生。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 模拟数据</span>        userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Alex"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Beth"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                  <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>                      User<span class="token operator">:</span><span class="token operator">:</span>getId<span class="token punctuation">,</span>                      it <span class="token operator">-</span><span class="token operator">></span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                      <span class="token punctuation">(</span>oldData<span class="token punctuation">,</span> newData<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> newData<span class="token punctuation">)</span>                  <span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优雅，真是太优雅了，又是 <code>Stream</code> 又是 <code>Optional</code>，可谓是狠狠拿捏技术博文的 <code>G</code> 点了。<br><img src="/album/loading.gif" data-original="/album/emoji/confidence/5.png"></p><p>这时候你回头一看，我需要是什么来着？这 <code>TM</code> 不是一个循环就万事大吉了吗，不信邪的你回归初心，回归了 <code>for</code> 循环的怀抱，又写了一版。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 模拟数据</span>        userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Alex"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Beth"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          userList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>it <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>              map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> it<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看着运行完美无缺的代码，你一时陷入了沉思，数分钟过去了，你删除了 <code>for</code> 循环，换上 <code>Stream</code> 与 <code>Optional</code> 不羁的外衣，安心的提交了代码，这口细糠一定也要让好同事去尝一尝。<br><img src="/album/loading.gif" data-original="/album/emoji/mix/1.png"></p><p>让我们回到 <code>HashMap</code> 的身上，作为八股十级选手而言的你，什么数据结构红黑树可谓信手拈来，但我们今天不谈八股，只聊聊背后的一些设计理念。</p><p>众所周知，在 <code>HashMap</code> 中有且仅允许存在一个 <code>key</code> 为 <code>null</code> 的元素，当 key 已存在默认的策略是进行覆盖，比如下面的示例最终 <code>map</code> 的值即 <code>&#123;null=2&#125;</code>。</p><pre class="line-numbers language-java"><code class="language-java">Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>同时 <code>HashMap</code> 对于 <code>value</code> 的值并没有额外限制，只要你愿意，你甚至可以放几百万 <code>value</code> 为空的元素像下面这个例子：</p><pre class="line-numbers language-java"><code class="language-java">Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>这也就引出了今天的重点！</strong></p></blockquote><p>在 <code>stream</code> 中使用 <code>Collectors.toMap()</code> 时，如果你不注意还是按照惯性思维那么它就会让你感受一下什么叫做暴击。就像上一篇文章提到的其异常触发机制，但却并不知道为什么要这么设计？</p><p>作为网络冲浪小能手，我反手就是在 <code>stackoverflow</code> 发了提问，咱虽然笨但主打一个好学。<br><img src="/album/loading.gif" data-original="/album/article/java/collect/map/5.png"></p><p>值得一提的是，评论区有个老哥回复的有点意思，他的回复如下:<br><img src="/album/loading.gif" data-original="/album/article/java/collect/map/6.png"></p><p>用我三脚猫的英语水平翻译一下，大概意思如下：</p><blockquote><p>因为人家 <code>toMap()</code> 并没有说返回的是 <code>HashMap</code>，所以你凭什么想要人家遵循跟 <code>HashMap</code> 一样的规则呢？</p></blockquote><p>我滴个乖乖，他讲的似乎好有道理的样子。</p><p>我一开始也差点信了，但其实你认真看 <code>toMap()</code> 的内部实现，你会发现其返回的不偏不倚正好就是 <code>HashMap</code>。<br><img src="/album/loading.gif" data-original="/album/article/java/collect/map/7.png"></p><p>如果你还不信，以上篇文章的代码为例，执行后获取其类型可以看到输出就是 <code>HashMap</code>。<br><img src="/album/loading.gif" data-original="/album/article/java/collect/map/8.png"></p><p>这时候我的 <code>CPU</code> 又烧了，这还是我认识的 <code>HashMap</code>，怎么开始跟 <code>stream</code> 混之后就开始六亲不认了，是谁说的代码永远不会变心的？</p><p>一切彷佛又回到了起点，为什么在新的 <code>stream</code> 中不遵循大家已经熟悉规范，而是要改变习惯对此做出限制？</p><p><code>stackoverflow</code> 上另外的一个老哥给出的他的意见：<br><img src="/album/loading.gif" data-original="/album/article/java/collect/map/9.png"></p><p>让我这个四级 <code>751</code> 分老手再给大家做个免费翻译官简化一下观点：</p><blockquote><p>在 <code>Collectors.toMap()</code> 的文档中已经标注其并不保证返回 <code>Map</code> 的具体类型，以及是否可变、序列化性以及是否线程安全，而 <code>JDK</code> 拥有众多的版本，可能在你的环境已经平稳运行了数年，但换个环境之后在不同的 <code>JDK</code> 下可能程序就发生了崩溃。因此，这些额外的保障实际上还帮了你的忙。</p></blockquote><p>回头去看 <code>toMap()</code> 方法上的文档说明，确实也像这位老哥提到的那样。<br><img src="/album/loading.gif" data-original="/album/article/java/collect/map/10.png"></p><p>而在 <code>HashMap</code> 中允许 <code>Key</code> 与 <code>Value</code> 为空带来的一个问题在此时也浮现了出来，当存入一个 <code>value</code> 为空的元素时，再后续执行 <code>get()</code> 再次读取时，存在一个问题那就是二义性。</p><p>很显然执行 <code>get()</code> 返回的结果将为空，那这个空究竟是 Map 中不存在这个元素？还是我存入的元素其 <code>value</code> 为空？这一点我想只有老天爷知道，而这种二义性所带来的问题在设计层面显然是一个失误。</p><p>那么到这里，我们就可以得到一个暴论：<strong>HashMap 允许 key 和 value 为空就是 JDK 留下的“屎山”！</strong></p><p>为了验证这一结论，我们可以看看在新的 <code>ConcurrentHashMap</code> 中 <code>JDK</code> 是怎么做的？查看源码可以看到，在 <code>put()</code> 方法的一开始就执行了 <code>key</code> 与 <code>value</code> 的空值校验，也验证了上面的猜想。<br><img src="/album/loading.gif" data-original="/album/article/java/collect/map/11.png"></p><p>这还原不够支撑我们的结论，让我们继续深挖这背后还有什么猫腻。</p><p>首先让我看看是谁写的 <code>ConcurrentHashMap</code>，在 <code>openjdk</code> 的 <code>GitHub</code> 仓库类文档注释可以看到主要的开发者是 <code>Doug Lea</code>。<br><img src="/album/loading.gif" data-original="/album/article/java/collect/map/12.png"></p><p>那 <code>Doug Lea</code> 又是何方大佬，通过维基百科的可以看到其早期是 <code>Java</code> 并发社区的主席，他参与了一众的 <code>JDK</code> 并发设计工作，可谓吾辈偶像。<br><img src="/album/loading.gif" data-original="/album/article/java/collect/map/13.png"></p><p>在网络搜罗相关的资讯找到对应的话题，虽然图中的链接已经不存在了，但还是能从引用的内容看出其核心的原因正是为了规避的结果的模糊性，与前文我们讨论的二义性不尽相同。<br><img src="/album/loading.gif" data-original="/album/article/java/collect/map/14.png"></p><p>那为什么 <code>JDK</code> 不同步更新 <code>HashMap</code> 的设计理念，在新版 <code>HashMap</code> 中引入 <code>key</code> 与 <code>value</code> 的非空校验？</p><p>我想剩下的理由只有一个：<code>HashMap</code> 的使用范围实在太广，就算是 <code>JDK</code> 自己也很难在不变更原有结构的基础上进行改动，而在 <code>JDK 1.2</code> 便被提出并广泛应用，对于一个发展了数十年的语言而言，兼容性是十分重要的一大考量。</p><p>因此，我们可以看到，在后续推出的 <code>Map</code> 中，往往对 <code>key</code> 与 <code>Value</code> 都作了进一步的限制，而对于 <code>HashMap</code> 而言，可能 <code>JDK</code> 官方也是有心无力吧。<br><img src="/album/loading.gif" data-original="/album/emoji/mix/2.png"></p><p>到这里基本也就盖棺定论了，但本着严谨的态度大胆假设小心求证，让我们再来看看大家伙的意见，万一不小心就被人网暴了。</p><p>在 <code>stackoverflow</code> 上一篇相关的回答中看到，许多人都认为 <code>HashMap</code> 支持空值是一个存在缺陷的设计。<br><img src="/album/loading.gif" data-original="/album/article/java/collect/map/15.png"></p><p>感兴趣的小伙伴可以去原帖查看，这里我就不再展开介绍了，原帖链接：<a href="https://stackoverflow.com/questions/45210398/why-does-map-of-not-allow-null-keys-and-values">Why does Map.of not allow null keys and values?</a>。</p><p>看到这里，下次别人或者老板再说你写的代码是屎山的时候，请昂首挺胸自信的告诉他 <code>JDk</code> 都会犯错，我写的这点又算得了什么？<br><img src="/album/loading.gif" data-original="/album/emoji/confidence/2.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 &lt;code&gt;JDK 8&lt;/code&gt; 中 &lt;code&gt;Java&lt;/code&gt; 引入了让人欲罢不能的 &lt;code&gt;stream&lt;/code&gt; 流处理，可以说已经成为了我日常开发中不可或缺的一部分。&lt;/p&gt;
&lt;p&gt;当完成一次流处理之后需要返回一个集成对象时，已经肌肉记忆的敲</summary>
      
    
    
    
    <category term="JAVA基础" scheme="https://great-jin.github.io/categories/JAVA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Maven 模块化实战</title>
    <link href="https://great-jin.github.io/java/design/module/"/>
    <id>https://great-jin.github.io/java/design/module/</id>
    <published>2024-06-15T16:00:00.000Z</published>
    <updated>2024-06-16T08:21:34.781Z</updated>
    
    <content type="html"><![CDATA[<p>如果说 <code>Spring Boot</code> 解决了 <code>Java</code> 工程师 <code>Web</code> 开发的痛点，那 <code>Maven</code> 则是当之无愧的 <code>Java</code> 依赖管理大师。回顾没有 <code>Maven</code> 的日子，手动下载管理工程依赖的各个 <code>jar</code> 包可谓是每个开发者的噩梦。</p><p>时至今日，<code>Maven</code> 的社区生态已然蓬勃发展，不仅提供了快速的依赖管理，同时对项目的模块化管理也提供了优秀的设计思路。</p><p>今天，文章的核心重点将侧重于如何通过 <code>Maven</code> 合理的管理项目结构，实现的工程的整洁性。</p><h4 id="1-工程结构"><a href="#1-工程结构" class="headerlink" title="1. 工程结构"></a>1. 工程结构</h4><p>以流行的前端后分离项目为例，在具体展开之前先看一下完整的项目模块结构，如下图所示：<br><img src="/album/loading.gif" data-original="/album/article/java/design/maven.png"></p><p>想要一个合理的项目结构，最重要的就是将功能进行拆分，而不是一股脑塞进单个模块。以上图的示例，其同样也可以合并为两个子模块：前端<code>Web</code> 与后端 <code>Server</code>，但后端模块也随之变得臃肿不堪。</p><h4 id="2-模块拆分"><a href="#2-模块拆分" class="headerlink" title="2. 模块拆分"></a>2. 模块拆分</h4><p>在上述提到了应对工程进行模块拆分，但也需注意一点，并不是一定说模块合并就是不好，而是应根据工程的规模进行抉择。</p><p>举个例子，需要开发系统仅包含一两个页面数据简单展示，此时完全可以单个工程模块一把梭哈。而若需要开发一个复杂的系统，包含用户权限以及多个功能的业务逻辑处理，此时宏观上根据系统功能拆分为单独的子模块显然更为合理。</p><p>以前文图示为例，将一个系统分为四个大类：权限管理 <code>(basic)</code>、业务处理 <code>(logic)</code>、对外服务 <code>(protocol)</code> 以及前端页面 <code>(web)</code>。每一个子模块仅负责单独业务功能，同时模块拆分也带来另一项额外收益，以权限管理模块为例，当其它项目同样涉及到此类需求时，可通过 <code>Maven</code> 依赖实现代码复用。倘若未执行模块拆分想要实现复用，采用整个完成完整引用的方式将会引入大量无用功能从而无端膨胀项目体积，另一种方式则需要手动继续代码剥离从而拷贝到新项目，二者都并非最优解。</p><h4 id="3-依赖管理"><a href="#3-依赖管理" class="headerlink" title="3. 依赖管理"></a>3. 依赖管理</h4><p>通过模块的拆分实现了工程的规整性，而系统的依赖则通过 <code>dependencyManagement</code> 实现统一管理。</p><p>所谓统一依赖管理，核心即在于对依赖库的版本管理，目的是实现单一入口的版本管理，更通俗的讲即版本集中统一定义，一旦定义则全局生效。</p><h5 id="1-bom模块"><a href="#1-bom模块" class="headerlink" title="(1) bom模块"></a>(1) bom模块</h5><p>在 <code>Maven</code> 中规定俗成即 <code>bom</code> 模块通过 <code>dependencyManagement</code> 实现依赖库版本的统一管理。</p><p>在之前介绍 <code>Maven</code> 的文章中已经详细介绍了 <code>dependencyManagement</code> 的作用，即定义依赖版本作用域等信息，子模块通过继承或导入该 bom 模块后，使用依赖时通过 <code>groupId</code> 与 <code>artifactId</code> 标签即可。</p><p>详细的 <code>Maven</code> 使用教程可参考以往文章：<a href="https://great-jin.github.io/java/maven/basis/">史上最全Maven教程，没有之一</a>。</p><p>下述则是一个 <code>bom</code> 模块的定义示例，需要注意模块的 <code>packaging</code> 需设置为 <code>pom</code> 而非 <code>jar</code>，因其为依赖定义管理而不存在具体的依赖引用。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>xyz.ibudai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>blank-web-template<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>template-bom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>commons-lang3.version</span><span class="token punctuation">></span></span>3.12.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>commons-lang3.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${commons-lang3.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-parent模块"><a href="#2-parent模块" class="headerlink" title="(2) parent模块"></a>(2) parent模块</h5><p>完成 <code>bom</code> 模块的定义之后，则定义工程的父模块，核心即将上述定义的 bom 模块进行导入，而后其它子模块继承此 <code>parent</code> 模块即可读取 <code>bom</code> 中定义依赖版本信息。</p><p>值得一提的是 <code>bom</code> 模块的 <code>dependencyManagement</code> 不仅可通过下述示例的 <code>import</code> 方式导入，同时也可通过 <code>&lt;parent&gt;</code> 标签从而直接继承获取，只是在 <code>Spring Boot</code> 项目中通常 <code>parent</code> 习惯继承于 <code>springframework</code> 因此采用导入方式引入 <code>bom</code> 模块。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>xyz.ibudai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>template-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>xyz.ibudai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>template-bom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-业务模块"><a href="#3-业务模块" class="headerlink" title="(3) 业务模块"></a>(3) 业务模块</h5><p>针对其它拆分的子模块而言，只需继承上述定义的 <code>parent</code> 模块即可。</p><p>在继承定义的 <code>parent</code> 模块后同理会继承其 <code>dependencyManagement</code> 信息，因此在模块中引入依赖时仅需 <code>groupId</code> 与 <code>artifactId</code> 标签引用即可，无需额外指定版本信息其将会读取 <code>bom</code> 模块中的信息。</p><p>通过此种方式，即实现了工程依赖的统一管理，所有涉及的依赖库其版本与作用域等信息统一定义入口于 <code>bom</code> 模块，当需要进行版本升级等操作时，只需修改 <code>bom</code> 定义的信息即可全局生效。</p><p>需要注意的一点是此处 <code>&lt;parent&gt;</code> 中指定了 <code>&lt;relativePath&gt;</code> 是因为 <code>Maven</code> 默认的父模块寻址逻辑为当前模块的上一级，若不存在则读取仓库信息。在之前的图示中可以看到，子模块 <code>basic</code> 与 <code>logic</code> 等本应建于 <code>parent</code> 模块下，但为了结构统一将其创建于同级目录下，因此这里手动通过 relativePath 指定父模块配置路径。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>xyz.ibudai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>template-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">></span></span>../template-parent/pom.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>relativePath</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>template-logic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">></span></span>jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>示例项目</strong>：<a href="https://github.com/great-jin/blank-web-template/tree/dev-micro">GitHub直达</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如果说 &lt;code&gt;Spring Boot&lt;/code&gt; 解决了 &lt;code&gt;Java&lt;/code&gt; 工程师 &lt;code&gt;Web&lt;/code&gt; 开发的痛点，那 &lt;code&gt;Maven&lt;/code&gt; 则是当之无愧的 &lt;code&gt;Java&lt;/code&gt; 依赖管理大师。回顾没有 </summary>
      
    
    
    
    <category term="设计模式" scheme="https://great-jin.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
    <category term="Maven" scheme="https://great-jin.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Linux Shell 入门教程</title>
    <link href="https://great-jin.github.io/linux/shell/"/>
    <id>https://great-jin.github.io/linux/shell/</id>
    <published>2024-05-25T16:00:00.000Z</published>
    <updated>2024-06-15T12:25:30.580Z</updated>
    
    <content type="html"><![CDATA[<p><code>Linux Shell</code> 是 <code>Linux</code> 中提供的一种强大的脚本工具，通过编写脚本可实现一系列动作，本文将介绍 <code>Shell</code> 脚本的基本语法以及应用。</p><h3 id="一、基础命令"><a href="#一、基础命令" class="headerlink" title="一、基础命令"></a>一、基础命令</h3><h4 id="1-内容格式"><a href="#1-内容格式" class="headerlink" title="1. 内容格式"></a>1. 内容格式</h4><p><code>Shell</code> 脚本的定义相对简单，新建 <code>.sh</code> 文件并在文件中首行添加 <code>#!/bin/bash</code> 即可，文件中后续的内容一行即为一条命令，当执行文件时将会自顶向下开始执行命令。</p><pre class="line-numbers language-sh"><code class="language-sh">#!/bin/bashcontent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当完成脚本文件的定义之后，通过还需要为文件授权为可执行文件，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建脚本文件</span><span class="token function">touch</span> <span class="token operator">&lt;</span>filename<span class="token operator">></span>.sh<span class="token comment" spellcheck="true"># 授权文件为可执行</span><span class="token function">chmod</span> +x <span class="token operator">&lt;</span>filename<span class="token operator">></span>.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-打印输出"><a href="#2-打印输出" class="headerlink" title="2. 打印输出"></a>2. 打印输出</h4><p>在 <code>Linux</code> 中通过 <code>echo</code> 命令可执行内容的打印输出，默认其将直接输出到控制台，可以通过 <code>&gt;</code> 或 <code>&gt;&gt;</code> 将其保存至指定文件中。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 输出到控制台</span><span class="token keyword">echo</span> <span class="token string">"Hello World!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在使用 <code>&gt;</code> 或 <code>&gt;&gt;</code> 将其保存到文件时需要注意，前者将会覆盖文件中原有的数据内容，后 <code>&gt;&gt;</code> 则是继续将内容添加到文件末端。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 输出到文件，覆盖原内容</span><span class="token keyword">echo</span> <span class="token string">"Hello World!"</span> <span class="token operator">></span> info.log<span class="token comment" spellcheck="true"># 输出到文件，追加到文件末端</span><span class="token keyword">echo</span> <span class="token string">"Hello World!"</span> <span class="token operator">>></span> info.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-变量管理"><a href="#3-变量管理" class="headerlink" title="3. 变量管理"></a>3. 变量管理</h4><p><code>Shell</code> 中存在两种方式的变量定义获取方式，下面分开进行介绍。</p><h5 id="1"><a href="#1" class="headerlink" title="(1) ${}"></a>(1) ${}</h5><p>通过 <code>$&#123;&#125;</code> 即可读取已定义的变量信息，如下示例即通过 <code>$&#123;msg&#125;</code> 读取已经定义的 <code>msg</code> 变量。</p><pre class="line-numbers language-bash"><code class="language-bash">msg <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token keyword">echo</span> <span class="token variable">${msg}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同时也可以直接通过 <code>$</code> 读取变量，上述的读取也可替换为 <code>$msg</code> 但此方式不便于规范变量名从而造成歧义。</p><p>例如下述例子中，变量 <code>$msg</code> 输出即存在多种可能结果，既有可能为 <code>Hellog</code> 也有可能为 <code>World</code>。</p><pre class="line-numbers language-bash"><code class="language-bash">ms <span class="token operator">=</span> <span class="token string">"Hello"</span>msg <span class="token operator">=</span> <span class="token string">"World"</span><span class="token keyword">echo</span> <span class="token variable">$msg</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="2"><a href="#2" class="headerlink" title="(2) $()"></a>(2) $()</h5><p>通过 <code>$()</code> 获取命令执行的结果，如下述示例通过 <code>$(pwd)</code> 读取 <code>pwd</code> 命令的执行结果。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">pwd</span><span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-执行参数"><a href="#4-执行参数" class="headerlink" title="4. 执行参数"></a>4. 执行参数</h4><p>在 <code>Shell</code> 中通过 <code>$数字</code> 接收脚本执行时的参数。</p><p>例如在下述示例中 <code>$0</code> 即为 <code>test.sh</code>，而 <code>$1</code> 为 <code>params</code>。</p><pre class="line-numbers language-bash"><code class="language-bash">sh test.sh params<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="二、语法介绍"><a href="#二、语法介绍" class="headerlink" title="二、语法介绍"></a>二、语法介绍</h3><h4 id="1-IF条件"><a href="#1-IF条件" class="headerlink" title="1. IF条件"></a>1. IF条件</h4><p>在 <code>Shell</code> 脚本中，条件判断 <code>IF</code> 的基本语法格式如下，其中通过 <code>fi</code> 标记结束，需要注意的是 <code>if</code> 和 <code>[</code> 以及条件 <code>command</code> 执行相隔的空格不能缺省。</p><pre class="line-numbers language-sh"><code class="language-sh">if [ command ]; then    march_command_1else    march_command_2fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当存在多分支时，其语法格式如下，通过 <code>elif</code> 判断多分支。</p><pre class="line-numbers language-sh"><code class="language-sh">if [ command ]; then    march_command_1elif [ command ]; then    march_command_2else    march_command_3fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Switch"><a href="#2-Switch" class="headerlink" title="2. Switch"></a>2. Switch</h4><p><code>Shell</code> 脚本中的 <code>switch case</code> 语句规则如下：</p><blockquote><ul><li><code>case</code> 开头，以 <code>esac</code> 结尾；</li><li><code>;;</code> 作用等价于 <code>break</code>;</li><li><code>*</code> 等价于 <code>default</code>;</li><li><code>exit</code> 等价于 <code>return</code>;</li></ul></blockquote><p>下面通过一个具体的示例讲解：</p><pre class="line-numbers language-sh"><code class="language-sh">#!/bin/bashmethod_1() {    echo "Hello"}method_2() {    echo "World"}case "$1" in    p1)        method_1        ;;    p2)        method_2        ;;    *)        echo "default branch"        exit 1    ;;esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了更好的对比，将上述 <code>Shell</code> 逻辑转为 <code>Java</code> 代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span>String params<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">swtich</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">"p1"</span><span class="token operator">:</span>            <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"p2"</span><span class="token operator">:</span>            <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"default branch"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;Linux Shell&lt;/code&gt; 是 &lt;code&gt;Linux&lt;/code&gt; 中提供的一种强大的脚本工具，通过编写脚本可实现一系列动作，本文将介绍 &lt;code&gt;Shell&lt;/code&gt; 脚本的基本语法以及应用。&lt;/p&gt;
&lt;h3 id=&quot;一、基础命令&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="Linux运维" scheme="https://great-jin.github.io/categories/Linux%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Linux" scheme="https://great-jin.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Gitlab 服务部署教程</title>
    <link href="https://great-jin.github.io/app/install/gitlab/"/>
    <id>https://great-jin.github.io/app/install/gitlab/</id>
    <published>2024-05-17T16:00:00.000Z</published>
    <updated>2024-06-12T14:29:41.420Z</updated>
    
    <content type="html"><![CDATA[<p><code>Gitlab</code> 是一款广受好评的 <code>GIT</code> 项目管理平台，其中 <code>Gitlab-CE</code> 为免费版本，下面介绍 <code>Docker</code> 方式部署。</p><h4 id="1-目录创建"><a href="#1-目录创建" class="headerlink" title="1. 目录创建"></a>1. 目录创建</h4><p>老规矩第一步还是先创建数据目录用于文件映射。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /usr/local/dockerdata/gitlab/config<span class="token function">mkdir</span> -p /usr/local/dockerdata/gitlab/data<span class="token function">mkdir</span> -p /usr/local/dockerdata/gitlab/logs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-服务启动"><a href="#2-服务启动" class="headerlink" title="2. 服务启动"></a>2. 服务启动</h4><p>完成目录创建后通过到下述命令启动 <code>Gitlab</code> 服务，其中端口映射服务可根据自身情况调整。</p><pre class="line-numbers language-bash"><code class="language-bash">docker run -d \--name gitlab \--restart always \--privileged<span class="token operator">=</span>true \-p 8080:80 \-p 8081:443 \-p 8082:22 \-v /etc/localtime:/etc/localtime:ro \-v /usr/local/dockerdata/gitlab/config:/etc/gitlab \-v /usr/local/dockerdata/gitlab/logs:/var/log/gitlab \-v /usr/local/dockerdata/gitlab/data:/var/opt/gitlab \gitlab/gitlab-ce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-配置修改"><a href="#3-配置修改" class="headerlink" title="3. 配置修改"></a>3. 配置修改</h4><p>启动容器后进入会 gitlab 映射的文件目录中编辑配置信息。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">vi</span> /usr/local/dockerdata/gitlab/config/gitlab.rb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改文件中的下述内容，将 <code>192.168.0.20</code> 替换为你的服务器 <code>IP</code>，保存后通过 <code>docker restart gitlab</code> 重启服务使其生效。</p><pre class="line-numbers language-txt"><code class="language-txt">external_url 'http://192.168.0.20'gitlab_rails['gitlab_ssh_host'] = '192.168.0.20'# 配置 22 端口映射的值gitlab_rails['gitlab_shell_ssh_port'] = 8082gitlab_rails['time_zone'] = 'Asia/Shanghai'  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-端口修改"><a href="#4-端口修改" class="headerlink" title="4. 端口修改"></a>4. 端口修改</h4><p>完成上述步骤后进入 <code>gitlab</code> 容器内，配置服务对应的端口信息。</p><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it gitlab <span class="token function">bash</span><span class="token function">vi</span> /opt/gitlab/embedded/service/gitlab-rails/config/gitlab.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改配置文件的 <code>port</code> 值，将其改成之前启动容器时 <code>80</code> 端口映射的值，完成后在容器中通过 <code>gitlab-ctl restart</code> 重启服务。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">production</span><span class="token punctuation">:</span> <span class="token important">&amp;base</span>  <span class="token key atrule">gitlab</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 替换为 80 端口映射的值</span>   <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-用户账号"><a href="#5-用户账号" class="headerlink" title="5. 用户账号"></a>5. 用户账号</h4><p>完成上述配置之后即可浏览器访问 <code>ip:8080</code>，默认用户名为 <code>root</code>，密码通过下述命令查看：</p><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it <span class="token operator">&lt;</span>container_id<span class="token operator">></span> <span class="token function">grep</span> <span class="token string">'Password:'</span> /etc/gitlab/initial_root_password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;Gitlab&lt;/code&gt; 是一款广受好评的 &lt;code&gt;GIT&lt;/code&gt; 项目管理平台，其中 &lt;code&gt;Gitlab-CE&lt;/code&gt; 为免费版本，下面介绍 &lt;code&gt;Docker&lt;/code&gt; 方式部署。&lt;/p&gt;
&lt;h4 id=&quot;1-目录创建&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="应用部署" scheme="https://great-jin.github.io/categories/%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/"/>
    
    
    <category term="Linux" scheme="https://great-jin.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Confluence 部署教程</title>
    <link href="https://great-jin.github.io/app/install/confluence/"/>
    <id>https://great-jin.github.io/app/install/confluence/</id>
    <published>2024-05-17T16:00:00.000Z</published>
    <updated>2024-06-12T14:23:35.115Z</updated>
    
    <content type="html"><![CDATA[<p><code>Confluence</code> 是一款强大的知识库管理工具，在团队合作中发挥着重要作用。</p><h4 id="1-服务启动"><a href="#1-服务启动" class="headerlink" title="1. 服务启动"></a>1. 服务启动</h4><p>首先创建对应的目录用于映射数据实现持久化。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /usr/local/dockerdata/confluence<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完成后通过下述命令启动服务：</p><pre class="line-numbers language-bash"><code class="language-bash">docker run -d --privileged<span class="token operator">=</span>true \-p 8090:8090 \-v /usr/local/dockerdata/confluence:/var/confluence \--name confluence-srv \-e TZ<span class="token operator">=</span><span class="token string">'Asia/Shanghai'</span> \haxqer/confluence:8.9.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-插件破译"><a href="#2-插件破译" class="headerlink" title="2. 插件破译"></a>2. 插件破译</h4><p>启动服务之后访问 <code>ip:8090</code> 页面，将下述 <code>&lt;you-server-id&gt;</code> 替换为页面对应的 <code>server-id</code> 并在服务上执行。</p><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">exec</span> confluence-srv java -jar /var/agent/atlassian-agent.jar \-d \-p conf \-m Hello@world.com \-n Hello@world.com \-o your-org \-s <span class="token operator">&lt;</span>you-server-id<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-数据连接"><a href="#3-数据连接" class="headerlink" title="3. 数据连接"></a>3. 数据连接</h4><p>需要注意 <code>confluence</code> 使用 <code>MySQL</code> 存储数据，但其对应的 <code>MySQL</code> 库有下述两个要求。</p><ul><li>字符集与排序规则需要为 <code>utf8mb4</code> 和 <code>utf8mb4_bin</code>。</li><li>数据库的事务隔离级别需要为 <code>READ_COMMITTED</code>。</li></ul><p>由于 <code>MySQL</code> 默认的事务隔离级别为 <code>REPEATABLE_READ</code>，因此我们需要进行修改，这边提供两种修改方式，第一种为修改配置文件，第二种为通过命令但重启 <code>MySQL</code> 后将会失效。</p><p>方式一在 <code>MySQL</code> 的配置文件中添加下述配置修改事务隔离级别，完成后重启服务即可。</p><pre class="line-numbers language-cnf"><code class="language-cnf">transaction-isolation = READ-COMMITTED<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方式二通过下述 <code>SQL</code> 修改全局的事务隔离级别，但在 <code>MySQL</code> 重启后将会失效。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION LEVEL</span> <span class="token keyword">READ</span> <span class="token keyword">COMMITTED</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;Confluence&lt;/code&gt; 是一款强大的知识库管理工具，在团队合作中发挥着重要作用。&lt;/p&gt;
&lt;h4 id=&quot;1-服务启动&quot;&gt;&lt;a href=&quot;#1-服务启动&quot; class=&quot;headerlink&quot; title=&quot;1. 服务启动&quot;&gt;&lt;/a&gt;1. 服务启动</summary>
      
    
    
    
    <category term="应用部署" scheme="https://great-jin.github.io/categories/%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/"/>
    
    
    <category term="Linux" scheme="https://great-jin.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Java消息队列机制详解</title>
    <link href="https://great-jin.github.io/java/advance/message/"/>
    <id>https://great-jin.github.io/java/advance/message/</id>
    <published>2024-04-29T16:00:00.000Z</published>
    <updated>2024-04-30T14:40:20.113Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h3><h4 id="1-消息队列"><a href="#1-消息队列" class="headerlink" title="1. 消息队列"></a>1. 消息队列</h4><p>在应用开发中，消息队列可谓无处不在，它作为消息的载体，承担着异步通信、流量削峰等作用。</p><p>以常见的服务响应为例，当存在大批量用户执行请求服务时，系统可能无法同时处理所有的请求，意味着请求将会陷入排队阻塞的情况，导致系统无法接受处理新的请求，从而引发系统的瘫痪。<br><img src="/album/loading.gif" data-original="/album/article/java/message/2.png"></p><p>而通过消息队列，即可巧妙的实现请求的异步处理，提高系统服务的可用性，同样为上述示例引入队列异步处理后其运行流程如下：<br><img src="/album/loading.gif" data-original="/album/article/java/message/3.png"></p><h4 id="2-事件模型"><a href="#2-事件模型" class="headerlink" title="2. 事件模型"></a>2. 事件模型</h4><p>对于消息队列中间件，在大数据领域 <code>Kafka</code> 是当之无愧的老大哥，通过分布式的机制更是进一步提高的服务的高可用。因此，在多服务系统的场景下，<code>Kafka</code> 往往都扮演着重要的角色。</p><p>但对于单体的服务而言，在许多场景下 <code>Kafka</code> 由于需要额外引入中间件，其很难发挥其最大的优势。针对此类场景，本地消息队列服务则能取到更高的回报率，本文也将围绕本地消息队列服务展开介绍。<br><img src="/album/loading.gif" data-original="/album/article/java/message/1.png"></p><h3 id="二、工具介绍"><a href="#二、工具介绍" class="headerlink" title="二、工具介绍"></a>二、工具介绍</h3><h4 id="1-依赖引入"><a href="#1-依赖引入" class="headerlink" title="1. 依赖引入"></a>1. 依赖引入</h4><p><code>Disruptor</code> 是一个高性能队列本地消息类库，能够实现类似 <code>Kafka</code> 的消息传递，而无需依赖外部中间件。</p><p>在 <code>Maven</code> 工程中引入以下依赖即可导入依赖信息。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.lmax<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>disruptor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意 <code>4.x</code> 版本需要 <code>JDK11</code> 及以上版本，因此要在 <code>pom.xml</code> 中加入下述配置指定版本。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.11.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-事件处理"><a href="#2-事件处理" class="headerlink" title="2. 事件处理"></a>2. 事件处理</h4><p><code>Disruptor</code> 模型结构中同样包含三个重要概念：事件 <code>(Event)</code>、事件处理器 <code>(EventHandler)</code> 与事件发送者 <code>(EventPublisher)</code>。其中，<code>Event</code> 用于封装消息内容，<code>EventHandler</code> 类似于事件消费者，<code>EventPublisher</code> 类似于生产者用于发送事件消息。</p><p>新建 <code>MessageEvent</code> 用于封装传输的事件消息，这里通过泛型类用于指定多种类型消息。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageEvent</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> T t<span class="token punctuation">;</span>    <span class="token keyword">public</span> T <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>t <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建 <code>MessageEventHandler</code> 用于处理事件消息，当发送者发送事件消息时，则会执行处理器的 <code>onEvent()</code> 方法。</p><p>在下述示例中，当接受到事件消息后，则将事件内容体输出到控制台。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageEventHandler</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">EventHandler</span><span class="token operator">&lt;</span>MessageEvent<span class="token operator">&lt;</span>T<span class="token operator">>></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span>MessageEvent event<span class="token punctuation">,</span> <span class="token keyword">long</span> sequence<span class="token punctuation">,</span> <span class="token keyword">boolean</span> endOfBatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Event receive: "</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-事件发送"><a href="#3-事件发送" class="headerlink" title="3. 事件发送"></a>3. 事件发送</h4><p>在 <code>Disruptor</code> 中由 <code>RingBuffer</code> 负责事件的传输，当绑定事件并启动后即可通过其获取 <code>RingBuffer</code> 对象，进而执行事件的发布动作。</p><p>下述为一个简单的事件发布示例，完整的介绍文档参考官网手册：<a href="https://lmax-exchange.github.io/disruptor/user-guide/index.html">Disruptor 使用手册</a>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> bufferSize <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>        DaemonThreadFactory factory <span class="token operator">=</span> DaemonThreadFactory<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>        Disruptor<span class="token operator">&lt;</span>MessageEvent<span class="token operator">&lt;</span>String<span class="token operator">>></span> disruptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Disruptor</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>MessageEvent<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">,</span> bufferSize<span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Set event handler</span>        disruptor<span class="token punctuation">.</span><span class="token function">handleEventsWith</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageEventHandler</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        disruptor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// publish event</span>        RingBuffer<span class="token operator">&lt;</span>MessageEvent<span class="token operator">&lt;</span>String<span class="token operator">>></span> ringBuffer <span class="token operator">=</span> disruptor<span class="token punctuation">.</span><span class="token function">getRingBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ringBuffer<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> sequence<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            event<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// stop disruptor</span>        disruptor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、仿造实现"><a href="#三、仿造实现" class="headerlink" title="三、仿造实现"></a>三、仿造实现</h3><h4 id="1-功能剖析"><a href="#1-功能剖析" class="headerlink" title="1. 功能剖析"></a>1. 功能剖析</h4><p>了解了 <code>Disruptor</code> 的应用效果后，我们可以自己仿造一个简易的事件监听发布模型。</p><p>消息传输模型的核心在于两方面，事件的发布 <code>(Publish)</code> 和事件的监听 <code>(Handle)</code>。同时，为了实现消息的异步处理，在事件发布的具体实现中，需要通过线程池执行具体发布操作。</p><h4 id="2-事件监听"><a href="#2-事件监听" class="headerlink" title="2. 事件监听"></a>2. 事件监听</h4><p>新建 <code>Observer</code> 接口类用于定义消息的监听器，同理将其设计为泛型类，其中 <code>R</code> 为消息类型。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">onServer</span><span class="token punctuation">(</span>R t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>MessageObserver</code> 则为具体的消息处理实现，作用效果等价于上述的 <code>MessageEventHandler</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageObserver</span><span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServer</span><span class="token punctuation">(</span>R t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Observer data: "</span> <span class="token operator">+</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-服务注册"><a href="#3-服务注册" class="headerlink" title="3. 服务注册"></a>3. 服务注册</h4><p>新建 <code>QueueListener</code> 接口用于处理监听器的绑定和消息发送事件，由于后续涉及到线程池的管理，因此这里同时继承于 <code>AutoCloseable</code> 接口。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">QueueListener</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">AutoCloseable</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">publish</span><span class="token punctuation">(</span>R r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建 <code>MessageQueueListener</code> 用于实现具体的监听器注册逻辑，通过 <code>List</code> 存储注册的监听器，需要注意初始化其通过 <code>Collections.synchronizedList()</code> 创建线程安全对象，防止多线程操作异常。</p><p>同时，通过 <code>ExecutorService</code> 线程池从而实现事件异步的发送处理，为了方便此时使用的线程池由 <code>ExecutorService</code> 初始化，实际应用时可替换为 <code>ThreadPoolExecutor</code> 实现更细粒话的控制。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageQueueListener</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>R<span class="token operator">></span><span class="token punctuation">,</span> R<span class="token operator">></span>        <span class="token keyword">implements</span> <span class="token class-name">QueueListener</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ExecutorService executor<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> list<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MessageQueueListener</span><span class="token punctuation">(</span><span class="token keyword">int</span> poolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        executor <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span>poolSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        list <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> contains <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>contains<span class="token punctuation">)</span> <span class="token punctuation">{</span>            success <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> success<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">publish</span><span class="token punctuation">(</span>R r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Queue is empty, register first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>T t <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> t<span class="token punctuation">.</span><span class="token function">onServer</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            executor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-消息发布"><a href="#4-消息发布" class="headerlink" title="4. 消息发布"></a>4. 消息发布</h4><p>完成上述的定义之后即可测试事件的发布效果，具体的测试代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Observer<span class="token operator">&lt;</span>String<span class="token operator">></span> observer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageObserver</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Observer<span class="token operator">&lt;</span>String<span class="token operator">></span> observer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageObserver</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> poolSize <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>QueueListener<span class="token operator">&lt;</span>Observer<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">,</span> String<span class="token operator">></span> listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageQueueListener</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>poolSize<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// register handler</span>            listener<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>observer1<span class="token punctuation">)</span><span class="token punctuation">;</span>            listener<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>observer2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// publish data</span>            listener<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// remove handler</span>            listener<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>observer2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// publish data</span>            listener<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、基本介绍&quot;&gt;&lt;a href=&quot;#一、基本介绍&quot; class=&quot;headerlink&quot; title=&quot;一、基本介绍&quot;&gt;&lt;/a&gt;一、基本介绍&lt;/h3&gt;&lt;h4 id=&quot;1-消息队列&quot;&gt;&lt;a href=&quot;#1-消息队列&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="JAVA进阶" scheme="https://great-jin.github.io/categories/JAVA%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Sharding Sphere教程</title>
    <link href="https://great-jin.github.io/db/sharding/"/>
    <id>https://great-jin.github.io/db/sharding/</id>
    <published>2024-04-25T16:00:00.000Z</published>
    <updated>2024-08-12T12:47:08.772Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、分库分表"><a href="#一、分库分表" class="headerlink" title="一、分库分表"></a>一、分库分表</h3><h4 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h4><p>随着业务的不断增加，应用程序所存储的数据也将随之增长，对于传统的关系型数据而言，当单表的数据达到一定量级之后增删改效率也会有一定程度的降低，分库分表的需求也就应运而生。</p><h4 id="2-垂直分表"><a href="#2-垂直分表" class="headerlink" title="2. 垂直分表"></a>2. 垂直分表</h4><p>对于分表而言存在两种方式，这里先介绍一下垂直分表的实现逻辑。</p><p>垂直分表即将一张宽表进行纵向拆分，将使用频次较低的数据外置通过外键实现关联，从而降低单个数据表的大小，进而提高 <code>SQL</code> 的执行效率。</p><p>假如存在如下一张 <code>user</code> 表，其表结构与数据内容如下：<br><img src="/album/loading.gif" data-original="/album/article/db/sharding/1.png"></p><p>通过纵向拆分，可以将低频字段如 <code>address</code> 外提至 <code>user_info</code> 表，将利用外键 <code>u_id</code> 实现与 <code>user</code> 表的关联，拆分后得到下述两张用户表。<br><img src="/album/loading.gif" data-original="/album/article/db/sharding/2.png"></p><h4 id="3-水平分表"><a href="#3-水平分表" class="headerlink" title="3. 水平分表"></a>3. 水平分表</h4><p>水平分表即将同样为将一张数据表拆分为多张数据表，但与垂直分表不同的是每张表的结构一致，通过特定的算法确定一条记录的归属。</p><p>最常见的分表策略即取模分表，即以主键或其它唯一标识字段为依据，通过该字段求模取余得到值确定记录的归属，对于非数值字段可执行哈希后再进行计算。</p><p>如将 <code>user</code> 表拆分为 <code>user_1</code> 与 <code>user_2</code> 两张表，即可通过 <code>id</code> 主键与 <code>2</code> 求模取余，得到的结果若为 <code>1</code> 则存入 <code>user_1</code>，否则存入 <code>user_2</code>，按照此逻辑拆分即可得到下述两张表：<br><img src="/album/loading.gif" data-original="/album/article/db/sharding/3.png"></p><h3 id="二、工程集成"><a href="#二、工程集成" class="headerlink" title="二、工程集成"></a>二、工程集成</h3><h4 id="1-依赖导入"><a href="#1-依赖导入" class="headerlink" title="1. 依赖导入"></a>1. 依赖导入</h4><p><code>Sharding Sphere</code> 是 <code>Apache</code> 基金会下的开源分库分表中间件，旨在提供便利的分表分表实现。</p><p>这里就不过阐述其背景而专注于具体实现，首先在 <code>Spring Boot</code> 工程中引入下述依赖。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shardingsphere<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sharding-jdbc-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shardingsphere<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shardingsphere-jdbc-core-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.31<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.yaml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>snakeyaml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.33<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-测试数据"><a href="#2-测试数据" class="headerlink" title="2. 测试数据"></a>2. 测试数据</h4><p>在开始之前需要先准备好测试数据库与表，新建两个数据库 <code>test_db1</code> 与 <code>test_db2</code>，并分别在两个库下创建下述两张表。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>user_info_1<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>id<span class="token punctuation">`</span>          <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>name<span class="token punctuation">`</span>        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gender<span class="token punctuation">`</span>      <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span>     <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>user_info_2<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>id<span class="token punctuation">`</span>          <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>name<span class="token punctuation">`</span>        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gender<span class="token punctuation">`</span>      <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span>     <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-工程创建"><a href="#3-工程创建" class="headerlink" title="3. 工程创建"></a>3. 工程创建</h4><p>完成数据库的资源新建之后，通过工具生成对应的代码，工程代码结构如下：<br><img src="/album/loading.gif" data-original="/album/article/db/sharding/4.png"></p><h3 id="三、基本配置"><a href="#三、基本配置" class="headerlink" title="三、基本配置"></a>三、基本配置</h3><h4 id="1-服务模式"><a href="#1-服务模式" class="headerlink" title="1. 服务模式"></a>1. 服务模式</h4><p><code>shardingsphere</code> 提供多种服务启动模式，如下 <code>Standalone</code> 表示单体启动，同理还有 <code>Cluster</code> 集群模式。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">shardingsphere</span><span class="token punctuation">:</span>    <span class="token key atrule">mode</span><span class="token punctuation">:</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> Standalone      <span class="token key atrule">repository</span><span class="token punctuation">:</span>        <span class="token key atrule">type</span><span class="token punctuation">:</span> JDBC<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-日志配置"><a href="#2-日志配置" class="headerlink" title="2. 日志配置"></a>2. 日志配置</h4><p>通过下述配置开启执行的 <code>SQL</code> 语句日志输出，与 <code>MyBatis</code> 中的 <code>mybatis.configuration.log-impl</code> 配置项效果类似。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">shardingsphere</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 日志显示具体的SQL</span>    <span class="token key atrule">props</span><span class="token punctuation">:</span>      <span class="token key atrule">sql-show</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、数据分库"><a href="#四、数据分库" class="headerlink" title="四、数据分库"></a>四、数据分库</h3><h4 id="1-连接配置"><a href="#1-连接配置" class="headerlink" title="1. 连接配置"></a>1. 连接配置</h4><p>通过 <code>spring.shardingsphere.datasource</code> 配置生效的数据源连接配置，<code>names</code> 用于指定数据源名称。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">shardingsphere</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 配置数据库连接信息</span>    <span class="token key atrule">datasource</span><span class="token punctuation">:</span>      <span class="token key atrule">names</span><span class="token punctuation">:</span> ds0<span class="token punctuation">,</span> ds1      <span class="token key atrule">ds0</span><span class="token punctuation">:</span>        <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource        <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/test_db1<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=utf<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL</span>=false        <span class="token key atrule">username</span><span class="token punctuation">:</span> root        <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>      <span class="token key atrule">ds1</span><span class="token punctuation">:</span>        <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource        <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/test_db2<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=utf<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL</span>=false        <span class="token key atrule">username</span><span class="token punctuation">:</span> root        <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-分片规则"><a href="#2-分片规则" class="headerlink" title="2. 分片规则"></a>2. 分片规则</h4><p>通过 <code>rules</code> 配置生效的分片规则，通过 <code>actual-data-nodes</code> 配置实际生效的资源表，<code>database-strategy</code> 用于配置分库策略，<code>sharding-algorithm-name</code> 取的值为 <code>sharding-algorithms</code> 中所定义的策略。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">shardingsphere</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 配置分片规则</span>    <span class="token key atrule">rules</span><span class="token punctuation">:</span>      <span class="token key atrule">sharding</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 配置所有分片表</span>        <span class="token key atrule">tables</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true"># 配置表名</span>          <span class="token key atrule">user_info</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 声明表所在的数据节点</span>            <span class="token key atrule">actual-data-nodes</span><span class="token punctuation">:</span> ds$<span class="token punctuation">-</span><span class="token punctuation">></span><span class="token punctuation">{</span>0..1<span class="token punctuation">}</span>.user_info_1            <span class="token comment" spellcheck="true"># 配置分库规则</span>            <span class="token key atrule">database-strategy</span><span class="token punctuation">:</span>              <span class="token key atrule">standard</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 配置分库的路由键</span>                <span class="token key atrule">sharding-column</span><span class="token punctuation">:</span> id                <span class="token comment" spellcheck="true"># 配置分片算法，指向具体的策略</span>                <span class="token key atrule">sharding-algorithm-name</span><span class="token punctuation">:</span> db<span class="token punctuation">-</span>inline        <span class="token comment" spellcheck="true"># 定义分片算法</span>        <span class="token key atrule">sharding-algorithms</span><span class="token punctuation">:</span>          <span class="token key atrule">db-inline</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 使用自定义表达式</span>            <span class="token key atrule">type</span><span class="token punctuation">:</span> inline            <span class="token key atrule">props</span><span class="token punctuation">:</span>              <span class="token key atrule">algorithm-expression</span><span class="token punctuation">:</span> ds$<span class="token punctuation">-</span><span class="token punctuation">></span><span class="token punctuation">{</span>id % 2<span class="token punctuation">}</span>.user_info1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-inline表达式"><a href="#3-inline表达式" class="headerlink" title="3. inline表达式"></a>3. inline表达式</h4><p>这里着重介绍一下 <code>inline</code> 表达式的语法，在上述配置中的 <code>$-&gt;&#123;&#125;</code> 即为 <code>inline</code> 表达式，其语法规则如下：</p><pre class="line-numbers language-txt"><code class="language-txt">ds0, ds1==> ds$->{0..1}==> ds$->{['0','1']}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="五、数据分表"><a href="#五、数据分表" class="headerlink" title="五、数据分表"></a>五、数据分表</h3><h4 id="1-连接配置-1"><a href="#1-连接配置-1" class="headerlink" title="1. 连接配置"></a>1. 连接配置</h4><p>分表的数据源连接配置与分库类似，配置如下：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">shardingsphere</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 配置数据库连接信息</span>    <span class="token key atrule">datasource</span><span class="token punctuation">:</span>      <span class="token key atrule">names</span><span class="token punctuation">:</span> ds0      <span class="token key atrule">ds0</span><span class="token punctuation">:</span>        <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource        <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/test_db1<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=utf<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL</span>=false        <span class="token key atrule">username</span><span class="token punctuation">:</span> root        <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-分片规则-1"><a href="#2-分片规则-1" class="headerlink" title="2. 分片规则"></a>2. 分片规则</h4><p>通过 <code>rules</code> 配置生效的分片规则，注意其中的 <code>user_info</code> 配置的为逻辑表名，若数据库存在表 <code>user_info_1</code> 与 <code>user_info_2</code> 则需要配置为 <code>user_info</code>。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">shardingsphere</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 配置分片规则</span>    <span class="token key atrule">rules</span><span class="token punctuation">:</span>      <span class="token key atrule">sharding</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 配置所有分片表</span>        <span class="token key atrule">tables</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true"># 配置表名</span>          <span class="token key atrule">user_info</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 声明表所在的数据节点</span>            <span class="token key atrule">actual-data-nodes</span><span class="token punctuation">:</span> ds0.user_info_$<span class="token punctuation">-</span><span class="token punctuation">></span><span class="token punctuation">{</span>1..2<span class="token punctuation">}</span>            <span class="token comment" spellcheck="true"># 配置分表规则</span>            <span class="token key atrule">table-strategy</span><span class="token punctuation">:</span>              <span class="token key atrule">standard</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 配置分表的路由键</span>                <span class="token key atrule">sharding-column</span><span class="token punctuation">:</span> id                <span class="token comment" spellcheck="true"># 策略算法名称</span>                <span class="token key atrule">sharding-algorithm-name</span><span class="token punctuation">:</span> user<span class="token punctuation">-</span>inline        <span class="token comment" spellcheck="true"># 定义分片算法</span>        <span class="token key atrule">sharding-algorithms</span><span class="token punctuation">:</span>          <span class="token key atrule">user-inline</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 使用自定义表达式</span>            <span class="token key atrule">type</span><span class="token punctuation">:</span> inline            <span class="token key atrule">props</span><span class="token punctuation">:</span>              <span class="token key atrule">algorithm-expression</span><span class="token punctuation">:</span> user_info_$<span class="token punctuation">-</span><span class="token punctuation">></span><span class="token punctuation">{</span>(id % 2) == 0 <span class="token punctuation">?</span> 2<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、分库分表&quot;&gt;&lt;a href=&quot;#一、分库分表&quot; class=&quot;headerlink&quot; title=&quot;一、分库分表&quot;&gt;&lt;/a&gt;一、分库分表&lt;/h3&gt;&lt;h4 id=&quot;1-基本介绍&quot;&gt;&lt;a href=&quot;#1-基本介绍&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="中间件" scheme="https://great-jin.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="Spring Boot" scheme="https://great-jin.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>二进制位移详解</title>
    <link href="https://great-jin.github.io/java/basis/bitwise/"/>
    <id>https://great-jin.github.io/java/basis/bitwise/</id>
    <published>2024-04-19T16:00:00.000Z</published>
    <updated>2024-04-20T03:45:50.608Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、变换计算"><a href="#一、变换计算" class="headerlink" title="一、变换计算"></a>一、变换计算</h3><h4 id="1-位与操作"><a href="#1-位与操作" class="headerlink" title="1. 位与操作"></a>1. 位与操作</h4><p>位与即对两个操作数的每个位执行逻辑与操作，只有在对应的位都是 <code>1</code> 时，结果才为 <code>1</code>。<br><img src="/album/loading.gif" data-original="/album/article/java/bit/1.png"></p><p>对应 <code>Java</code> 操作示例如下，通过 <code>&amp;</code> 执行位与操作。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 二进制表示为 1001</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 二进制表示为 0101</span>    <span class="token keyword">int</span> resultAnd <span class="token operator">=</span> a <span class="token operator">&amp;</span> b<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果为 0001，即 1</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Bitwise AND: %s, \tBit: %s\n"</span><span class="token punctuation">,</span> resultAnd<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>resultAnd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-位或操作"><a href="#2-位或操作" class="headerlink" title="2. 位或操作"></a>2. 位或操作</h4><p>位或即对两个操作数的每个位执行逻辑或操作，只要对应的位有一个为 <code>1</code>，结果就为 <code>1</code>。<br><img src="/album/loading.gif" data-original="/album/article/java/bit/2.png"></p><p>对应 <code>Java</code> 操作示例如下，通过 <code>|</code> 执行位或操作。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 二进制表示为 1001</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 二进制表示为 0101</span>    <span class="token keyword">int</span> resultOr <span class="token operator">=</span> a <span class="token operator">|</span> b<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果为 1101，即 13</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Bitwise OR: %s, \tBit: %s\n"</span><span class="token punctuation">,</span> resultOr<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>resultOr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-异或操作"><a href="#3-异或操作" class="headerlink" title="3. 异或操作"></a>3. 异或操作</h4><p>亦或即比对相同位置的数，两个数相同时为 <code>0</code>，不同时为 <code>1</code>。<br><img src="/album/loading.gif" data-original="/album/article/java/bit/3.png"></p><p>对应 <code>Java</code> 操作示例如下，通过 <code>^</code> 执行亦或操作。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 二进制表示为 1001</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 二进制表示为 0101</span>    <span class="token keyword">int</span> resultXor <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果为 1100，即 12</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Bitwise XOR: %s, \tBit: %s\n"</span><span class="token punctuation">,</span> resultXor<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>resultXor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-位非操作"><a href="#4-位非操作" class="headerlink" title="4. 位非操作"></a>4. 位非操作</h4><p>位非即对操作数的每个位执行取反操作，<code>0</code> 变 <code>1</code>，<code>1</code> 变 <code>0</code>。<br><img src="/album/loading.gif" data-original="/album/article/java/bit/4.png"></p><h3 id="二、位移计算"><a href="#二、位移计算" class="headerlink" title="二、位移计算"></a>二、位移计算</h3><h4 id="1-正数位移"><a href="#1-正数位移" class="headerlink" title="1. 正数位移"></a>1. 正数位移</h4><h5 id="1-左移"><a href="#1-左移" class="headerlink" title="(1) 左移"></a>(1) 左移</h5><p>通过符号 <code>&lt;&lt;</code> 表示左移，正数左移在末尾补 <code>0</code>。<br><img src="/album/loading.gif" data-original="/album/article/java/bit/5.png"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 10, 1010</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s, %s\n"</span><span class="token punctuation">,</span> a1<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a2 <span class="token operator">=</span> a1 <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 40, 101000</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s, %s\n"</span><span class="token punctuation">,</span> a3<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-右移"><a href="#2-右移" class="headerlink" title="(2) 右移"></a>(2) 右移</h5><p>通过符号 <code>&gt;&gt;</code> 表示右移，正数右移最高位补符号位 <code>0</code>。<br><img src="/album/loading.gif" data-original="/album/article/java/bit/6.png"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 10, 1010</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s, %s\n"</span><span class="token punctuation">,</span> a1<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a3 <span class="token operator">=</span> a1 <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2, 10</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s, %s\n"</span><span class="token punctuation">,</span> a3<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-负数位移"><a href="#2-负数位移" class="headerlink" title="2. 负数位移"></a>2. 负数位移</h4><p>开始前先看一下如何计算负数的二进制，其步骤如下：</p><ul><li>计算其对应绝对值的二进制值；</li><li>对得到的值执行取反操作，即每一位都取其相反值；</li><li>对得到的反码值加一得到补码，该补码即负数其对应的二进制；</li></ul><p>注意计算补码加一时，若对应位计算结果大于 <code>1</code> 则对应计算结果为 <code>0</code> 并向前一位加 <code>1</code>。<br><img src="/album/loading.gif" data-original="/album/article/java/bit/7.png"></p><h5 id="1-左移-1"><a href="#1-左移-1" class="headerlink" title="(1) 左移"></a>(1) 左移</h5><p>通过符号 <code>&lt;&lt;</code> 表示左移，负数左移在末尾补 <code>0</code>。<br><img src="/album/loading.gif" data-original="/album/article/java/bit/8.png"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 二进制表示为 1001</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 二进制表示为 0101</span>    <span class="token keyword">int</span> resultXor <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果为 1100，即 12</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Bitwise XOR: %s, \tBit: %s\n"</span><span class="token punctuation">,</span> resultXor<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>resultXor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-右移-1"><a href="#2-右移-1" class="headerlink" title="(2) 右移"></a>(2) 右移</h5><p>通过符号 <code>&gt;&gt;</code> 表示右移，负数右移最高位补符号位 <code>1</code>。<br><img src="/album/loading.gif" data-original="/album/article/java/bit/9.png"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 二进制表示为 1001</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 二进制表示为 0101</span>    <span class="token keyword">int</span> resultXor <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果为 1100，即 12</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Bitwise XOR: %s, \tBit: %s\n"</span><span class="token punctuation">,</span> resultXor<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>resultXor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-无符号位移"><a href="#3-无符号位移" class="headerlink" title="3. 无符号位移"></a>3. 无符号位移</h4><p>对于无符号右移 <code>&gt;&gt;&gt;</code>，无论是正数还是负数, 右移最高位一律补 <code>0</code>。<br><img src="/album/loading.gif" data-original="/album/article/java/bit/10.png"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 10, 1010</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s, %s\n"</span><span class="token punctuation">,</span> a1<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a4 <span class="token operator">=</span> a1 <span class="token operator">>>></span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2, 10</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s, %s\n"</span><span class="token punctuation">,</span> a4<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>a4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、变换计算&quot;&gt;&lt;a href=&quot;#一、变换计算&quot; class=&quot;headerlink&quot; title=&quot;一、变换计算&quot;&gt;&lt;/a&gt;一、变换计算&lt;/h3&gt;&lt;h4 id=&quot;1-位与操作&quot;&gt;&lt;a href=&quot;#1-位与操作&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="JAVA基础" scheme="https://great-jin.github.io/categories/JAVA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Kafka零拷贝详解</title>
    <link href="https://great-jin.github.io/db/kafka/zerocopy/"/>
    <id>https://great-jin.github.io/db/kafka/zerocopy/</id>
    <published>2024-04-13T16:00:00.000Z</published>
    <updated>2024-06-15T12:55:57.168Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、数据读写"><a href="#一、数据读写" class="headerlink" title="一、数据读写"></a>一、数据读写</h3><h4 id="1-传统方式"><a href="#1-传统方式" class="headerlink" title="1. 传统方式"></a>1. 传统方式</h4><p>首先让我们看一下不做任何特殊处理的数据流读取方式，以文件下载请求为例，其大致流程如下：</p><ul><li>用户端发送 <code>read()</code> 请求读取数据；</li><li><code>CPU</code> 在接收到该请求后向磁盘发出 <code>IO</code> 请求；</li><li>磁盘接收到 <code>CPU</code> 发出的 <code>IO</code> 请求后读取数据并存入磁盘缓存区，并在完成后向 <code>CPU</code> 发送响应；</li><li><code>CPU</code> 接收到响应后读取磁盘缓存区数据至 <code>Page Cache</code>;</li><li>读取至 <code>Page Cache</code> 后需要再次拷贝至用户缓存区；<br><img src="/album/loading.gif" data-original="/album/article/db/kafka/copy/1.png"></li></ul><p>了解大致流程之后你可能会疑惑，为什么数据读取至磁盘缓冲区之后 <code>CPU</code> 不直接拷贝至用户缓存区，而是要先拷贝到 <code>Page Cache</code>？原因其实也很简单，因为用户缓存区权限相对较低，无法直接与磁盘交互，必须通过内核层进行中转，而 <code>Page Cache</code> 则是内核态的一种缓存优化方式。<br><img src="/album/loading.gif" data-original="/album/article/db/kafka/copy/2.png"></p><h4 id="2-DMA技术"><a href="#2-DMA技术" class="headerlink" title="2. DMA技术"></a>2. DMA技术</h4><p>在上述的流程中可以看到，在整个数据的拷贝过程中 <code>CPU</code> 都占据着主导地位，即干了所有的重活并一直处于阻塞状态，在此期间 <code>CPU</code> 将无法处理其它任务。很显然这种方式相对较为低效，因此 <code>DMA(Direct Memory Access)</code> 应运而生，它接替了 <code>CPU</code> 在 <code>IO</code> 操作中大部分繁重搬运任务，而 <code>CPU</code> 的核心任务则为确定的需要传输的数据以及数据的去向。</p><blockquote><p>同样以之前的 <code>read()</code> 读取为例，与之前的不同的区别如下：</p></blockquote><ul><li><code>CPU</code> 接收到 <code>IO</code> 请求后转发至 <code>DMA</code>，由其向磁盘发出 <code>IO</code> 请求；</li><li>磁盘读取完成后通知 <code>DMA</code> 执行拷贝，此过程 <code>CPU</code> 不参与搬运任务；<br><img src="/album/loading.gif" data-original="/album/article/db/kafka/copy/3.png"></li></ul><p>可以看到以一次读取为例，<code>CPU</code> 的拷贝频次由 <code>2</code> 次降为 <code>1</code> 次，而通常读取伴随着写入操作，也就意味着一次完整的读写操作就能让 <code>CPU</code> 闲置出 <code>2</code> 两次搬运操作从而执行其它任务。<br><img src="/album/loading.gif" data-original="/album/article/db/kafka/copy/4.png"></p><h4 id="3-数据缓冲"><a href="#3-数据缓冲" class="headerlink" title="3. 数据缓冲"></a>3. 数据缓冲</h4><p>上述提到的两种方式中都涉及到一个概念——内核缓冲区 <code>(Page Cache)</code>，我们都知道内存的读取效率远超于磁盘。因此，若能够在内存中操作磁盘数据效率将大大提升，而 <code>Page Cache</code> 则是磁盘数据在内存中的暂存空间。</p><p>通过 <code>Page Cache</code> 将磁盘上的数据缓存在内存中，系统可以避免频繁地访问慢速的磁盘，从而减少了 <code>I/O</code> 操作的次数，加快了数据的访问速度。当进程再次访问相同的数据时，系统可以直接从 <code>Page Cache</code> 中读取，而不必再次从磁盘中加载，从而节省了大量的时间。</p><p><code>Page Cache</code> 是一种按需加载的缓存机制，它会根据系统内存的可用情况来管理缓存。当系统内存不足时，操作系统会根据一定的策略来释放 <code>Page Cache</code> 中的部分数据，以确保系统的正常运行。</p><h3 id="二、模式优化"><a href="#二、模式优化" class="headerlink" title="二、模式优化"></a>二、模式优化</h3><h4 id="1-内存映射"><a href="#1-内存映射" class="headerlink" title="1. 内存映射"></a>1. 内存映射</h4><p>虽然 <code>DMA</code> 技术降低了 <code>CPU</code> 负载压力，让其能够执行更多的系统任务，但针对于 <code>IO</code> 操作读写任务而言，整体流程上的搬运工作并没有减轻，一次完成的读写操作仍需要搬运 <code>4</code> 次。因此，想要提高 <code>IO</code> 流程的效率，需要的是减少重复数据拷贝工作。</p><p>由于用户层与内核、磁盘之间的权限问题，导致同一份数据在此期间执行了多次搬运拷贝，以之前的提到的图示为例，如果用户层能够直接读取内核层数据，那么 <code>CPU</code> 即可省去将数据由内核层拷贝至用户层这一操作。</p><p>而 <code>mmap(Memory-mapped file support)</code> 内存映射则正是实现了这一点，其将内核缓冲区里的数据映射到用户层，从而实现在用户层即可访问内核层数据，也就节省了一次 <code>CPU</code> 数据拷贝。<br><img src="/album/loading.gif" data-original="/album/article/db/kafka/copy/6.png"></p><h4 id="2-sendfile"><a href="#2-sendfile" class="headerlink" title="2. sendfile"></a>2. sendfile</h4><p>在 <code>linux</code> 中提供了专门的文件传输函数 <code>sendfile()</code> 可用于替代 <code>read()</code> 与 <code>write()</code> 操作。该函数能够直接实现两个内核态的数据拷贝，从而减少了 <code>1</code> 次用户态层级切换，在 <code>Java</code> 的 <code>NIO</code> 中也涉及到该函数的封装调用，后面会详细介绍。</p><p>在 <code>Nginx</code> 的配置文件中经常可以看到下述配置，其即代表使用 <code>sendfile</code> 执行传输。</p><pre class="line-numbers language-conf"><code class="language-conf">http {    sendfile        on;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="三、Java实现"><a href="#三、Java实现" class="headerlink" title="三、Java实现"></a>三、Java实现</h3><h4 id="1-NIO接口"><a href="#1-NIO接口" class="headerlink" title="1. NIO接口"></a>1. NIO接口</h4><p>在上述提到 <code>linux</code> 中提供了 <code>sendfile()</code> 替换了 <code>read()</code> 和 <code>write()</code> 从而减少状态的切换，在 <code>NIO</code> 中的 <code>FileChannel</code> 正利用了这一方式提高了传输效率。</p><p>在 <code>FileChannelImpl</code> 的 <code>transferTo()</code> 方法中正是封装利用这一特性执行数据的传输，通过下述图示了解其类的层级结构。<br><img src="/album/loading.gif" data-original="/album/article/db/kafka/copy/10.png"></p><p><code>transferTo()</code> 方法的内部实现逻辑此处不具体展开描述，感兴趣的朋友可以自行查看 <code>JDk</code> 源码，这里以简洁的图示描述其执行调用路径。<br><img src="/album/loading.gif" data-original="/album/article/db/kafka/copy/11.png"></p><h4 id="2-源码解读"><a href="#2-源码解读" class="headerlink" title="2. 源码解读"></a>2. 源码解读</h4><p><code>NIO</code> 的 <code>transferTo()</code> 方法调用执行最终定格在 <code>transferTo0()</code> 方法，可以看到该方法为 <code>native</code> 关键字声明，表明其为原生 <code>c++</code> 方式实现。<br><img src="/album/loading.gif" data-original="/album/article/db/kafka/copy/12.png"></p><p>为了查看其具体内容，我们需要查看 <code>openjdk</code> 的源码，此版本为开源版本，而日常使用的并不开源也就无法查看具体 <code>native</code> 实现逻辑，具体的实现代码内容链接：<a href="https://hg.openjdk.org/jdk8/jdk8/jdk/file/687fd7c7986d/src/solaris/native/sun/nio/ch/FileChannelImpl.c">c++源码实现</a>。</p><p>这里为了更方便查看我截图部分关键代码，可以看到在 <code>Linux</code> 系统下其正是通过调用 <code>sendfile()</code> 实现。<br><img src="/album/loading.gif" data-original="/album/article/db/kafka/copy/13.png"></p><h3 id="四、大文件传输"><a href="#四、大文件传输" class="headerlink" title="四、大文件传输"></a>四、大文件传输</h3><h4 id="1-直接IO"><a href="#1-直接IO" class="headerlink" title="1. 直接IO"></a>1. 直接IO</h4><p>之前提到了 <code>Page Cache</code> 技术通过内存方式提高了数据读取效率，但对于大文件的场景下，显然此方式不太合适。若在传输的大文件时仍采取 <code>Page Cache</code> 暂存，显然内存空间是及其有限的且不论能否完整存入，其还可能触发空间的回收导致其他任务缓存的小文件内容遭到回收。</p><p>因此，对于大文件的数据读取传输，更为高效的方式即通过 <code>直接IO</code> 将磁盘缓冲区文件直接拷贝至用户缓存区。而针对大文件的直接 <code>IO</code> 方式通常使用异步进行，当完成数据到用户缓冲区的拷贝后通知用户读取数据，在此之前 <code>CPU</code> 可执行其它进程任务。<br><img src="/album/loading.gif" data-original="/album/article/db/kafka/copy/7.png"></p><hr><p><strong>参考链接</strong></p><ol><li><a href="https://mp.weixin.qq.com/s/FgBCop2zFfcX5ZszE0NoCQ">傻瓜三歪让我教他「零拷贝」</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、数据读写&quot;&gt;&lt;a href=&quot;#一、数据读写&quot; class=&quot;headerlink&quot; title=&quot;一、数据读写&quot;&gt;&lt;/a&gt;一、数据读写&lt;/h3&gt;&lt;h4 id=&quot;1-传统方式&quot;&gt;&lt;a href=&quot;#1-传统方式&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="数据库" scheme="https://great-jin.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Kafka" scheme="https://great-jin.github.io/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>GRPC远程服务调用详解</title>
    <link href="https://great-jin.github.io/java/network/grpc/"/>
    <id>https://great-jin.github.io/java/network/grpc/</id>
    <published>2024-03-23T16:00:00.000Z</published>
    <updated>2024-07-05T13:03:03.463Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、概念介绍"><a href="#一、概念介绍" class="headerlink" title="一、概念介绍"></a>一、概念介绍</h3><h4 id="1-RPC调用"><a href="#1-RPC调用" class="headerlink" title="1. RPC调用"></a>1. RPC调用</h4><p>开始之前先介绍一下 <code>RPC(Remote procedure call)</code> 的定义，即远程服务调用，即在当前的程序中调用其它程序的服务实现。</p><p>假设存在两个程序 <code>Systemc-A</code> 与 <code>Systemc-B</code>，并在 <code>Systemc-A</code> 中定义了接口 <code>getData()</code>，而实现类在 <code>Systemc-B</code> 中。当 <code>Systemc-A</code> 经过一定手段通过 <code>getData()</code> 接口调用 <code>Systemc-B</code> 中的实现类，这个过程即远程服务调用。<br><img src="/album/loading.gif" data-original="/album/article/java/rpc/1.png"></p><h4 id="2-实现原理"><a href="#2-实现原理" class="headerlink" title="2. 实现原理"></a>2. 实现原理</h4><p>针对 <code>RPC</code> 服务功能的实现，通常可通过动态代理等特性实现。</p><p>如通过动态代理的方式创建实例对象时获取目标类信息、目标方法及方法参数等信息，再经由网络传输等手段请求至远端服务将传入的信息利用反射实现服务调用并返回。</p><h3 id="二、工程配置"><a href="#二、工程配置" class="headerlink" title="二、工程配置"></a>二、工程配置</h3><h4 id="1-依赖引入"><a href="#1-依赖引入" class="headerlink" title="1. 依赖引入"></a>1. 依赖引入</h4><p><code>GRPC</code> 是由 <code>Google</code> 开发的一款 <code>RPC</code> 服务框架，基于 <code>HTTP2</code> 传输协议实现，针对网络层实现一系列优化从而达到高效传输的目的。</p><p><code>GRPC</code> 提供了多语言的集成方式，包含 <code>Java SDK</code> 依赖，在工程中添加下述依赖即可开箱即用。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.grpc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>grpc-netty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.62.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.grpc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>grpc-protobuf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.62.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.grpc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>grpc-stub<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.62.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-插件依赖"><a href="#2-插件依赖" class="headerlink" title="2. 插件依赖"></a>2. 插件依赖</h4><p><code>GRPC</code> 的服务接口并不是传统的 <code>.java</code> 文件配置，而是以其相应格式标准定义于 <code>.proto</code> 文件中，因此需要在工程依赖中添加对应的打包插件。</p><p>在工程的 <code>pom.xml</code> 文件中添加下述插件配置：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>extensions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>extension</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>kr.motd.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>os-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>extension</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>extensions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.xolstice.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>protobuf-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginId</span><span class="token punctuation">></span></span>grpc-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>protocArtifact</span><span class="token punctuation">></span></span>                    com.google.protobuf:protoc:3.3.0:exe:${os.detected.classifier}                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>protocArtifact</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginArtifact</span><span class="token punctuation">></span></span>                    io.grpc:protoc-gen-grpc-java:1.4.0:exe:${os.detected.classifier}                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginArtifact</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>compile-custom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-插件安装"><a href="#3-插件安装" class="headerlink" title="3. 插件安装"></a>3. 插件安装</h4><p>除此之外，还需要在 <code>IDEA</code> 中安装 <code>proto</code> 编译插件用于将 <code>proto</code> 文件内容转为 <code>java</code> 文件。</p><p>如果 <code>IDEA</code> 为旗舰版则自带 <code>Protocol Buffers</code> 插件，若为社区版则需要手动去插件市场下载 <code>Protobuf</code> 插件。<br><img src="/album/loading.gif" data-original="/album/article/java/rpc/2.png"></p><h3 id="三、文件编写"><a href="#三、文件编写" class="headerlink" title="三、文件编写"></a>三、文件编写</h3><h4 id="1-基本格式"><a href="#1-基本格式" class="headerlink" title="1. 基本格式"></a>1. 基本格式</h4><p>在 <code>GRPC</code> 中，接口的定义不在处于 <code>java</code> 文件中，而是通过 <code>proto</code> 文件定义。</p><p>并且需要注意的一点是 <code>.proto</code> 文件需要放置于 <code>proto</code> 目录下，其与 <code>java</code> 目录处于同一层级。<br><img src="/album/loading.gif" data-original="/album/article/java/rpc/3.png"></p><p><code>proto</code> 文件定义并不复杂，其中通过 <code>syntax</code> 指定协议版本；<code>package</code> 用于指定报名，与 <code>java</code> 中的包名作用效果类似用于层级管理；<code>option</code> 用于添加参数配置。</p><pre class="line-numbers language-proto"><code class="language-proto">syntax = "proto3";package xyz.ibudai.practice.tool.grpc;option java_multiple_files = true;// 指定生成的 gRPC 服务接口和消息类的包名option java_package = "xyz.ibudai.practice.tool.grpc.bean";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-对象定义"><a href="#2-对象定义" class="headerlink" title="2. 对象定义"></a>2. 对象定义</h4><p>在接口定义中，通过其入参与出参都可能为复杂的 <code>Java</code> 对象，而在 <code>proto</code> 文件中即通过 <code>message</code> 关键字定义对象。</p><p>例如存在一个 <code>Java</code> 类定义如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloRequest</span> <span class="token punctuation">{</span>    String userName<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>则 <code>HelloRequest</code> 在 <code>proto</code> 中对应的定义形式如下，其中 <code>userName = 1</code> 的含义代表给 <code>userName</code> 的别名为 <code>1</code>。</p><p>众所周知，当一个类以 <code>Json</code> 等形式表达时其格式为 <code>key:value</code> 形式，即上述示例对应的为 <code>&quot;userName&quot;: &quot;Alex&quot;</code> 形式，但是在 <code>GRPC</code> 中其为 <code>&quot;1&quot;: &quot;Alex&quot;</code>，即通过数字别名取代字段名，进一步减少数据的大小降低传输压力。</p><pre class="line-numbers language-proto"><code class="language-proto">message HelloRequest {    string userName = 1;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-接口定义"><a href="#3-接口定义" class="headerlink" title="3. 接口定义"></a>3. 接口定义</h4><p>同理在 <code>proto</code> 中接口类的定义通过 <code>service</code> 与 <code>rpc</code> 关键字定义。</p><p>如存在下述示例接口类 <code>TestService</code> 及 <code>getDate()</code> 方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TestService</span> <span class="token punctuation">{</span>    HelloResponse <span class="token function">getDate</span><span class="token punctuation">(</span>HelloRequest req<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>则上述接口在对应的 <code>proto</code> 文件中的定义格式如下：</p><pre class="line-numbers language-proto"><code class="language-proto">service TestService {    rpc getDate (HelloRequest) returns (HelloResponse) {    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>下述即为一个完整的 <code>proto</code> 文件定义示例。</p><pre class="line-numbers language-java"><code class="language-java">syntax <span class="token operator">=</span> <span class="token string">"proto3"</span><span class="token punctuation">;</span><span class="token keyword">package</span> xyz<span class="token punctuation">.</span>ibudai<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>tool<span class="token punctuation">.</span>grpc<span class="token punctuation">;</span>option java_multiple_files <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>option java_package <span class="token operator">=</span> <span class="token string">"xyz.ibudai.practice.tool.grpc.bean"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定义请求体</span>message HelloRequest <span class="token punctuation">{</span>    string userName <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义相应内容</span>message HelloResponse <span class="token punctuation">{</span>    string message <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 服务接口，定义请求参数和相应结果</span>service TestService <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义 RPC 接口方法</span>    rpc <span class="token function">getDate</span> <span class="token punctuation">(</span>HelloRequest<span class="token punctuation">)</span> <span class="token function">returns</span> <span class="token punctuation">(</span>HelloResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-文件编译"><a href="#4-文件编译" class="headerlink" title="4. 文件编译"></a>4. 文件编译</h4><p>完成上述内容编写之后需要将其编译为程序可读的 <code>Java</code> 文件。</p><p>在 <code>IDEA</code> 右侧 <code>maven</code> 中找到下述依次执行编译。<br><img src="/album/loading.gif" data-original="/album/article/java/rpc/4.png"></p><p>执行完成后即会在工程的 target 目录下生成对应的文件，其中执行 <code>compile</code> 会生成文件于 <code>target/generated-sources/protobuf/java</code> 下，执行 <code>custom</code> 文件会生成于 <code>target/generated-sources/protobuf/grpc-java</code> 下。<br><img src="/album/loading.gif" data-original="/album/article/java/rpc/5.png"></p><h3 id="四、服务端应用"><a href="#四、服务端应用" class="headerlink" title="四、服务端应用"></a>四、服务端应用</h3><h4 id="1-接口实现"><a href="#1-接口实现" class="headerlink" title="1. 接口实现"></a>1. 接口实现</h4><p>完成上述的接口定义之后即可编写接口的实现类，实现编译生成类 <code>TestServiceGrpc.TestServiceImplBase</code> 并重写接口方法，通过 <code>onNext()</code> 与 <code>onCompleted()</code> 将数据提交返回。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">TestServiceGrpc<span class="token punctuation">.</span>TestServiceImplBase</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getDate</span><span class="token punctuation">(</span>HelloRequest request<span class="token punctuation">,</span> StreamObserver<span class="token operator">&lt;</span>HelloResponse<span class="token operator">></span> responseObserver<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String data <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server receive data: "</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        HelloResponse response <span class="token operator">=</span> HelloResponse<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"Data from server: "</span> <span class="token operator">+</span> data<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 返回数据，等价于 return response;</span>        responseObserver<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        responseObserver<span class="token punctuation">.</span><span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-服务启动"><a href="#2-服务启动" class="headerlink" title="2. 服务启动"></a>2. 服务启动</h4><p>接口实现定义完成后即可启动服务端，通过 <code>ServerBuilder</code> 构建服务端对象，默认 <code>Host</code> 为当前本地 <code>IP</code>，其中 <code>addService()</code> 为添加服务实现类，</p><p>完成后通过 <code>start()</code> 启动服务并由 <code>awaitTermination()</code> 阻塞当前线程等待应用关闭。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PORT <span class="token operator">=</span> <span class="token number">9000</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Server server <span class="token operator">=</span> ServerBuilder<span class="token punctuation">.</span><span class="token function">forPort</span><span class="token punctuation">(</span>PORT<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addService</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TestServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        server<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        server<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、客户端应用"><a href="#五、客户端应用" class="headerlink" title="五、客户端应用"></a>五、客户端应用</h3><h4 id="1-接口请求"><a href="#1-接口请求" class="headerlink" title="1. 接口请求"></a>1. 接口请求</h4><p>相对于服务端而言客户端实现实现更为简单，通过 <code>ManagedChannelBuilder</code> 连接至服务端，并由 <code>newBlockingStub()</code> 创建实例对象。</p><p>当创建完实例对象 <code>stub</code> 即与普通的接口调用并无区别，对应的示例如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String HOST <span class="token operator">=</span> <span class="token string">"localhost"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PORT <span class="token operator">=</span> <span class="token number">9000</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ManagedChannel channel <span class="token operator">=</span> ManagedChannelBuilder<span class="token punctuation">.</span><span class="token function">forAddress</span><span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">usePlaintext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TestServiceGrpc<span class="token punctuation">.</span>TestServiceBlockingStub stub <span class="token operator">=</span> TestServiceGrpc<span class="token punctuation">.</span><span class="token function">newBlockingStub</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>        HelloRequest request <span class="token operator">=</span> HelloRequest<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"Alex"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HelloResponse response <span class="token operator">=</span> stub<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>参考链接</strong></p><ol><li><a href="https://www.baeldung.com/grpc-introduction">Introduction to gRPC</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、概念介绍&quot;&gt;&lt;a href=&quot;#一、概念介绍&quot; class=&quot;headerlink&quot; title=&quot;一、概念介绍&quot;&gt;&lt;/a&gt;一、概念介绍&lt;/h3&gt;&lt;h4 id=&quot;1-RPC调用&quot;&gt;&lt;a href=&quot;#1-RPC调用&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="网络并发" scheme="https://great-jin.github.io/categories/%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Netty框架入门教程</title>
    <link href="https://great-jin.github.io/java/network/netty/"/>
    <id>https://great-jin.github.io/java/network/netty/</id>
    <published>2024-03-22T16:00:00.000Z</published>
    <updated>2024-07-05T12:59:48.634Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h3><h4 id="1-事件驱动"><a href="#1-事件驱动" class="headerlink" title="1. 事件驱动"></a>1. 事件驱动</h4><p><code>Netty</code> 是一款基于事件驱动的非阻塞网络请求框架，在开始前先了解一下什么是事件驱动。</p><p>事件驱动模型是一种常见的编程模型，在事件驱动模型中，系统的运行和行为主要由事件的触发和处理来驱动，而不是通过线程的阻塞和轮询来等待和处理请求。模型的核心思想是将任务的执行委托给事件驱动的机制，以实现异步、非阻塞的处理方式。</p><h4 id="2-名词解释"><a href="#2-名词解释" class="headerlink" title="2. 名词解释"></a>2. 名词解释</h4><h5 id="1-事件"><a href="#1-事件" class="headerlink" title="(1) 事件"></a>(1) 事件</h5><p>事件 <code>(Event)</code> 是系统中发生的某种特定的动作或状态变化，它可以是用户输入、网络消息、定时器触发等。事件驱动模型中的所有行为都是由事件触发和驱动的。</p><h5 id="2-事件处理器"><a href="#2-事件处理器" class="headerlink" title="(2) 事件处理器"></a>(2) 事件处理器</h5><p>事件处理器 <code>(Event Handler)</code> 是用于处理特定类型事件的组件或函数。当某个事件发生时，系统会将事件传递给相应的事件处理器来进行处理。事件处理器通常被注册到事件监听器或者事件分发器中。</p><h5 id="3-事件监听器"><a href="#3-事件监听器" class="headerlink" title="(3) 事件监听器"></a>(3) 事件监听器</h5><p>事件监听器 <code>(Event Listener)</code> 用于监听和接收特定类型的事件，并将事件分发给相应的事件处理器进行处理。它负责注册和管理事件处理器，以确保事件被正确处理。</p><h5 id="4-事件循环"><a href="#4-事件循环" class="headerlink" title="(4) 事件循环"></a>(4) 事件循环</h5><p>事件循环 <code>(Event Loop)</code> 是事件驱动模型的核心组件之一，它负责监听和接收事件，并将事件分发给相应的事件处理器进行处理。事件循环通常采用非阻塞的方式来等待事件的到来，以实现高效的事件处理。</p><h5 id="5-回调"><a href="#5-回调" class="headerlink" title="(5) 回调"></a>(5) 回调</h5><p>回调 <code>(Callback)</code> 是一种常见的事件处理机制，它通过在事件发生时调用预先注册的回调函数来处理事件。当某个事件发生时，系统会调用相应的回调函数来执行特定的逻辑。</p><h5 id="6-异步"><a href="#6-异步" class="headerlink" title="(6) 异步"></a>(6) 异步</h5><p>事件驱动模型通常采用异步 <code>(Asynchronous)</code> 的方式来处理事件，即事件的处理过程是非阻塞的，不会阻塞当前线程。通过异步处理，系统能够更好地利用资源，提高系统的并发性能和吞吐量。</p><h3 id="二、对象描述"><a href="#二、对象描述" class="headerlink" title="二、对象描述"></a>二、对象描述</h3><h4 id="1-Bootstrap"><a href="#1-Bootstrap" class="headerlink" title="1. Bootstrap"></a>1. Bootstrap</h4><p>在 <code>netty</code> 中由 <code>Bootstrap</code> 与 <code>ServerBootstrap</code> 分别用于建立服务端与客户端应用。</p><h4 id="2-EventLoop"><a href="#2-EventLoop" class="headerlink" title="2. EventLoop"></a>2. EventLoop</h4><p><code>EventLoop</code> 在 <code>netty</code> 中负责监听和接收事件，并将事件分发给相应的事件处理器。当存在一个或多个 <code>EventLoop</code> 通过 <code>EventLoopGroup</code> 进行管理，类似于线程池于线程的关系。</p><h4 id="3-ChannelFuture"><a href="#3-ChannelFuture" class="headerlink" title="3. ChannelFuture"></a>3. ChannelFuture</h4><p>在 <code>netty</code> 中通过事件的处理都是异步非阻塞，而 <code>ChannelFuture</code> 继承于 <code>Java</code> 中的 <code>Future</code> 类，返回异步事件处理结果。</p><h4 id="4-ChannelHandler"><a href="#4-ChannelHandler" class="headerlink" title="4. ChannelHandler"></a>4. ChannelHandler</h4><p>当 <code>EventLoop</code> 接收到事件时将提交至 <code>ChannelHandler</code> 进行处理，在此实现具体的业务处理逻辑。</p><h4 id="5-ChannelPipeline"><a href="#5-ChannelPipeline" class="headerlink" title="5. ChannelPipeline"></a>5. ChannelPipeline</h4><p>类似于 <code>EventLoopGroup</code>，当存在多个 <code>ChannelHandler</code> 时可将其连接为 <code>ChannelPipeline</code>，事件的处理将按照 <code>ChannelHandler</code> 在 <code>ChannelPipeline</code> 中添加的顺序有序执行。</p><h3 id="三、工程管理"><a href="#三、工程管理" class="headerlink" title="三、工程管理"></a>三、工程管理</h3><h4 id="1-依赖引入"><a href="#1-依赖引入" class="headerlink" title="1. 依赖引入"></a>1. 依赖引入</h4><p>新增 <code>Maven</code> 工程并在 <code>pom</code> 文件中引入相应依赖。</p><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.netty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>netty-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.89.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、服务端应用"><a href="#四、服务端应用" class="headerlink" title="四、服务端应用"></a>四、服务端应用</h3><h4 id="1-事件处理"><a href="#1-事件处理" class="headerlink" title="1. 事件处理"></a>1. 事件处理</h4><p>通过继承类 <code>SimpleChannelInboundHandler</code> 编写数据业务处理逻辑，<code>EventLoop</code> 会将数据提交至此。</p><p>当存在多个处理器时，需要在 <code>channelRead0()</code> 处理完成时通过 <code>fireChannelRead()</code> 方法将数据传递至一处理器，若只存在单个处理器则可忽略该行。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleServerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleChannelInboundHandler</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 处理客户端请求，并向客户端发送响应结果     *     * @param channelHandlerContext 请求上下文信息     * @param msg                   接收的数据     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">channelRead0</span><span class="token punctuation">(</span>ChannelHandlerContext channelHandlerContext<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server read(simple), data: "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 向下一级传递</span>        channelHandlerContext<span class="token punctuation">.</span><span class="token function">fireChannelRead</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>SimpleChannelInboundHandler</code> 继承于 <code>ChannelInboundHandlerAdapter</code> 可用于编写简单的事件处理，若需要管理连接建立与异常事件处理则需自定义继承 <code>ChannelInboundHandlerAdapter</code>。</p><p>其中 <code>channelActive()</code> 在首次通道建立时触发，由于通道的复用性其仅会触发一次；<code>channelRead()</code> 用于处理相应的业务逻辑，若执行耗时任务可通过 <code>ctx.channel().eventLoop().execute()</code> 新启线程异步执行；<code>exceptionCaught()</code> 则在通道异常时触发。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChannelServerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInboundHandlerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelActive</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server active."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server read(channel), data: "</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 当处理耗时任务时可通过 eventLoop() 启动线程异步执行</span>        <span class="token comment" spellcheck="true">// 同理通过 schedule() 启动一个延迟任务</span>        ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server read done."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 完成处理，响应客户端请求</span>        ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cause<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-链路配置"><a href="#2-链路配置" class="headerlink" title="2. 链路配置"></a>2. 链路配置</h4><p>通过继承 <code>ChannelInitializer</code> 将定义的一个或多个处理器构建添加至 <code>ChannelPipeline</code> 中。</p><p>在通道处理时将会按照此处 <code>addLast()</code> 的顺序执行，先添加的处理器处理优先级更高，可理解为一个队列逐级向后传递。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChannelServerInitializer</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 传输通道数据编解码配置     *     * @param sc 网络连接通道     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel sc<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取 ChannelPipeline 对象，用于配置网络处理器</span>        ChannelPipeline pipeline <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加字符串编解码器</span>        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加自定义的业务处理器</span>        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-事件监听"><a href="#3-事件监听" class="headerlink" title="3. 事件监听"></a>3. 事件监听</h4><p>在 <code>netty</code> 中可针对每一步操作添加监听器，用于监听处理事件的成功与失败。</p><p><code>netty</code> 提供了 <code>lamdba</code> 表达式与基础的类实例两种实现方法，下述为定义监听器类示例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerChannelListener</span> <span class="token keyword">implements</span> <span class="token class-name">ChannelFutureListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span>ChannelFuture channelFuture<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>channelFuture<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server lister, message: successful!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server lister, message: "</span> <span class="token operator">+</span> channelFuture<span class="token punctuation">.</span><span class="token function">cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-服务建立"><a href="#4-服务建立" class="headerlink" title="4. 服务建立"></a>4. 服务建立</h4><p>完成上述步骤后即可启动服务端应用，通过 <code>ServerBootstrap</code> 创建服务端引导类，负责设置服务器的启动配置，将不同的组件组合起来以构建服务器端应用，可以配置服务器的一些参数，如绑定端口、设置事件处理器、指定连接处理流程等。</p><p>通过 <code>group()</code> 配置线程组，其中 <code>parentGroup</code> 负责接受客户端连接，<code>childGroup</code> 负责处理连接的 <code>I/O</code> 事件，<code>childHandler()</code> 用于配置事件处理器；<code>channel()</code> 用于配置通道模型，对于异步通讯通常使用 <code>NioServerSocketChannel</code> 对象，对应的还存在 <code>OIO</code> 但其在新版中已被标记弃用。</p><p>完整的服务端应用启动代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyServerTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String HOST <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PORT <span class="token operator">=</span> <span class="token number">9090</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> ServerBootstrap bootstrap<span class="token punctuation">;</span>    <span class="token keyword">private</span> EventLoopGroup parentGroup<span class="token punctuation">,</span> childGroup<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// parentGroup: 监听客户端请求</span>        parentGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// childGroup: 处理每条连接的数据读写</span>        childGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// bootstrap: 用于创建和配置服务器，从而启动服务器入口</span>        bootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 配置线程组的角色</span>                <span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>parentGroup<span class="token punctuation">,</span> childGroup<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 配置服务端的 IO 模型, 这里取 NIO</span>                <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioServerSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 配置每条连接的数据读写和业务逻辑</span>                <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleServerInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serverSyncDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 绑定监听端口，Host 未指定时使用本地地址</span>            ChannelFuture future <span class="token operator">=</span> bootstrap<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServerChannelListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Bind done!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 等待关闭线程将阻塞。</span>            future<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>netty</code> 中每一步操作通过 <code>sync()</code> 或 <code>await()</code> 表示其为同步或异步操作，同时将返回一个 <code>ChannelFuture</code> 对象。即当以 <code>sync()</code> 操作时若任务耗时主线程将陷入阻塞，反之 <code>await()</code> 为异步则不会阻塞线程。</p><p>在 <code>netty</code> 中通过 <code>close()</code> 关闭传输通道，而 <code>closeFuture()</code> 用于获取关闭的结果。在上述示例中并未执行 <code>close()</code> 操作，因此 <code>closeFuture().sync()</code> 将会阻塞线程。</p><h3 id="五、客户端应用"><a href="#五、客户端应用" class="headerlink" title="五、客户端应用"></a>五、客户端应用</h3><h4 id="1-事件处理-1"><a href="#1-事件处理-1" class="headerlink" title="1. 事件处理"></a>1. 事件处理</h4><p>同理，客户端此处创建了一个处理器用于接收处理服务端返回的数据。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleClientHandler</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleChannelInboundHandler</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 处理客户端请求，并向客户端发送响应结果     *     * @param channelHandlerContext 请求上下文信息     * @param msg                   接收的数据     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">channelRead0</span><span class="token punctuation">(</span>ChannelHandlerContext channelHandlerContext<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Client read, data: "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-链路配置-1"><a href="#2-链路配置-1" class="headerlink" title="2. 链路配置"></a>2. 链路配置</h4><p><code>ChannelPipeline</code> 的配置与服务端类似，不再详细描述。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleClientInitializer</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 传输通道数据编解码配置     *     * @param sc 网络连接通道     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel sc<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取 ChannelPipeline 对象，用于配置网络处理器</span>        ChannelPipeline pipeline <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加字符串编解码器</span>        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加自定义的业务处理器</span>        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleClientHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-传输数据"><a href="#3-传输数据" class="headerlink" title="3. 传输数据"></a>3. 传输数据</h4><p>在 <code>netty</code> 中提供了 <code>ByteBuf</code> 用于承当数据容器，其对标 <code>Java</code> 中的 <code>ByteBuffer</code>。</p><p><code>ByteBuf</code> 提供了两种初始化方式：<code>alloc().buffer()</code> 与 <code>alloc().directBuffer()</code>，分别对应申请的内存为堆内内存和堆外内存，其中堆外内存并不受 <code>JVM</code> 垃圾回收的管理，在使用时需要尤为注意。</p><pre class="line-numbers language-java"><code class="language-java">ByteBuf byteBuf1 <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ByteBuf byteBuf2 <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">directBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>byteBuf1<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-服务建立-1"><a href="#4-服务建立-1" class="headerlink" title="4. 服务建立"></a>4. 服务建立</h4><p>客户端的建立与服务端类似，通过 <code>Bootstrap</code> 对象构造，不同的是其 <code>group()</code> 只需配置单个 <code>EventLoopGroup</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyClientTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String HOST <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PORT <span class="token operator">=</span> <span class="token number">9090</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Bootstrap bootstrap<span class="token punctuation">;</span>    <span class="token keyword">private</span> EventLoopGroup loopGroup<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        loopGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 指定线程模型</span>                <span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>loopGroup<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 指定 IO 类型为 NIO</span>                <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 禁用 Nagle 算法，发送数据包时都会立即发送，不会等待数据包的合并发送。</span>                <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>TCP_NODELAY<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// IO 处理逻辑</span>                <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleClientInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 客户端发送同步请求，程序阻塞     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clientSyncDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 建立同步连接通道</span>            Channel channel <span class="token operator">=</span> bootstrap<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 写入数据至 ByteBuf</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String message <span class="token operator">=</span> <span class="token string">"The message of "</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>                ByteBuf byteBuf <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                byteBuf<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 发送数据至服务端</span>                channel<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>byteBuf<span class="token punctuation">)</span><span class="token punctuation">;</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 关闭与当前 Channel 关联的连接。</span>            channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、基本概念&quot;&gt;&lt;a href=&quot;#一、基本概念&quot; class=&quot;headerlink&quot; title=&quot;一、基本概念&quot;&gt;&lt;/a&gt;一、基本概念&lt;/h3&gt;&lt;h4 id=&quot;1-事件驱动&quot;&gt;&lt;a href=&quot;#1-事件驱动&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="网络并发" scheme="https://great-jin.github.io/categories/%E7%BD%91%E7%BB%9C%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Digester XML解析教程</title>
    <link href="https://great-jin.github.io/java/utils/xml/"/>
    <id>https://great-jin.github.io/java/utils/xml/</id>
    <published>2024-03-08T16:00:00.000Z</published>
    <updated>2024-09-06T14:03:14.713Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、前置准备"><a href="#一、前置准备" class="headerlink" title="一、前置准备"></a>一、前置准备</h3><h4 id="1-概念解释"><a href="#1-概念解释" class="headerlink" title="1. 概念解释"></a>1. 概念解释</h4><p>在 <code>XML</code> 文件中有一个十分重要的概念 <code>XPath</code>，简单而言即用于定义元素的位置。</p><p>直接通过示例直观的了解 <code>XPath</code> 的定义，如一个 <code>XML</code> 的文件内容如下。那么值 <code>Alex</code> 对应的标签 <code>name</code> 其相应的 <code>XPath</code> 则为 <code>student/name</code>，即用于定位元素的路径。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Alex<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-依赖导入"><a href="#2-依赖导入" class="headerlink" title="2. 依赖导入"></a>2. 依赖导入</h4><p><code>Apache digester</code> 是 <code>Java</code> 中一种 <code>XML</code> 解析框架，能够在耗费最低系统资源的前提下实现高效 <code>XML</code> 文件解析。</p><p>使用方法简单快捷，在 <code>Maven</code> 项目中引入下述依赖即可开箱即用。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-digester3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-文件数据"><a href="#3-文件数据" class="headerlink" title="3. 文件数据"></a>3. 文件数据</h4><p>在开始之前先准备一个 <code>XML</code> 数据文件，文件内容如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entityContainer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entity</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>alex<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attribute</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>math<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>80<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>attribute</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attribute</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>science<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>85<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>attribute</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entity</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entity</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>beth<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attribute</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>math<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>85<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>attribute</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attribute</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>science<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>90<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>attribute</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entity</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entityContainer</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、基础操作"><a href="#二、基础操作" class="headerlink" title="二、基础操作"></a>二、基础操作</h3><h4 id="1-实体对象"><a href="#1-实体对象" class="headerlink" title="1. 实体对象"></a>1. 实体对象</h4><p>相对应于 <code>XML</code> 文件，需要创建对应的 <code>Java</code> 实体类用作载体。</p><p>同上述准备的 <code>XML</code> 文件内容此处创建了三个对应的实体类 <code>EntityContainer</code>，<code>Entity</code> 与 <code>Attribute</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EntityContainer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Entity<span class="token operator">></span> entityList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addEntity</span><span class="token punctuation">(</span>Entity entity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        entityList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Entity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Attribute<span class="token operator">></span> attributes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addAttribute</span><span class="token punctuation">(</span>Attribute attribute<span class="token punctuation">)</span> <span class="token punctuation">{</span>        attributes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Attribute</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String key<span class="token punctuation">;</span>    <span class="token keyword">private</span> String value<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-规则配置"><a href="#2-规则配置" class="headerlink" title="2. 规则配置"></a>2. 规则配置</h4><p>完成上述步骤后即可开始正式的文件内容解析，<code>Digester</code> 解析工具其提供的规则配置方法参考下表：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">addObjectCreate()</td>        <td style="text-align: center;">用于设置与 Java 对象的映射关系。</td>    </tr>    <tr>        <td style="text-align: center;">addSetProperties()</td>        <td style="text-align: center;">设置对象属性值。</td>    </tr>    <tr>        <td style="text-align: center;">addBeanPropertySetter()</td>        <td style="text-align: center;">用于 XPath 与实体对象属性的匹配</td>    </tr>    <tr>        <td style="text-align: center;">addSetNext()</td>        <td style="text-align: center;">一个标签内嵌套多个同标签时用于指定添加方法。</td>    </tr></table><h4 id="3-读取示例"><a href="#3-读取示例" class="headerlink" title="3. 读取示例"></a>3. 读取示例</h4><p>因此，之前提到的 <code>XML</code> 文件其对应的解析示例如下，其中 <code>parse()</code> 方法支持输入文件流与文本块的方式，前者基于事件驱动后者基于内存驱动，在解析大文件的情况下前者显然能够占用更少的资源。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DigestXmlTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String location <span class="token operator">=</span> <span class="token string">"src\\main\\resources\\xml\\data.xml"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">basicTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Digester digester <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Digester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        digester<span class="token punctuation">.</span><span class="token function">addObjectCreate</span><span class="token punctuation">(</span><span class="token string">"entityContainer"</span><span class="token punctuation">,</span> EntityContainer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        digester<span class="token punctuation">.</span><span class="token function">addSetProperties</span><span class="token punctuation">(</span><span class="token string">"entityContainer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        digester<span class="token punctuation">.</span><span class="token function">addObjectCreate</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity"</span><span class="token punctuation">,</span> Entity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// addBeanPropertySetter(): march xml label with bean field</span>        digester<span class="token punctuation">.</span><span class="token function">addBeanPropertySetter</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/id"</span><span class="token punctuation">,</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        digester<span class="token punctuation">.</span><span class="token function">addBeanPropertySetter</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/name"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// addSetNext(): when march multiple item then put to collection</span>        digester<span class="token punctuation">.</span><span class="token function">addSetNext</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity"</span><span class="token punctuation">,</span> <span class="token string">"addEntity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        digester<span class="token punctuation">.</span><span class="token function">addObjectCreate</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/attribute"</span><span class="token punctuation">,</span> Attribute<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        digester<span class="token punctuation">.</span><span class="token function">addBeanPropertySetter</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/attribute/key"</span><span class="token punctuation">,</span> <span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        digester<span class="token punctuation">.</span><span class="token function">addBeanPropertySetter</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/attribute/value"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        digester<span class="token punctuation">.</span><span class="token function">addSetNext</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/attribute"</span><span class="token punctuation">,</span> <span class="token string">"addAttribute"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>FileReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            EntityContainer container <span class="token operator">=</span> digester<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、进阶配置"><a href="#三、进阶配置" class="headerlink" title="三、进阶配置"></a>三、进阶配置</h3><h4 id="1-规则定义"><a href="#1-规则定义" class="headerlink" title="1. 规则定义"></a>1. 规则定义</h4><p>在上述的示例中通过配置的规则即可实现数据文件的解析，但每次使用都需定义解析规则，显然过于繁杂。</p><p>因此，在 <code>Digester</code> 中提供了 <code>AbstractRulesModule</code> 可实现规则配置的统一管理，一次定义即可全局使用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRuleModule</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractRulesModule</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">forPattern</span><span class="token punctuation">(</span><span class="token string">"entityContainer"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ofType</span><span class="token punctuation">(</span>EntityContainer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">forPattern</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ofType</span><span class="token punctuation">(</span>Entity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">forPattern</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBeanProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">forPattern</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBeanProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">forPattern</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span><span class="token string">"addEntity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">forPattern</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/attribute"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ofType</span><span class="token punctuation">(</span>Attribute<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">forPattern</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/attribute/key"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBeanProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">forPattern</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/attribute/value"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBeanProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">forPattern</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/attribute"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span><span class="token string">"addAttribute"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-读取示例"><a href="#2-读取示例" class="headerlink" title="2. 读取示例"></a>2. 读取示例</h4><p>上述配置方式相对应的读取示例代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DigestXmlTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String location <span class="token operator">=</span> <span class="token string">"src\\main\\resources\\xml\\data.xml"</span><span class="token punctuation">;</span>     <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ruleTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// write once, use anywhere</span>        <span class="token keyword">final</span> DigesterLoader loader <span class="token operator">=</span> DigesterLoader<span class="token punctuation">.</span><span class="token function">newLoader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyRuleModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Digester digester <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">newDigester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// read and parse</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>FileReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            EntityContainer container <span class="token operator">=</span> digester<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、注解方式"><a href="#四、注解方式" class="headerlink" title="四、注解方式"></a>四、注解方式</h3><h4 id="1-注解介绍"><a href="#1-注解介绍" class="headerlink" title="1. 注解介绍"></a>1. 注解介绍</h4><p>除了代码配置解析规则之外，在 <code>3.x</code> 版本中提供了注解的方法，从而实现更便捷配置。</p><p><code>Digester</code> 解析规则相配套的注解及其描述参考下表：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">注解</td>        <th style="text-align: center;">描述</td>    </tr>    <tr>        <td style="text-align: center;">@ObjectCreate</td>        <td style="text-align: center;">匹配的 XPath 开始标识。</td>    </tr>    <tr>        <td style="text-align: center;">@BeanPropertySetter</td>        <td style="text-align: center;">匹配标签对应的 XPath。</td>    </tr>    <tr>        <td style="text-align: center;">@SetProperty</td>        <td style="text-align: center;">匹配标签的 tag，通过 attributeName 属性配置。</td>    </tr>    <tr>        <td style="text-align: center;">@SetNext</td>        <td style="text-align: center;">作用于方法，用于赋值标签组，即嵌套的子标签组。</td>    </tr></table><p>其中 <code>tag</code> 指的即对应标签上属性，如下述中 <code>id</code> 即为 <code>user</code> 标签的 <code>tag</code> 成员。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span>123</span><span class="token punctuation">></span></span>Alex<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-对象定义"><a href="#2-对象定义" class="headerlink" title="2. 对象定义"></a>2. 对象定义</h4><p>修改之前创建的实体类，通过注解方式配置 <code>XPath</code> 的值实现映射，对应代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ObjectCreate</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"entityContainer"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EntityContainer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Entity<span class="token operator">></span> entityList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@SetNext</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addEntity</span><span class="token punctuation">(</span>Entity entity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        entityList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ObjectCreate</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"entityContainer/entity"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Entity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@BeanPropertySetter</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"entityContainer/entity/id"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@BeanPropertySetter</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"entityContainer/entity/name"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Attribute<span class="token operator">></span> attributes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@SetNext</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addAttribute</span><span class="token punctuation">(</span>Attribute attribute<span class="token punctuation">)</span> <span class="token punctuation">{</span>        attributes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ObjectCreate</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"entityContainer/entity/attribute"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Attribute</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@BeanPropertySetter</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"entityContainer/entity/attribute/key"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String key<span class="token punctuation">;</span>    <span class="token annotation punctuation">@BeanPropertySetter</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"entityContainer/entity/attribute/value"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String value<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-规则定义"><a href="#3-规则定义" class="headerlink" title="3. 规则定义"></a>3. 规则定义</h4><p>类似的通过继承 <code>FromAnnotationsRuleModule</code> 配置读取实体类的注解信息。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAnnotationModule</span> <span class="token keyword">extends</span> <span class="token class-name">FromAnnotationsRuleModule</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configureRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">bindRulesFrom</span><span class="token punctuation">(</span>EntityContainer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-读取示例"><a href="#4-读取示例" class="headerlink" title="4. 读取示例"></a>4. 读取示例</h4><p>上述步骤完成之后即可实现文件解析，同样是一次定义全局可用，对应的示例代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DigestXmlTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String location <span class="token operator">=</span> <span class="token string">"src\\main\\resources\\xml\\data.xml"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">annotationTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// write once, use anywhere</span>        <span class="token keyword">final</span> DigesterLoader loader <span class="token operator">=</span> DigesterLoader<span class="token punctuation">.</span><span class="token function">newLoader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyAnnotationModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Digester digester <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">newDigester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// read and parse</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>FileReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            EntityContainer container <span class="token operator">=</span> digester<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>参考文章</strong></p><ol><li><a href="https://juejin.cn/post/7066826274836054023?searchId=20240108172348EE7C3A942D88F609E667">Apache Commons Digester 使用介绍</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、前置准备&quot;&gt;&lt;a href=&quot;#一、前置准备&quot; class=&quot;headerlink&quot; title=&quot;一、前置准备&quot;&gt;&lt;/a&gt;一、前置准备&lt;/h3&gt;&lt;h4 id=&quot;1-概念解释&quot;&gt;&lt;a href=&quot;#1-概念解释&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="后端" scheme="https://great-jin.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Spring 实现优雅的工厂模式</title>
    <link href="https://great-jin.github.io/java/design/factory/"/>
    <id>https://great-jin.github.io/java/design/factory/</id>
    <published>2024-03-07T16:00:00.000Z</published>
    <updated>2024-06-15T12:40:18.183Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、模式结构"><a href="#一、模式结构" class="headerlink" title="一、模式结构"></a>一、模式结构</h3><h4 id="1-工厂模式"><a href="#1-工厂模式" class="headerlink" title="1. 工厂模式"></a>1. 工厂模式</h4><p>在开始之前，让我们了解一下什么是工厂模式?</p><p>在程序开发中，通常会涉及到相似对象的实例创建，而没有统一的关联却很难对程序进行维护管理。举个简单例子，系统中存在 <code>Dog</code> 与 <code>Cat</code> 两个类，且二者都包含了 <code>roar()</code> 方法，不同之处仅方法内部实现。随着系统需求的增长，后续需求中可能新增其它动物类，从而将导致在实例化时需要关注具体的类实现。</p><p>在工厂模式中，通过定义一个公共接口来创建对象，然后由子类决定实例化哪个类，即可使用工厂类来创建对象而不需要了解具体实现类的细节。同样以上述的示例为准，通过定义抽象接口类 <code>Animal</code> 并定义接口方法 <code>roar()</code>，子类只需实现并重写接口方法即可。在实例化对象时，通过传入的类型决定具体的实例化类，而不必关注具体的业务实现。<br><img src="/album/loading.gif" data-original="/album/article/java/design/factory.png"></p><h4 id="2-目标效果"><a href="#2-目标效果" class="headerlink" title="2. 目标效果"></a>2. 目标效果</h4><p>在 <code>Spring Boot</code> 中的一大核心即全局的 <code>Bean</code> 对象容器管理，因此可以将工厂模式与之进一步结合。</p><p>其核心在于利用 <code>Spring</code> 的 <code>Bean</code> 容器分组效果，将工厂类的不同实例化对象注入 <code>Bean</code> 容器，当需要创建对象时，直接通过 <code>Bean</code> 容器获取即可。</p><h3 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h3><h4 id="1-常量定义"><a href="#1-常量定义" class="headerlink" title="1. 常量定义"></a>1. 常量定义</h4><p>为了提供程序的可读性与可维护性，此处将后续涉及的常量统一外置定义。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Const</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ANIMAL_DOG <span class="token operator">=</span> <span class="token string">"dog"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ANIMAL_CAT <span class="token operator">=</span> <span class="token string">"cat"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-工厂实现"><a href="#2-工厂实现" class="headerlink" title="2. 工厂实现"></a>2. 工厂实现</h4><p>这里同样以基础的动物工厂为例，定义了接口 <code>Animal</code>，同时定义了两个实现类 <code>Dog</code> 与 <code>Cat</code>。</p><p>需要注意此处的两个实现类需要通过 <code>@Service</code> 注入 <code>Bean</code> 对象至 <code>Spring</code> 容器中，并指定了 <code>Bean</code> 名称。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">roar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span>Const<span class="token punctuation">.</span>ANIMAL_DOG<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">roar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Dog roar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span>Const<span class="token punctuation">.</span>ANIMAL_CAT<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">roar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cat roar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-示例演示"><a href="#3-示例演示" class="headerlink" title="3. 示例演示"></a>3. 示例演示</h4><p>完成上述步骤后即可通过 <code>Map</code> 与 <code>@Autowired</code> 获取对象实例，依托于 <code>Spring</code> 容器实现了类似工厂与 <code>SPI</code> 结合的效果。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Animal<span class="token operator">></span> animalMap<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// --> Dog roar</span>        Animal dog <span class="token operator">=</span> animalMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Const<span class="token punctuation">.</span>ANIMAL_DOG<span class="token punctuation">)</span><span class="token punctuation">;</span>        dog<span class="token punctuation">.</span><span class="token function">roar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// --> Cat roar</span>        Animal cat <span class="token operator">=</span> animalMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Const<span class="token punctuation">.</span>ANIMAL_CAT<span class="token punctuation">)</span><span class="token punctuation">;</span>        cat<span class="token punctuation">.</span><span class="token function">roar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、模式结构&quot;&gt;&lt;a href=&quot;#一、模式结构&quot; class=&quot;headerlink&quot; title=&quot;一、模式结构&quot;&gt;&lt;/a&gt;一、模式结构&lt;/h3&gt;&lt;h4 id=&quot;1-工厂模式&quot;&gt;&lt;a href=&quot;#1-工厂模式&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="设计模式" scheme="https://great-jin.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Spring 动态数据源教程</title>
    <link href="https://great-jin.github.io/java/spring/tool/datasource/"/>
    <id>https://great-jin.github.io/java/spring/tool/datasource/</id>
    <published>2024-03-07T16:00:00.000Z</published>
    <updated>2024-03-09T09:54:42.170Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、工程配置"><a href="#一、工程配置" class="headerlink" title="一、工程配置"></a>一、工程配置</h3><h4 id="1-依赖导入"><a href="#1-依赖导入" class="headerlink" title="1. 依赖导入"></a>1. 依赖导入</h4><p>在工程中引入 <code>jdbc-starter</code> 与 <code>spring-data</code> 依赖，内容如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-data-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-文件配置"><a href="#2-文件配置" class="headerlink" title="2. 文件配置"></a>2. 文件配置</h4><p>在工程 <code>YML</code> 配置文件中添加多个数据源信息，这里我以两个为例。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource1</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">jdbc-url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/test_db1<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=utf<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL</span>=false    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>  <span class="token key atrule">datasource2</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">jdbc-url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/test_db2<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=utf<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL</span>=false    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、对象管理"><a href="#二、对象管理" class="headerlink" title="二、对象管理"></a>二、对象管理</h3><h4 id="1-常量定义"><a href="#1-常量定义" class="headerlink" title="1. 常量定义"></a>1. 常量定义</h4><p>为了提高程序的可维护性，这里将后续涉及的常量统一外置定义。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatasourceConst</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DS_MASTER <span class="token operator">=</span> <span class="token string">"datasource1"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DS_SLAVE <span class="token operator">=</span> <span class="token string">"datasource2"</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TM_MASTER <span class="token operator">=</span> <span class="token string">"transactionManager1"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TM_SLAVE <span class="token operator">=</span> <span class="token string">"transactionManager2"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Bean注入"><a href="#2-Bean注入" class="headerlink" title="2. Bean注入"></a>2. Bean注入</h4><p>通过 <code>@Bean</code> 将配置文件中的多个数据源信息注入 <code>Spring</code> 容器，其中 <code>@Primary</code> 标识数据源为默认源。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatasourceConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> DatasourceConst<span class="token punctuation">.</span>DS_MASTER<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"spring.datasource1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DataSource <span class="token function">dataSource1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> DataSourceBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> DatasourceConst<span class="token punctuation">.</span>DS_SLAVE<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"spring.datasource2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DataSource <span class="token function">dataSource2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> DataSourceBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token keyword">public</span> DataSource <span class="token function">dynamicDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> dataSourceMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSourceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>DatasourceConst<span class="token punctuation">.</span>DS_MASTER<span class="token punctuation">,</span> <span class="token function">dataSource1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSourceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>DatasourceConst<span class="token punctuation">.</span>DS_SLAVE<span class="token punctuation">,</span> <span class="token function">dataSource2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置动态数据源</span>        DynamicDataSource dataSources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DynamicDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSources<span class="token punctuation">.</span><span class="token function">setTargetDataSources</span><span class="token punctuation">(</span>dataSourceMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSources<span class="token punctuation">.</span><span class="token function">setDefaultTargetDataSource</span><span class="token punctuation">(</span><span class="token function">dataSource1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dataSources<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-事务配置"><a href="#3-事务配置" class="headerlink" title="3. 事务配置"></a>3. 事务配置</h4><p>同理，当配置多个数据源时若需要使用事务需要将对应的事务管理注入 <code>Spring</code> 容器。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> DatasourceConst<span class="token punctuation">.</span>TM_MASTER<span class="token punctuation">)</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Primary</span>    DataSourceTransactionManager <span class="token function">transactionManager1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>DatasourceConst<span class="token punctuation">.</span>DS_MASTER<span class="token punctuation">)</span> DataSource datasource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span>datasource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> DatasourceConst<span class="token punctuation">.</span>TM_SLAVE<span class="token punctuation">)</span>    <span class="token annotation punctuation">@Autowired</span>    DataSourceTransactionManager <span class="token function">transactionManager2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>DatasourceConst<span class="token punctuation">.</span>DS_SLAVE<span class="token punctuation">)</span> DataSource datasource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span>datasource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> DatasourceConst<span class="token punctuation">.</span>TM_CHAIN<span class="token punctuation">)</span>    <span class="token keyword">public</span> ChainedTransactionManager <span class="token function">chainedTransactionManager</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>DatasourceConst<span class="token punctuation">.</span>TM_MASTER<span class="token punctuation">)</span> DataSourceTransactionManager tm1<span class="token punctuation">,</span>                                                               <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>DatasourceConst<span class="token punctuation">.</span>TM_SLAVE<span class="token punctuation">)</span> DataSourceTransactionManager tm2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransactionManager</span><span class="token punctuation">(</span>tm1<span class="token punctuation">,</span> tm2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、数据切换"><a href="#三、数据切换" class="headerlink" title="三、数据切换"></a>三、数据切换</h3><h4 id="1-管理工具"><a href="#1-管理工具" class="headerlink" title="1. 管理工具"></a>1. 管理工具</h4><p>新建 <code>DynamicDataSourceHolder</code> 用于标识管理当前激活的数据源。</p><p>基于 <code>Web</code> 请求的特性，每个请求线程都可能使用到不同的数据源，因此选择 <code>ThreadLocal</code> 变量存储。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicDataSourceHolder</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 动态数据源名称上下文     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>String<span class="token operator">></span> DATASOURCE_HOLDER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取数据源名称     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getContextKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String key <span class="token operator">=</span> DATASOURCE_HOLDER<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> key <span class="token operator">==</span> null <span class="token operator">?</span> DatasourceConst<span class="token punctuation">.</span>DS_MASTER <span class="token operator">:</span> key<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置/切换数据源     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setContextKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DATASOURCE_HOLDER<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除当前数据源名称     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        DATASOURCE_HOLDER<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-切换配置"><a href="#2-切换配置" class="headerlink" title="2. 切换配置"></a>2. 切换配置</h4><p>新建类继承于 <code>AbstractRoutingDataSource</code>，当程序在获取数据源连接池时将会执行 <code>determineCurrentLookupKey()</code> 方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicDataSource</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractRoutingDataSource</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Through the key(bean name) to get which datasource to use.     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Object <span class="token function">determineCurrentLookupKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> DynamicDataSourceHolder<span class="token punctuation">.</span><span class="token function">getContextKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-演示示例"><a href="#3-演示示例" class="headerlink" title="3. 演示示例"></a>3. 演示示例</h4><p>在应用中切换数据源时即可通过 <code>DynamicDataSourceHolder</code> 工具类快速切换，为了更直观显示效果，建议多个数据源选择不同的库执行查询并拼接。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/sysUser"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysUserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> SysUserService sysUserService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ResponseEntity<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>SysUser<span class="token operator">></span> list1<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Query data with default datasource</span>            list1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sysUserService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Change datasource to slave node</span>            DynamicDataSourceHolder<span class="token punctuation">.</span><span class="token function">setContextKey</span><span class="token punctuation">(</span>DatasourceConst<span class="token punctuation">.</span>DS_SLAVE<span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>SysUser<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sysUserService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Merge data</span>            list1<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            DynamicDataSourceHolder<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>参考文章</strong></p><ol><li><a href="https://juejin.cn/post/6844904050262016007">搞定SpringBoot多数据源(2)：动态数据源</a></li><li><a href="https://stackoverflow.com/questions/30337582/spring-boot-configure-and-use-two-data-sources">Spring Boot configure and use two data sources</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、工程配置&quot;&gt;&lt;a href=&quot;#一、工程配置&quot; class=&quot;headerlink&quot; title=&quot;一、工程配置&quot;&gt;&lt;/a&gt;一、工程配置&lt;/h3&gt;&lt;h4 id=&quot;1-依赖导入&quot;&gt;&lt;a href=&quot;#1-依赖导入&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="Spring工具" scheme="https://great-jin.github.io/categories/Spring%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Spring Boot" scheme="https://great-jin.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
</feed>

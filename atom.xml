<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>布袋青年</title>
  
  <subtitle>布袋青年</subtitle>
  <link href="https://budai.pages.dev/atom.xml" rel="self"/>
  
  <link href="https://budai.pages.dev/"/>
  <updated>2025-08-16T12:12:17.829Z</updated>
  <id>https://budai.pages.dev/</id>
  
  <author>
    <name>烽火戏诸诸诸侯</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java 反射进阶优化</title>
    <link href="https://budai.pages.dev/java/advance/methodhandle/"/>
    <id>https://budai.pages.dev/java/advance/methodhandle/</id>
    <published>2025-08-15T16:00:00.000Z</published>
    <updated>2025-08-16T12:12:17.829Z</updated>
    
    <content type="html"><![CDATA[<p>反射作为 <code>Java</code> 中的万能百宝箱，不论在系统设计还是工具开发中都能频繁看到其身影。</p><p>但我们也都知道由于其运行动态编译的特点导致 <code>JIT</code> 无法介入，相较于方法的调用在性能上存在损耗。</p><p>那难道鱼和熊掌不可兼得吗，<code>JDK</code> 也意识到了这一点，因此在 <code>JDK 7</code> 中引入 <code>MethodHandles</code> 全新的反射框架，下面就让我们一睹芳容。</p><h3 id="一、反射进阶"><a href="#一、反射进阶" class="headerlink" title="一、反射进阶"></a>一、反射进阶</h3><h4 id="1-实例声明"><a href="#1-实例声明" class="headerlink" title="1. 实例声明"></a>1. 实例声明</h4><p><code>MethodHandles</code> 的声明十分简单，通过静态方法实例化即可，方式如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    MethodHandles<span class="token punctuation">.</span>Lookup lookup <span class="token operator">=</span> MethodHandles<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>但需注意一点，默认 <code>lookup()</code> 声明的实例仅允许访问 public 属性无法访问私有属性。在传统的反射中可通过 <code>setAccessible(true)</code> 实现越权但 <code>MethodHandles</code> 中并不支持。</p><p>若想要实现私有属性的访问，在声明实例时需稍微变通一下。</p><p>查看 <code>Lookup</code> 的源码可以看见其提供私有的构造器可指定 <code>allowedModes</code> 即访问方式，利用其我们便可绕过限制实现越权。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Lookup</span> <span class="token punctuation">{</span>    <span class="token function">Lookup</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> lookupClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>lookupClass<span class="token punctuation">,</span> ALL_MODES<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">checkUnprivilegedlookupClass</span><span class="token punctuation">(</span>lookupClass<span class="token punctuation">,</span> ALL_MODES<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token function">Lookup</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> lookupClass<span class="token punctuation">,</span> <span class="token keyword">int</span> allowedModes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lookupClass <span class="token operator">=</span> lookupClass<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>allowedModes <span class="token operator">=</span> allowedModes<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于此类 <code>private</code> 构造器，最经典的方式即利用传统反射实现初始化。</p><p>详细的代码实现如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Constructor<span class="token operator">&lt;</span>MethodHandles<span class="token punctuation">.</span>Lookup<span class="token operator">></span> ctor <span class="token operator">=</span>            MethodHandles<span class="token punctuation">.</span>Lookup<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>Class<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MethodHandles<span class="token punctuation">.</span>Lookup lookup <span class="token operator">=</span>             ctor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>Foo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> MethodHandles<span class="token punctuation">.</span>Lookup<span class="token punctuation">.</span>PRIVATE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而在 <code>JDK 9</code> 之后引入了模块化管理，因此 <code>JDK 9</code> 之后也默认提供 <code>privateLookupIn()</code> 方式可实现私有访问，无需再通过反射处理。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    MethodHandles<span class="token punctuation">.</span>Lookup lookup <span class="token operator">=</span>             MethodHandles<span class="token punctuation">.</span><span class="token function">privateLookupIn</span><span class="token punctuation">(</span>Foo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> MethodHandles<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、字段反射"><a href="#二、字段反射" class="headerlink" title="二、字段反射"></a>二、字段反射</h3><p>在完成实例化之后，让我们先看看如何通过 <code>MethodHandles</code> 实现字段属性的反射操作。</p><h4 id="1-属性读取"><a href="#1-属性读取" class="headerlink" title="1. 属性读取"></a>1. 属性读取</h4><p>对于对象的字段访问，最基本的操作即读写与写入，先以数据读取为例。</p><p>在 <code>MethodHandles</code> 中字段的读取可谓相当简单，提供了 <code>findGetter()</code> 与 <code>findStaticGetter()</code> 分别用于获取普通与静态字段实例，即对应传统反射中的 <code>Field</code> 变量。</p><p>而对于获取的 <code>MethodHandle</code> 实例变量，通过 <code>invoke()</code> 方法便可读取字段内容，操作示例如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String name <span class="token operator">=</span> <span class="token string">"Alex"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    Foo foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MethodHandles<span class="token punctuation">.</span>Lookup lookup <span class="token operator">=</span> MethodHandles            <span class="token punctuation">.</span><span class="token function">privateLookupIn</span><span class="token punctuation">(</span>Foo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> MethodHandles<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MethodHandle getter <span class="token operator">=</span> lookup<span class="token punctuation">.</span><span class="token function">findGetter</span><span class="token punctuation">(</span>Foo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"id"</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>getter<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MethodHandle staticGetter <span class="token operator">=</span> lookup<span class="token punctuation">.</span><span class="token function">findStaticGetter</span><span class="token punctuation">(</span>Foo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>staticGetter<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>正如之前所提到的，在 <code>MethodHandles</code> 中无需 <code>setAccessible(true)</code> 设置访问权限，而是在声明实例直接定义，如上述代码示例中通过 <code>privateLookupIn()</code> 即可访问公有及私有属性实例。</p><h4 id="2-属性赋值"><a href="#2-属性赋值" class="headerlink" title="2. 属性赋值"></a>2. 属性赋值</h4><p>与属性读取相对应，对于字段的赋值同样提供了 <code>findSetter()</code> 与 <code>findStaticSetter()</code> 方法。</p><p>在使用上并无差异故不再复述，相应的使用示例如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    Foo foo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MethodHandles<span class="token punctuation">.</span>Lookup lookup <span class="token operator">=</span> MethodHandles            <span class="token punctuation">.</span><span class="token function">privateLookupIn</span><span class="token punctuation">(</span>Foo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> MethodHandles<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MethodHandle setter <span class="token operator">=</span> lookup<span class="token punctuation">.</span><span class="token function">findSetter</span><span class="token punctuation">(</span>Foo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"id"</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    setter<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MethodHandle staticSetter <span class="token operator">=</span> lookup<span class="token punctuation">.</span><span class="token function">findStaticSetter</span><span class="token punctuation">(</span>Foo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    staticSetter<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、方法反射"><a href="#三、方法反射" class="headerlink" title="三、方法反射"></a>三、方法反射</h3><p>下面同样让我们了解下如何通过 <code>MethodHandles</code> 实现方法的反射调用。</p><h4 id="1-方法描述"><a href="#1-方法描述" class="headerlink" title="1. 方法描述"></a>1. 方法描述</h4><p>在开始前让我们先声明一个简单的测试类方法如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们都知道在传统的反射中，通过类对象的 <code>getMethod()</code> 方法便可获取方法属性。</p><pre class="line-numbers language-java"><code class="language-java">Method method <span class="token operator">=</span> Foo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"sayHi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>而在 <code>MethodHandles</code> 中方法与之前字段反射中的类似，以 <code>MethodType</code> 进行描述。</p><p>通过查看 <code>MethodType</code> 其初始化方法可以看到，由返回值和方法入参构建了一个方法的描述体。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> MethodType <span class="token function">methodType</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> rtype<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> MethodType <span class="token function">methodType</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> rtype<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> ptype0<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> ptypes<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在构建 <code>MethodType</code> 方法描述之后，便可通过 <code>findVirtual()</code> 方法获取方法实现，通过 <code>MethodType</code> 实现方法的精确定位。</p><pre class="line-numbers language-java"><code class="language-java">MethodHandle mh <span class="token operator">=</span> lookup<span class="token punctuation">.</span><span class="token function">findVirtual</span><span class="token punctuation">(</span>        Foo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>        <span class="token string">"sayHi"</span><span class="token punctuation">,</span>        MethodType<span class="token punctuation">.</span><span class="token function">methodType</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与之前的字段反射类似，<code>findVirtual()</code> 实现了普通方法的获取，而 <code>findStatic()</code> 针对于静态方法而言，在具体的使用上并无太大差异这里不再举例介绍。</p><h4 id="2-链路调用"><a href="#2-链路调用" class="headerlink" title="2. 链路调用"></a>2. 链路调用</h4><p>获取方法示例之后调用方式十分简单，通过 <code>invoke(obj)</code> 调用即可，针对静态方法则通过 <code>invoke()</code> 执行。</p><p>相对应的代码示例如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    Class<span class="token operator">&lt;</span>Foo<span class="token operator">></span> clazz <span class="token operator">=</span> Foo<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>    MethodHandles<span class="token punctuation">.</span>Lookup lookup <span class="token operator">=</span> MethodHandles            <span class="token punctuation">.</span><span class="token function">privateLookupIn</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> MethodHandles<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MethodHandle constructor <span class="token operator">=</span> lookup<span class="token punctuation">.</span><span class="token function">findConstructor</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> MethodType<span class="token punctuation">.</span><span class="token function">methodType</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Object foo <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MethodHandle mh <span class="token operator">=</span> lookup<span class="token punctuation">.</span><span class="token function">findVirtual</span><span class="token punctuation">(</span>            clazz<span class="token punctuation">,</span>            <span class="token string">"one"</span><span class="token punctuation">,</span>            MethodType<span class="token punctuation">.</span><span class="token function">methodType</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    mh<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、性能差异"><a href="#四、性能差异" class="headerlink" title="四、性能差异"></a>四、性能差异</h3><h4 id="1-传统反射"><a href="#1-传统反射" class="headerlink" title="1. 传统反射"></a>1. 传统反射</h4><p>看到这你也许有个疑问，同样都是 <code>invoke()</code> 执行调用，那差异到底在哪？</p><p>让我们先看下传统的反射执行链路，<code>JDK</code> 里反射的实现分为两类：本地代码解释调用 <code>(Native Reflection / Inflated)</code> 和字节码生成的快速调用 <code>(Generated MethodAccessor)</code></p><h5 id="1-本地代码调用"><a href="#1-本地代码调用" class="headerlink" title="(1) 本地代码调用"></a>(1) 本地代码调用</h5><p>本地代码调用即通过 <code>JNI</code> 调用 <code>HotSpot</code> 内部的 <code>MethodAccessor</code>。</p><p>优点是不需要生成新类启动速度快，但每次反射调用都会经过很多安全检查，当调用次数达到一定数量时性能相对较低。</p><h5 id="2-字节码生成调用"><a href="#2-字节码生成调用" class="headerlink" title="(2) 字节码生成调用"></a>(2) 字节码生成调用</h5><p>字节码生成调用则为动态生成一个字节码类 <code>(MethodAccessorImpl 子类)</code>，直接调用目标方法。</p><p>优点即性能接近普通方法调用，但缺点就是生成类有开销，如果方法只调用几次反而得不偿失。</p><p>因此在传统的反射中当 <code>Method / Constructor / Field</code> 反射调用中，前 15 次执行方式为本地代码调用。当的次数超过 <code>15</code> 次后，<code>JDK</code> 就会膨胀执行链路将转为字节码生成调用。</p><p>其中 <code>inflationThreshold</code> 为代码中静态 <code>final</code> 参数不可调整。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReflectionFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> inflationThreshold <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">NativeMethodAccessorImpl</span> <span class="token keyword">extends</span> <span class="token class-name">MethodAccessorImpl</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">native</span> Object <span class="token function">invoke0</span><span class="token punctuation">(</span>Method m<span class="token punctuation">,</span> Object obj<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-MethodHandle"><a href="#2-MethodHandle" class="headerlink" title="2. MethodHandle"></a>2. MethodHandle</h4><p>查看 <code>MethodHandle</code> 类中的定义内容，可以看到 <code>invoke()</code> 方法同样为 <code>native</code> 方法，不同之处其多了 <code>@IntrinsicCandidate</code> 与 <code>@PolymorphicSignature</code> 注解。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">MethodHandle</span> <span class="token keyword">implements</span> <span class="token class-name">Constable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@IntrinsicCandidate</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token annotation punctuation">@PolymorphicSignature</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>MethodHandle</code> 性能更优的关键也同样在此，下面分别介绍两个注解的作用。</p><h5 id="1-IntrinsicCandidate"><a href="#1-IntrinsicCandidate" class="headerlink" title="(1) @IntrinsicCandidate"></a>(1) @IntrinsicCandidate</h5><p><code>@IntrinsicCandidate</code> 标记某个方法是 <code>JVM intrinsic</code> 内建方法。</p><p>内建方法即在 <code>JDK</code> 代码中有 <code>Java</code> 实现，但 <code>JVM</code> 在执行时会替换成高效的 <code>CPU</code> 指令或专门的优化实现。</p><p>通过 <code>@IntrinsicCandidate</code> 标记告诉 <code>HotSpot</code> 该方法有可能被 <code>intrinsic</code> 优化，并且可以在 <code>JIT</code> 编译中进行替换。它不保证一定优化成功，也不影响方法的正常调用，完全是 <code>JVM</code> 和 <code>JDK</code> 之间的内部约定。</p><h5 id="2-PolymorphicSignature"><a href="#2-PolymorphicSignature" class="headerlink" title="(2) @PolymorphicSignature"></a>(2) @PolymorphicSignature</h5><p><code>@PolymorphicSignature</code> 标识一个方法是多态签名方法 <code>(polymorphic signature method)</code>。</p><p>正常情况下，<code>Java</code> 方法签名是编译期就固定的（参数类型、返回类型完全确定）。但 <code>MethodHandle</code> 是 <code>Java 7</code> 引入的动态调用机制，需要在运行时根据不同类型的参数调用不同的方法实现。</p><p>于是，<code>JVM</code> 允许某些特殊方法在字节码层看起来是签名不固定的，它们会在运行时再解析具体的签名。</p><p>通过上面的分别可以看到，基于注解标注 <code>JVM</code> 在 <code>native</code> 实现中进行了二次优化从而实现 <code>JIT</code> 接入与更优性能表现。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;反射作为 &lt;code&gt;Java&lt;/code&gt; 中的万能百宝箱，不论在系统设计还是工具开发中都能频繁看到其身影。&lt;/p&gt;
&lt;p&gt;但我们也都知道由于其运行动态编译的特点导致 &lt;code&gt;JIT&lt;/code&gt; 无法介入，相较于方法的调用在性能上存在损耗。&lt;/p&gt;
&lt;p&gt;那难道鱼和</summary>
      
    
    
    
    <category term="JAVA进阶" scheme="https://budai.pages.dev/categories/JAVA%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="JAVA" scheme="https://budai.pages.dev/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Spring 事务回调管理</title>
    <link href="https://budai.pages.dev/java/spring/transaction/callback/"/>
    <id>https://budai.pages.dev/java/spring/transaction/callback/</id>
    <published>2025-08-10T16:00:00.000Z</published>
    <updated>2025-08-11T14:12:39.784Z</updated>
    
    <content type="html"><![CDATA[<p>在事务操作中，通常会面临这么一个场景，当数据落库之后需要推送至其它系统。</p><p>秉承着最小事务化的逻辑，针对非数据库操作且耗时动作，在设计上通常需要独立于事务之外，避免造成性能损耗。</p><p>针对此类业务逻辑，当然你可以 <code>DataSourceTransactionManager</code> 手动开启事务并提交。但显然如何一来也将提高代码复杂度，那在基于 <code>@Transactiona</code> 注解的前提下，如何实现事务的回调处理呢？</p><p>下面就让我们一同探究如何在 <code>Spring Boot</code> 中优化的实现事务回调。</p><h4 id="1-回调事件"><a href="#1-回调事件" class="headerlink" title="1. 回调事件"></a>1. 回调事件</h4><p>让我们直接开门见山，在 <code>Spring Boot</code> 中提供 <code>TransactionSynchronizationManager</code> 可实现对事务的回调注册。</p><p>在回调事件注册中，会涉及如下两个方法，具体描述参考表格。</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">isActualTransactionActive()</td>        <td style="text-align: center;">是否当前线程是否处于事务中。</td>    </tr>    <tr>        <td style="text-align: center;">registerSynchronization()</td>        <td style="text-align: center;">事务同步注册接口。</td>    </tr></table></br><p>基于上述描述，我们便可判断当前线程是否处于事务中，若是则注册回调逻辑。</p><p>由此，事务回调的基本实现思路并已确定，对应下述实现代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">callback</span><span class="token punctuation">(</span>Runnable runnable<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断事务处于事务中</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">isActualTransactionActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 若是，则注册回调事件</span>        TransactionSynchronizationManager<span class="token punctuation">.</span><span class="token function">registerSynchronization</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CallBackTask</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-同步注册"><a href="#2-同步注册" class="headerlink" title="2. 同步注册"></a>2. 同步注册</h4><p>在 <code>registerSynchronization()</code> 注册回调接口时，其要求输入 <code>TransactionSynchronization</code> 接口实例。</p><p>接口中针对事务的不同阶段提供了不同的钩子，同时可以获取事务处理状态，所涉及的方法如下：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">beforeCommit()</td>        <td style="text-align: center;">事务提交之前事件。</td>    </tr>    <tr>        <td style="text-align: center;">beforeCompletion()</td>        <td style="text-align: center;">事务完成之前事件。</td>    </tr>    <tr>        <td style="text-align: center;">afterCommit()</td>        <td style="text-align: center;">事务提交之后事件。</td>    </tr>    <tr>        <td style="text-align: center;">afterCompletion()</td>        <td style="text-align: center;">事务完成之后事件。</td>    </tr></table></br><p>针对表中所提到的不同事务阶段，为了更直观的展示让我们以图示进行说明。</p><p>其中 <code>doSomthing()</code> 为具体的业务逻辑，图示流程即从开启事务后最终提交并完成一个完整的事务周期。<br><img src="/album/loading.gif" data-original="/album/article/java/spring/transaction/3.png"></p><p>接着之前的 <code>registerSynchronization()</code> 逻辑，让我们编写具体的回调处理逻辑。</p><p>新增 <code>CallBackTask</code> 并实现 <code>TransactionSynchronization</code> 接口，因此需处理事务完成后的回调逻辑，故此实现 <code>afterCompletion()</code> 钩子。</p><p>而在 <code>afterCompletion()</code> 中可以获取当前事务的完成状态，分别包含下述三类：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">STATUS_UNKNOWN</td>        <td style="text-align: center;">未知状态。</td>    </tr>    <tr>        <td style="text-align: center;">STATUS_COMMITTED</td>        <td style="text-align: center;">事务提交成功。</td>    </tr>    <tr>        <td style="text-align: center;">STATUS_ROLLED_BACK</td>        <td style="text-align: center;">事务失败回滚。</td>    </tr></table></br><p>基于上述内容，我们便可在指定事务状态下发起不同的回调逻辑。</p><p>以下述代码为例，传入 <code>Runnable</code> 线程回调逻辑，并在状态为 <code>STATUS_COMMITTED</code> 即事务成功提交后出发回调。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CallBackTask</span> <span class="token keyword">implements</span> <span class="token class-name">TransactionSynchronization</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Runnable runnable<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CallBackTask</span><span class="token punctuation">(</span>Runnable runnable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>runnable <span class="token operator">=</span> runnable<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token keyword">int</span> status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> TransactionSynchronization<span class="token punctuation">.</span>STATUS_UNKNOWN<span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Unknown"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> TransactionSynchronization<span class="token punctuation">.</span>STATUS_COMMITTED<span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Transaction is committed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 事务提交成功，执行回调</span>                runnable<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> TransactionSynchronization<span class="token punctuation">.</span>STATUS_ROLLED_BACK<span class="token operator">:</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Transaction is rolled back"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-集成示例"><a href="#3-集成示例" class="headerlink" title="3. 集成示例"></a>3. 集成示例</h4><p>下面让我们来看一下如何在工程中进行集成使用。</p><p>让我们先假定业务场景，假如功能需要保存某业务数据，在保存成功后将数据同步至下游系统，而数据同步的总体耗时约 <code>30s</code> 左右。</p><p>基于此场景，最原始的方式即通过 <code>@Transactional</code> 注解针对整个方法开始事务。但如此设计存在一个问题，推送数据耗时导致事务迟迟无法提交，不仅降低服务性能且长时间事务挂起存在数据一致性问题。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">directInsert</span><span class="token punctuation">(</span>SysUser user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 数据入库</span>    sysUserDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 模拟耗时</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于涉及事务处理的逻辑而言，永远要保持一个原则：事务最小化。</p><p>因此，对于上述的代码而言可以轻易改造为下述方式，即针对数据库操作部分单独抽象为事务操作，既实现了事务又可取得相对不错的性能。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">manualCallback</span><span class="token punctuation">(</span>SysUser user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 数据入库, insert() 需获取代理对象操作，此处略去</span>    <span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 模拟耗时</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>SysUser user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    sysUserDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在第二个示例中，虽然实现了最终预期，但从代码上可以看出极易操作事务失效的情况，需通过 <code>AopContext</code> 创建代理对象处理。</p><p>再次改造上述的示例，同样是在一个方法内基于 <code>@Transactional</code> 开启事务。但通过之前定义的 <code>TransactionManager</code> 传入事务回调，当事务完成时将触发回调内容，实现与上述同样效果但代码更为精简。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callbackInsert</span><span class="token punctuation">(</span>SysUser user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 数据入库</span>    sysUserDao<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 事务回调</span>    TransactionManager<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 模拟耗时</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在事务操作中，通常会面临这么一个场景，当数据落库之后需要推送至其它系统。&lt;/p&gt;
&lt;p&gt;秉承着最小事务化的逻辑，针对非数据库操作且耗时动作，在设计上通常需要独立于事务之外，避免造成性能损耗。&lt;/p&gt;
&lt;p&gt;针对此类业务逻辑，当然你可以 &lt;code&gt;DataSourceTra</summary>
      
    
    
    
    <category term="Spring框架" scheme="https://budai.pages.dev/categories/Spring%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Spring Boot" scheme="https://budai.pages.dev/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 代理实践应用</title>
    <link href="https://budai.pages.dev/linux/nginx/practice/"/>
    <id>https://budai.pages.dev/linux/nginx/practice/</id>
    <published>2025-08-07T16:00:00.000Z</published>
    <updated>2025-08-09T07:34:13.941Z</updated>
    
    <content type="html"><![CDATA[<p><code>Nginx</code> 作为网络代理领域的绝对王者，在系统中的方方面面都能看到它的身影。</p><p>在之前的博客中，我们深入介绍了如何安装与配置服务，如果你没看过先行回顾：<a href="https://budai.pages.dev/linux/nginx/basic/">Nginx代理与负载教程</a>。</p><blockquote><p>今天让我们更进一步，以具体的应用场景介绍 <code>Nginx</code> 的强大之处</p></blockquote><h4 id="1-请求藏匿"><a href="#1-请求藏匿" class="headerlink" title="1. 请求藏匿"></a>1. 请求藏匿</h4><p>在正向代理请求服务中，可将 <code>Nginx</code> 作为网络跳板机，代理客户端对外发起请求。从外部的角度，其只能看到代理服务器的信息，而无法感知其真正的客户端。</p><p>如下述配置即开放了 <code>8888</code> 端口作为代理服务，在客户端上配置此代理服务。当客户端发起请求后，将由代理服务对外发起请求，再将结果回传客户端，客户端在整个请求链路中对外都是无感知不可见。</p><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>    <span class="token keyword">listen</span> <span class="token number">8888</span><span class="token punctuation">;</span>    <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>        <span class="token keyword">proxy_pass</span> <span class="token variable">$scheme</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token variable">$http_host</span><span class="token variable">$request_uri</span><span class="token punctuation">;</span>        <span class="token keyword">proxy_set_header</span> Host <span class="token variable">$http_host</span><span class="token punctuation">;</span>        <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Real<span class="token operator">-</span>IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-服务藏匿"><a href="#2-服务藏匿" class="headerlink" title="2. 服务藏匿"></a>2. 服务藏匿</h4><p>与上述的场景类似，请求藏匿是双向的，反之同样可实现服务藏匿。</p><p>最经典的场景即在服务器 <code>A</code> 部署了某系统，但服务器上同时部署了其它服务你并不想对外暴露，当然你可以通过白名单及防火墙配置实现。</p><p>但你也可通过空白服务器 <code>B</code> 作为对外服务网关，由服务器 <code>B</code> 对外提供服务，将请求转发至服务器 <code>A</code>。以此方式服务器 <code>A</code> 完全属于内网服务，对于外部系统同样不可感知。</p><p>例如服务部署于 <code>192.168.0.1</code> 节点，那么我们即可在 <code>192.168.0.2</code> 节点中部署 <code>Nginx</code> 服务，并通过下述配置实现服务的反向代理至 <code>192.168.0.1</code> 节点。如此一来，外部系统只能通过 <code>192.168.0.2</code> 访问系统，我们便实现真正的服务藏匿。</p><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>    <span class="token keyword">listen</span> <span class="token number">5000</span><span class="token punctuation">;</span>            <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>        <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">4000</span><span class="token operator">/</span><span class="token punctuation">;</span>                       <span class="token keyword">proxy_set_header</span> HOST <span class="token variable">$host</span><span class="token punctuation">;</span>        <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Real<span class="token operator">-</span>IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>        <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-无感升级"><a href="#3-无感升级" class="headerlink" title="3. 无感升级"></a>3. 无感升级</h4><p>在上述的两类示例中，都是网络安全的场景下应用，但 <code>Nginx</code> 能力不仅如此，在服务性能提升上也依然强劲。</p><p>我们都知道通过 <code>upstream</code> 配置可轻松实现集群下多节点负载均衡，从而提供系统吞吐量。那在单体环境下，<code>Nginx</code> 优势是否就荡然无存？</p><p>答案很显然不是，即便在单节点服务中，利用 <code>upstream</code> 仍然能够实现不停机的服务升级，下面让我们来看一下具体如何实现。</p><p>例如在服务器中部署了 <code>192.168.0.1:4000</code> 节点，并以 <code>192.168.0.1:80</code> 端口对外开放服务，配置如下：</p><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">server</span> <span class="token punctuation">{</span>    <span class="token keyword">listen</span> <span class="token number">80</span><span class="token punctuation">;</span>            <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>        <span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">4000</span><span class="token operator">/</span><span class="token punctuation">;</span>                       <span class="token keyword">proxy_set_header</span> HOST <span class="token variable">$host</span><span class="token punctuation">;</span>        <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Real<span class="token operator">-</span>IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>        <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将上述的配置通过 <code>upstream</code> 改造为下述配置方式：</p><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">http</span> <span class="token punctuation">{</span>    <span class="token keyword">upstream</span> host_list <span class="token punctuation">{</span>        <span class="token keyword">server</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">4000</span><span class="token operator">/</span> weight<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token keyword">server</span> <span class="token punctuation">{</span>        <span class="token keyword">listen</span>       <span class="token number">80</span><span class="token punctuation">;</span>        <span class="token keyword">location</span> <span class="token operator">/</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true"># 请求转发 host_list 服务列表</span>            <span class="token keyword">proxy_pass</span> host_list<span class="token punctuation">;</span>            <span class="token keyword">proxy_set_header</span> HOST <span class="token variable">$host</span><span class="token punctuation">;</span>            <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Real<span class="token operator">-</span>IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>            <span class="token keyword">proxy_set_header</span> X<span class="token operator">-</span>Forwarded<span class="token operator">-</span>For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若此时需要操作系统服务升级，在不接入 <code>Nginx</code> 的场景下即停止旧服务然后等待新服务启动，而这整个过程中系统服务都处于宕机不可用。</p><p>而在 <code>Nginx</code> 介入的场景中，在上述的配置示例中，在不停止旧服务的前提下可部署新版服务，待新服务启动之后调整 <code>host_list</code> 配置如下：</p><pre class="line-numbers language-nginx"><code class="language-nginx"><span class="token keyword">upstream</span> host_list <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true"># 旧服务权重为 0 关闭</span>    <span class="token keyword">server</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">4000</span><span class="token operator">/</span> weight<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># 新服务配置权重开启服务</span>    <span class="token keyword">server</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">0.1</span><span class="token punctuation">:</span><span class="token number">4001</span><span class="token operator">/</span> weight<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成配置之后通过 <code>reload</code> 重新加载配置使之生效：</p><pre class="line-numbers language-bash"><code class="language-bash">nginx -s reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在整个服务切换过程中，用户仍可正常访问旧服务，避免了升级出现服务长时间宕机不可用的情况，极大提高了用户使用体验。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;Nginx&lt;/code&gt; 作为网络代理领域的绝对王者，在系统中的方方面面都能看到它的身影。&lt;/p&gt;
&lt;p&gt;在之前的博客中，我们深入介绍了如何安装与配置服务，如果你没看过先行回顾：&lt;a href=&quot;https://budai.pages.dev/linux/ngi</summary>
      
    
    
    
    <category term="Linux运维" scheme="https://budai.pages.dev/categories/Linux%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Linux" scheme="https://budai.pages.dev/tags/Linux/"/>
    
    <category term="Nginx" scheme="https://budai.pages.dev/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>数据库 Clob 类型详解</title>
    <link href="https://budai.pages.dev/db/clob/"/>
    <id>https://budai.pages.dev/db/clob/</id>
    <published>2025-08-05T16:00:00.000Z</published>
    <updated>2025-08-07T13:31:03.811Z</updated>
    
    <content type="html"><![CDATA[<p>在关系型数据库中，除了 <code>int</code> 与 <code>varchar</code> 等基础数据类型外，针对大数据属性提供了 <code>Clob</code> 与 <code>Blob</code> 类型，支持几十 <code>MB</code> 乃至 <code>GB</code> 级的数据存储。</p><p>今天就让我们深入剖析 <code>CLOB(character large object)</code> 类型，探究如何实现超长文本存储。</p><h3 id="一、MySQL库"><a href="#一、MySQL库" class="headerlink" title="一、MySQL库"></a>一、MySQL库</h3><h4 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h4><p>在 <code>MySQL</code> 数据库中，字符串内容时通常以 <code>VARCHAR</code> 类型存储，其最大支持为 <code>65535</code> 字节。</p><p>但需注意此处指字节而 <code>VARCHAR(n)</code> 中的 <code>n</code> 所指为字符，由于字符集的存在以 <code>utf8mb4</code> 为例，其单个字符占 <code>4</code> 个字节，因此其最大字符数约为 <code>65535/4 ≈ 16383</code>。</p><p>因此，在存储大文本时更多的采用 <code>Clob</code> 类型，在 <code>MySQL</code> 中以 <code>TEXT</code> 形式存在，可取范围如下：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">类型</td>        <th style="text-align: center;">长度</td>    </tr>    <tr>        <td style="text-align: center;">TINYTEXT</td>        <td style="text-align: center;">255 字节</td>    </tr>    <tr>        <td style="text-align: center;">TEXT</td>        <td style="text-align: center;">65535 字节 (约64KB)</td>    </tr>    <tr>        <td style="text-align: center;">MEDIUMTEXT</td>        <td style="text-align: center;">16777215 字节 (约16MB)</td>    </tr>    <tr>        <td style="text-align: center;">LONGTEXT</td>        <td style="text-align: center;">4294967295 字节 (约4GB)</td>    </tr></table></br><p>除了在新建表时声明外，也可通过 <code>ALTER</code> 关键字修改字段类型。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token operator">&lt;</span>table_name<span class="token operator">></span> <span class="token keyword">MODIFY</span> <span class="token keyword">COLUMN</span> <span class="token operator">&lt;</span>column_name<span class="token operator">></span> <span class="token keyword">LONGTEXT</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同时在适用 <code>TEXT</code> 字段类型时需注意一点，其相应的查询等操作的索引将无效。</p><h3 id="二、Oracle库"><a href="#二、Oracle库" class="headerlink" title="二、Oracle库"></a>二、Oracle库</h3><h4 id="1-定义声明"><a href="#1-定义声明" class="headerlink" title="1. 定义声明"></a>1. 定义声明</h4><p><code>Oracle</code> 库中类似的，在 <code>11g</code> 版本中 <code>VARCHAR</code> 最大长度限制为 <code>4000</code>，同时编码字符集的存在一个汉字占据多个字节，实际长度不足 <code>2000</code>。</p><p>在 <code>Oracle</code> 中可通过下述命令查询当前数据库的字符集。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询当前字符集</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> v$nls_parameters <span class="token keyword">WHERE</span> parameter <span class="token operator">LIKE</span> <span class="token string">'%CHARACTERSET%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不同字符集下汉字对应的字节数参考下表：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">字符集</td>        <th style="text-align: center;">汉字限制</td>    </tr>    <tr>        <td style="text-align: center;">AL32UTF8</td>        <td style="text-align: center;">一个汉字 3 字节</td>    </tr>    <tr>        <td style="text-align: center;">ZHS16GBK</td>        <td style="text-align: center;">一个汉字 2 字节</td>    </tr></table></br><p>因此在若存储大文本内容，则需将字段类型声明为 <code>CLOB</code> 类型。</p><p>在插入或更新时，可由 <code>TO_CLOB()</code> 函数执行，但需注意此方式并不支持超过 <code>4000</code> 字符的数据操作。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">UPDATE</span> <span class="token operator">&lt;</span>table_name<span class="token operator">></span> <span class="token keyword">SET</span> <span class="token operator">&lt;</span>column_name<span class="token operator">></span> <span class="token operator">=</span> TO_CLOB<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-字段修改"><a href="#2-字段修改" class="headerlink" title="2. 字段修改"></a>2. 字段修改</h4><p>但与 <code>MySQL</code> 不同的是，<code>Oracle</code> 中由于底层实现不同，并不支持将 <code>VARCHAR</code> 类型直接修改为 <code>CLOB</code> 类型。因此，对于以存在的表若需要实现 <code>CLOB</code> 类型切换，需分为四步进行。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 1. 新增 CLOB 临时字段</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token operator">&lt;</span>table_name<span class="token operator">></span> <span class="token keyword">ADD</span> <span class="token operator">&lt;</span>temp_column<span class="token operator">></span> CLOB<span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 2. 将目标字段内容赋值临时字段</span><span class="token keyword">UPDATE</span> <span class="token operator">&lt;</span>table_name<span class="token operator">></span> <span class="token keyword">SET</span> <span class="token operator">&lt;</span>temp_column<span class="token operator">></span> <span class="token operator">=</span> <span class="token operator">&lt;</span>origin_column<span class="token operator">></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 3. 删除目标字段</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token operator">&lt;</span>table_name<span class="token operator">></span> <span class="token keyword">DROP</span> <span class="token keyword">COLUMN</span> <span class="token operator">&lt;</span>origin_column<span class="token operator">></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">-- 4. 将临时字段改名为原目标字段</span><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token operator">&lt;</span>table_name<span class="token operator">></span> <span class="token keyword">RENAME</span> <span class="token keyword">COLUMN</span> <span class="token operator">&lt;</span>temp_column<span class="token operator">></span> <span class="token keyword">TO</span> <span class="token operator">&lt;</span>origin_column<span class="token operator">></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-代码集成"><a href="#3-代码集成" class="headerlink" title="3. 代码集成"></a>3. 代码集成</h4><p>在 <code>JDBC</code> 代码集成中，当字符数少于 <code>4000</code> 时可直接通过 <code>setString()</code> 方式赋值。</p><p>但若超过 <code>4000</code> 字符时，由于 <code>Oracle</code> 存在限制不支持超长的数据的直接增改，需创建 <code>Clob</code> 对象或通过 <code>setCharacterStream()</code> 方式保存，相应的代码示例如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clobDemo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    String sql <span class="token operator">=</span> <span class="token string">"INSERT INTO TB_TEST(ID, CONTENTS) VALUES (?, ?)"</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span>            Connection conn <span class="token operator">=</span> ConnectionUtil<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            PreparedStatement stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>        stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建 Clob 对象</span>        Clob clob <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">createClob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        clob<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Pretent this data is very long."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stmt<span class="token punctuation">.</span><span class="token function">setClob</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> clob<span class="token punctuation">)</span><span class="token punctuation">;</span>        stmt<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述示例以 <code>Clob</code> 对象为例，下面让我们看下以 <code>setCharacterStream()</code> 流的方式提交。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clobDemo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    String sql <span class="token operator">=</span> <span class="token string">"INSERT INTO TB_TEST(ID, CONTENTS) VALUES (?, ?)"</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span>            Reader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringReader</span><span class="token punctuation">(</span><span class="token string">"Pretent this data is very long."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Connection conn <span class="token operator">=</span> ConnectionUtil<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            PreparedStatement stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>        stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 以流的方式写入</span>        stmt<span class="token punctuation">.</span><span class="token function">setCharacterStream</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> reader<span class="token punctuation">)</span><span class="token punctuation">;</span>        stmt<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在某些不支持 <code>CLOB</code> 赋值的情况下，可以采用分步取巧的方式实现 <code>CLOB</code> 数据保存。</p><p>实现思路上分为两步，手动开启事务并针对非 <code>CLOB</code> 字段执行新增或修改，完成后单独针对 <code>CLOB</code> 字段分批进行更新。在上述提到了 <code>Oracle</code> 不支持超过 <code>4000</code> 的直接增改，因此在考虑字符集的情况下可按照 <code>1000</code> 进行拆分，再分批通过 <code>||</code> 拼接原内容执行更新。</p><p>需要注意一点，由于此方式将命令拆解多步骤，因此需要通过 <code>setAutoCommit(false)</code> 关闭自动提交开启事务，当全部成功之后再提交事务，若期间发生错误则需进行回滚。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clobDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        conn <span class="token operator">=</span> ConnectionUtil<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关闭自动提交</span>        conn<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 先执行非 CLOB 字段新增</span>        String sql <span class="token operator">=</span> <span class="token string">"INSERT INTO TB_TEST(ID, NAME) VALUES (1, 'Alex')"</span><span class="token punctuation">;</span>        conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> interval <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        String data <span class="token operator">=</span> <span class="token string">"Pretent this data is very long."</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> strLength <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strLength<span class="token punctuation">;</span> i <span class="token operator">+=</span> interval<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 分批拼接更新</span>            String updateSql <span class="token operator">=</span> <span class="token string">"UPDATE TB_TEST SET CLOB_FIELD = CLOB_FIELD || ? WHERE ID = ?"</span><span class="token punctuation">;</span>            PreparedStatement stmt <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>updateSql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 分配截取</span>            String batch <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>strLength<span class="token punctuation">,</span> i <span class="token operator">+</span> interval<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> batch<span class="token punctuation">)</span><span class="token punctuation">;</span>            stmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 提交事务</span>        conn<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span>nonNull<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 发生异常时回滚事务</span>            conn<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在关系型数据库中，除了 &lt;code&gt;int&lt;/code&gt; 与 &lt;code&gt;varchar&lt;/code&gt; 等基础数据类型外，针对大数据属性提供了 &lt;code&gt;Clob&lt;/code&gt; 与 &lt;code&gt;Blob&lt;/code&gt; 类型，支持几十 &lt;code&gt;MB&lt;/code&gt; 乃至 </summary>
      
    
    
    
    <category term="数据库" scheme="https://budai.pages.dev/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Oracle" scheme="https://budai.pages.dev/tags/Oracle/"/>
    
  </entry>
  
  <entry>
    <title>系统鉴权设计详解</title>
    <link href="https://budai.pages.dev/java/spring/web/authentic/"/>
    <id>https://budai.pages.dev/java/spring/web/authentic/</id>
    <published>2025-08-03T16:00:00.000Z</published>
    <updated>2025-08-16T10:53:01.221Z</updated>
    
    <content type="html"><![CDATA[<p>在任意系统中，系统权限管理无疑都是尤为重要的环节。没有严格的权限管控，不用用户之间数据将相互暴露，后果不堪设想。</p><blockquote><p>今天，就让我们深入探讨一下如何在系统中实现完善的权限管理</p></blockquote><h3 id="一、名词解释"><a href="#一、名词解释" class="headerlink" title="一、名词解释"></a>一、名词解释</h3><p>在开始之前，让我们先了解一下系统鉴权中常涉及的一系列概念。</p><h4 id="1-数据越权"><a href="#1-数据越权" class="headerlink" title="1. 数据越权"></a>1. 数据越权</h4><p>数据越权故名思意即用户权限访问了不属于自身的资源，分为下述两类：</p><h5 id="1-垂直越权"><a href="#1-垂直越权" class="headerlink" title="(1) 垂直越权"></a>(1) 垂直越权</h5><p>垂直越权即访问高于自身级别的内容，如普通用户越权访问系统后台管理员资源。</p><h5 id="2-水平越权"><a href="#2-水平越权" class="headerlink" title="(2) 水平越权"></a>(2) 水平越权</h5><p>水平越权即访问到同级别资源内容，但内容并不属于你，如论坛系统中越权编辑或删除他人发布的贴子。</p><h4 id="2-鉴权模型"><a href="#2-鉴权模型" class="headerlink" title="2. 鉴权模型"></a>2. 鉴权模型</h4><p>针对上述提到的两类越权场景，实现鉴权的方式也有多类，在设计上通常集成使用。</p><h5 id="1-RBAC模型"><a href="#1-RBAC模型" class="headerlink" title="(1) RBAC模型"></a>(1) RBAC模型</h5><p><code>RBAC</code> 即基于角色访问控制 <code>(Role-Based Access Control)</code>，将系统资源绑定于不同的角色，再将用户与角色之间相关，通过校验用户的角色判断是否拥有权限。<br><img src="/album/loading.gif" data-original="/album/article/java/spring/auth/1.png"></p><p>在系统的功能设计中，通常在菜单权限设计中利用 <code>RBAC</code> 模型，从而实现功能间的隔离。</p><h5 id="2-ABAC模型"><a href="#2-ABAC模型" class="headerlink" title="(2) ABAC模型"></a>(2) ABAC模型</h5><p><code>ABAC</code> 则为基于属性的访问控制 <code>(Attribute-Based Access Control)</code>，即用户直接与资源属性进行绑定。<br><img src="/album/loading.gif" data-original="/album/article/java/spring/auth/2.png"></p><p>相对于 <code>RBAC</code> 而言虽然 <code>ABAC</code> 能够实现更精确的权限管理，但缺点也显而易见，产生的关联数据相对更多且实现更为复杂。因此，在核心数据中通常才基于 <code>ABAC</code> 模型设计。</p><h5 id="3-ReBAC模型"><a href="#3-ReBAC模型" class="headerlink" title="(3) ReBAC模型"></a>(3) ReBAC模型</h5><p><code>ReBAC</code> 为基于关系的访问控制 <code>(Relationship-Based Access Control)</code>，与 <code>RBAC</code> 有一定的类似。</p><p>与 <code>RBAC</code> 所不同的是在 <code>ReBAC</code> 中各级角色间存在关联。最为常见的即部门关系，同个部门下可共享权限，由此赋予部门负责人相应权限即可，部门成员即可继承权限，如下述图例：<br><img src="/album/loading.gif" data-original="/album/article/java/spring/auth/6.png"></p><p>如此设计的好处即无需像 <code>RBAC</code> 中单独为每个角色都绑定权限，极大节省了大量重复关联数据从而节省资源。</p><h3 id="二、功能权限"><a href="#二、功能权限" class="headerlink" title="二、功能权限"></a>二、功能权限</h3><p>在系统中主要包含两部分权限管理，功能菜单以及数据内容权限，让我们先以菜单权限入手。</p><h4 id="1-架构设计"><a href="#1-架构设计" class="headerlink" title="1. 架构设计"></a>1. 架构设计</h4><p>在菜单权限中设计中，常更倾向于 <code>RBAC</code> 由角色实现更优的管理。</p><p>不同的角色拥有不同的菜单权限，而每个用户又拥有不同的角色，通过角色将用户与菜单关联。<br><img src="/album/loading.gif" data-original="/album/article/java/spring/auth/3.png"></p><p>如此设计的好处在于可实现少量数据关联大量资源，若直接将用户与菜单执行关联，随着用户数量的增加将产生大量的重复数据，造成不必要的资源浪费。</p><h4 id="2-用户认证"><a href="#2-用户认证" class="headerlink" title="2. 用户认证"></a>2. 用户认证</h4><p>确定模型结构后，便可开始具体的代码实现设计。</p><p>最基础的当然莫属于用户登录认证了，在登录认证中常采用双认证机制。即权限认证与过期认证相结合，利用 <code>Spring Security</code> 实现用户账号认证，而 <code>JWT</code> 则用于实现过期登录认证。<br><img src="/album/loading.gif" data-original="/album/article/java/spring/auth/4.png"></p><p>关于具体的双认证实现细节这里不再展开，在之前的文章中已经详细分享过，感兴趣的话可去看一下：<a href="https://budai.pages.dev/java/spring/framework/security/">Spring Security权限认证实战</a>。</p><p>这里仅提一点，即登录通过之后将用户登录信息存入请求上下文中供后续使用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setAuthentication</span><span class="token punctuation">(</span>UserDTO user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Authentication authentic <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordAuthenticationToken</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    SecurityContextHolder<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>authentic<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>Spring</code> 中可继承 <code>OncePerRequestFilter</code> 过滤器实现对请求的认证处理，其增强实现了 <code>Filter</code> 过滤器，保证在转发请求时每个请求也仍只会处理一次。</p><p>在 <code>doFilterInternal()</code> 读取请求认证头获取登录信息，当认证通过时存入 <code>Spring Security</code> 上下文环境中。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RequiredArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenFilter</span> <span class="token keyword">extends</span> <span class="token class-name">OncePerRequestFilter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        String token <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"Token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">processNotPermit</span><span class="token punctuation">(</span><span class="token string">"Please login first."</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        UserDTO user<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 校验 JWT</span>            Claims claims <span class="token operator">=</span> jwtUtils<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>            String content <span class="token operator">=</span> claims<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"sub"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            user <span class="token operator">=</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> UserDTO<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">processNotPermit</span><span class="token punctuation">(</span><span class="token string">"Login fail."</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">processNotPermit</span><span class="token punctuation">(</span><span class="token string">"Invalid token."</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 校验通过</span>        SecurityManager<span class="token punctuation">.</span><span class="token function">setAuthentication</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processNotPermit</span><span class="token punctuation">(</span>String msg<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">203</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>ResultData<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-权限管理"><a href="#3-权限管理" class="headerlink" title="3. 权限管理"></a>3. 权限管理</h4><p>根据上述设计图中的结构定义相应的用户、角色以及菜单关联内容后，便可开始具体的实现。</p><p>这里略去具体的业务层逻辑代码，仅演示如果通过 <code>Security</code> 实现管理。在这里利用 <code>Spring Security</code> 中 <code>@PreAuthorize</code> 注解的特性，其会接口执行前触发，我们便可前置校验用户是否满足权限。</p><p>按照提到的逻辑，让我们先定义权限校验的实现业务。逻辑上并不复杂，即读取请求上下文得到用户信息后查询对应的菜单权限，再与接口权限码相匹配是否包含。</p><p>完整的代码实现如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"pm"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RequiredArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PermitManager</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String SEPARATOR <span class="token operator">=</span> <span class="token string">","</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ALL_PERMIT <span class="token operator">=</span> <span class="token string">"*.*"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> UserRoleService userRoleService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 登录用户是否包含指定权限     *     * @param permit 菜单权限     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPermit</span><span class="token punctuation">(</span>String permit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Long userId <span class="token operator">=</span> <span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> menuPermits <span class="token operator">=</span> userRoleService<span class="token punctuation">.</span><span class="token function">getUserMenus</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>menuPermits<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ALL_PERMIT<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 拥有所有菜单权限</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> menuPermits<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>permit<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">private</span> Long <span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Long userId <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            UserDTO user <span class="token operator">=</span> <span class="token punctuation">(</span>UserDTO<span class="token punctuation">)</span> SecurityContextHolder<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">getAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            userId <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Not found user, message: {}"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> userId<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-接口设计"><a href="#4-接口设计" class="headerlink" title="4. 接口设计"></a>4. 接口设计</h4><p>完成上述工作之后便可在接口服务上绑定菜单权限，其中 <code>@PreAuthorize</code> 兼容 <code>IOC</code> 容器以 <code>bean</code> 形式调用，其配置格式为：<code>@bean.method(param)</code>。</p><p>如下述示例中即给订单查询接口绑定菜单权限 <code>order.query</code>，当请求接口时便会执行上述 <code>PermitManager</code> 中定义的校验逻辑。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/order"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RequiredArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderResource</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> OrderService orderService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"@pm.hasPermit('order.query')"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ResponseEntity<span class="token operator">&lt;</span>Order<span class="token operator">></span> <span class="token function">query</span><span class="token punctuation">(</span>String orderId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Order order <span class="token operator">=</span> orderService<span class="token punctuation">.</span><span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>Order<span class="token operator">:</span><span class="token operator">:</span>getOrderId<span class="token punctuation">,</span> orderId<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注解以切面链路形式生效，当请求接口时将执行 <code>@PreAuthorize</code> 注解校验逻辑。</p><p>若返回 <code>false</code> 则表示权限不足，则不会继续执行方法体内容而会抛出 <code>AccessDeniedException</code> 异常，可通过 <code>@ExceptionHandler</code> 注解在全局异常中实现管理。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 监听异常请求并处理返回     */</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"rawtypes"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ResultData <span class="token function">handleNotFoundException</span><span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">AccessDeniedException</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> ResultData<span class="token punctuation">.</span><span class="token function">denies</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ResultData<span class="token punctuation">.</span><span class="token function">failed</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、注解详解"><a href="#三、注解详解" class="headerlink" title="三、注解详解"></a>三、注解详解</h3><p>在上述中初步了解了 <code>@PreAuthorize</code> 使用方式，下面让我们进一步了解注解的使用。</p><p><code>Spring Security</code> 中针对校验提供了多个注解，其中较常用的有下述两个：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">注解</td>        <th style="text-align: center;">描述</td>    </tr>    <tr>        <td style="text-align: center;">@PreAuthorize</td>        <td style="text-align: center;">在接口前置执行校验。</td>    </tr>    <tr>        <td style="text-align: center;">@PostAuthorize</td>        <td style="text-align: center;">在接口后置执行校验。</td>    </tr></table></br><p>而除了之前提到的 <code>@bean.method(param)</code> 形式调用外，其支持多样灵活的表达式兼容，下面则分别进行介绍。</p><h4 id="1-对象引用"><a href="#1-对象引用" class="headerlink" title="1. 对象引用"></a>1. 对象引用</h4><p>其中最基础的方式即通过 <code>#</code> 引用获取当前接口入参内容，如下述即校验入参 <code>storeId</code> 值是否为 <code>123</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"#storeId == '123'"</span><span class="token punctuation">)</span><span class="token keyword">public</span> Store <span class="token function">query</span><span class="token punctuation">(</span>String storeId<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当接口入参为对象时，<code>#</code> 表达式也支持 <code>obj.field</code> 的形式引用特定字段。</p><p>如下述中接口入参为 <code>Store</code> 类，则可以通过 <code>#store.storeId</code> 单独校验 <code>storeId</code> 属性。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Store</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long storeId<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"#store.storeId == '2'"</span><span class="token punctuation">)</span><span class="token keyword">public</span> Store <span class="token function">query</span><span class="token punctuation">(</span>Store store<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-参数别名"><a href="#2-参数别名" class="headerlink" title="2. 参数别名"></a>2. 参数别名</h4><p><code>Spring Security</code> 同时提供了 <code>@P</code> 实现别名配置，当声明的参数名称过长时，可实现代码简化。</p><p>如下述中方法入参字段为 <code>aVeryLongParameterNameOfStore</code>，而通过 <code>@P(&quot;s&quot;)</code> 即可实现参数重命名，在表达式中便可通过 <code>#s.storeId</code> 实现数据引用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"#s.storeId == '2'"</span><span class="token punctuation">)</span><span class="token keyword">public</span> Store <span class="token function">query</span><span class="token punctuation">(</span><span class="token annotation punctuation">@P</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span> Store aVeryLongParameterNameOfStore<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-方法调用"><a href="#3-方法调用" class="headerlink" title="3. 方法调用"></a>3. 方法调用</h4><p>在之前的功能鉴权中也看到了可通过 <code>@</code> 实现方法的调用。</p><p>如声明了 <code>bean</code> 实例 <code>ts</code>，且包含方法 <code>isOk()</code>，内容如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"ts"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestServioce</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在表达式中则可通过 <code>@bean.method(param)</code> 格式调用，如下即通过 <code>@ts.isOk()</code> 调用上述方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"@ts.isOk()"</span><span class="token punctuation">)</span><span class="token keyword">public</span> Store <span class="token function">query</span><span class="token punctuation">(</span>Store store<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-响应内容"><a href="#4-响应内容" class="headerlink" title="4. 响应内容"></a>4. 响应内容</h4><p>在上面提到的几类都是基于 <code>#</code> 实现方法入参引用，而在 <code>@PostAuthorize</code> 中，则可以通过 <code>returnObject</code> 实现返回结果的引用。</p><p>如下述接口中返回的 <code>Store</code> 对象，而通过 <code>returnObject</code> 即可在表达式中引用接口返回的结果。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@PostAuthorize</span><span class="token punctuation">(</span><span class="token string">"returnObject.storeId != null"</span><span class="token punctuation">)</span><span class="token keyword">public</span> Store <span class="token function">query</span><span class="token punctuation">(</span>String storeId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Store</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-组合校验"><a href="#5-组合校验" class="headerlink" title="5. 组合校验"></a>5. 组合校验</h4><p>在表达式中也支持 <code>and</code> 和 <code>or</code> 关键字实现条件的组合内容校验。</p><p>如下即通过 <code>and</code> 实现 <code>storeId=1</code> 且 <code>name=AA</code> 的复合校验。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"#s.storeId == '1' and #s.name == 'AA' "</span><span class="token punctuation">)</span><span class="token keyword">public</span> Store <span class="token function">query</span><span class="token punctuation">(</span>Store s<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、数据权限"><a href="#四、数据权限" class="headerlink" title="四、数据权限"></a>四、数据权限</h3><p>了解上述基本内容后，那么接下来让我们来看一下如何实现数据权限管理。</p><h4 id="1-模型设计"><a href="#1-模型设计" class="headerlink" title="1. 模型设计"></a>1. 模型设计</h4><p>在数据鉴权中，显然 <code>RBAC</code> 角色模型不再适用，权限粒度不够将导致水平越权情况发生。</p><p>因此，在数据鉴权中，更多的是采用 <code>ABAC</code> 模型，将用户与数据直接进行关联，实现最小粒度控制。</p><p>换言之，即针对接口输入的内容比对是否拥有对应的资源权限。以商城系统为例，系统内存在多个店铺，每个用户拥有不同的店铺，用户与店铺之间则通过关联表直接关联。<br><img src="/album/loading.gif" data-original="/album/article/java/spring/auth/5.png"></p><h4 id="2-工厂设计"><a href="#2-工厂设计" class="headerlink" title="2. 工厂设计"></a>2. 工厂设计</h4><p>在代码设计上，为了适配同样的数据权限管理，这边定义了权限管理接口。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PermitHandler</span> <span class="token punctuation">{</span>    String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">hasPermit</span><span class="token punctuation">(</span>Object arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面以店铺权限校验为例，让我们编写对应的校验逻辑。</p><p>在实现上与刚才提到 <code>@PreAuthorize</code> 类似，读取 <code>Security</code> 上下文得到用户后查询用户拥有的店铺权限，并与输入数据进行比对。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token punctuation">(</span><span class="token string">"storePermitHandler"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RequiredArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StorePermitHandler</span> <span class="token keyword">implements</span> <span class="token class-name">PermitHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> StoreCache storeCache<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"store"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPermit</span><span class="token punctuation">(</span>Object arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Long userId <span class="token operator">=</span> SecurityManager<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>Long<span class="token operator">></span> storeIds <span class="token operator">=</span> storeCache<span class="token punctuation">.</span><span class="token function">readByUser</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> storeIds<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-接口设计"><a href="#3-接口设计" class="headerlink" title="3. 接口设计"></a>3. 接口设计</h4><p>完成上述声明后，便可通过 <code>@PreAuthorize</code> 定义具体的接口权限。</p><p>如下述即定义需拥有 <code>store.query</code> 接口查询权限，同时查询的 <code>storeId</code> 需属于用户。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"{storeId}"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PreAuthorize</span><span class="token punctuation">(</span><span class="token string">"@pm.hasPermit('store.query') and @storePermitHandler.hasPermit(#storeId)"</span><span class="token punctuation">)</span><span class="token keyword">public</span> ResultData<span class="token operator">&lt;</span>Store<span class="token operator">></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String storeId<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Store store <span class="token operator">=</span> storeService<span class="token punctuation">.</span><span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>Store<span class="token operator">:</span><span class="token operator">:</span>getStoreId<span class="token punctuation">,</span> storeId<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ResultData<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、手动管理"><a href="#五、手动管理" class="headerlink" title="五、手动管理"></a>五、手动管理</h3><p>在上述的示例中基于 <code>Spring Security</code> 自带注解及表达式可实现数据权限校验。</p><p>但在复杂的业务情况下，表达式复杂度将快速膨胀且无法灵活定义，因此自定义注解则更为合适，下面就具体分享如何设计实现。</p><h4 id="1-权限注解"><a href="#1-权限注解" class="headerlink" title="1. 权限注解"></a>1. 权限注解</h4><p>通过自定义权限注解，当方法参数标识了注解时执行相应的鉴权逻辑校验。</p><p>同样以刚才提到的用户店铺权限为例，声明注解 <code>@StorePermit</code> 作用于字段即方法，内容如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">,</span>        ElementType<span class="token punctuation">.</span>PARAMETER<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">StorePermit</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样的，在之前的工厂实例基础上新增方法 <code>hasPermit(Annotation annotation, Object arg)</code> 实现校验逻辑，只有当注解存在且为 <code>@StorePermit</code> 时才触发校验。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RequiredArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StorePermitHandler</span> <span class="token keyword">implements</span> <span class="token class-name">PermitHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasPermit</span><span class="token punctuation">(</span>Annotation annotation<span class="token punctuation">,</span> Object arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>annotation<span class="token punctuation">)</span> <span class="token operator">||</span> annotation<span class="token punctuation">.</span><span class="token function">annotationType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> StorePermit<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">hasPermit</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-切面实现"><a href="#2-切面实现" class="headerlink" title="2. 切面实现"></a>2. 切面实现</h4><p>注解声明与校验逻辑编写完成之后，便可编写对应的切面实现。</p><p>在切面中通过环切遍历接口入参，若声明的接口入参标识的鉴权注解，则执行上述定义的鉴权逻辑。当鉴权不通过时，则返回 <code>403</code> 权限不足。</p><p>完整的切面实现代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@RequiredArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PermitAspect</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> PermitHandler<span class="token operator">></span> permitHandlerMap<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution (public * xyz.ibudai.authority.rest.*.*(..))"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"pointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">around</span><span class="token punctuation">(</span>ProceedingJoinPoint joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        Method method <span class="token operator">=</span> <span class="token function">getMethod</span><span class="token punctuation">(</span>joinPoint<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Annotation<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> annotations <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameterAnnotations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> annotations<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object arg <span class="token operator">=</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Annotation annotation <span class="token operator">:</span> annotations<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 遍历入参注解</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> PermitHandler<span class="token operator">></span> entry <span class="token operator">:</span> permitHandlerMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    PermitHandler handler <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">boolean</span> hasPermit <span class="token operator">=</span> handler<span class="token punctuation">.</span><span class="token function">lackPermit</span><span class="token punctuation">(</span>annotation<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasPermit<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 权限不足</span>                        <span class="token keyword">return</span> ResultData<span class="token punctuation">.</span><span class="token function">denies</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Lack %s permission of %s"</span><span class="token punctuation">,</span> handler<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 校验合法，放行</span>        <span class="token keyword">return</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> Method <span class="token function">getMethod</span><span class="token punctuation">(</span>ProceedingJoinPoint joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Signature signature <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>signature <span class="token keyword">instanceof</span> <span class="token class-name">MethodSignature</span> methodSignature<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果是代理对象，取真实方法</span>        Method method <span class="token operator">=</span> methodSignature<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                method <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> method<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-测试接口"><a href="#3-测试接口" class="headerlink" title="3. 测试接口"></a>3. 测试接口</h4><p>完成这一切准备工作之后，让我们以店铺查询接口为例。</p><p>定义店铺查询接口，在接口入参声明 <code>@StorePermit</code> 表示接口启用店铺鉴权检验。当请求接口时则会将输入的店铺与用户拥有的店铺比对，比对不通过则不会执行具体的方法业务。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/store"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@RequiredArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StoreResource</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> StoreService storeService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/get"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ResultData<span class="token operator">&lt;</span>Store<span class="token operator">></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token annotation punctuation">@StorePermit</span> String storeId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Store store <span class="token operator">=</span> storeService<span class="token punctuation">.</span><span class="token function">lambdaQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span>Store<span class="token operator">:</span><span class="token operator">:</span>getStoreId<span class="token punctuation">,</span> storeId<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ResultData<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过上述的示例可以看到，通过注解与切面结合的方式，在实现数据鉴权的同时简化鉴权逻辑，业务代码无需再关注相应的权限问题，极大简化了代码复杂度。</p><hr><p><strong>参考链接</strong></p><ol><li>仓库地址：<a href="https://github.com/BuDaiYouth/system-authority">system-authority</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在任意系统中，系统权限管理无疑都是尤为重要的环节。没有严格的权限管控，不用用户之间数据将相互暴露，后果不堪设想。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;今天，就让我们深入探讨一下如何在系统中实现完善的权限管理&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;一、名词解</summary>
      
    
    
    
    <category term="Spring工具" scheme="https://budai.pages.dev/categories/Spring%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Spring Boot" scheme="https://budai.pages.dev/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Java 并发锁实战</title>
    <link href="https://budai.pages.dev/java/thread/concurrency/"/>
    <id>https://budai.pages.dev/java/thread/concurrency/</id>
    <published>2025-06-28T16:00:00.000Z</published>
    <updated>2025-07-26T13:57:20.870Z</updated>
    
    <content type="html"><![CDATA[<p>在系统设计中，通常需面对着一个相对棘手的问题：同一数据的多端访问，即我们常说的数据并发。</p><p>通俗一点来讲，当同一份数据在同一时候被多端访问或修改时，其最终态将不可预测。由此衍生，针对此类场景有着丰富的解决方式，稍后让我们来一一盘点。</p><h3 id="一、多端并发"><a href="#一、多端并发" class="headerlink" title="一、多端并发"></a>一、多端并发</h3><p>对于并发问题，线程锁无疑是最趁手的工具，在以往的博客中分享过线程的基本定义与示例，今天就让我们将其应用于实际场景之中。</p><h4 id="1-业务场景"><a href="#1-业务场景" class="headerlink" title="1. 业务场景"></a>1. 业务场景</h4><p>首先让我们来假定一个业务场景，在系统中包含工单审批模块，审批环节多个用户都拥有审批权限，当用户操作审批之后将更新状态并完结工单。</p><p>如果你对业务足够敏感，在上述的的场景中便可发现一个问题，由于审批权限的开放给了多用户，当多个用户针对同一工单操作审批时，若无并发控制则工单终态将不可预测。</p><p>如两个用户同时发起操作，其中一个用户同意了工单，而另一用户拒绝了工单，最终工单的状态则可能为二者中的任意其一。这类不确定性对于业务功能而言显然不能接受，正确的效果应该是对其二中的一个用户返回审批中的消息提示等交互。</p><h4 id="2-基本思路"><a href="#2-基本思路" class="headerlink" title="2. 基本思路"></a>2. 基本思路</h4><p>针对上述提到的场景，先让我们来看一个较为经典的解决方案。</p><p>造成数据不可预测性的原因即多端访问问题，那所要实现的即限制同一个数据的并发访问，可采取下述步骤：</p><blockquote><ul><li>定义缓存容器，用于存储当前进行的事务；</li><li>用户发起操作时，读取进程中事务后并存入自身提交的事务；</li><li>执行操作对应的动作，同时比对事务是否操作中，若是则跳过；</li></ul></blockquote><p>对于缓存容器则有着丰富的选择，在单机环境下可选 <code>ConcurrentHashMap</code> 与 <code>SynchronizedSet</code> 等 JDK 自带线程安全容器。而对于集群部署服务，则可以使用 <code>Redis</code> 缓存数据库。</p><h4 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h4><p>下面就将上述的实现方案转化为相应的代码实现。</p><p>在缓存容器上，这里选用了 <code>ConcurrentHashMap</code> 实例，由于其线程安全的特性则通过 <code>static</code> 声明为静态变量后便可作为缓存使用。而针对锁则使用 <code>ReentrantLock</code>，其基于 <code>Unsafe</code> 的 <code>CAS</code> 性能相对于 <code>synchronized</code> 关键字更优秀。</p><p>对应完整的实现代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcurrencyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ReentrantLock locker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Set<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Data</span>    <span class="token annotation punctuation">@NoArgsConstructor</span>    <span class="token annotation punctuation">@AllArgsConstructor</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ActionTread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> String key<span class="token punctuation">;</span>        <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> inputs<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> failed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> success <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> actives<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 加锁读写缓存</span>                locker<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 读取激活状态数据</span>                    actives <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>Set<span class="token operator">:</span><span class="token operator">:</span>stream<span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 记录自身提交数据</span>                    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> inputs<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    locker<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer ele <span class="token operator">:</span> inputs<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 判断元素是否处理中，是则跳过</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>actives<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        failed<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 模拟业务耗时</span>                    TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    success<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 释放缓存</span>                map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Key: {%s}, Failed: {%s}, Success: {%s}%n"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> failed<span class="token punctuation">,</span> success<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有一点需要注意，虽然 <code>Map</code> 容器为线程安全，但为了实现每个用户都读取都最新的缓存数据，针对缓存数据的读写两个步骤仍然需要加锁保证原子性。</p><p>以具体场景举例，<code>user1</code> 提交 <code>[1,2]</code> 后获取锁并读取缓存，此期间 <code>user2</code> 提交了 <code>[2,3]</code> 由于锁已经占用将进入阻塞，当 <code>user1</code> 写入缓存后释放锁，则 <code>user2</code> 成功获取锁并读取最新缓存得到 <code>user1</code> 提交的 <code>[1,2]</code>，后续则可基于此缓存数据判断处理。</p><p>在操作数据锁时注意一点，<code>lock()</code> 需在 <code>try</code> 代码块之外，原因在于若放置于 <code>try</code> 内当获取锁异常时，执行 <code>finally</code> 中的 <code>unlock()</code> 将再次抛出异常。</p><pre class="line-numbers language-java"><code class="language-java">locker<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// do something</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    locker<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-测试用例"><a href="#4-测试用例" class="headerlink" title="4. 测试用例"></a>4. 测试用例</h4><p>完成对应的代码实现后让我们编写相应的用例进行测试。</p><p>分别定义三个用户提交了三个集合，集合内容相互交互。在操作提交后，预期的效果即 <code>Beth</code> 提交的 <code>3</code> 被 <code>Alex</code> 占用仅 <code>[4,5]</code> 成功，类似的 <code>Jack</code> 用户仅 <code>[6,7]</code> 成功。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionTread</span><span class="token punctuation">(</span><span class="token string">"Alex"</span><span class="token punctuation">,</span> Set<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionTread</span><span class="token punctuation">(</span><span class="token string">"Beth"</span><span class="token punctuation">,</span> Set<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Thread t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionTread</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> Set<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">started</span><span class="token punctuation">(</span>List<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> t2<span class="token punctuation">,</span> t3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 阻塞主线程查看结果</span>    TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">started</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Thread<span class="token operator">></span> threads<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Thread t <span class="token operator">:</span> threads<span class="token punctuation">)</span> <span class="token punctuation">{</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行上述用例代码，可以看到输出的内容的与所预期效果一致。</p><pre class="line-numbers language-txt"><code class="language-txt">Key: {Alex}, Failed: {[]}, Success: {[1, 2, 3]}Key: {Beth}, Failed: {[3]}, Success: {[4, 5]}Key: {Jack}, Failed: {[5]}, Success: {[6, 7]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="二、单端并发"><a href="#二、单端并发" class="headerlink" title="二、单端并发"></a>二、单端并发</h3><h4 id="1-场景分析"><a href="#1-场景分析" class="headerlink" title="1. 场景分析"></a>1. 场景分析</h4><p>在刚才的示例中，我们解决了多用户的并发限制，实现了数据的原子性操作。</p><p>但在上述的场景下仍遗漏了一个环节，即缓存的管控依据以用户为维度，当同一用户针对同一数据发起连续操作时，限制此时将失效。</p><p>如同一用户提交 <code>[1,2,3]</code> 数据后并再次重复操作发起 <code>[1,2,3]</code>，显然此时第二次将被限制提交实现，但第二次提交失败退出执行 <code>map.remove()</code> 将导致数据的提前释放，若此时用户再次发起 <code>[1,2,3]</code> 将会绕过限制。</p><h4 id="2-代码改造"><a href="#2-代码改造" class="headerlink" title="2. 代码改造"></a>2. 代码改造</h4><p>因此，针对刚才提到的代码进行改造，在缓存容器上换成 <code>SynchronizedSet</code> 容器。</p><p>在缓存容器的读写部分，与之前的示例一致仍采用 <code>ReentrantLock</code> 锁方式实现。不同之处在于缓存的记录与释放，在释放缓存时仅移除成功部分，因为失败部分数据表明在线程中正在操作，应由发起方进行资源释放。</p><p>另外需注意一点，由于每次只释放成功部分数据，为防止意料外的异常崩溃在 <code>catch</code> 中当捕获程序异常时，仍需按提交内容全量释放，防止资源未正确清空释放。</p><p>改造后对应完整的实现代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcurrencyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ReentrantLock locker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> set <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">synchronizedSet</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Data</span>    <span class="token annotation punctuation">@NoArgsConstructor</span>    <span class="token annotation punctuation">@AllArgsConstructor</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ActionTest</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> String key<span class="token punctuation">;</span>        <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> inputs<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> failed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> success <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> hasException <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> actives<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 加锁读写缓存</span>                locker<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 复制缓存，切断引用</span>                    actives <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>                    set<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                    locker<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer ele <span class="token operator">:</span> inputs<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 判断元素是否处理中，是则跳过</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>actives<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        failed<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 模拟业务耗时</span>                    TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    success<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 发生异常按提交内容清空</span>                hasException <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                set<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>inputs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hasException<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 仅清除成功内容</span>                    set<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>success<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Key: {%s}, Failed: {%s}, Success: {%s}%n"</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> failed<span class="token punctuation">,</span> success<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-测试用例"><a href="#3-测试用例" class="headerlink" title="3. 测试用例"></a>3. 测试用例</h4><p>同样的，按照刚才提到的单用户并发编写相应的测试用例代码，内容如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionTread</span><span class="token punctuation">(</span><span class="token string">"Alex"</span><span class="token punctuation">,</span> Set<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionTread</span><span class="token punctuation">(</span><span class="token string">"Alex"</span><span class="token punctuation">,</span> Set<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Thread t3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionTread</span><span class="token punctuation">(</span><span class="token string">"Alex"</span><span class="token punctuation">,</span> Set<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">started</span><span class="token punctuation">(</span>List<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>t1<span class="token punctuation">,</span> t2<span class="token punctuation">,</span> t3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行上述用例代码，可以看到后续两次重复提交都能按照设计被成功拦截。</p><pre class="line-numbers language-txt"><code class="language-txt">Key: {Alex}, Failed: {[1, 2, 3]}, Success: {[]}Key: {Alex}, Failed: {[1, 2]}, Success: {[]}Key: {Alex}, Failed: {[]}, Success: {[1, 2, 3]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="三、队列应用"><a href="#三、队列应用" class="headerlink" title="三、队列应用"></a>三、队列应用</h3><h4 id="1-思路分析"><a href="#1-思路分析" class="headerlink" title="1. 思路分析"></a>1. 思路分析</h4><p>除了上述提到的基于缓存容器之外，针对并发场景也可利用队列先进先出的特性实现。</p><p>首先让我们从根本上来看可以发现数据不可预测是由于并发导致，那么如果从程序上避免并发问题即迎刃而解。</p><p>那又应该如何消除并发呢？原理其实并不复杂，通过队列将多端输入内容入列，再由统一的消费者读取队列后执行相应的操作，由此便从流程上消除了并发场景。</p><h4 id="2-数据生产"><a href="#2-数据生产" class="headerlink" title="2. 数据生产"></a>2. 数据生产</h4><p>下面就将对应的方案转为实际代码实现。</p><p>同样的，对于数据的读写仍需要涉及 <code>ReentrantLock</code> 保存原子性，由于不再需要缓存容器，这里选择了 <code>JDK</code> 中自带的 <code>LinkedBlockingQueue</code> 阻塞队列实例。倘若在集群环境中，则可替换选择 <code>RabbitMQ</code> 及 <code>Kafka</code> 等常见消息队列作为载体。</p><p>当用户提交操作时，由生产者将数据发送至阻塞队列，代码实现如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcurrencyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ReentrantLock locker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> LinkedBlockingQueue<span class="token operator">&lt;</span>String<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Data</span>    <span class="token annotation punctuation">@NoArgsConstructor</span>    <span class="token annotation punctuation">@AllArgsConstructor</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> inputs<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            locker<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 提交内容入队</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>String ele <span class="token operator">:</span> inputs<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    queue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                locker<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-数据消费"><a href="#3-数据消费" class="headerlink" title="3. 数据消费"></a>3. 数据消费</h4><p>在消费者方面，即启动守护线程监听队列数据，当存在数据写入时则由 <code>take()</code> 读取内容，再判断是否元素是否处理过即可。</p><p>在这里仍通过 <code>ConcurrentHashMap</code> 记录数据的处理次数，由于此时消费者仅单线程，理论上使用非线程安全容器也可，消费者逻辑代码实现如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcurrencyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 读取队列</span>                    String ele <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 判断是否处理过</span>                    Integer count <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 记录数据操作次数</span>                    map<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>ele<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> Integer<span class="token operator">:</span><span class="token operator">:</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-测试用例-1"><a href="#4-测试用例-1" class="headerlink" title="4. 测试用例"></a>4. 测试用例</h4><p>完成后编写相应的测试用例，通过生产者提交数据，每次提交内容都包含重复数据。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    Thread consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Thread<span class="token operator">></span> threads <span class="token operator">=</span> List<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>Set<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>Set<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>Set<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Thread t <span class="token operator">:</span> threads<span class="token punctuation">)</span> <span class="token punctuation">{</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序后可以看到输出内容每个元素计数器仅 <code>1</code>，对于重复部分能够成功过滤。</p><pre class="line-numbers language-txt"><code class="language-txt">{a=1, b=1, c=1, d=1}<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在系统设计中，通常需面对着一个相对棘手的问题：同一数据的多端访问，即我们常说的数据并发。&lt;/p&gt;
&lt;p&gt;通俗一点来讲，当同一份数据在同一时候被多端访问或修改时，其最终态将不可预测。由此衍生，针对此类场景有着丰富的解决方式，稍后让我们来一一盘点。&lt;/p&gt;
&lt;h3 id=&quot;一、</summary>
      
    
    
    
    <category term="线程并发" scheme="https://budai.pages.dev/categories/%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91/"/>
    
    
    <category term="JAVA" scheme="https://budai.pages.dev/tags/JAVA/"/>
    
    <category term="多线程" scheme="https://budai.pages.dev/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>NLLB 翻译模型实战</title>
    <link href="https://budai.pages.dev/pyhton/tranlator/"/>
    <id>https://budai.pages.dev/pyhton/tranlator/</id>
    <published>2025-06-09T16:00:00.000Z</published>
    <updated>2025-06-11T13:05:14.606Z</updated>
    
    <content type="html"><![CDATA[<p><code>Hugging Face</code> 与 <code>GitHub</code> 相似，专注于 <code>AI</code> 模型领域的开源社区，拥有丰富的模型可实现快速集成。社区吸引了众多的优秀的开发者及公司机构，源源不断的产出优秀成果。</p><p>今天，就让我们通过 <code>Python</code> 集成 <code>facebook</code> 开源的翻译模型，快速打造专属翻译引擎，以 <code>API</code> 接口为媒介为应用提供基础翻译服务。</p><h3 id="一、基本准备"><a href="#一、基本准备" class="headerlink" title="一、基本准备"></a>一、基本准备</h3><h4 id="1-模型下载"><a href="#1-模型下载" class="headerlink" title="1. 模型下载"></a>1. 模型下载</h4><p><code>nllb-200-distilled-600M</code> 模型是由 <code>Facebook</code> 开源的 <code>AI</code> 翻译模型，模型支持 <code>200</code> 种语言翻译。</p><p>开始之前需要下载相应的模型文件，访问 <code>nllb</code> 模型相应的仓库下载图中标注内容：<a href="https://huggingface.co/facebook/nllb-200-distilled-600M/tree/main">nllb-200-distilled-600M</a>。<br><img src="/album/loading.gif" data-original="/album/article/python/engine/1.png"></p><h4 id="2-依赖下载"><a href="#2-依赖下载" class="headerlink" title="2. 依赖下载"></a>2. 依赖下载</h4><p>新建 <code>Python</code> 项目并安装下述依赖，服务将通过 <code>torch</code> 加载模型，并基于 <code>fastapi</code> 框架以 <code>API</code> 接口形式对外开放服务。同时，利用 <code>PyYAML</code> 库实现 <code>yml</code> 文件内容配置化，并通过 <code>langdetect</code> 语言库实现语言检测。</p><p>新建 <code>requirements.txt</code> 依赖文件，类库依赖内容如下：</p><pre class="line-numbers language-txt"><code class="language-txt">fastapi==0.110.0uvicorn[standard]==0.29.0transformers==4.39.3torch>=1.13.1sentencepiece==0.1.99protobuf==3.20.3pydantic==1.10.13PyYAML~=6.0.2langdetect~=1.0.9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、系统配置"><a href="#二、系统配置" class="headerlink" title="二、系统配置"></a>二、系统配置</h3><h4 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1. 配置文件"></a>1. 配置文件</h4><p>为了更好的方便系统维护，利用 <code>PyYAML</code> 库可实现 <code>yml</code> 文件的解析，实现配置化管理。</p><p>新建 <code>application.yml</code> 配置文件，定义对应的接口服务信息，以及默认上述下载后的模型存储路径。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">app</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> Daily Word  <span class="token key atrule">description</span><span class="token punctuation">:</span> Word Translation  <span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token number">1.0</span>  <span class="token key atrule">host</span><span class="token punctuation">:</span> 127.0.0.1  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span><span class="token key atrule">model</span><span class="token punctuation">:</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> <span class="token string">"D:/Workspace/Model"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-实体定义"><a href="#2-实体定义" class="headerlink" title="2. 实体定义"></a>2. 实体定义</h4><p><code>@dataclass</code> 是 <code>3.7+</code> 版本标准库中的轻量级数据容器，提供了基础的对象定义。</p><p>这里通过类对象更便捷的交互配置文件，分别新建 <code>AppConfig.py</code> 与 <code>ModelConfig.py</code> 文件，文件内容如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> dataclasses <span class="token keyword">import</span> dataclass@dataclass<span class="token keyword">class</span> <span class="token class-name">AppConfig</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    description<span class="token punctuation">:</span> str    version<span class="token punctuation">:</span> str    host<span class="token punctuation">:</span> str    port<span class="token punctuation">:</span> int@dataclass<span class="token keyword">class</span> <span class="token class-name">ModelConfig</span><span class="token punctuation">:</span>    path<span class="token punctuation">:</span> str<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-文件加载"><a href="#2-文件加载" class="headerlink" title="2. 文件加载"></a>2. 文件加载</h4><p>定义类文件后便可通过 <code>yaml.safe_load(file)</code> 方法加载 <code>yml</code> 配置文件。</p><p>完整实现代码如下，后续便可访问 <code>get_app_config()</code> 与 <code>get_model_config()</code> 方法或者配置信息。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> yaml<span class="token keyword">import</span> os<span class="token keyword">from</span> config<span class="token punctuation">.</span>AppConfig <span class="token keyword">import</span> AppConfig<span class="token keyword">from</span> config<span class="token punctuation">.</span>ModelConfig <span class="token keyword">import</span> ModelConfig<span class="token comment" spellcheck="true"># 配置文件</span><span class="token keyword">def</span> <span class="token function">load_config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 读取相对路径</span>    base_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span>    config_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>base_dir<span class="token punctuation">,</span> <span class="token string">'../../config/application.yml'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 文件存在判断</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>config_path<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> FileNotFoundError<span class="token punctuation">(</span>f<span class="token string">"Not found config file of: {config_path}"</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>config_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> file<span class="token punctuation">:</span>        <span class="token keyword">return</span> yaml<span class="token punctuation">.</span>safe_load<span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 加载配置文件</span>_config_data <span class="token operator">=</span> load_config<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取系统配置</span><span class="token keyword">def</span> <span class="token function">get_app_config</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> AppConfig<span class="token punctuation">:</span>    app_data <span class="token operator">=</span> _config_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'app'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> AppConfig<span class="token punctuation">(</span><span class="token operator">**</span>app_data<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 获取模型配置</span><span class="token keyword">def</span> <span class="token function">get_model_config</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ModelConfig<span class="token punctuation">:</span>    model_data <span class="token operator">=</span> _config_data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'model'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ModelConfig<span class="token punctuation">(</span><span class="token operator">**</span>model_data<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、引擎实现"><a href="#三、引擎实现" class="headerlink" title="三、引擎实现"></a>三、引擎实现</h3><h4 id="1-语言检测"><a href="#1-语言检测" class="headerlink" title="1. 语言检测"></a>1. 语言检测</h4><p>通过 <code>langdetect</code> 库可实现文本语言类型检测，服务调用时则无需手动声明类型，可由系统自行匹配。</p><p>但 <code>langdetect</code> 语言表示与 <code>nllb</code> 模型语言表达并不一致，因此系统内仍需要维护一份语言映射表，此处定义的方法作用描述参考下表：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">detect_lang()</td>        <td style="text-align: center;">检测文本语言。</td>    </tr>    <tr>        <td style="text-align: center;">convert_type()</td>        <td style="text-align: center;">转化映射语言类型。</td>    </tr>    <tr>        <td style="text-align: center;">reverse_type()</td>        <td style="text-align: center;">反转映射语言类型。</td>    </tr></table></br><p>完整实现代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> langdetect <span class="token keyword">import</span> detectLANG_CODE_MAP <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'zh'</span><span class="token punctuation">:</span> <span class="token string">'zho_Hans'</span><span class="token punctuation">,</span>    <span class="token string">'en'</span><span class="token punctuation">:</span> <span class="token string">'eng_Latn'</span><span class="token punctuation">,</span>    <span class="token string">'fr'</span><span class="token punctuation">:</span> <span class="token string">'fra_Latn'</span><span class="token punctuation">,</span>    <span class="token string">'de'</span><span class="token punctuation">:</span> <span class="token string">'deu_Latn'</span><span class="token punctuation">,</span>    <span class="token string">'ja'</span><span class="token punctuation">:</span> <span class="token string">'jpn_Jpan'</span><span class="token punctuation">,</span>    <span class="token string">'ko'</span><span class="token punctuation">:</span> <span class="token string">'kor_Hang'</span><span class="token punctuation">,</span>    <span class="token string">'es'</span><span class="token punctuation">:</span> <span class="token string">'spa_Latn'</span><span class="token punctuation">}</span>REVERSE_LANG_CODE_MAP <span class="token operator">=</span> <span class="token punctuation">{</span>v<span class="token punctuation">:</span> k <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> LANG_CODE_MAP<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 语言检测</span><span class="token keyword">def</span> <span class="token function">detect_lang</span><span class="token punctuation">(</span>text<span class="token punctuation">:</span> str<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        detected <span class="token operator">=</span> detect<span class="token punctuation">(</span>text<span class="token punctuation">)</span>        <span class="token keyword">if</span> detected <span class="token operator">==</span> <span class="token string">"zh-cn"</span> <span class="token operator">or</span> detected <span class="token operator">==</span><span class="token string">"zh-tw"</span><span class="token punctuation">:</span>            detected <span class="token operator">=</span> <span class="token string">"zh"</span>        <span class="token comment" spellcheck="true"># 类型映射</span>        <span class="token keyword">return</span> LANG_CODE_MAP<span class="token punctuation">.</span>get<span class="token punctuation">(</span>detected<span class="token punctuation">,</span> <span class="token string">'eng_Latn'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'eng_Latn'</span><span class="token comment" spellcheck="true"># 类型转化</span><span class="token keyword">def</span> <span class="token function">convert_type</span><span class="token punctuation">(</span>lang_type<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> LANG_CODE_MAP<span class="token punctuation">[</span>lang_type<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span>f<span class="token string">"Unsupported language type: {lang_type}"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 类型反转</span><span class="token keyword">def</span> <span class="token function">reverse_type</span><span class="token punctuation">(</span>code<span class="token punctuation">:</span> str<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> str<span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> REVERSE_LANG_CODE_MAP<span class="token punctuation">[</span>code<span class="token punctuation">]</span>    <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>        <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span>f<span class="token string">"Unsupported language code: {code}"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-模型加载"><a href="#2-模型加载" class="headerlink" title="2. 模型加载"></a>2. 模型加载</h4><p>下载 <code>torch</code> 与 <code>transformers</code> 类库后，便可开箱即用加载上述下载完成的模型。</p><p>代码逻辑十分简洁，其中 <code>local_files_only=True</code> 表示模型读取本地文件，当然也支持读取线上资源，但本地加载模型相对速度更快。</p><p>需注意一点，本地加载 <code>NLLB</code> 模型需要机器内存至少不低于 <code>4G</code>。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> transformers <span class="token keyword">import</span> AutoTokenizer<span class="token punctuation">,</span> AutoModelForSeq2SeqLM<span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path<span class="token comment" spellcheck="true"># 导入工具</span><span class="token keyword">from</span> tool<span class="token punctuation">.</span>ConfigTool <span class="token keyword">import</span> get_model_config<span class="token comment" spellcheck="true"># 配置加载</span>model_config <span class="token operator">=</span> get_model_config<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 模型加载</span>model_path <span class="token operator">=</span> Path<span class="token punctuation">(</span>model_config<span class="token punctuation">.</span>path<span class="token punctuation">)</span>model <span class="token operator">=</span> AutoModelForSeq2SeqLM<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_path<span class="token punctuation">,</span> local_files_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>tokenizer <span class="token operator">=</span> AutoTokenizer<span class="token punctuation">.</span>from_pretrained<span class="token punctuation">(</span>model_path<span class="token punctuation">,</span> local_files_only<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、接口服务"><a href="#四、接口服务" class="headerlink" title="四、接口服务"></a>四、接口服务</h3><h4 id="1-实体定义"><a href="#1-实体定义" class="headerlink" title="1. 实体定义"></a>1. 实体定义</h4><p>在上述的基本工作完成后，便可编写对应的接口服务。同样的，为接口的出入参定义相应的实体类 <code>RequestDTO</code> 与 <code>ResponseDTO</code>。</p><p>可以看到此处定义方式并非通过 <code>@dataclass</code> 实现，而是由第三方类库 <code>Pydantic</code> 的 <code>BaseModel</code> 声明。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel <span class="token keyword">class</span> <span class="token class-name">RequestDTO</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    text<span class="token punctuation">:</span> str    targetType<span class="token punctuation">:</span> str<span class="token keyword">class</span> <span class="token class-name">ResponseDTO</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    sourceType<span class="token punctuation">:</span> str    sourceText<span class="token punctuation">:</span> str    targetType<span class="token punctuation">:</span> str    targetText<span class="token punctuation">:</span> str<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Python</code> 标准库中自带的 <code>@dataclass</code> 虽然能够实现类定义，但功能简单适合简单的数据结构。而 <code>BaseModel</code> 额外包含了类型自动转化、<code>Json</code> 格式解析与导出等功能，提供了强大的数据模型。</p><p>例如下述示例中，由 <code>BaseModel</code> 定义的 <code>User2</code> 类成员变量 <code>age</code> 类型为 <code>int</code>，在输入字符串时将会自动转化格式，而 <code>@dataclass</code> 则无法实现。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> dataclasses <span class="token keyword">import</span> dataclass@dataclass<span class="token keyword">class</span> <span class="token class-name">User1</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    age<span class="token punctuation">:</span> intuser1 <span class="token operator">=</span> User1<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token string">"30"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># name='Alice', age='30'</span><span class="token keyword">print</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token keyword">from</span> pydantic <span class="token keyword">import</span> BaseModel<span class="token keyword">class</span> <span class="token class-name">User2</span><span class="token punctuation">(</span>BaseModel<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token punctuation">:</span> str    age<span class="token punctuation">:</span> intuser2 <span class="token operator">=</span> User2<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"Alice"</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token string">"30"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># name='Alice' age=30</span><span class="token keyword">print</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时若 <code>age</code> 属性赋值非数字或非数据字符串将提示下述错误，因为 <code>BaseModel</code> 自带类型校验。</p><p>因此，在系统设计中 <code>BaseModel</code> 更多的应用于强业务逻辑中，如常见的方法与接口的出入参。</p><pre class="line-numbers language-txt"><code class="language-txt">pydantic.error_wrappers.ValidationError: 1 validation error for User2age  value is not a valid integer (type=type_error.integer)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-接口定义"><a href="#2-接口定义" class="headerlink" title="2. 接口定义"></a>2. 接口定义</h4><p>接下来便可基于 <code>fastapi</code> 框架编写对应的接口服务。</p><p>在上述内容中我们已经各个功能点拆分，接下要做的组装即可，步骤逻辑如下：</p><blockquote><ul><li>检测输入文本语言；</li><li>校验语言是否支持；</li><li>调用翻译模型服务；</li><li>封装翻译结果返回；</li></ul></blockquote><p>相对应的完整实现代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> APIRouter<span class="token punctuation">,</span> HTTPException<span class="token keyword">from</span> schemas<span class="token punctuation">.</span>RequestDTO <span class="token keyword">import</span> RequestDTO<span class="token keyword">from</span> schemas<span class="token punctuation">.</span>ResponseDTO <span class="token keyword">import</span> ResponseDTO<span class="token keyword">from</span> tool<span class="token punctuation">.</span>LanguageTool <span class="token keyword">import</span> detect_lang<span class="token punctuation">,</span> convert_type<span class="token punctuation">,</span> reverse_type<span class="token keyword">from</span> tool<span class="token punctuation">.</span>ModelTool <span class="token keyword">import</span> model<span class="token punctuation">,</span> tokenizer<span class="token comment" spellcheck="true"># 导出接口</span>router <span class="token operator">=</span> APIRouter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 接口服务</span>@router<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"/nllb/translate"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">translate</span><span class="token punctuation">(</span>req<span class="token punctuation">:</span> RequestDTO<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> ResponseDTO<span class="token punctuation">:</span>    source_text <span class="token operator">=</span> req<span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true"># 检测输入语言</span>    source_type <span class="token operator">=</span> detect_lang<span class="token punctuation">(</span>source_text<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 语言类型校验</span>    target_type <span class="token operator">=</span> convert_type<span class="token punctuation">(</span>req<span class="token punctuation">.</span>targetType<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> target_type <span class="token operator">or</span> target_type <span class="token operator">not</span> <span class="token keyword">in</span> tokenizer<span class="token punctuation">.</span>lang_code_to_id<span class="token punctuation">:</span>        <span class="token keyword">raise</span> HTTPException<span class="token punctuation">(</span>status_code <span class="token operator">=</span> <span class="token number">400</span><span class="token punctuation">,</span> detail <span class="token operator">=</span> f<span class="token string">"Unsupported target language: {target_type}"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 语言类型一致直接返回</span>    <span class="token keyword">if</span> source_type <span class="token operator">==</span> target_type<span class="token punctuation">:</span>         <span class="token keyword">return</span> ResponseDTO<span class="token punctuation">(</span>            sourceType <span class="token operator">=</span> req<span class="token punctuation">.</span>targetType<span class="token punctuation">,</span>            sourceText <span class="token operator">=</span> source_text<span class="token punctuation">,</span>            targetType <span class="token operator">=</span> req<span class="token punctuation">.</span>targetType<span class="token punctuation">,</span>            targetText <span class="token operator">=</span> source_text        <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 翻译内容</span>    tokenizer<span class="token punctuation">.</span>src_lang <span class="token operator">=</span> source_type    inputs <span class="token operator">=</span> tokenizer<span class="token punctuation">(</span>source_text<span class="token punctuation">,</span> return_tensors<span class="token operator">=</span><span class="token string">"pt"</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> truncation<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        outputs <span class="token operator">=</span> model<span class="token punctuation">.</span>generate<span class="token punctuation">(</span>            <span class="token operator">**</span>inputs<span class="token punctuation">,</span>            forced_bos_token_id <span class="token operator">=</span> tokenizer<span class="token punctuation">.</span>convert_tokens_to_ids<span class="token punctuation">(</span>target_type<span class="token punctuation">)</span><span class="token punctuation">,</span>            max_length<span class="token operator">=</span><span class="token number">256</span>        <span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 解码输出</span>    result <span class="token operator">=</span> tokenizer<span class="token punctuation">.</span>batch_decode<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> skip_special_tokens<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 返回结果</span>    <span class="token keyword">return</span> ResponseDTO<span class="token punctuation">(</span>        <span class="token comment" spellcheck="true"># 反转类型</span>        sourceType <span class="token operator">=</span> reverse_type<span class="token punctuation">(</span>source_type<span class="token punctuation">)</span><span class="token punctuation">,</span>        sourceText <span class="token operator">=</span> source_text<span class="token punctuation">,</span>        targetType <span class="token operator">=</span> req<span class="token punctuation">.</span>targetType<span class="token punctuation">,</span>        targetText <span class="token operator">=</span> result    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-启动入口"><a href="#4-启动入口" class="headerlink" title="4. 启动入口"></a>4. 启动入口</h4><p>完成这一切工作之后，新建 <code>main.py</code> 文件编写程序入口。代码内容相对简单，定义 <code>FastAPI</code> 相应的信息后挂载上述定义的接口服务，完成后运行程序便可启动服务。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> uvicorn<span class="token keyword">from</span> fastapi <span class="token keyword">import</span> FastAPI<span class="token keyword">from</span> tool<span class="token punctuation">.</span>ConfigTool <span class="token keyword">import</span> get_app_config<span class="token keyword">from</span> api<span class="token punctuation">.</span>WordResource <span class="token keyword">import</span> router <span class="token keyword">as</span> translate_router<span class="token comment" spellcheck="true"># 系统信息</span>app_config <span class="token operator">=</span> get_app_config<span class="token punctuation">(</span><span class="token punctuation">)</span>app <span class="token operator">=</span> FastAPI<span class="token punctuation">(</span>    title <span class="token operator">=</span> app_config<span class="token punctuation">.</span>name<span class="token punctuation">,</span>    description <span class="token operator">=</span> app_config<span class="token punctuation">.</span>description<span class="token punctuation">,</span>    version <span class="token operator">=</span> app_config<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 挂在接口</span>app<span class="token punctuation">.</span>include_router<span class="token punctuation">(</span>translate_router<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 启动服务</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    uvicorn<span class="token punctuation">.</span>run<span class="token punctuation">(</span>        app<span class="token punctuation">,</span>        host <span class="token operator">=</span> app_config<span class="token punctuation">.</span>host<span class="token punctuation">,</span>        port <span class="token operator">=</span> app_config<span class="token punctuation">.</span>port    <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>文中涉及代码已上传 <code>GitHub</code>，项目地址：<a href="https://github.com/great-jin/translation-engine">translation-engine</a>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;Hugging Face&lt;/code&gt; 与 &lt;code&gt;GitHub&lt;/code&gt; 相似，专注于 &lt;code&gt;AI&lt;/code&gt; 模型领域的开源社区，拥有丰富的模型可实现快速集成。社区吸引了众多的优秀的开发者及公司机构，源源不断的产出优秀成果。&lt;/p&gt;
&lt;p&gt;今</summary>
      
    
    
    
    <category term="Python" scheme="https://budai.pages.dev/categories/Python/"/>
    
    
    <category term="Python" scheme="https://budai.pages.dev/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>集合随机取数算法</title>
    <link href="https://budai.pages.dev/java/collection/random/"/>
    <id>https://budai.pages.dev/java/collection/random/</id>
    <published>2025-05-21T16:00:00.000Z</published>
    <updated>2025-05-22T13:18:59.040Z</updated>
    
    <content type="html"><![CDATA[<p>默认 <code>JDK</code> 中提供了丰富的集合容器，每个都足以让人眼花缭乱，各自在适用于不同的场景之下。</p><p>在许多的业务中，常常会涉及到随机取数的需求场景，最为典型的莫过于抽奖，更进一步的如题库选题等等。</p><p>面对此类场景基本思路大概分为两类：使用无序集合或打乱有序集合。</p><h4 id="1-无序集合"><a href="#1-无序集合" class="headerlink" title="1. 无序集合"></a>1. 无序集合</h4><p>让我们从最简单的无序集合开始，在 <code>JDK</code> 中最为基础的无序集合莫过于 <code>Set</code> 与 <code>Map</code>。</p><p>如常用的 <code>HashSet</code> 与 <code>HashMap</code> 容器中，其并不以存入的顺序排列，而是以元素的哈希值为依据。</p><p>以 <code>HashSet</code> 为例，下述示例以倒叙存入容器，但输出的结果并非 <code>[5, 4, 3, 2, 1]</code> 而是 <code>[1, 2, 3, 4, 5]</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>或许你可能也发现了，这类随机其实是一种伪随机。容器中元素不以存入的顺序排列，但仍然依照某类特地规则，如此处即以哈希值为排列依据。</p><p>因此，即便对于无序集合，实现随机访问通常配合 <code>Random</code> 等随机工具类。</p><p>如下述示例即利用 <code>stream</code> 与 <code>Random</code> 实现随机元素取值：</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> set <span class="token operator">=</span> Set<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-洗牌算法"><a href="#2-洗牌算法" class="headerlink" title="2. 洗牌算法"></a>2. 洗牌算法</h4><p>针对有序集合的随机取数，最简单方式即打散顺序后访问，实现访问相同位置得到不同的结果。</p><p>在 <code>JDK</code> 中自带了 <code>java.util.Collections#shuffle</code> 方法，基于 <code>Fisher-Yates</code> 算法实现打乱集合顺序。</p><p>针对 <code>ArrayList</code> 容器为例，其实现于 <code>RandomAccess</code> 支持随机访问，底层数据结构为数组即连续的存储空间。从实现源码可以看出，实现逻辑并不复杂，遍历数组并通过 <code>Random</code> 类随机交换两个位置上的元素值从而实现打印的效果。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">shuffle</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> list<span class="token punctuation">,</span> Random rnd<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>size <span class="token operator">&lt;</span> SHUFFLE_THRESHOLD <span class="token operator">||</span> list <span class="token keyword">instanceof</span> <span class="token class-name">RandomAccess</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>size<span class="token punctuation">;</span> i<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> rnd<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> list<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">final</span> List l <span class="token operator">=</span> list<span class="token punctuation">;</span>    l<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> l<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> l<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成容器元素的顺序打印之后，实现随机取值的则通过 <code>get()</code> 访问即可，每次洗牌后的集合顺序都并会相同，访问同一位置的元素返回的值也将不一样。</p><p>若要批量随机取数，则可对洗牌后的集合通过 <code>subList()</code> 取子集合实现。</p><h4 id="3-随机取数"><a href="#3-随机取数" class="headerlink" title="3. 随机取数"></a>3. 随机取数</h4><p>在 <code>shuffle()</code> 洗牌方法中，可以看出算法的时间复杂为 <code>O(n)</code>，那是否有更优的方式。</p><p>以实际业务场景为例，系统中存在一个 <code>1w</code> 大小的题库，每次需要从中抽取 <code>20</code> 道不重复题目。若采用 <code>shuffle</code> 方式显然每次都需对原集合打乱，造成一定的性能浪费。</p><p>因此，对于一个大小为 <code>m</code> 的容器，且需随机取 <code>n</code> 个元素，若 <code>m &gt;&gt; n</code> 则显然洗牌算法并不适用。</p><p>对于此类场景，最合适的方案以利用数组支持随机访问的特性，变量容器身上聚焦于抽取的元素上。</p><p>如下述代码示例即基于 <code>Random</code> 实现了有序集合的随机取 <code>5</code> 个数，而时间复杂度则无关容器大小，只与取数数量正相关。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> List<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Integer ele <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 存在则跳过</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;默认 &lt;code&gt;JDK&lt;/code&gt; 中提供了丰富的集合容器，每个都足以让人眼花缭乱，各自在适用于不同的场景之下。&lt;/p&gt;
&lt;p&gt;在许多的业务中，常常会涉及到随机取数的需求场景，最为典型的莫过于抽奖，更进一步的如题库选题等等。&lt;/p&gt;
&lt;p&gt;面对此类场景基本思路大概分为两</summary>
      
    
    
    
    <category term="JAVA集合" scheme="https://budai.pages.dev/categories/JAVA%E9%9B%86%E5%90%88/"/>
    
    
    <category term="JAVA" scheme="https://budai.pages.dev/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>JavaPackager 使用教程</title>
    <link href="https://budai.pages.dev/build/pkg/"/>
    <id>https://budai.pages.dev/build/pkg/</id>
    <published>2025-05-10T16:00:00.000Z</published>
    <updated>2025-05-13T12:40:34.802Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知 <code>Java</code> 基于 <code>JVM</code> 实现了跨平台，即一次编译任意平台运行，只需 <code>JRE</code> 运行环境即可。</p><p>跨平台的特性也是市面一系列产品如 <code>IDEA</code> 以及 <code>DBeaver</code> 等应用选择 <code>Java</code> 作为开发语言的一大原因。</p><p>虽然 <code>Java</code> 提供了跨平台的功能，但默认编译后的程序为 <code>jar</code> 文件，在发布时显然不够优雅。常常我们会通过各类工具将其二次编译为对应系统可直接运行的程序，例如在 <code>Windows</code> 下编译为 <code>exe</code> 程序，<code>Mac</code> 环境下的 <code>dmg</code> 等等。</p><p>但 <code>Java</code> 默认并不提供 <code>exe</code> 打包方式，需要借助其它工具。以 <code>Windows</code> 平台为例，可以选择 <code>exe4j</code> 工具，如果是新项目则可采用 <code>GraalVM</code> 编译为 <code>native image</code> 运行，二者都可生成 <code>exe</code> 可运行程序。</p><p><code>Exe4j</code> 与 <code>GraalVM</code> 虽然都可实现 <code>exe</code> 打包，但各有优缺点。前者默认打包后启动默认自带弹窗提示，后者则对旧项目并不友好。</p><p>而今天所分享的 <code>JavaPackager</code> 则可通过 <code>Maven Plugin</code> 插件的方式无感集成项目，提供 <code>Windows</code>、<code>Linux</code> 与 <code>Mac</code> 多平台程序构建，下面就让我们直接开始把。</p><h4 id="1-项目准备"><a href="#1-项目准备" class="headerlink" title="1. 项目准备"></a>1. 项目准备</h4><p>在开始之前，让我们先准备一个简单的 <code>Swing</code> 程序。</p><p>在之前的 <code>Maven</code> 教程中提过，项目默认在打包 <code>jar</code> 文件时并不会将所带的依赖一并编译，常通过 <code>assembly</code> 等插件实现 <code>fat jar</code> 构建。</p><p>而在 <code>JavaPackager</code> 中已经提供了此功能，因此无需额外引入其它插件，这里引入 <code>Jackson</code> 为例演示打包后的效果。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.19.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成后让我们实现一个简单的 <code>Swing</code> 窗口程序。</p><p>程序内容并不复杂，通过 <code>Jackson</code> 序列化 <code>Map</code> 实例并展示的串口中，完整代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PkgClient</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ObjectMapper mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span>        JFrame frame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JFrame</span><span class="token punctuation">(</span><span class="token string">"PKG Client"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setDefaultCloseOperation</span><span class="token punctuation">(</span>JFrame<span class="token punctuation">.</span>EXIT_ON_CLOSE<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setLocationRelativeTo</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setResizable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加内容</span>        frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">createTextPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame<span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> JPanel <span class="token function">createTextPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span>        JPanel panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BoxLayout</span><span class="token punctuation">(</span>panel<span class="token punctuation">,</span> BoxLayout<span class="token punctuation">.</span>Y_AXIS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> Map<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>                <span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"123"</span><span class="token punctuation">,</span>                <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"Alex"</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加文本</span>        JLabel label <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span>mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">,</span> SwingConstants<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>        label<span class="token punctuation">.</span><span class="token function">setAlignmentX</span><span class="token punctuation">(</span>Component<span class="token punctuation">.</span>CENTER_ALIGNMENT<span class="token punctuation">)</span><span class="token punctuation">;</span>        panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> panel<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序，可以得到下图中效果：<br><img src="/album/loading.gif" data-original="/album/article/java/pkg/1.png"></p><h4 id="2-基础编译"><a href="#2-基础编译" class="headerlink" title="2. 基础编译"></a>2. 基础编译</h4><p>那么现在我们就可以执行编译工作，先以最简化的配置开始，编译 <code>Windows</code> 下的 <code>exe</code> 程序。</p><p>在项目的 <code>pom</code> 文件中添加 <code>javapackager</code> 插件，其中 <code>phase = package</code> 即表示作用于 <code>mvn package</code> 打包期间。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.github.fvarrui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javapackager<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>PkgClient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">></span></span>xyz.ibudai.pkg.PkgClient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>platform</span><span class="token punctuation">></span></span>windows<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>platform</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bundleJre</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bundleJre</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>jrePath</span><span class="token punctuation">></span></span>C:\Program Files\Java\jdk-17.0.7\jre<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>jrePath</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>createZipball</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>createZipball</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述配置中核心的配置项说明参考下表：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">name</td>        <td style="text-align: center;">编译后的目录以及应用名，默认为类名以 - 分隔。</td>    </tr>    <tr>        <td style="text-align: center;">mainClass</td>        <td style="text-align: center;">主类的完整限定名。</td>    </tr>    <tr>        <td style="text-align: center;">platform</td>        <td style="text-align: center;">目标平台，可选值：auto|linux|mac|windows</td>    </tr>    <tr>        <td style="text-align: center;">bundleJre</td>        <td style="text-align: center;">是否生成 JRE，若否编译后文件允许需系统带 JRE。</td>    </tr>    <tr>        <td style="text-align: center;">jrePath</td>        <td style="text-align: center;">若 bundleJre 为 true，可指定 jre 目录。</td>    </tr>    <tr>        <td style="text-align: center;">createZipball</td>        <td style="text-align: center;">是否生成 -platform 后缀的 zip 文件，解压即可运行。</td>    </tr></table></br><p>添加配置后执行 <code>mvn package</code> 命令后即会在 <code>target</code> 目录生成下述内容。<br><img src="/album/loading.gif" data-original="/album/article/java/pkg/2.png"></p><p>图中 <code>-windows.zip</code> 文件解压缩后内容与 <code>PkgClient</code> 目录内容一致，包含下述文件：<br><img src="/album/loading.gif" data-original="/album/article/java/pkg/3.png"></p><p>其中 <code>exe</code> 即可执行程序，<code>libs</code> 即项目所依赖的 <code>jar</code> 包，在上述的工程中即 <code>Jackson</code> 相应 <code>jar</code> 文件。</p><p>而 <code>jre</code> 目录即 <code>Java</code> 运行环境，通过 <code>bundleJre</code> 参数控制是否生成，若否则生成的打包文件中不会包含这部分内容，也就意味在运行时需要对应的系统配置 <code>Java</code> 环境。默认其为拷贝当前系统 <code>Java</code> 所配置的版本，当然你也可以通过 <code>jrePath</code> 指定版本。</p><h4 id="3-环境变量"><a href="#3-环境变量" class="headerlink" title="3. 环境变量"></a>3. 环境变量</h4><p>运行 <code>Java</code> 程序时，在部分场景下常常我们会通过 <code>-D</code> 等等方式添加变量，亦或调整 <code>JVM</code> 参数。</p><p>在让 <code>JavaPackager</code> 编译后的文件运行时添加启动参数十分简单，在生成的 <code>exe</code> 下添加同级文件 <code>xxx.l4j.ini</code> 文件即可，其中 <code>xxx</code> 为上述 <code>name</code> 标签配置的值。</p><p>例如上述示例中，则新加 <code>PkgClient.l4j.ini</code> 文件后放于 <code>exe</code> 同级即可，文件中的内容按照一行一条的格式。</p><pre class="line-numbers language-ini"><code class="language-ini">-Xms16m<span class="token constant">-Dswing.aatext</span><span class="token attr-value"><span class="token punctuation">=</span>true</span><span class="token constant">-Dsomevar</span><span class="token attr-value"><span class="token punctuation">=</span>"%SOMEVAR%"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如需要添加参数 <code>info.message=hello</code>，则在文件中添加下述内容：</p><pre class="line-numbers language-ini"><code class="language-ini"><span class="token constant">-Dinfo.message</span><span class="token attr-value"><span class="token punctuation">=</span>hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>稍微调整之前的程序，在窗口中读取配置并展示，代码片段如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> JPanel <span class="token function">createTextPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    JPanel panel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    panel<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BoxLayout</span><span class="token punctuation">(</span>panel<span class="token punctuation">,</span> BoxLayout<span class="token punctuation">.</span>Y_AXIS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String message <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"info.message"</span><span class="token punctuation">,</span> <span class="token string">"default message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加文本</span>    JLabel label <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> SwingConstants<span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span>    label<span class="token punctuation">.</span><span class="token function">setAlignmentX</span><span class="token punctuation">(</span>Component<span class="token punctuation">.</span>CENTER_ALIGNMENT<span class="token punctuation">)</span><span class="token punctuation">;</span>    panel<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>label<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> panel<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改后重新执行 <code>package</code> 编译项目，创建 <code>PkgClient.l4j.ini</code> 文件置于 <code>exe</code> 同级下并运行程序，可以得到下述效果：<br><img src="/album/loading.gif" data-original="/album/article/java/pkg/4.png"></p><h4 id="4-文件拷贝"><a href="#4-文件拷贝" class="headerlink" title="4. 文件拷贝"></a>4. 文件拷贝</h4><p>在部分需求场景下，我们的项目会依赖外部文件，在打包时需要一并进行复制。</p><p>针对此类场景，<code>JavaPackager</code> 同样提供了 <code>additionalResources</code> 标签用于文件或目录复制。</p><p>假如我们需要将 <code>assets</code> 目录一并复制进打包生成的目录结构中，则修改 <code>pom</code> 配置为下述内容：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>PkgClient<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    ...    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>additionalResources</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>additionalResource</span><span class="token punctuation">></span></span>D:\Temporary\assets<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>additionalResource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>additionalResources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成后重新执行 <code>packge</code> 命令构建，在生成的结构下可以看到 <code>assets</code> 目录生成成功。<br><img src="/album/loading.gif" data-original="/album/article/java/pkg/5.png"></p><p>这里需要注意一点，<code>.l4j.ini</code> 配置文件默认是通过 <code>additionalResources</code> 实现，若自定义了 <code>additionalResources</code> 属性且仍需要运行参数，则需要显式在 <code>additionalResource</code> 配置 <code>.l4j.ini</code> 文件路径。</p><hr><p><strong>参考链接</strong></p><ul><li><a href="https://github.com/javapackager/JavaPackager">JavaPackager</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;众所周知 &lt;code&gt;Java&lt;/code&gt; 基于 &lt;code&gt;JVM&lt;/code&gt; 实现了跨平台，即一次编译任意平台运行，只需 &lt;code&gt;JRE&lt;/code&gt; 运行环境即可。&lt;/p&gt;
&lt;p&gt;跨平台的特性也是市面一系列产品如 &lt;code&gt;IDEA&lt;/code&gt; 以及 &lt;c</summary>
      
    
    
    
    <category term="编译构建" scheme="https://budai.pages.dev/categories/%E7%BC%96%E8%AF%91%E6%9E%84%E5%BB%BA/"/>
    
    
    <category term="JAVA" scheme="https://budai.pages.dev/tags/JAVA/"/>
    
    <category term="Windows" scheme="https://budai.pages.dev/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB 集成教程</title>
    <link href="https://budai.pages.dev/db/mongo/integration/"/>
    <id>https://budai.pages.dev/db/mongo/integration/</id>
    <published>2025-05-09T16:00:00.000Z</published>
    <updated>2025-06-03T12:43:21.744Z</updated>
    
    <content type="html"><![CDATA[<p><code>MongoDB</code> 作为典型的 <code>NoSQL</code> 数据库拥有优秀的横向扩展能力，不拘束于关系型数据库中的表结构，无需调整便可实现结构变更。</p><p>今天就让我们了解下如何在普通 <code>Maven</code> 以及 <code>Spring Boot</code> 工程中集成使用 <code>MongoDB</code>。</p><h3 id="一、Maven集成"><a href="#一、Maven集成" class="headerlink" title="一、Maven集成"></a>一、Maven集成</h3><h4 id="1-依赖管理"><a href="#1-依赖管理" class="headerlink" title="1. 依赖管理"></a>1. 依赖管理</h4><p>在查找依赖时你可能会发现 <code>Mongo</code> 存在两个配置版本 <code>mongo-java-driver</code> 与 <code>mongodb-driver-sync</code>，前者为旧版依赖其包含异步 <code>API</code> 相对复杂，从 <code>MongoDB 4.0+</code> 开始官方建议使用 <code>mongodb-driver-sync</code>。</p><p>简而言之，如果无兼容历史版本的需要，则优先使用 <code>mongodb-driver-sync</code>，依赖配置如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mongodb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mongodb-driver-sync<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.10.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-服务连接"><a href="#2-服务连接" class="headerlink" title="2. 服务连接"></a>2. 服务连接</h4><p>在执行数据访问前，最基础的当然还是创建客户端连接对象，代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    String host <span class="token operator">=</span> <span class="token string">"localhost"</span><span class="token punctuation">;</span>    Integer port <span class="token operator">=</span> <span class="token number">27017</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>ServerAddress<span class="token operator">></span> serverList <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServerAddress</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String database <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token punctuation">;</span>    String username <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> password <span class="token operator">=</span> <span class="token string">"123456"</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MongoClientSettings settings <span class="token operator">=</span> MongoClientSettings<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 超时配置</span>            <span class="token punctuation">.</span><span class="token function">applyToSocketSettings</span><span class="token punctuation">(</span>builder <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                builder<span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>                builder<span class="token punctuation">.</span><span class="token function">readTimeout</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">applyToClusterSettings</span><span class="token punctuation">(</span>builder <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                builder<span class="token punctuation">.</span><span class="token function">serverSelectionTimeout</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 服务信息</span>                builder<span class="token punctuation">.</span><span class="token function">hosts</span><span class="token punctuation">(</span>serverList<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 账号信息</span>            <span class="token punctuation">.</span><span class="token function">credential</span><span class="token punctuation">(</span>MongoCredential<span class="token punctuation">.</span><span class="token function">createScramSha256Credential</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span> database<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建客户端</span>    MongoClient client <span class="token operator">=</span> MongoClients<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>settings<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-URI连接"><a href="#3-URI连接" class="headerlink" title="3. URI连接"></a>3. URI连接</h4><p><code>MongoDB</code> 支持多种连接格式，除了上述的连接方式外 <code>MongoDB</code> 同时支持以 <code>URI</code> 方式，其连接格式如下：</p><pre class="line-numbers language-sql"><code class="language-sql">mongodb:<span class="token comment" spellcheck="true">//&lt;username>:&lt;passsword>@&lt;host>:&lt;port>/&lt;collection></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需注意一点，当用户名或密码中包含特殊字符时，在配置 <code>uri</code> 时需要替换为对应的转义字符，否则将无法连接。</p><p>常用的特殊字符及其转义字符参照下表：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">字符</td>        <th style="text-align: center;">编码</td>    </tr>    <tr>        <td style="text-align: center;">@</td>        <td style="text-align: center;">%40</td>    </tr>    <tr>        <td style="text-align: center;">:</td>        <td style="text-align: center;">%3A</td>    </tr>    <tr>        <td style="text-align: center;">/</td>        <td style="text-align: center;">%2F</td>    </tr>    <tr>        <td style="text-align: center;">?</td>        <td style="text-align: center;">%3F</td>    </tr>    <tr>        <td style="text-align: center;">#</td>        <td style="text-align: center;">%23</td>    </tr>    <tr>        <td style="text-align: center;">&</td>        <td style="text-align: center;">%26</td>    </tr>    <tr>        <td style="text-align: center;">=</td>        <td style="text-align: center;">%3D</td>    </tr></table></br><p>其客户端创建类似，将上述的 <code>credential()</code> 替换为 <code>applyConnectionString()</code> 即可，实现代码如下：</p><pre class="line-numbers language-java"><code class="language-java">String url <span class="token operator">=</span> <span class="token string">"mongodb://root:123456@192.168.0.21:27017/test_col?authSource=admin"</span><span class="token punctuation">;</span>MongoClientSettings settings <span class="token operator">=</span> MongoClientSettings<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 超时配置</span>        <span class="token punctuation">.</span><span class="token function">applyToSocketSettings</span><span class="token punctuation">(</span>builder <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            builder<span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">readTimeout</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">applyToClusterSettings</span><span class="token punctuation">(</span>builder <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            builder<span class="token punctuation">.</span><span class="token function">serverSelectionTimeout</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 服务信息</span>        <span class="token punctuation">.</span><span class="token function">applyConnectionString</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConnectionString</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-数据新增"><a href="#3-数据新增" class="headerlink" title="3. 数据新增"></a>3. 数据新增</h4><p>想要实现新增数据则十分简单，在获取 <code>MongoCollection</code> 实例后通过相应的 <code>insertOne()</code> 或 <code>insertMany()</code> 方法即可。</p><p>完整调用实现代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MongoRepository</span> <span class="token keyword">implements</span> <span class="token class-name">AutoCloseable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String database<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> MongoClient mongoClient<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MongoRepository</span><span class="token punctuation">(</span>String database<span class="token punctuation">,</span> MongoClient mongoClient<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>database <span class="token operator">=</span> database<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mongoClient <span class="token operator">=</span> mongoClient<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mongoClient <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            mongoClient<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> MongoDatabase <span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mongoClient<span class="token punctuation">.</span><span class="token function">getDatabase</span><span class="token punctuation">(</span>database<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>String collection<span class="token punctuation">,</span> T t<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> tClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MongoCollection<span class="token operator">&lt;</span>T<span class="token operator">></span> mongoCollection <span class="token operator">=</span> <span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span>collection<span class="token punctuation">,</span> tClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        mongoCollection<span class="token punctuation">.</span><span class="token function">insertOne</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">insertAll</span><span class="token punctuation">(</span>String collection<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> list<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> tClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MongoCollection<span class="token operator">&lt;</span>T<span class="token operator">></span> mongoCollection <span class="token operator">=</span> <span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span>collection<span class="token punctuation">,</span> tClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        mongoCollection<span class="token punctuation">.</span><span class="token function">insertMany</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-数据查询"><a href="#4-数据查询" class="headerlink" title="4. 数据查询"></a>4. 数据查询</h4><p><code>MongoDB</code> 查询数据与新增方式类似，这里直接通过代码演示：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">count</span><span class="token punctuation">(</span>String collection<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> condition<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> tClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>    MongoCollection<span class="token operator">&lt;</span>T<span class="token operator">></span> mongoCollection <span class="token operator">=</span> <span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span>collection<span class="token punctuation">,</span> tClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    mongoCollection<span class="token punctuation">.</span><span class="token function">countDocuments</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">findOne</span><span class="token punctuation">(</span>String collection<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> condition<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> tClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>    MongoCollection<span class="token operator">&lt;</span>T<span class="token operator">></span> mongoCollection <span class="token operator">=</span> <span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span>collection<span class="token punctuation">,</span> tClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> mongoCollection<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">find</span><span class="token punctuation">(</span>String collection<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> condition<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> tClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>    MongoCollection<span class="token operator">&lt;</span>T<span class="token operator">></span> mongoCollection <span class="token operator">=</span> <span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span>collection<span class="token punctuation">,</span> tClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    FindIterable<span class="token operator">&lt;</span>T<span class="token operator">></span> iterable <span class="token operator">=</span> mongoCollection<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>T<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>T t <span class="token operator">:</span> iterable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-数据删除"><a href="#5-数据删除" class="headerlink" title="5. 数据删除"></a>5. 数据删除</h4><p>同理，文档记录删除方式如下不再展开介绍。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">boolean</span> <span class="token function">delete</span><span class="token punctuation">(</span>String collection<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> condition<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> tClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>    MongoCollection<span class="token operator">&lt;</span>T<span class="token operator">></span> mongoCollection <span class="token operator">=</span> <span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span>collection<span class="token punctuation">,</span> tClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> mongoCollection<span class="token punctuation">.</span><span class="token function">deleteMany</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeletedCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">boolean</span> <span class="token function">deleteOne</span><span class="token punctuation">(</span>String collection<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> <span class="token operator">?</span><span class="token operator">></span> condition<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> tClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>    MongoCollection<span class="token operator">&lt;</span>T<span class="token operator">></span> mongoCollection <span class="token operator">=</span> <span class="token function">getDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">getCollection</span><span class="token punctuation">(</span>collection<span class="token punctuation">,</span> tClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> mongoCollection<span class="token punctuation">.</span><span class="token function">deleteOne</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeletedCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、Spring集成"><a href="#二、Spring集成" class="headerlink" title="二、Spring集成"></a>二、Spring集成</h3><h4 id="1-依赖管理-1"><a href="#1-依赖管理-1" class="headerlink" title="1. 依赖管理"></a>1. 依赖管理</h4><p>在 <code>Spring Boot</code> 中依赖就十分简单了，引入对应的 <code>starter</code> 即可，依赖如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-mongodb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-连接配置"><a href="#2-连接配置" class="headerlink" title="2. 连接配置"></a>2. 连接配置</h4><p>引入依赖后需在项目中配置 <code>MongoDB</code> 的连接信息，在 <code>application.yml</code> 中添加下述内容。</p><p>这里采用 <code>URI</code> 方式连接，与之前 <code>Maven</code> 方式集成中提到的类似，如果用户名或密码包含特殊字符转替换为转义字符。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">data</span><span class="token punctuation">:</span>    <span class="token key atrule">mongodb</span><span class="token punctuation">:</span>      <span class="token key atrule">uri</span><span class="token punctuation">:</span> mongodb<span class="token punctuation">:</span>//root<span class="token punctuation">:</span>123456@localhost<span class="token punctuation">:</span>27017/test_collection<span class="token punctuation">?</span>authSource=admin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-数据新增-1"><a href="#3-数据新增-1" class="headerlink" title="3. 数据新增"></a>3. 数据新增</h4><p>完成配置后即可开始相应访问交互，与 <code>Maven</code> 中不同的是你可以通过 <code>MongoTemplate</code> 便可轻易的实现与 <code>MongoDB</code> 的相应交互。</p><p>在 <code>MongoDB</code> 中提供了两种新增接口 <code>save()</code> 与 <code>insert()</code>，二者最大的区别前者新增时若数据已存在则会报错失败，而 <code>insert()</code> 方法则会直接覆盖旧数据。</p><p>相应的新增方法实现如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MongoRepository</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> MongoTemplate mongoTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">save</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mongoTemplate<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mongoTemplate<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">insertAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span>T<span class="token operator">></span> collection<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mongoTemplate<span class="token punctuation">.</span><span class="token function">insertAll</span><span class="token punctuation">(</span>collection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-数据查询-1"><a href="#4-数据查询-1" class="headerlink" title="4. 数据查询"></a>4. 数据查询</h4><p>在 <code>MongoDB</code> 中通过 <code>Criteria</code> 与 <code>Query</code> 构建查询条件，常用的查询接口参考下表：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">描述</td>    </tr>    <tr>        <td style="text-align: center;">count()</td>        <td style="text-align: center;">查询匹配的记录条数。</td>    </tr>    <tr>        <td style="text-align: center;">find()</td>        <td style="text-align: center;">返回所有匹配的记录结果。</td>    </tr>    <tr>        <td style="text-align: center;">findOne()</td>        <td style="text-align: center;">返回匹配记录结果中的一条。</td>    </tr>    <tr>        <td style="text-align: center;">findById()</td>        <td style="text-align: center;">根据文档 ID 精准匹配查询。</td>    </tr></table></br><p>表中所列接口其相应的实现如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MongoRepository</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> MongoTemplate mongoTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">long</span> <span class="token function">count</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> tClass<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token function">createQuery</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">,</span> tClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">find</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> tClass<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token function">createQuery</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">,</span> tClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">findById</span><span class="token punctuation">(</span>Object id<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span>T<span class="token operator">></span> tClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">findById</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> tClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span>T<span class="token operator">></span> tClass<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mongoTemplate<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token function">createQuery</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">,</span> tClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> Query <span class="token function">createQuery</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> conditions<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Criteria criteria <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Criteria</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> entry <span class="token operator">:</span> conditions<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            criteria<span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span>criteria<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;MongoDB&lt;/code&gt; 作为典型的 &lt;code&gt;NoSQL&lt;/code&gt; 数据库拥有优秀的横向扩展能力，不拘束于关系型数据库中的表结构，无需调整便可实现结构变更。&lt;/p&gt;
&lt;p&gt;今天就让我们了解下如何在普通 &lt;code&gt;Maven&lt;/code&gt; 以及 &lt;c</summary>
      
    
    
    
    <category term="中间件" scheme="https://budai.pages.dev/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="MongoDB" scheme="https://budai.pages.dev/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Maven系统依赖打包</title>
    <link href="https://budai.pages.dev/build/maven/system/"/>
    <id>https://budai.pages.dev/build/maven/system/</id>
    <published>2025-01-17T16:00:00.000Z</published>
    <updated>2025-05-11T12:39:12.812Z</updated>
    
    <content type="html"><![CDATA[<p>在之前的博客中详细介绍了通过 <code>Maven</code> 实现项目的依赖管理，以及实现工程的编译构建。</p><p>熟话说巧妇难为无米之炊，实现依赖管理的前提都是需要中央仓库或本地仓库存在对应的依赖，如果依赖不存在也只能望洋兴叹。</p><p>但这类场景在开发中却又并不少见，对于某个功能涉及的依赖包经过一顿网上冲浪，终于找到了依赖文件，但依赖并未上传中央仓库无法直接集成依赖。</p><h4 id="1-系统依赖"><a href="#1-系统依赖" class="headerlink" title="1. 系统依赖"></a>1. 系统依赖</h4><p>幸运的是 <code>Maven</code> 的依赖导入提供了本地文件的引用导入，在定义依赖时将 <code>scope</code> 作用域定义为 <code>system</code> 同时通过 <code>systemPath</code> 用于指定依赖文件的路径。</p><p>例如下述示例即读取 <code>D:/repo/demo-one-1.0-SNAPSHOT.jar</code> 目录文件作为依赖包，而非从默认配置的 Maven 仓库中检索查找。如此一来，即便某个依赖文件不存在于仓库之中，仍能正常引入工程。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>xyz.ibudai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>demo-one<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>system<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>systemPath</span><span class="token punctuation">></span></span>D:/repo/demo-one-1.0-SNAPSHOT.jar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>systemPath</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-仓库结构"><a href="#2-仓库结构" class="headerlink" title="2. 仓库结构"></a>2. 仓库结构</h4><p>在继续下一步的介绍之前，让我们先来看一下 <code>Maven</code> 仓库对于依赖文件是以何种结构进行管理？</p><p>在定义一个 <code>Maven</code> 工程时，我们都知道 <code>groupId</code>，<code>artifactId</code> 与 <code>version</code> 三者是必不可少，分别声明了依赖的所属、名称以及版本信息，例如下述示例所展示：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>xyz.ibudai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>demo-one<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那你是否又好奇这个模块又是如何存储在 <code>Maven</code> 仓库之中？</p><p>实际上存储结构也简单明了，打开 <code>Maven</code> 配置的仓库目录中，可以看到依赖的存储路径是以 <code>groupId</code>，<code>artifactId</code> 与 <code>version</code> 三者作为目录路径存储，同时针对 <code>groupId</code> 中的 <code>.</code> 按次序拆分为多个目录。</p><p>例如上述定义的模块通过 <code>install</code> 命令后将生成的文件目录结构如下，而文件名默认以 <code>&lt;artifactId&gt;-&lt;version&gt;.jar</code> 的命名规则存在。<br><img src="/album/loading.gif" data-original="/album/article/java/maven/structure.png"></p><h4 id="3-工程编译"><a href="#3-工程编译" class="headerlink" title="3. 工程编译"></a>3. 工程编译</h4><p>了解了上述概念后，让我们来看一下 <code>Maven</code> 又是如何对工程进行编译打包。</p><p>默认 <code>Maven</code> 在打包构建时并不会将模块所依赖的模块一同打包进 jar 可执行文件，而是只会打包当前工程 <code>src/main</code>  包路径的代码文件。因此，若需要将工程的依赖一并打包通常需要利用到 <code>Assembly</code> 等构建插件，在之前的博客中分享过了如何使用这里就不再重复展开。</p><p>这里就直接贴出完整的 <code>Assembly</code> 插件打包配置，内容如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-assembly-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>${project.artifactId}-${project.version}-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appendAssemblyId</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appendAssemblyId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>descriptorRefs</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>descriptorRef</span><span class="token punctuation">></span></span>jar-with-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>descriptorRef</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>descriptorRefs</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attach</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>attach</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>archive</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>manifest</span><span class="token punctuation">></span></span>                  <span class="token comment" spellcheck="true">&lt;!-- 替换为主类完整限定名 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">></span></span>fully.qualified.MainClass<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addDefaultSpecificationEntries</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>addDefaultSpecificationEntries</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>addDefaultImplementationEntries</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>addDefaultImplementationEntries</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>manifest</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>archive</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>make-assembly<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>single<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在工程 <code>pom.xml</code> 文件中添加上述配置之后执行 <code>packge</code> 命令即可在 <code>target</code> 目录下生成 <code>xxx-all.jar</code> 可执行文件，文件内包含了工程的源码以及所有依赖的模块。</p><p>但如果你仔细观察的话，文件的确是将依赖的模块一并打包，但是刚才提到的 <code>scope=system</code> 依赖却并没有出现在打包后的文件中。</p><p>是的，你并没有看错，<code>Assembly</code> 插件将会跳过 <code>scope=system</code> 依赖模块，那又该如何处理？</p><p>这里就要回到刚才介绍的依赖文件存储结构了，不仅文件的生成是基于 <code>groupId</code>，<code>artifactId</code> 与 <code>version</code> 三者，在定义 <code>dependency</code> 时 <code>Maven</code> 同样也是由此为依据在仓库中检索文件。但解决方案就有了，只要根据此规则为 <code>scope=system</code> 依赖创建同样的目录，那即可直接引用依赖无需将作用域定义于 <code>system</code>。</p><p>最简单的方式就是手动创建目录，但 <code>Maven</code> 对此提供了更方便的方式，命令模板如下：</p><pre class="line-numbers language-bash"><code class="language-bash">mvn install:install-file \  -Dfile<span class="token operator">=</span><span class="token operator">&lt;</span>path-to-file<span class="token operator">></span> \  -DgroupId<span class="token operator">=</span><span class="token operator">&lt;</span>my-groupId<span class="token operator">></span> \  -DartifactId<span class="token operator">=</span><span class="token operator">&lt;</span>my-artifactId<span class="token operator">></span> \  -Dversion<span class="token operator">=</span><span class="token operator">&lt;</span>my-version<span class="token operator">></span> \  -Dpackaging<span class="token operator">=</span><span class="token operator">&lt;</span>my-packaging<span class="token operator">></span> \  -DlocalRepositoryPath<span class="token operator">=</span><span class="token operator">&lt;</span>path-to-repo<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如之前提到 <code>demo-one-1.0-SNAPSHOT.jar</code> 文件，通过下述命令即可在 <code>Maven</code> 仓库中生成对应的结构的目录。</p><pre class="line-numbers language-bash"><code class="language-bash">mvn install:install-file \  -Dfile<span class="token operator">=</span> \  -DgroupId<span class="token operator">=</span>xyz.ibudai \  -DartifactId<span class="token operator">=</span>demo-one \  -Dversion<span class="token operator">=</span>1.0-SNAPSHOT \  -Dpackaging<span class="token operator">=</span>jar \  -DlocalRepositoryPath<span class="token operator">=</span>D:/repo/demo-one-1.0-SNAPSHOT.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那问题也迎刃而解，此时在项目中依赖 <code>demo-one</code> 模块则需要通过 <code>system</code> 执行，和其它依赖一样引用即可。与此同时，再通过 <code>Assembly</code> 插件也可正常实现打包构建。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>xyz.ibudai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>demo-one<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述的方式适用于本地的项目编译构建，依赖文件在本地仓库中是生成了，但线上私服仓库中仍然不存在此依赖文件。</p><p>因此，若需要实现在线编译，同样需要通过 <code>deploy</code> 命令将依赖推送到私服，命令格式如下：</p><pre class="line-numbers language-bash"><code class="language-bash">mvn deploy:deploy-file \  -Dfile<span class="token operator">=</span><span class="token operator">&lt;</span>path-to-file<span class="token operator">></span> \  -DgroupId<span class="token operator">=</span><span class="token operator">&lt;</span>my-groupId<span class="token operator">></span> \  -DartifactId<span class="token operator">=</span><span class="token operator">&lt;</span>my-artifactId<span class="token operator">></span> \  -Dversion<span class="token operator">=</span><span class="token operator">&lt;</span>my-version<span class="token operator">></span> \  -Dpackaging<span class="token operator">=</span><span class="token operator">&lt;</span>my-packaging<span class="token operator">></span> \  -DrepositoryId<span class="token operator">=</span><span class="token operator">&lt;</span>repository-id<span class="token operator">></span> \  -Durl<span class="token operator">=</span><span class="token operator">&lt;</span>repository-url<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在之前的博客中详细介绍了通过 &lt;code&gt;Maven&lt;/code&gt; 实现项目的依赖管理，以及实现工程的编译构建。&lt;/p&gt;
&lt;p&gt;熟话说巧妇难为无米之炊，实现依赖管理的前提都是需要中央仓库或本地仓库存在对应的依赖，如果依赖不存在也只能望洋兴叹。&lt;/p&gt;
&lt;p&gt;但这类场景在开发</summary>
      
    
    
    
    <category term="编译构建" scheme="https://budai.pages.dev/categories/%E7%BC%96%E8%AF%91%E6%9E%84%E5%BB%BA/"/>
    
    
    <category term="Maven" scheme="https://budai.pages.dev/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Java 模块化特性</title>
    <link href="https://budai.pages.dev/java/jdk/module/"/>
    <id>https://budai.pages.dev/java/jdk/module/</id>
    <published>2025-01-11T16:00:00.000Z</published>
    <updated>2025-05-11T12:39:12.936Z</updated>
    
    <content type="html"><![CDATA[<p>在 <code>Java</code> 的不断更新迭代中 <code>JDK</code> 加入了一系列新的特性，而在 <code>JDK 9</code> 中则引入了全新的模块化特性，为工程结构管理提供了基础保障。</p><p>我们都知道在 <code>Maven</code> 中可以通过 <code>module</code> 实现模块的管理，<code>JDK</code> 的模块化则有异曲同工之妙。</p><p>下面就让我们来看一下模块块的作用以及引入其的目的。</p><h4 id="1-基础介绍"><a href="#1-基础介绍" class="headerlink" title="1. 基础介绍"></a>1. 基础介绍</h4><p>首先让我们看一下在 <code>JDK 8</code> 以及之前 <code>Java</code> 类的存储方式，在 <code>Java</code> 的安装目录下，可以看到所有的 <code>Java</code> 类都被放在 <code>src.zip</code> 文件。<br><img src="/album/loading.gif" data-original="/album/article/java/module/1.png"></p><p>再看一下 <code>JDK 9</code> 之后的安装目录，这里以 <code>JDK 11</code> 为例，你会发现此时  <code>src.zip</code> 文件已然不存在，取而代之是新增了 <code>jmods</code> 目录，目录下存放着一系列 <code>.jmod</code> 文件。<br><img src="/album/loading.gif" data-original="/album/article/java/module/2.png"></p><p>那这些 <code>jmod</code> 文件又是什么？这个正是本文的重点，也是模块化的核心。</p><p>在 <code>JDK 8</code> 之前所有模块都是打包为一个文件，即便是只用到单个类，仍需要全局依赖。同时，在之前的版本中对于作用域的限制过于宽泛，虽然 <code>private</code> 等可以实现访问限制，但反射的存在让这个限制形同虚设。</p><p>因此，在 <code>JDK 9</code> 中引入了模块化概念，将 <code>src.zip</code> 拆分为独立的 <code>jmod</code> 文件，每个子模块之间相互独立，使得工程管理更为轻量化。</p><h4 id="2-模块创建"><a href="#2-模块创建" class="headerlink" title="2. 模块创建"></a>2. 模块创建</h4><p>了解了模块化的基本信息，让我们来看一下如何创建一个模块化工程？</p><p>实现方式也十分简单，通过 <code>module-info.java</code> 文件进程模块内类的管理，如果你打开上述提到的 <code>jmod</code> 文件，即可发现文件内正包含此文件。<br><img src="/album/loading.gif" data-original="/album/article/java/module/3.png"></p><p>接下来让我们来看一下 <code>module-info.java</code> 文件的内容结构，其定义模板如下：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">module</td>        <td style="text-align: center;">指定当前模块的模块名。</td>    </tr>    <tr>        <td style="text-align: center;">requires</td>        <td style="text-align: center;">定义此模块所依赖的模块。</td>    </tr>    <tr>        <td style="text-align: center;">exports</td>        <td style="text-align: center;">定义此模块对外可以访问的包路径。</td>    </tr></table></br><pre class="line-numbers language-java"><code class="language-java">module <span class="token operator">&lt;</span>module<span class="token punctuation">.</span>name<span class="token operator">></span> <span class="token punctuation">{</span>    requires <span class="token operator">&lt;</span>other<span class="token punctuation">.</span>module<span class="token punctuation">.</span>name<span class="token operator">></span><span class="token punctuation">;</span>    exports <span class="token operator">&lt;</span><span class="token keyword">package</span><span class="token punctuation">.</span>name<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果一个类所在的包路径没有通过 <code>exports</code> 对外暴露，则其它模块无法使用此类，对于类的访问进一步作出限制，即便通过反射方式调用仍无法访问。</p><p>在 <code>exports</code> 中同时提供了 <code>to</code> 关键字用于配置将包只暴露给指定的模块，实现更精细化的控制，如下述示例中即只将包 <code>xyz.ibudai.test</code> 开放给 <code>my.mod</code> 模块。</p><pre class="line-numbers language-java"><code class="language-java">module test<span class="token punctuation">.</span>mod <span class="token punctuation">{</span>    exports xyz<span class="token punctuation">.</span>ibudai<span class="token punctuation">.</span>test to my<span class="token punctuation">.</span>mod<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>同时每个模块默认都隐式依赖 <code>java.base</code> 模块，因此 <code>requires java.base;</code> 无需手动声明。</p><p>而 <code>java.base</code> 模块则正是 <code>Java</code> 的核心基础类模块，查看该模块文件即可看到其通过 <code>exports</code> 对外开放了 <code>java.lang</code> 等一系列核心包。<br><img src="/album/loading.gif" data-original="/album/article/java/module/4.png"></p><h4 id="3-模块编译"><a href="#3-模块编译" class="headerlink" title="3. 模块编译"></a>3. 模块编译</h4><p>那如何将编译自己的 <code>jmod</code> 模块文件呢？其实也十分简单，首先将工程编译为 <code>jar</code> 文件，再由 <code>jmod create</code> 命令即可，格式如下：</p><pre class="line-numbers language-bash"><code class="language-bash">jmod create --class-path <span class="token operator">&lt;</span>target.jar<span class="token operator">></span> <span class="token operator">&lt;</span>target.jmod<span class="token operator">></span><span class="token comment" spellcheck="true"># Example</span>jmod create --class-path hello.jar hello.jmod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-示例分析"><a href="#4-示例分析" class="headerlink" title="4. 示例分析"></a>4. 示例分析</h4><p>下面通过示例演示模块化的效果。</p><p>新建工程 <code>module-1</code>，并创建包目录 <code>xyz.ibudai.practice.jdk.pack1</code> 并定义类 <code>Demo1</code>，代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> xyz<span class="token punctuation">.</span>ibudai<span class="token punctuation">.</span>pack1<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Demo 1 say hello."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同理，新建包目录 <code>xyz.ibudai.practice.jdk.pack2</code> 并定义两个类 <code>Demo2</code>，这里就不再展示代码内容。</p><p>接下来让我们定义对应的 <code>module-info.java</code> 模块文件，注意文件名是固定的。在模块文件中通过 <code>exports</code> 关键字将包 <code>xyz.ibudai.practice.jdk.pack1</code> 对外暴露。</p><pre class="line-numbers language-java"><code class="language-java">module ibudai<span class="token punctuation">.</span>base1 <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 默认依赖 java.base，可省略 */</span>    requires java<span class="token punctuation">.</span>base<span class="token punctuation">;</span>    exports xyz<span class="token punctuation">.</span>ibudai<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>jdk<span class="token punctuation">.</span>pack1<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建另一工程 <code>module-2</code>，配置其模块文件 <code>module-info.java</code> 内容如下：</p><pre class="line-numbers language-java"><code class="language-java">module ibudai<span class="token punctuation">.</span>base2 <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 依赖 ibudai.base1 */</span>    requires ibudai<span class="token punctuation">.</span>base1<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在此新工程中新建测试类执行调用 <code>Demo1</code> 的静态方法能够正常执行，但如果尝试调用 <code>Demo2</code> 编译器则会提升包未对外导出。<br><img src="/album/loading.gif" data-original="/album/article/java/module/5.png"></p><h4 id="5-强制访问"><a href="#5-强制访问" class="headerlink" title="5. 强制访问"></a>5. 强制访问</h4><p>作为一身反骨的 <code>Javaer</code> 而言，如果某个包没有对外暴露，那应该如何解决？</p><p><code>Java</code> 仍给我们留了一条后路，在编译时添加下述命令：</p><pre class="line-numbers language-bash"><code class="language-bash">--add-exports ibudai.base/xyz.ibudai.practice.jdk.pack2<span class="token operator">=</span>ALL-UNNAMED<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/album/loading.gif" data-original="/album/article/java/module/6.png"></p><p>在启动时添加下述命令：</p><pre class="line-numbers language-bash"><code class="language-bash">--add-opens ibudai.base/xyz.ibudai.practice.jdk.pack2<span class="token operator">=</span>ALL-UNNAMED<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/album/loading.gif" data-original="/album/article/java/module/7.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 &lt;code&gt;Java&lt;/code&gt; 的不断更新迭代中 &lt;code&gt;JDK&lt;/code&gt; 加入了一系列新的特性，而在 &lt;code&gt;JDK 9&lt;/code&gt; 中则引入了全新的模块化特性，为工程结构管理提供了基础保障。&lt;/p&gt;
&lt;p&gt;我们都知道在 &lt;code&gt;Maven&lt;/c</summary>
      
    
    
    
    <category term="JAVA基础" scheme="https://budai.pages.dev/categories/JAVA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="JAVA" scheme="https://budai.pages.dev/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>GraalVM，自举的诞生！</title>
    <link href="https://budai.pages.dev/java/jvm/graalvm/"/>
    <id>https://budai.pages.dev/java/jvm/graalvm/</id>
    <published>2025-01-03T16:00:00.000Z</published>
    <updated>2025-05-11T12:39:12.939Z</updated>
    
    <content type="html"><![CDATA[<p>对于每一位 <code>Javer</code> 而言，想必对于 <code>JVM</code> 都并不陌生，即使在实际开发中并没有深入研究，但或多或少对其仍有一定的了解。</p><p>所谓 <code>JVM</code> 缩写于 <code>Java Virtual Machine</code> 即 <code>Java</code> 虚拟机，所以开发的程序都是运行于此虚拟机之前，也是 <code>Java</code> 引以为傲的特性即一次编译任意运行，作为应用程序于操作系统之间沟通的桥梁，只需安装了 <code>JRE</code> 环境即可跨平台运行。</p><h3 id="一、JIT编译"><a href="#一、JIT编译" class="headerlink" title="一、JIT编译"></a>一、JIT编译</h3><h4 id="1-基础介绍"><a href="#1-基础介绍" class="headerlink" title="1. 基础介绍"></a>1. 基础介绍</h4><p>若提到 <code>JVM</code>，那必然绕不开 <code>JIT(Just In Time)</code> 编译，故名思意即时编译。</p><p>我们都知道开发的应用程序想要运行在 <code>JVM</code> 之上，需要先将 <code>.java</code> 文件编译为 <code>.class</code> 字节文件。当编译完成之后，程序的字节文件则可在任意的 <code>JVM</code> 环境上运行，由 <code>JVM</code> 负责解析字节文件交由操作系统执行。</p><p>让我们将目光聚焦到 <code>JVM</code> 与操作系统交互上，操作系统并不认识编译之后的 <code>.class</code> 文件，需要由 <code>JVM</code> 承担其转译的工作，但通过此方式虽达到了效果但性能却并不令人满意。</p><p>那有什么方式能够解决呢？最简单的方式即将编译后的字节文件再次转译为操作系统可识别的底层汇编机器码，则操作系统可直接进行执行，省去了 <code>JVM</code> 解释的这一动作，而这个过程即称为 <code>JIT</code> 编译。</p><h4 id="2-编译类型"><a href="#2-编译类型" class="headerlink" title="2. 编译类型"></a>2. 编译类型</h4><p>简单来讲，<code>JIT</code> 的工作即将字节文件转化为操作系统可直接执行的机器码。</p><p>在之前介绍垃圾回收器的时候提到过程序的启动支持 <code>Client</code> 与 <code>Server</code> 两种模式，而同样 <code>JIT</code> 对应的也有 <code>C1</code> 与 <code>C2</code> 模式。</p><p>二者的区别在于 <code>Server</code> 模式即 <code>C2</code> 相对于 <code>C1</code> 而言在解析编译为机器码时做出更多的编译优化，对于长期运行于服务器上的引用而言相对更为合适。</p><h4 id="3-编译优化"><a href="#3-编译优化" class="headerlink" title="3. 编译优化"></a>3. 编译优化</h4><p>但在具体的场景中相对更为复杂，两种编译模式更多的是搭配进行。</p><p>当我们将编写程序编译为字节文件时，此时编译执行的策略是 <code>C1</code> 模式，即与实际编写的代码并无差异。而在 <code>JVM</code> 实时运行过程中，当 <code>JVM</code> 检测到某一代码块的执行频率提高时，则会动态基于 <code>C2</code> 模式实时调整优化，这也是即时编译名称的由来。</p><p>对于 <code>JIT</code> 编译的优化可谓门道颇深，在 <code>《Effective Java》</code> 第 <code>66</code> 节中也提到 <code>JIT</code> 优化中的一种 <code>hoisting</code> 即优化提升，感兴趣的可自行查看原文。</p><p>这里举个示例进行演示:</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述示例中循环执行了 <code>1000</code> 次打印输出，按照直觉而言 <code>for</code> 循环结束判断的表达式 <code>10*100</code> 每次循环都执行计算一次，但实际上并非如此。</p><p>正是由于 <code>JIT</code> 编译优化的存在的，实际运行生效的结果将为下述代码，即 <code>hoisting</code> 优化提升会将计算前置，从而整个循环过程计算只会执行一次。</p><p>想要了解更多的推荐去看周志明老师出版的 <code>《深入理解 Java 虚拟机》</code>，在第 <code>11</code> 章详细介绍了 <code>JIT</code> 内容。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、AOT编译"><a href="#二、AOT编译" class="headerlink" title="二、AOT编译"></a>二、AOT编译</h3><h4 id="1-预编译"><a href="#1-预编译" class="headerlink" title="1. 预编译"></a>1. 预编译</h4><p>那讲了这么多 <code>JIT</code> 究竟和 <code>GraalVM</code> 又有什么关联呢？</p><p><code>Java</code> 诞生至今已发展数十年，且随着技术的不断演进想要在原有的 <code>JIT</code> 基础之上提出更多的特性以及优化所需要付出成本是十分高昂的，那最简单的方式就是推到重来。这也是 <code>GraalVM</code> 所诞生的一大原有，且不同于 <code>JVM</code> 的由 <code>C++</code> 实现，<code>GraalVM</code> 实现了自举即通过 <code>Java</code> 语言开发实现，同时引入新的虚拟机接口规范 <code>JVMCI(JVM Compiler Interface)</code>。</p><p>在 <code>GraalVM</code> 中一大亮点即提出了预编译 <code>AOT(Ahead-Of-Time)</code>，它不像 <code>JIT</code> 中的 <code>C2</code> 一样为运行时实时动态调整，<code>AOT</code> 在编译构建时即会对代码进行分析优化后编译，程序运行时则不再动态调整。</p><p>虽然 <code>AOT</code> 仍然达不到 <code>JIT</code> 的执行效率，但万物皆有取舍。在内存管理方面，<code>AOT</code> 由于预编译的特性无需动态分析调整，节省了方法堆栈等消耗，程序运行内存的消耗相对于 <code>JVM</code> 中的 <code>JIT</code> 取得了明显了降低。</p><h4 id="2-原生镜像"><a href="#2-原生镜像" class="headerlink" title="2. 原生镜像"></a>2. 原生镜像</h4><p>虽然 <code>GraalVM</code> 中引入了 <code>AOT</code>，不过在默认的运行模式下仍是基于 <code>JIT</code> 方法实现，值得一提的是 <code>GraalVM</code> 中的 <code>JIT</code> 同样基于 <code>Java</code> 重新设计开发。</p><p>因此，想要使用 <code>AOT</code> 则需要将 <code>Jar</code> 文件编译为 <code>Native Images</code>。所谓 <code>Native Images</code> 即将程序直接构建为镜像容器文件，与传统的可执行文件不同，此时 <code>Native Images</code> 运行不再依赖于 <code>JVM</code> 虚拟机可独立运行。</p><p><code>Native Images</code> 的构建方式也并不复杂，在安装完 <code>GraalVM</code> 并配置系统环境变量之后，<code>native-image</code> 便会可生效，可通过下述命令查看版本验证是否可用。</p><pre class="line-numbers language-bash"><code class="language-bash">native-image --version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然想要编译为可执行二进制文件需要安装相应的环境依赖，以 <code>Windows</code> 环境为例则需要安装 <code>Vistual Studio</code>，官网教程描述的已十分详细，这里就不再介绍，<a href="https://medium.com/graalvm/using-graalvm-and-native-image-on-windows-10-9954dc071311">链接直达</a>。</p><blockquote><p><code>Windows</code> 下安装 <code>Vistual Studio</code> 时需要注意，<code>GraalVM</code> 中读取目录为默认安装路径，若安装 <code>Vistual Studio</code> 时修改了默认路径，则需要通过 <code>mklink /d</code> 命令为两个目录创建软链接。</p><p>详细内容可参考 <code>Issue</code>: <a href="https://github.com/oracle/graal/issues/7121#issuecomment-2264781017">Error: Failed to find ‘vcvarsall.bat’ in a Visual Studio installation.</a></p></blockquote><p>环境准备完成之后即可通过下述命令编译 <code>Jar</code> 包为 <code>Native Images</code>，命令执行后会生成同名的 <code>exe</code> 文件。</p><pre class="line-numbers language-bash"><code class="language-bash">native-image -jar <span class="token operator">&lt;</span>target-file<span class="token operator">></span>.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当然你也可以选择在 <code>Maven</code> 工程 <code>pom.xml</code> 文件添加下述内容后执行 <code>mvn clean package -Pnative</code> 命令，完成后将在工程 <code>target</code> 目录下生成 <code>xxx.exe</code> 可执行文件。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>native<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.graalvm.buildtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>native-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.10.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>extensions</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>extensions</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>build-native<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>compile-no-fork<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profiles</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-反射信息"><a href="#3-反射信息" class="headerlink" title="3. 反射信息"></a>3. 反射信息</h4><p>由于 <code>Native Image</code> 是静态编译的，任何在运行时使用的反射、动态代理等特性都需要显式声明，否则 <code>GraalVM</code> 编译器无法知道它们的存在。</p><p>通过下述方式使用 <code>native-image-agent</code> 来自动生成反射和动态代理的配置文件：</p><pre class="line-numbers language-bash"><code class="language-bash">java -agentlib:native-image-agent<span class="token operator">=</span>config-output-dir<span class="token operator">=</span>./configs -jar <span class="token operator">&lt;</span>target-file<span class="token operator">></span>.jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行后 <code>configs</code> 目录中会生成配置文件如 <code>reflection-config.json</code> 和 <code>proxy-config.json</code>，可以将这些配置文件一起包含在原生镜像构建过程中。</p><p>在构建可以使用 <code>-H:ConfigurationFileDirectories=./configs</code> 选项将这些配置文件包含到构建过程中：</p><pre class="line-numbers language-bash"><code class="language-bash">native-image -jar <span class="token operator">&lt;</span>target-file<span class="token operator">></span>.jar -H:ConfigurationFileDirectories<span class="token operator">=</span>./configs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p><strong>参考链接</strong></p><ol><li><a href="https://www.baeldung.com/graal-java-jit-compiler">Deep Dive Into the New Java JIT Compiler – Graal</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;对于每一位 &lt;code&gt;Javer&lt;/code&gt; 而言，想必对于 &lt;code&gt;JVM&lt;/code&gt; 都并不陌生，即使在实际开发中并没有深入研究，但或多或少对其仍有一定的了解。&lt;/p&gt;
&lt;p&gt;所谓 &lt;code&gt;JVM&lt;/code&gt; 缩写于 &lt;code&gt;Java Virtual</summary>
      
    
    
    
    <category term="JVM虚拟机" scheme="https://budai.pages.dev/categories/JVM%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
    <category term="JAVA" scheme="https://budai.pages.dev/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>不可不知的 Map 技巧</title>
    <link href="https://budai.pages.dev/java/collection/map/"/>
    <id>https://budai.pages.dev/java/collection/map/</id>
    <published>2024-12-14T16:00:00.000Z</published>
    <updated>2025-05-22T12:03:17.791Z</updated>
    
    <content type="html"><![CDATA[<p>如果说什么是 <code>Java</code> 集合中的性能天花板，那 <code>Map</code> 肯定是当仁不让，但如果又问什么每个 <code>Crud Boy</code> 的终极噩梦，那空指针 <code>(NPE)</code> 必然将榜上有名。</p><p><code>HashMap</code> 作为 <code>JDK 1.2</code> 版本就被引入的结果在设计之初并没有针对空数据有着特殊的限制，一不留神就可能踩坑从而引发连锁反应。</p><p>因此，随着 <code>JDK</code> 的不断更新迭代，在 <code>JDK 8</code> 中引入 <code>compute()</code> 及 <code>merge()</code> 等一系列新方法进一步提高代码健壮性，今天就让我们来一探究竟。</p><h4 id="1-compute"><a href="#1-compute" class="headerlink" title="1. compute()"></a>1. compute()</h4><p><code>compute()</code> 是最基础也是最通用的方法，顾名思义即计算，可以针对指定 <code>Key</code> 进行重新计算赋值，作用相当于 <code>get()</code> + <code>put()</code> 结合体。</p><p>其第二个方法入参 <code>BiFunction</code> 输入两个值分表表示当前 <code>Key</code> 与 <code>Value</code>，最后返回的结果即新值。下述示例即将对应元素的值替换为新旧值字符串拼接后结果。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"a1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 计算赋值</span>    map<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        String interval <span class="token operator">=</span> <span class="token string">"^"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s%s%s"</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> interval<span class="token punctuation">,</span> <span class="token string">"a2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// {a=a1^a2}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当正像上述提到那样，其类似于 <code>get()</code> 与 <code>put()</code> 结合体，因此若 Key 不存在或对应值为空时上述的 <code>(k, v)</code> 中的 <code>v</code> 同样是为空，若无处理将会抛出 <code>NPE</code> 异常。</p><p>同样有一个相对容易让人忽略的事项，当 <code>compute()</code> 计算返回 <code>null</code> 时，其并非存入一个 <code>(key, null)</code> 的节点，而是将对应 <code>key</code> 从集合中删除，在通过 <code>containsKey()</code> 判断时将返回 <code>false</code>。</p><p>即与 <code>JDK 8</code> 之后许多新引入的特性秉持着同一理念，尽量避免 <code>key</code> 或 <code>value</code> 为空，当通过 <code>get()</code> 方式获取结果为空时理应代表着 <code>key</code> 不存在避免二义性。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"a1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 空则删除元素</span>    map<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 返回 false</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-computeIfAbsent"><a href="#2-computeIfAbsent" class="headerlink" title="2. computeIfAbsent()"></a>2. computeIfAbsent()</h4><p>从名字即可看出，<code>computeIfAbsent()</code> 是 <code>compute()</code> 的特例，即当 <code>Key</code> 不存在时执行，若存在则不会触发。</p><p>与 <code>compute()</code> 不同的其触发时 <code>Key</code> 肯定是不存在的，因此第二个参数输入为 <code>Function</code>，即仅支持输入一个参数代表 <code>Key</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// a 不存在，写入</span>    map<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> k <span class="token operator">-</span><span class="token operator">></span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s^%s"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token string">"v1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// a 存在，不执行</span>    map<span class="token punctuation">.</span><span class="token function">computeIfAbsent</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> k <span class="token operator">-</span><span class="token operator">></span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s^%s"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token string">"v2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// {a=a^v1}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-computeIfPresent"><a href="#3-computeIfPresent" class="headerlink" title="3. computeIfPresent()"></a>3. computeIfPresent()</h4><p><code>computeIfPresent()</code> 同样为 <code>compute()</code> 的一种特例，作用则刚好与 <code>computeIfAbsent()</code> 相反，即只在 <code>Key</code> 存在的时候执行计算并覆盖原值，这里就不再展示示例介绍。</p><h4 id="4-merge"><a href="#4-merge" class="headerlink" title="4. merge()"></a>4. merge()</h4><p>故名思意 <code>merge()</code> 即用于合并，即合并对应 <code>Key</code> 的新旧值后放回容器，旧值不存在则用新值替换，返回 <code>null</code> 时同样删除该元素节点。</p><p>其与 <code>compute()</code> 既有相当又有不同，最直观的表现即方法入参，<code>merge()</code> 方法接收 <code>3</code> 个参数：<code>(k, v, (o,n))</code>，分别代表着 <code>Key</code>，新的 <code>Value</code> 以及新旧值函数参数。</p><p>例如下述示例即拼接对应 <code>key=a</code> 的元素节点：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"v1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"v2"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>o<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        String interval <span class="token operator">=</span> <span class="token string">"^"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%s%s%s"</span><span class="token punctuation">,</span> o<span class="token punctuation">,</span> interval<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// {a=v1^v2}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看到这你或许会有疑惑，<code>merge()</code> 与 <code>compute()</code> 有和区别？能用 <code>merge()</code> 实现的通过 <code>compute()</code> 同样能够实现。</p><p>事实也的确如此，可以将 <code>merge()</code> 理解为 <code>compute()</code> 的一种特例，<code>compute()</code> 表示针对任意类型计算操作，而 <code>merge()</code> 则更倾向于针对数据的合并操作，同样其自带了部分数据预处理。</p><p>观察 <code>HashMap</code> 的 <code>merge()</code> 方法实现可以看到，除在元素不存在即 <code>old = null</code> 时直接替换，在元素存在时但旧值为空时仍会执行替换，如此一来即为我们省去空判断处理。<br><img src="/album/loading.gif" data-original="/album/article/java/collect/merge.png"></p><p>通过下面这个示例，就可以直观的看出二者所带来的代码差异，显然合并计算相关操作 <code>merge()</code> 实现简洁性更高。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">>></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">compute</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        v<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> v<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">>></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> v1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>List<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"a1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> v1<span class="token punctuation">,</span> <span class="token punctuation">(</span>o<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        o<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> o<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如果说什么是 &lt;code&gt;Java&lt;/code&gt; 集合中的性能天花板，那 &lt;code&gt;Map&lt;/code&gt; 肯定是当仁不让，但如果又问什么每个 &lt;code&gt;Crud Boy&lt;/code&gt; 的终极噩梦，那空指针 &lt;code&gt;(NPE)&lt;/code&gt; 必然将榜上有名。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="JAVA集合" scheme="https://budai.pages.dev/categories/JAVA%E9%9B%86%E5%90%88/"/>
    
    
    <category term="JAVA" scheme="https://budai.pages.dev/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>数据集合分组巧排</title>
    <link href="https://budai.pages.dev/java/collection/map-sort/"/>
    <id>https://budai.pages.dev/java/collection/map-sort/</id>
    <published>2024-11-30T16:00:00.000Z</published>
    <updated>2025-05-11T12:39:12.912Z</updated>
    
    <content type="html"><![CDATA[<p>在编程开发中，<code>List</code> 与 <code>Map</code> 可谓是 <code>Java</code> 集合体系中的左膀右臂，高频的应用于工程中的各个角落，今天就让我们进一步探究其中的门道。</p><h4 id="1-循环优化"><a href="#1-循环优化" class="headerlink" title="1. 循环优化"></a>1. 循环优化</h4><p><code>List</code> 对数据集合提供了丰富的操作方式，而 <code>Map</code> 则对性能优化发挥了举足轻重的作用，最经典的案例即通过 <code>Map</code> 解构嵌套循环，实现数量级的时间复杂度缩减。</p><p>让我们通过示例进行演示，假设需要获取两个对象集合中同名的元素，最简单的方式就是分别遍历两个集合并进行元素匹配，如下述代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token function">getUserList1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     List<span class="token operator">&lt;</span>User<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token function">getUserList2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> commonList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>User i <span class="token operator">:</span> list1<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>User j <span class="token operator">:</span> list2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 匹配同名元素</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> j<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                commonList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Common element: "</span> <span class="token operator">+</span> commonList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，在上述的实现方式中代码的时间复杂度为 <code>O(n^2)</code>，若此时 <code>list1</code> 与 <code>list2</code> 集合数量达到一定量级时，显然性能将不尽人意。</p><p>那么应该如何改进呢？方式其实很简单，通过 <code>Map</code> 的哈希机制便可将时间复杂度降至 <code>O(n)</code>，改造上述的示例得到下述结果：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> list1 <span class="token operator">=</span> <span class="token function">getUserList1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     List<span class="token operator">&lt;</span>User<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token function">getUserList2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构建 Map 集合</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> User<span class="token operator">></span> userMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>it <span class="token operator">-</span><span class="token operator">></span> userMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> it<span class="token punctuation">)</span><span class="token punctuation">)</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> commonList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>User user <span class="token operator">:</span> list2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String username <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>userMap<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 不存在跳过</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        commonList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>userMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Common Friends: "</span> <span class="token operator">+</span> commonFriends<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-集合排序"><a href="#2-集合排序" class="headerlink" title="2. 集合排序"></a>2. 集合排序</h4><p><code>Map</code> 除了上述提到循环优化功能外，其数据分组在日常开发中同样频繁涉及，在 <code>stream</code> 流处理中更使提供了 <code>groupingBy()</code> 简化这一过程。 </p><p>但我们都知道 <code>HashMap</code> 基于哈希与链表/红黑树实现，集合内元素并无先后次序，因此想对其排序则需要另辟蹊径。<code>LinkedHashMap</code> 结构则刚好满足了这一需求场景，其元素存储顺序按照存入的先后进行排序，虽性能无法取得 <code>HashMap</code> 同样的效果，但其仍拥有哈希的特性。</p><p>如此一来基本思路就确定了，只要遍历 <code>HashMap</code> 集合后按特定顺序存入 <code>LinkedHashMap</code>，即可获得一个有序的 <code>Map</code> 集合。</p><p>那就只剩下一个问题？如何确认元素优先级像标题所提到的实现巧排？</p><p>回到数据本身，通过分组后的数组通常 <code>key</code> 为某类唯一标识符，而每个标识符都有其所对应的类型，这个每个类型又都有各自的优先级。此优先级即用于确定 <code>Map</code> 中的每个元素的优先级。</p><p>这里想分享的一个技巧就是通过 <code>List</code> 定义类型集合，总所周知 <code>List</code> 为有序集合，那通过 <code>indexOf()</code> 获取每个元素的下标即可作为其优先级。因此，只需要对应的类型优先级集合以及唯一标识和类型的映射关系，即可实现 <code>Map</code> 集合的元素排序。</p><p>将上述提到的思路转化为代码，即可得到下述排序算法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 类型枚举</span><span class="token keyword">public</span> <span class="token keyword">enum</span> Type <span class="token punctuation">{</span>    A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> C<span class="token punctuation">,</span> MAX<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">groupSortData</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Type<span class="token operator">></span> priority<span class="token punctuation">,</span>                            List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList<span class="token punctuation">,</span>                           Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Type<span class="token operator">></span> typeMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 分组</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>User<span class="token operator">>></span> userMap <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>User<span class="token operator">:</span><span class="token operator">:</span>getName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 排序</span>    LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>User<span class="token operator">>></span> sortMap <span class="token operator">=</span> userMap<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 获取数据类型</span>                Type type1 <span class="token operator">=</span> typeMap<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>e1<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>                Type type2 <span class="token operator">=</span> typeMap<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>e2<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment" spellcheck="true">// 根据类型取优先级</span>                <span class="token keyword">int</span> index1 <span class="token operator">=</span> priority<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>type1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> index2 <span class="token operator">=</span> priority<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>type2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>index1<span class="token punctuation">,</span> index2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>                    Map<span class="token punctuation">.</span>Entry<span class="token operator">:</span><span class="token operator">:</span>getKey<span class="token punctuation">,</span>                    Map<span class="token punctuation">.</span>Entry<span class="token operator">:</span><span class="token operator">:</span>getValue<span class="token punctuation">,</span>                    <span class="token punctuation">(</span>r1<span class="token punctuation">,</span> r2<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> r1<span class="token punctuation">,</span>                    <span class="token comment" spellcheck="true">// 使用 LinkedHashMap 有序集合</span>                    LinkedHashMap<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span>            <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 打印输出</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sortMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面通过示例验证一下这个思路是否可行，通过有序集合 <code>List</code> 定义优先级集合 <code>priority</code>，元素下标越小则优先级越高。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 优先级映射</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Type<span class="token operator">></span> typeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    typeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Alex"</span><span class="token punctuation">,</span> Type<span class="token punctuation">.</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span>    typeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Beth"</span><span class="token punctuation">,</span> Type<span class="token punctuation">.</span>B<span class="token punctuation">)</span><span class="token punctuation">;</span>    typeMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> Type<span class="token punctuation">.</span>C<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 定义优先级</span>    List<span class="token operator">&lt;</span>Type<span class="token operator">></span> priority <span class="token operator">=</span> List<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>        Type<span class="token punctuation">.</span>C<span class="token punctuation">,</span> Type<span class="token punctuation">.</span>A<span class="token punctuation">,</span> Type<span class="token punctuation">.</span>B<span class="token punctuation">,</span> Type<span class="token punctuation">.</span>MAX    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造数据</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Alex"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Alex"</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Beth"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Beth"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 排序</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">groupSortData</span><span class="token punctuation">(</span>priority<span class="token punctuation">,</span> userList<span class="token punctuation">,</span> typeMap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行上述示例，在控制台输出下述结果，可以看到结果正是按照所定义的 <code>C &gt; B &gt; A</code> 次序进行排序。</p><pre class="line-numbers language-txt"><code class="language-txt">{    Jack=[User{id=3}, User{id=33}],     Alex=[User{id=1}, User{id=11}],    Beth=[User{id=2}, User{id=22}]}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在编程开发中，&lt;code&gt;List&lt;/code&gt; 与 &lt;code&gt;Map&lt;/code&gt; 可谓是 &lt;code&gt;Java&lt;/code&gt; 集合体系中的左膀右臂，高频的应用于工程中的各个角落，今天就让我们进一步探究其中的门道。&lt;/p&gt;
&lt;h4 id=&quot;1-循环优化&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="JAVA集合" scheme="https://budai.pages.dev/categories/JAVA%E9%9B%86%E5%90%88/"/>
    
    
    <category term="算法" scheme="https://budai.pages.dev/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 结构详解</title>
    <link href="https://budai.pages.dev/db/es/advance/"/>
    <id>https://budai.pages.dev/db/es/advance/</id>
    <published>2024-11-17T16:00:00.000Z</published>
    <updated>2025-05-11T12:39:12.814Z</updated>
    
    <content type="html"><![CDATA[<p>随着互联网的发展，各类数据库以及模型层出不穷，可谓让开发者眼花缭乱不知如何抉择。</p><p>对于传统的 <code>OLTP(Online Transaction Processing)</code> 关系型数据库例如 <code>MySQL</code>、<code>Oracle</code> 等凭借有效的事务性常作于项目基础数据库，而 Redis 此类数据库通过内存的高性能通常用于作为热点数据缓存节点。</p><p>那么问题来了？<code>Elasticsearch</code> 的优势是什么，又应该在何时引入项目又能解决什么难点？</p><h3 id="一、存储机制"><a href="#一、存储机制" class="headerlink" title="一、存储机制"></a>一、存储机制</h3><p>在 <code>Elasticsearch</code> 中，内存缓冲区和事务日志是确保数据可靠写入和实现“近实时”搜索的两个关键机制。</p><h4 id="1-内存缓冲区"><a href="#1-内存缓冲区" class="headerlink" title="1. 内存缓冲区"></a>1. 内存缓冲区</h4><p>在数据写入上通常可以分为两大类：有序和无序。</p><p>以 <code>Kafka</code> 的无序为例，数据直接添加至文件末端，数据间只存在先后关系而无其它关联。而常见的关系型数据库等存在索引需要将数据以一定规则进行存储，通常会采用缓存 + 异步写入的方式实现，例如 <code>MySQL</code> 中的 <code>Change Buffer</code>。</p><p>在 <code>Elasticsearch</code> 中同样也不例外，当执行数据新增时，会先将数据写入到内存缓冲区中，避免即刻的硬盘 <code>IO</code> 耗时操作，同时也能够提高数据吞吐量。</p><h4 id="2-事务日志"><a href="#2-事务日志" class="headerlink" title="2. 事务日志"></a>2. 事务日志</h4><p>事务日志是为了保证数据可靠性和持久性而存在的日志文件，每当数据写入内存缓冲区后，会根据特定间隔将数据刷入硬盘内。</p><p>在 <code>Elasticsearch</code> 中这个刷新的间隔通过 <code>refresh_interval</code> 参数进行管理，每个索引的刷新时间都是独立的，默认刷新时间为 <code>1s</code>。</p><p>即当用户执行新增时，数据会先行写入内存缓存区中，内存缓冲区中的数据在 <code>1s</code> 内刷新到一个新的 <code>段</code>，并写入磁盘，而这默认 <code>1s</code> 的差额也是 <code>Elasticsearch</code> 被称为近实时搜索引擎一大原因。</p><h3 id="二、应用场景"><a href="#二、应用场景" class="headerlink" title="二、应用场景"></a>二、应用场景</h3><h4 id="1-集成模式"><a href="#1-集成模式" class="headerlink" title="1. 集成模式"></a>1. 集成模式</h4><p>在实际的开发当中，与常见的 <code>MySQL</code> 的等即写即读不同，<code>Elasticsearch</code> 通常采用异步离线写入方式集成于项目。即利用 <code>MySQL</code> 的 <code>binlog</code> 等机制通过 <code>CDC</code> 的模式异步同步数据，而非采用实现的双写模式，从而进一步提高效率。</p><p>当然，对于实时性要求相对较高的场景，采用实时写入的方式也并无不妥。</p><h4 id="2-优势特点"><a href="#2-优势特点" class="headerlink" title="2. 优势特点"></a>2. 优势特点</h4><p>回归到正题，<code>Elasticsearch</code> 拥有哪些优势，以及应该何时选择 <code>Elasticsearch</code>?</p><p>对于 <code>MySQL</code> 相比大家都并不陌生，其最基础的索引即通过索引建从而搜索定位到相应的数据记录，例如主键索引，而此类索引方式又称之为正向索引，通过唯一查询记录。</p><p>而 <code>Elasticsearch</code> 的优势之外在于支持反向搜索，即通过记录关键字反向查询唯一标识。最为常见的例子即全文搜索，若需要在 <code>MySQL</code> 等常见数据库中实现最简单的方式即通过 <code>like %xxx%</code> 实现模糊搜索，但存在索引失效所带来的性能问题。</p><p><code>Elasticsearch</code> 的反向索引强大之处即可以通过分词器进行拆词为关键字，从而为关键字反向关联数据记录，从而实现快速的全文搜索能力。</p><h4 id="3-缺点不足"><a href="#3-缺点不足" class="headerlink" title="3. 缺点不足"></a>3. 缺点不足</h4><p><code>Elasticsearch</code> 虽又有不菲的性能，但也并无铁板一块仍存在自身的不足之处。</p><p>在搜索查询上 <code>Elasticsearch</code> 能够表现出让人眼前一亮的效果，但在面对频繁的删改时却稍逊一筹。同样在事务管理上，并不能像传统的关系型数据一样强大，且其采用最终一致性模型，对于要求高一致性的数据处理或许并非最佳选择。</p><p>因此，基于 <code>Elasticsearch</code> 高效搜索的特性。其通常应用于全文搜索、日志分析以及大数据集的聚合分析之中，其中较为常见的一大应用即 <code>ELK</code> 日志管理，能够实现日志搜索检索。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;随着互联网的发展，各类数据库以及模型层出不穷，可谓让开发者眼花缭乱不知如何抉择。&lt;/p&gt;
&lt;p&gt;对于传统的 &lt;code&gt;OLTP(Online Transaction Processing)&lt;/code&gt; 关系型数据库例如 &lt;code&gt;MySQL&lt;/code&gt;、&lt;code&gt;</summary>
      
    
    
    
    <category term="大数据" scheme="https://budai.pages.dev/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Elasticsearch" scheme="https://budai.pages.dev/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ消息队列入门</title>
    <link href="https://budai.pages.dev/db/mq/basic/"/>
    <id>https://budai.pages.dev/db/mq/basic/</id>
    <published>2024-10-13T16:00:00.000Z</published>
    <updated>2025-05-12T12:17:26.834Z</updated>
    
    <content type="html"><![CDATA[<p>一提到消息队列，想必你即便没真正上手实践过，也一定对其有所耳闻，在之前的博客中以 <code>Kafka</code> 为例深入解析了消息队列模型以及其所解决的一些痛点。</p><p>针对 <code>Kafka</code> 队列部分，感兴趣的小伙伴可以去考古，传送门放这了：</p><ul><li><a href="https://great-jin.github.io/db/kafka/basis/">Kafka消息队列详解</a></li><li><a href="https://great-jin.github.io/db/kafka/subscribe/">Kafka发布订阅实战</a></li></ul><p>将视线收回到现在，不论是 <code>Kafka</code> 又或是今天的主角 <code>RabbitMQ</code>，其核心都在消息队列上，基于二者的存储方式以及数据传输模型从而衍生出不同的特性以及适用场景。</p><p>以 <code>Kafka</code> 为例，其为队列数据提供了持久化功能，基于主题与消费组的形式拉取生产者所产生的数据，拥有极高的吞吐量广泛应用于大数据领域。而 <code>RabbitMQ</code> 的一大特点即将交换器与队列相结合，通过交换器可实现复杂的数据路由功能。</p><p>在数据传输中 <code>RabbitMQ</code> 虽然也提供了持久化，但默认还是以内存为主，当数据消费完成后即会被删除。同时与 <code>Kafka</code> 消费者主动拉取数据相比，<code>RabbitMQ</code> 则恰好相反由生产者主动推送数据，通过消息确认机制避免了数据丢失与重复消费。</p><blockquote><p>下面通过项目集成实战介绍 <code>RabbitMQ</code> 的集成应用</p></blockquote><h3 id="一、基础介绍"><a href="#一、基础介绍" class="headerlink" title="一、基础介绍"></a>一、基础介绍</h3><h4 id="1-服务部署"><a href="#1-服务部署" class="headerlink" title="1. 服务部署"></a>1. 服务部署</h4><p><code>RabbitMQ</code> 需要单独的应用服务部署，在开始前先以 <code>Docker</code> 方式快速部署测试服务。</p><p>创建对应的数据映射目录并拉取镜像，这里注意一点拉取的镜像带 <code>management</code> 表示其内置了后台管理页面。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建数据目录</span><span class="token function">mkdir</span> -p /home/dockerdata/rabbitmq<span class="token comment" spellcheck="true"># 拉取镜像</span>docker pull rabbitmq:management<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成镜像拉取之后就可以启动容器了，这里配置的默认账号为：<code>ibudai/123456</code>，可根据偏好自行调整。</p><p>完成部署后应用服务运行在 <code>5672</code> 端口，默认自带的后台管理在 <code>15672</code> 端口。</p><pre class="line-numbers language-bash"><code class="language-bash">docker run -id \-p 15672:15672 \-p 5672:5672 \--name<span class="token operator">=</span>rabbitmq \-v /home/dockerdata/rabbitmq:/var/lib/rabbitmq \-e RABBITMQ_DEFAULT_USER<span class="token operator">=</span>ibudai \-e RABBITMQ_DEFAULT_PASS<span class="token operator">=</span>123456 \rabbitmq:management<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-核心概念"><a href="#2-核心概念" class="headerlink" title="2. 核心概念"></a>2. 核心概念</h4><p>在 <code>RabbitMQ</code> 中包含了三个核心概念，下面分别进行讲解。</p><h5 id="1-交换机"><a href="#1-交换机" class="headerlink" title="(1) 交换机"></a>(1) 交换机</h5><p>顾名思义交互机 <code>(Exchange)</code> 即消息的中转站，当生产者发送数据后，消息将先发送至交换机，再进行转发的对应的队列。</p><h5 id="2-路由KEY"><a href="#2-路由KEY" class="headerlink" title="(2) 路由KEY"></a>(2) 路由KEY</h5><p>路由键 <code>(Router Key)</code> 则是交换机与消息队列的缓冲层，通过路由键决定一个消息应该发送至哪个队列。</p><p>通过路由键的存在实现交换机与队列之间的解耦，并且能够实现更复杂的消息转发机制。</p><h5 id="3-消息队列"><a href="#3-消息队列" class="headerlink" title="(3) 消息队列"></a>(3) 消息队列</h5><p>消息队列即最终消息的临时存储媒介，经过路由转发的消息将暂存于队列中，等待被消费者所消费。</p><h3 id="二、项目集成"><a href="#二、项目集成" class="headerlink" title="二、项目集成"></a>二、项目集成</h3><p>接下来就让我们开始正式介绍如何在 <code>Spring</code> 工程中集成使用。</p><h4 id="1-依赖导入"><a href="#1-依赖导入" class="headerlink" title="1. 依赖导入"></a>1. 依赖导入</h4><p>在 <code>Spring</code> 中提供了开箱即用的 <code>rabbitmq</code> 依赖，在工程 <code>pom</code> 中引入相应的 <code>starter</code> 依赖。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-服务配置"><a href="#2-服务配置" class="headerlink" title="2. 服务配置"></a>2. 服务配置</h4><p>当然必不可少的需要在工程的 <code>yaml</code> 配置中添加 <code>RabbitMQ</code> 对应的服务连接信息。</p><p>以刚才部署的测试服务为例，对应的配置内容如下：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>        <span class="token key atrule">host</span><span class="token punctuation">:</span> 127.0.0.1        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>        <span class="token key atrule">username</span><span class="token punctuation">:</span> ibudai        <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、交换模型"><a href="#三、交换模型" class="headerlink" title="三、交换模型"></a>三、交换模型</h3><p>在 <code>RabbitMQ</code> 的交换机中存在多种模型，不同模型有着自己的传输特点，下面分别进行介绍。</p><h4 id="1-精准匹配"><a href="#1-精准匹配" class="headerlink" title="1. 精准匹配"></a>1. 精准匹配</h4><p><code>DirectExchange</code> 顾名思义即直接交换，路由键与消息队列之间一一对应。</p><p>下述示例中创建了 <code>topic_logs</code> 交换机并绑定了两个消息队列，代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 定义 Direct Exchange     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> TopicExchange <span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">"topic_logs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">infoQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"queue.info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">errorQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"queue.error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">bindingInfoQueue</span><span class="token punctuation">(</span>Queue infoQueue<span class="token punctuation">,</span> TopicExchange topicExchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>infoQueue<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 绑定交换机</span>                <span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>topicExchange<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 绑定路由 Key</span>                <span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">"log.info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">bindingErrorQueue</span><span class="token punctuation">(</span>Queue errorQueue<span class="token punctuation">,</span> TopicExchange topicExchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>errorQueue                <span class="token comment" spellcheck="true">// 绑定交换机</span>                <span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>topicExchange<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 绑定路由 Key</span>                <span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">"log.error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-模糊匹配"><a href="#2-模糊匹配" class="headerlink" title="2. 模糊匹配"></a>2. 模糊匹配</h4><p>在 <code>TopicExchange</code> 传输模式中，除了与 <code>DirectExchange</code> 的精准匹配外，支持根据路由键模糊匹配。</p><p>如定义了路由键: <code>test.m1.1</code>、<code>test.m1.2</code> 与 <code>test.m2.1</code>，在发送消息时将路由键配置为 <code>test.m1.*</code> 则可以同时发送消息至 <code>test.m1.1</code> 与 <code>test.m1.2</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 定义 Topic Exchange     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> TopicExchange <span class="token function">topicExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TopicExchange</span><span class="token punctuation">(</span><span class="token string">"topic_logs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 略去其它，同 DirectExchange</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-消息广播"><a href="#3-消息广播" class="headerlink" title="3. 消息广播"></a>3. 消息广播</h4><p>广播队列 <code>(FanoutExchange)</code> 即发送消息时交换机绑定的所有队列都能收到消息。<br><img src="/album/loading.gif" data-original="/album/article/db/mq/2.png"></p><p>通过 <code>FanoutExchange</code> 创建交换机实例，因为是全局广播不存在路由键因此无需通过 <code>with()</code> 绑定。</p><p>相应的代码示例如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 定义 Fanout Exchange     */</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> FanoutExchange <span class="token function">fanoutExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FanoutExchange</span><span class="token punctuation">(</span><span class="token string">"fanout_logs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">queue1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"queue.fan1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">queue2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"queue.fan2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">bindingQueue1</span><span class="token punctuation">(</span>Queue queue1<span class="token punctuation">,</span> FanoutExchange fanoutExchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>fanoutExchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>       <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Binding <span class="token function">bindingQueue2</span><span class="token punctuation">(</span>Queue queue2<span class="token punctuation">,</span> FanoutExchange fanoutExchange<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> BindingBuilder<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>queue2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>fanoutExchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、服务收发"><a href="#四、服务收发" class="headerlink" title="四、服务收发"></a>四、服务收发</h3><h4 id="1-消息发送"><a href="#1-消息发送" class="headerlink" title="1. 消息发送"></a>1. 消息发送</h4><p>在发送消息时，通过 <code>RabbitTemplate</code> 实例的 <code>convertAndSend(exchange, routingKey, message) </code> 方法，入参分别代表：交换机、路由 <code>KEY</code> 与需发送的消息。</p><p>传输的消息数据对象默认为字符串，对于复杂对象通常使用 <code>Jackson</code> 或 <code>Gson</code> 等类库序列化后传输。</p><p>在 <code>FanoutExchange</code> 传输模式下则不指定 <code>routingKey</code>，表示发送消息至所有绑定的消息队列。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopicProducer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RabbitTemplate rabbitTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String message <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 精准匹配</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"topic_logs"</span><span class="token punctuation">,</span> <span class="token string">"log.info"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String message <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 模糊匹配</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"topic_logs"</span><span class="token punctuation">,</span> <span class="token string">"log.*"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String message <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 全局广播</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"fanout_logs"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-消息消费"><a href="#2-消息消费" class="headerlink" title="2. 消息消费"></a>2. 消息消费</h4><p>对于数据的消费同样十分简单，通过 <code>@RabbitListener</code> 注解即可，其中 <code>queues</code> 参数即对应的消息队列名称。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopicConsumer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"infoQueue"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveInfo</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Received INFO message: "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"errorQueue"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveError</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Received ERROR message: "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、多服务配置"><a href="#五、多服务配置" class="headerlink" title="五、多服务配置"></a>五、多服务配置</h3><h4 id="1-连接配置"><a href="#1-连接配置" class="headerlink" title="1. 连接配置"></a>1. 连接配置</h4><p>在之前的示例中，我们是通过默认的配置连接服务收发消息，但在某些场景下系统可能会对接多个消息队列。</p><p>因此，在 <code>Spring</code> 中提供了自定义 <code>RabbitTemplate</code> 服务连接实例的能力。</p><p>如系统中存在两个 <code>Rabbit</code> 服务实例，连接配置如下：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">rabbit</span><span class="token punctuation">:</span>  <span class="token key atrule">primary</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> host1    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> user1    <span class="token key atrule">password</span><span class="token punctuation">:</span> pwd1    <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> /  <span class="token key atrule">secondary</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> host2    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> user2    <span class="token key atrule">password</span><span class="token punctuation">:</span> pwd2    <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> /<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成后通过 <code>ConnectionFactory</code> 创建连接工厂实例，其中虚拟主机 <code>(VirtualHost)</code> 是 <code>RabbitMQ</code> 提供的一种逻辑隔离机制，相当于一个命名空间，用来隔离不同的连接、交换机、队列、用户权限等。</p><p>定义 <code>ConnectionFactory</code> 后便可注入到 <code>RabbitTemplate</code> 实例之中。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"primaryConnectionFactory"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ConnectionFactory <span class="token function">primaryConnectionFactory</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rabbit.primary.host}"</span><span class="token punctuation">)</span> String host<span class="token punctuation">,</span>                                                      <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rabbit.primary.port}"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span>                                                      <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rabbit.primary.username}"</span><span class="token punctuation">)</span> String username<span class="token punctuation">,</span>                                                      <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rabbit.primary.password}"</span><span class="token punctuation">)</span> String password<span class="token punctuation">,</span>                                                      <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rabbit.primary.virtual-host}"</span><span class="token punctuation">)</span> String virtualHost<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CachingConnectionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CachingConnectionFactory</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span>virtualHost<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"secondaryConnectionFactory"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ConnectionFactory <span class="token function">secondaryConnectionFactory</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rabbit.secondary.host}"</span><span class="token punctuation">)</span> String host<span class="token punctuation">,</span>                                                        <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rabbit.secondary.port}"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> port<span class="token punctuation">,</span>                                                        <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rabbit.secondary.username}"</span><span class="token punctuation">)</span> String username<span class="token punctuation">,</span>                                                        <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rabbit.secondary.password}"</span><span class="token punctuation">)</span> String password<span class="token punctuation">,</span>                                                        <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${rabbit.secondary.virtual-host}"</span><span class="token punctuation">)</span> String virtualHost<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CachingConnectionFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CachingConnectionFactory</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span>virtualHost<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"primaryRabbitTemplate"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> RabbitTemplate <span class="token function">primaryRabbitTemplate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"primaryConnectionFactory"</span><span class="token punctuation">)</span> ConnectionFactory connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RabbitTemplate</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"secondaryRabbitTemplate"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> RabbitTemplate <span class="token function">secondaryRabbitTemplate</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"secondaryConnectionFactory"</span><span class="token punctuation">)</span> ConnectionFactory connectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RabbitTemplate</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么现在即可通过对应的 <code>RabbitTemplate</code> 实例发送消息至指定服务节点。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TopicProducer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RabbitTemplate primaryRabbitTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RabbitTemplate secondaryRabbitTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        primaryRabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"topic_logs"</span><span class="token punctuation">,</span> <span class="token string">"log.info"</span><span class="token punctuation">,</span> <span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        secondaryRabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"topic_logs"</span><span class="token punctuation">,</span> <span class="token string">"log.info"</span><span class="token punctuation">,</span> <span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-消费实例"><a href="#2-消费实例" class="headerlink" title="2. 消费实例"></a>2. 消费实例</h4><p>同样的，在创建了多个连接实例后相应的也需要创建对应的消息接收工厂。</p><p>在之前 <code>@RabbitListener</code> 注解接收消息示例中，通过 <code>queues</code> 指定消息队列。而在多连接实例下，则可通过 <code>containerFactory</code> 配置对应的服务实例。</p><p>完成的配置示例如下，其中 <code>ConnectionFactory</code> 即上述的连接服务实例。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> SimpleRabbitListenerContainerFactory <span class="token function">primaryContainerFactory</span><span class="token punctuation">(</span>ConnectionFactory primaryConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SimpleRabbitListenerContainerFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleRabbitListenerContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>primaryConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 手动 ack</span>        factory<span class="token punctuation">.</span><span class="token function">setAcknowledgeMode</span><span class="token punctuation">(</span>AcknowledgeMode<span class="token punctuation">.</span>MANUAL<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 <code>AcknowledgeMode</code> 为接收消息之后的确认机制，可选项参考下表：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">AcknowledgeMode.AUTO</td>        <td style="text-align: center;">消息自动确认。</td>    </tr>    <tr>        <td style="text-align: center;">AcknowledgeMode.MANUAL</td>        <td style="text-align: center;">消息手动 ACK 确认。</td>    </tr>    <tr>        <td style="text-align: center;">AcknowledgeMode.NONE</td>        <td style="text-align: center;">消息不确认，可重复消费。</td>    </tr></table></br><p>在定义实例之后，即可通过 <code>containerFactory</code> 属性进行指定，完整代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">"infoQueue"</span><span class="token punctuation">,</span> containerFactory <span class="token operator">=</span> <span class="token string">"primaryContainerFactory"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiveMessage</span><span class="token punctuation">(</span>String msg<span class="token punctuation">,</span> Channel channel<span class="token punctuation">,</span> Message message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 手动 ack</span>    channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一提到消息队列，想必你即便没真正上手实践过，也一定对其有所耳闻，在之前的博客中以 &lt;code&gt;Kafka&lt;/code&gt; 为例深入解析了消息队列模型以及其所解决的一些痛点。&lt;/p&gt;
&lt;p&gt;针对 &lt;code&gt;Kafka&lt;/code&gt; 队列部分，感兴趣的小伙伴可以去考古，传送门放</summary>
      
    
    
    
    <category term="中间件" scheme="https://budai.pages.dev/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="RabbitMQ" scheme="https://budai.pages.dev/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>小小注解验证轻松拿捏</title>
    <link href="https://budai.pages.dev/java/tool/validation/"/>
    <id>https://budai.pages.dev/java/tool/validation/</id>
    <published>2024-09-05T16:00:00.000Z</published>
    <updated>2025-08-11T12:28:21.706Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、需求分析"><a href="#一、需求分析" class="headerlink" title="一、需求分析"></a>一、需求分析</h3><h4 id="1-场景需求"><a href="#1-场景需求" class="headerlink" title="1. 场景需求"></a>1. 场景需求</h4><p>所谓注解验证即将通过注解的方法实现对象属性的合法性校验，从而让代码专注于业务功能实现，使得代码更为简洁可读性更高。</p><p>试想这么一个场景，你需要在当前系统开发一个对外接口，而对于接口入口数据需要根据一定规则进行校验，对于非法数据的需要对应进行的拦截。</p><p>针对这类场景，最简单的方式即对于接口入参数据通过 <code>if</code> 逐个判断是否合法，但当参数属性过多时，整个代码结构将会便会十分繁杂。相对于此类处理方法，如果能通过注解的方法直接定义相应的规则显然代码则更为简洁。</p><h4 id="2-实现思路"><a href="#2-实现思路" class="headerlink" title="2. 实现思路"></a>2. 实现思路</h4><p>注解验证的实现思路也十分简单，通过定义不同的注解对应不同的验证规则，在使用时将其作用于对应的属性之上，在运行时通过反射的方式获取属性的值并根据对应的注解规则执行校验。</p><h4 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h4><p>下面通过最基本属性非空校验为例，首先让定义注解 <code>@NotBlank</code>，声明其作用域为 <code>FIELD</code> 即类属性。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">NotBlank</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * message 定义抛出的异常信息     */</span>    String <span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成注解定义后实现对应的规则验证类，分为两个步骤：</p><blockquote><ul><li>判断属性是否标识了对应注解;</li><li>如果不存在则返回，存在则按照对应的规则执行处理;</li></ul></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotBlankChecker</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Field field<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 若不存在注解则返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>NotBlank<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 反射获取对象属性值</span>        Object o <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">||</span> StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 为空根据 message 抛出异常</span>            String msg <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                msg <span class="token operator">=</span> <span class="token string">"The field of {"</span> <span class="token operator">+</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"} can't be blank"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义了对应的规则校验器之后就可以创建统一的验证入口，新建 <code>FieldValidate</code> 类，其实现内容如下：</p><blockquote><ul><li>通过反射获取对应类中定义的所有字段；</li><li>遍历字段集合执行上述定义的校验规则器；</li></ul></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FieldValidate</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> NotBlankChecker checker <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NotBlankChecker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">validate</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cls <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取对象的所有字段</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Field field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 设置反射访问权限</span>            field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">// 执行对应的验证规则</span>            checker<span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> field<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-集成示例"><a href="#4-集成示例" class="headerlink" title="4. 集成示例"></a>4. 集成示例</h4><p>至此所有的准备工作都已经完成，下面通过示例演示效果。</p><p>首先定义一个参数实体类 <code>User</code>，并在字段添加上 <code>@NotBlank</code> 注解。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@NotBlank</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其对应的使用方式如下，在业务代码中即可避免编写重复的 <code>if</code> 判断逻辑。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 执行规则校验</span>    FieldValidate<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、分组关联"><a href="#二、分组关联" class="headerlink" title="二、分组关联"></a>二、分组关联</h3><h4 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h4><p>上述的示例已经实现我们最开始的功能，但还存在一类场景没有覆盖到。</p><p>即定义参数实体可能用于多个接口，而上述的定义方式针对此类场景则无法根据不同接口进行区分，因此需要添加分组功能以达到该目的。</p><h4 id="2-功能实现"><a href="#2-功能实现" class="headerlink" title="2. 功能实现"></a>2. 功能实现</h4><p>分组实现思路也并不难，需要定义注解为可重复声明，之前介绍注解的文章中已经详细展开介绍了，这里实现机制就不再具体展开了，可参考之前的文章: <a href="https://great-jin.github.io/java/advance/annotation/">Java注解基础介绍</a>。</p><p>除了改造为可重复之外，还需要在注解中添加参数 <code>group</code> 进行分组。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span>NotBlank<span class="token punctuation">.</span>Group<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">NotBlank</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 分组     */</span>    Integer <span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>    String <span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span>    <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>    @<span class="token keyword">interface</span> <span class="token class-name">Group</span> <span class="token punctuation">{</span>        NotBlank<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样修改之前的 <code>NotBlankChecker</code> 规则验证器，在 <code>filter</code> 方法中过滤了指定 <code>group</code> 的分组注解。</p><p>除此之外实现上并无区别，完整代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotBlankChecker</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Field field<span class="token punctuation">,</span> Integer group<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 若不存在注解则返回</span>        NotBlank annotation <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> group<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>annotation<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 反射获取对象属性值</span>        Object o <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">||</span> StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 为空根据 message 抛出异常</span>            String msg <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                msg <span class="token operator">=</span> <span class="token string">"The field of {"</span> <span class="token operator">+</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"} can't be blank"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据分组过滤     */</span>    <span class="token keyword">private</span> NotBlank <span class="token function">filter</span><span class="token punctuation">(</span>Field field<span class="token punctuation">,</span> <span class="token keyword">int</span> group<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>field<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>NotBlank<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                 <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>field<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>NotBlank<span class="token punctuation">.</span>Group<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        NotBlank<span class="token punctuation">[</span><span class="token punctuation">]</span> annotations <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotationsByType</span><span class="token punctuation">(</span>NotBlank<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        annotations <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>annotations<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>it <span class="token operator">-</span><span class="token operator">></span> it<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> group<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>NotBlank<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>annotations<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>annotations<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ValidateException</span><span class="token punctuation">(</span><span class="token string">"Field group is duplicate!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> annotations<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-集成示例"><a href="#3-集成示例" class="headerlink" title="3. 集成示例"></a>3. 集成示例</h4><p>修改之前定义的参数实体类，添加上对应的分组 <code>group</code> 参数。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">.</span><span class="token function">Group</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"msg 0"</span><span class="token punctuation">,</span> group <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"msg 1"</span><span class="token punctuation">,</span> group <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应测试示例如下，可以看到上述定义的分组为 <code>1</code>，因此在执行 <code>validate(user, 0)</code> 则不会触发空校验。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FieldValidate<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FieldValidate<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、属性联动"><a href="#三、属性联动" class="headerlink" title="三、属性联动"></a>三、属性联动</h3><p>除了上述提到的这些功能，<code>Spring</code> 中提供了 <code>EL</code> 表达式可以动态执行校验，因此我们即可利用该特性实现字段属性间的联动效果。</p><h4 id="1-EL表达式"><a href="#1-EL表达式" class="headerlink" title="1. EL表达式"></a>1. EL表达式</h4><p>在项目工程中添加 <code>spring-context</code> 依赖，配置如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.3.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引入依赖后我们编写一个验证工具类校验 <code>EL</code> 表达式结果是否为 <code>True</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExpressionUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ExpressionParser parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpelExpressionParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * @param t  对象     * @param el EL表达式     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">boolean</span> <span class="token function">evaluateBoolean</span><span class="token punctuation">(</span>T t<span class="token punctuation">,</span> String el<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Expression expression <span class="token operator">=</span> parser<span class="token punctuation">.</span><span class="token function">parseExpression</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>        StandardEvaluationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardEvaluationContext</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        Boolean result <span class="token operator">=</span> expression<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面主要介绍一下 <code>EL</code> 表达式的编写方式，表达式编写并不复杂下面直接通过示例演示。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExpressionTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        User alex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Alex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User beth <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Beth"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String expression <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ExpressionUtils<span class="token punctuation">.</span><span class="token function">evaluateBoolean</span><span class="token punctuation">(</span>alex<span class="token punctuation">,</span> expression<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ExpressionUtils<span class="token punctuation">.</span><span class="token function">evaluateBoolean</span><span class="token punctuation">(</span>beth<span class="token punctuation">,</span> expression<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * $: 用于属性占位符解析。     * #: 用于引用上下文中的变量和方法。     * {}: 与 $ 一起使用，用于明确标识属性占位符的边界，特别是在复杂字符串中。     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        User alex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Alex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User beth <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Beth"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// "#root" 表示当前对象引用</span>        String expression1 <span class="token operator">=</span> <span class="token string">"#root.name =='Alex'"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ExpressionUtils<span class="token punctuation">.</span><span class="token function">evaluateBoolean</span><span class="token punctuation">(</span>alex<span class="token punctuation">,</span> expression1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ExpressionUtils<span class="token punctuation">.</span><span class="token function">evaluateBoolean</span><span class="token punctuation">(</span>beth<span class="token punctuation">,</span> expression1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 可省略直接通过字段属性名进行引用</span>        String expression2 <span class="token operator">=</span> <span class="token string">"name =='Alex'"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ExpressionUtils<span class="token punctuation">.</span><span class="token function">evaluateBoolean</span><span class="token punctuation">(</span>alex<span class="token punctuation">,</span> expression2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ExpressionUtils<span class="token punctuation">.</span><span class="token function">evaluateBoolean</span><span class="token punctuation">(</span>beth<span class="token punctuation">,</span> expression2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过 "T()" 调用类     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        User alex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String expression <span class="token operator">=</span> <span class="token string">"T(xyz.ibudai.validate.core.util.StringUtils).isNotBlank(name)"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ExpressionUtils<span class="token punctuation">.</span><span class="token function">evaluateBoolean</span><span class="token punctuation">(</span>alex<span class="token punctuation">,</span> expression<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-功能实现-1"><a href="#2-功能实现-1" class="headerlink" title="2. 功能实现"></a>2. 功能实现</h4><p>因此，我们即可利用该特性在注解中添加参数 <code>triggered</code> 用于声明 <code>EL</code> 表达式，修改代码为如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Repeatable</span><span class="token punctuation">(</span>NotBlank<span class="token punctuation">.</span>Group<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">NotBlank</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 分组     */</span>    Integer <span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>    String <span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>    String <span class="token function">triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">"true"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>FIELD<span class="token punctuation">)</span>    <span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span>    @<span class="token keyword">interface</span> <span class="token class-name">Group</span> <span class="token punctuation">{</span>        NotBlank<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样在规则校验器添加 EL 表达式解析模块，解析结果若为否则退出。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NotBlankChecker</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Field field<span class="token punctuation">,</span> Integer group<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 若不存在注解则返回</span>        NotBlank annotation <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>field<span class="token punctuation">,</span> group<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>annotation<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 过滤是否触发校验规则</span>        String triggered <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">triggered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>triggered<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>ExpressionUtils<span class="token punctuation">.</span><span class="token function">evaluateBoolean</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> triggered<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 反射获取对象属性值</span>        Object o <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token operator">||</span> StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 为空根据 message 抛出异常</span>            String msg <span class="token operator">=</span> annotation<span class="token punctuation">.</span><span class="token function">message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                msg <span class="token operator">=</span> <span class="token string">"The field of {"</span> <span class="token operator">+</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"} can't be blank"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> NotBlank <span class="token function">filter</span><span class="token punctuation">(</span>Field field<span class="token punctuation">,</span> <span class="token keyword">int</span> group<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 省略，代码同上</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-集成示例-1"><a href="#3-集成示例-1" class="headerlink" title="3. 集成示例"></a>3. 集成示例</h4><p>创建参数实体类并通过 <code>triggered</code> 编写表达式，如下述则标识只有当 <code>id</code> 值为 <code>2</code> 时才触发校验。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotBlank</span><span class="token punctuation">(</span>triggered <span class="token operator">=</span> <span class="token string">"id =='123'"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写对应的测试用例，执行后可以发现 <code>validate(user1)</code> 并不会触发空校验。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    User user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"Alex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"Beth"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FieldValidate<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>    FieldValidate<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、拦截切面"><a href="#四、拦截切面" class="headerlink" title="四、拦截切面"></a>四、拦截切面</h3><h4 id="1-基本介绍-1"><a href="#1-基本介绍-1" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h4><p>在上面的上面的示例中在执行规则验证时通过 <code>FieldValidate</code> 手动执行，如若在 <code>Spring</code> 项目中则可通过切面方式从而更便捷的实现。</p><p>在项目工程中引入 <code>Spring AOP</code> 依赖，配置如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.6.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义注解 <code>@Validate</code>，注意其作用对象为 <code>PARAMETER</code> 即方法参数。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>PARAMETER<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">Validate</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-切面实现"><a href="#2-切面实现" class="headerlink" title="2. 切面实现"></a>2. 切面实现</h4><p>新建切面类 <code>ValidateAspect</code>，实现并不复杂这里就不展开介绍。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Aspect</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValidateAspect</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 定义切点拦截 Validate 注解     */</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(validate) &amp;&amp; @annotation(xyz.ibudai.validate.core.annotation.Validate) "</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointcut</span><span class="token punctuation">(</span>Validate validate<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 定义切面处理逻辑     */</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"pointcut(validate)"</span><span class="token punctuation">,</span> argNames <span class="token operator">=</span> <span class="token string">"joinPoint, validate"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">around</span><span class="token punctuation">(</span>ProceedingJoinPoint joinPoint<span class="token punctuation">,</span> Validate validate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            MethodSignature signature <span class="token operator">=</span> <span class="token punctuation">(</span>MethodSignature<span class="token punctuation">)</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Get target method</span>            Method method <span class="token operator">=</span> signature<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Parameter<span class="token punctuation">[</span><span class="token punctuation">]</span> parameters <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> parameters<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                Parameter param <span class="token operator">=</span> parameters<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 方法参数若未标识注解则跳过</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>param<span class="token punctuation">.</span><span class="token function">isAnnotationPresent</span><span class="token punctuation">(</span>Validate<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// 执行校验</span>                Validate annotation <span class="token operator">=</span> param<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span>Validate<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                FieldValidate<span class="token punctuation">.</span><span class="token function">validate</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> annotation<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-示例演示"><a href="#3-示例演示" class="headerlink" title="3. 示例演示"></a>3. 示例演示</h4><p>通过上述定义注解以及切面，在 <code>Spring</code> 工程中即可在方法中通过 <code>@Validate</code> 注解标识即可，无需手动调用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Validate</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// do something</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>文中涉及完整工程已上传 <code>GitHub</code>，<a href="https://github.com/great-jin/Property-Validation">仓库直达</a>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、需求分析&quot;&gt;&lt;a href=&quot;#一、需求分析&quot; class=&quot;headerlink&quot; title=&quot;一、需求分析&quot;&gt;&lt;/a&gt;一、需求分析&lt;/h3&gt;&lt;h4 id=&quot;1-场景需求&quot;&gt;&lt;a href=&quot;#1-场景需求&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="JAVA进阶" scheme="https://budai.pages.dev/categories/JAVA%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="JAVA" scheme="https://budai.pages.dev/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>遭了，屎山竟是我自己</title>
    <link href="https://budai.pages.dev/java/jvm/memory/"/>
    <id>https://budai.pages.dev/java/jvm/memory/</id>
    <published>2024-08-08T16:00:00.000Z</published>
    <updated>2025-05-11T12:39:12.943Z</updated>
    
    <content type="html"><![CDATA[<p>事情是这样的，在不久之前我不是分享了一篇文章说我写了端口检测关闭的 <code>GUI</code> 工具，如果你还没看过可以去瞧一眼：<a href="https://great-jin.github.io/windows/software/process/">我写了一个程序，让端口占用无路可逃</a>。</p><p>一切本都平平无奇，直到今天在使用时在任务管理器瞄了一眼，好家伙内存占用怎么有百来兆。<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/1.png"></p><p>不知道你第一眼看到这个内存是作何反应，反正我是挺惊讶的，按我理解 <code>10MB</code> 就已经不得了了，这直接王炸翻了个量级。</p><p>作为一个遥遥领先的 <code>Javer</code>，对于内存爆炸早已见怪不怪，没有什么是加条内存不能解决的，如果不能那就再加一条。但这时候没有甲方，机子的一分一毛全靠自己，况且这稀碎的内存表现怎么让我好意思分享。</p><blockquote><p>今天，我还就一定要把它底裤都都扒光。</p></blockquote><p>首先，当然还是需要确定这么大的内存到底耗费在了哪个地方？一开始，由于程序是通过 <code>exe4j</code> 工具将 <code>Jar</code> 打包为 <code>exe</code> 执行程序，我最先怀疑的就是是不是哪里配置我缺失了导致内存狂飙。</p><p>验证方式也相当简单，分别通过 <code>Jar</code> 以及 <code>Exe</code> 两种方式分别运行，但最后发现的两种方式的内存占用都在 <code>100MB</code> 上下波动，那说明问题的根源还是在程序本身。</p><p>这就让人蛋疼了，程序中并没有涉及到复杂的对象操作，主线流程可谓简洁明了：启动 <code>Swing</code> 窗口后填充表格数据，若硬要扯那就只有表格的数据对象。</p><h4 id="1-工具排查"><a href="#1-工具排查" class="headerlink" title="1. 工具排查"></a>1. 工具排查</h4><p>没办法，只能祭出 <code>JDK</code> 自带神器 <code>VisualVM</code> 了，其提供了针对 <code>Java</code> 运行程序的可视化 <code>JVM</code> 监控能力，可谓是让人每用一次都能大喊一声卧槽的存在。</p><p>在 <code>Windows</code> 中完成 <code>JDK 8</code> 安装后其程序默认路径为 <code>C:\Program Files\Java\jdk1.8.0_202\bin</code> 下的 <code>jvisualvm.exe</code>，双击即可运行。而在 <code>JDK 11</code> 后续版本中其已经剥离出来了，需要自行安装，别担心，下载链接已经给你准备好了：<a href="https://visualvm.github.io/download.html">官网直达</a>。</p><p>打开后在左侧树选中运行的 <code>Java</code> 应用并选中监视，即可看到下图所示内容：<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/2.png"></p><p>仔细看第二个图，可以看到项目一运行默认的内存初始大小为 <code>500MB</code>，已使用的为 <code>50MB</code> 左右。<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/3.png"></p><p>那这个 <code>500MB</code> 又是根据依据来的？我们都知道可以通过 <code>-Xms</code> 和 <code>-Xmx</code> 限制堆的大小，但在未手动指定的前提下，<code>JVM</code> 同样会为其设置一个默认值，这个默认值取值如下：</p><ul><li><strong>最小值</strong>：通常是物理内存大小的 <code>1/64</code>，但不超过 <code>1GB</code>，可通过 <code>-Xms</code> 参数修改。</li><li><strong>最大值</strong>：通常是物理内存大小的 <code>1/4</code>，但不超过 <code>32GB</code>，可通过 <code>-Xmx</code> 参数修改。</li></ul><p>我的电脑内存是 <code>32G</code>，那 <code>1/64</code> 和 <code>1/4</code> 就刚好是 <code>500MB</code> 和 <code>8G</code>，也就跟上图的中的数据对上了。</p><p>但问题又来了，<code>JVM</code> 只是为程序设定的初始的内存为 <code>500MB</code>，并不代表程序一开始就会全部用到，图中的信息显示内存占用了 <code>50MB</code>，但这个数据显然也并不合理。</p><h4 id="2-对象大小"><a href="#2-对象大小" class="headerlink" title="2. 对象大小"></a>2. 对象大小</h4><p>那是由于程序中存在大对象导致的吗？直觉告诉我也不太可能，但还是通过证据说话。</p><p>程序中涉及到数据对象的主要在于存储执行端口进程查询后返回的集合对象，那就先测一下这个对象到底能有多大？</p><p>这里同样推荐一个工具库 <code>JOL</code>，同样是有 <code>JDK</code> 原班人马开发，可以便捷的查看一个对象的内存占用。</p><p>使用方式也十分简单，在 <code>Maven</code> 的 <code>pom.xml</code> 文件中引入插入依赖：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.openjdk.jol<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jol-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>引入依赖后即可直接调用 GraphLayout 类打印对象的占用信息，如下述定义了一个 1024 的字节数组并打印其占用信息：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        String usage <span class="token operator">=</span> GraphLayout<span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFootprint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>usage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序后可以看到下图内容，其中 <code>1040</code> 即 <code>data</code> 对象的内存占用大小，单位为字节。你可能会疑惑为什么不是 <code>1024</code> 而是 <code>1040</code>，那是因为 <code>1024</code> 是真正的数据内容大小，但 <code>data</code> 还包含一些基础的对象属性等信息。<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/4.png"></p><p>在程序里所涉及的两个数据对象分别为如下，同样通过 <code>JOL</code> 打印输出内存占用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProcessTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// [进程名与内存占用]</span>        List<span class="token operator">&lt;</span>ServiceDetail<span class="token operator">></span> serviceDetail <span class="token operator">=</span> ProcessUtils<span class="token punctuation">.</span><span class="token function">getServiceDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object count1 <span class="token operator">=</span> GraphLayout<span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>serviceDetail<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFootprint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Count-1: "</span> <span class="token operator">+</span> count1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// [进程端口等信息]</span>        List<span class="token operator">&lt;</span>ProcessDetail<span class="token operator">></span> taskDetail <span class="token operator">=</span> ProcessUtils<span class="token punctuation">.</span><span class="token function">getTaskDetail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object count2 <span class="token operator">=</span> GraphLayout<span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>taskDetail<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFootprint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Count-2: "</span> <span class="token operator">+</span> count2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行程序可以看到打印的结果分别为 <code>59760</code> 与 <code>131280</code> 字节，也就是 <code>0.05MB</code> 与 <code>0.12MB</code> 左右，加起来甚至不到 <code>1MB</code>，也跟我之前的直觉相符，内存占用显然也不是在这。<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/5.png"></p><h4 id="3-内存分析"><a href="#3-内存分析" class="headerlink" title="3. 内存分析"></a>3. 内存分析</h4><p>既然看不出个所以然来，那就直接看下程序的内存堆信息这个百来兆到底存了个啥玩意。</p><p>在之前博客中已经分享过通过 <code>jmap</code> 可以查看程序的内存快照信息，可以快速回顾下：<a href="https://great-jin.github.io/java/jvm/optimize/">JVM参数调优记录</a>。在命令行执行 <code>jmap -heap &lt;pid&gt;</code> 可以得到下图结果：<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/6.png"></p><p>让我们拆开进行分析，在第一块信息中展示了程序的内存堆基本信息，其中包含以往介绍过的最大内存 <code>(MaxHeapSize)</code>、元空间 <code>(MetaspaceSize)</code> 以及指针压缩空间 <code>(CompressedClassSpaceSize)</code> 等等。</p><p>你可能会疑惑 <code>NewSize</code> 与 <code>OldSize</code> 这两又是啥东西？在之前介绍 <code>JVM</code> 的文章中有提到过，<code>Java 8</code> 默认使用 <code>Parallel</code> 垃圾收集器，而其又是基于标记复制模式，更具体的即其是使用 <code>Appeal</code> 模式执行内存回收。简单的讲就是将堆内存拆分为了两个部分，青年代及老年代，二者的比例为 <code>1:2</code>，感兴趣的可以回去看下之前的文章：<a href="https://great-jin.github.io/java/jvm/gc/">Java JVM虚拟机详解</a>。</p><p>而之前提到了 <code>JVM</code> 为程序默认分配的初始堆内存大小为 <code>500MB</code>，根据 <code>Appeal</code> 方式的分配比例则青年代及老年代的内存分配大致为：<code>170MB</code> 与 <code>340MB</code>，正好对应了图中的 <code>NewSize</code> 与 <code>OldSize</code>。</p><p>上图中的第二及第三部分，则对应这 <code>Appeal</code> 方式对于堆内存的具体分配，配置逻辑参考下图：<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/8.png"></p><p>观察图中的数据可以看到对象基本都处于青年代的 <code>Eden</code> 分区，大小为 <code>39MB</code>，而对于青年代的另两个分区 <code>From Space</code> 与 <code>To Space</code> 占用率均为 <code>0</code>，同时老年代也仅有 <code>3MB</code> 左右的对象内存占用。</p><p>这也看出一个问题，有大量的对象堆积于青年代没有被垃圾回收及时清理，根据之前的 <code>JOL</code> 验证结果，显然程序中涉及了其它对象。<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/9.png"></p><p>那既然在刚才 <code>JOL</code> 排查中可以看到数据对象的内存占用并不大，那青年代中的几十兆内存又是被什么对象占用呢？通过 <code>jmap -histo &lt;pid&gt;</code> 命令，则可以看到进程对象数据量与内存占用。</p><p>返回结果的各列描述信息如下：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">列名</td>        <th style="text-align: center;">描述</td>    </tr>    <tr>        <td style="text-align: center;">num</td>        <td style="text-align: center;">序号，根据内存占用倒排。</td>    </tr>    <tr>        <td style="text-align: center;">#instances</td>        <td style="text-align: center;">实例对象数量。</td>    </tr>    <tr>        <td style="text-align: center;">#bytes</td>        <td style="text-align: center;">所有实例对象所占的内存。</td>    </tr>    <tr>        <td style="text-align: center;">class name</td>        <td style="text-align: center;">实例对象对应的类名。</td>    </tr></table><p>执行后在下图可以看到，其中内存占用最大的前三项为 <code>[I</code>，<code>[B</code> 与 <code>[C</code>，分别代表 <code>int[]</code>，<code>byte[]</code> 与 <code>char[]</code>，其中 <code>int</code> 数据占用最多达到近 <code>30MB</code>。<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/10.png"></p><h4 id="4-参数调优"><a href="#4-参数调优" class="headerlink" title="4. 参数调优"></a>4. 参数调优</h4><p>经过一顿猛如虎的操作，一看结果还是没能定位到根本原因。</p><p>我们就换个思路来看，以内存占用为切入点，既然青年代存留大量的对象实例没能被垃圾回收，那我就逼你执行触发回收动作。</p><p>最简单粗暴，启动程序时直接将 <code>JVM</code> 虚拟机内存限制到 <code>50MB</code> 先看下效果，在启动时添加下述参数：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 设置 JVM 堆内存最小值为 50m</span>-Xms50m<span class="token comment" spellcheck="true"># 设置 JVM 堆内存最大值为 50m</span>-Xmx50m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动程序后再次通过 <code>jmap</code> 查看内存布局情况，可以看到此时青年代的 <code>From Space</code> 大小为 <code>2MB</code> 且处于满状态，老年代的占用比例也有所提升，这说明 <code>Young GC</code> 的次数相较于上次也是有所提升。<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/11.png"></p><p>显然上述的配置是有所效果的，我们目的是以一个合理的频次触发 <code>Young GC</code> 以回收内存，同时降低 <code>Full GC</code> 的次数，那如何验证效果呢？</p><p>我们可以同 <code>jstat -gcutil</code> 命令打印进程 <code>GC</code> 的相关信息，以下述为例每间隔 <code>5s</code> 执行一次打印输出。<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/12.png"></p><p>在上图可以看到最开始进程执行过的 <code>YGC</code> 次数为 <code>8</code>，此时在程序页面选中查询模拟操作可以看到 <code>YGC</code> 的次数在逐次增加，但 <code>FGC</code> 还是保持在 <code>0</code>，而程序只要不频繁的触及 <code>FGC</code>，都是在我们的可接收范围之内。</p><p>那如何判断堆内存的设置是否合理呢？很简单，就是一个个试，将上面的参数设置为 <code>30MB</code> 后我们再以同样的方式进行观察。</p><p>将 <code>GC</code> 活动日志打印调整为 <code>1s</code> 并在程序随机选择查询模拟操作，得到下述结果：<br><img src="/album/loading.gif" data-original="/album/article/java/windcess/13.png"></p><p>此时我们再看一眼堆内存的分布，重复几次可以看到随着 <code>YGC</code> 的执行，老年代的占用比例维持在 <code>30%</code> 左右，不至于太低也不至于太高从而触发 <code>FGC</code>。</p><p>当然，你可以重复上述步骤直至试了一个你觉得最佳的临界点，这里我就不啰嗦展开了。</p><p>至此，整个问题的排查也告一段落了，终于又可以安心的网上冲浪了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;事情是这样的，在不久之前我不是分享了一篇文章说我写了端口检测关闭的 &lt;code&gt;GUI&lt;/code&gt; 工具，如果你还没看过可以去瞧一眼：&lt;a href=&quot;https://great-jin.github.io/windows/software/process/&quot;&gt;我写了一个</summary>
      
    
    
    
    <category term="JVM虚拟机" scheme="https://budai.pages.dev/categories/JVM%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
    <category term="JAVA" scheme="https://budai.pages.dev/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Exe4j 软件使用教程</title>
    <link href="https://budai.pages.dev/build/exe4j/"/>
    <id>https://budai.pages.dev/build/exe4j/</id>
    <published>2024-08-03T16:00:00.000Z</published>
    <updated>2025-05-11T12:39:12.805Z</updated>
    
    <content type="html"><![CDATA[<p><code>Exe4j</code> 是一款能够快速实现将 <code>Jar</code> 文件打包为 <code>Windows</code> 下可执行的 <code>exe</code> 程序，省去一系列非必要麻烦。</p><p>在开始之前先下载对应的工具，其提供了解压即用的便捷版本，<a href="https://www.ej-technologies.com/download/exe4j/files">官网直达</a>。</p><h4 id="1-基本配置"><a href="#1-基本配置" class="headerlink" title="1. 基本配置"></a>1. 基本配置</h4><p>下载完成后解压文件并启动，打开后展示下图内容，选择下一步。<br><img src="/album/loading.gif" data-original="/album/article/win/exe4j/1.png"></p><p>选择 <code>JAR</code> 模式执行文件打包，完成后选择下一步。<br><img src="/album/loading.gif" data-original="/album/article/win/exe4j/2.png"></p><p>输入最后的程序名以及文件输出路径，完成后选择下一步。<br><img src="/album/loading.gif" data-original="/album/article/win/exe4j/3.png"></p><p>输入文件执行名称，可与上一步一致，完成后选择下一步。<br><img src="/album/loading.gif" data-original="/album/article/win/exe4j/4.png"></p><h4 id="2-文件配置"><a href="#2-文件配置" class="headerlink" title="2. 文件配置"></a>2. 文件配置</h4><p>按下图指示选择需要打包为 <code>exe</code> 的 <code>Jar</code> 运行文件。<br><img src="/album/loading.gif" data-original="/album/article/win/exe4j/5.png"><br><img src="/album/loading.gif" data-original="/album/article/win/exe4j/6.png"></p><p>选择 <code>Jar</code> 文件后还需要指定 <code>Jar</code> 包的主类，完成后选择下一步。<br><img src="/album/loading.gif" data-original="/album/article/win/exe4j/7.png"></p><p>在此页面配置程序所需的 <code>JDK</code> 版本最低以及最高要求，完成后选择下一步。<br><img src="/album/loading.gif" data-original="/album/article/win/exe4j/8.png"></p><h4 id="3-程序打包"><a href="#3-程序打包" class="headerlink" title="3. 程序打包"></a>3. 程序打包</h4><p>完成上述配置后一路选择下一步到最后提示完成即可。<br><img src="/album/loading.gif" data-original="/album/article/win/exe4j/9.png"><br><img src="/album/loading.gif" data-original="/album/article/win/exe4j/10.png"></p><p>最后提示下图信息即代表程序已经打包成功了。<br><img src="/album/loading.gif" data-original="/album/article/win/exe4j/11.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;Exe4j&lt;/code&gt; 是一款能够快速实现将 &lt;code&gt;Jar&lt;/code&gt; 文件打包为 &lt;code&gt;Windows&lt;/code&gt; 下可执行的 &lt;code&gt;exe&lt;/code&gt; 程序，省去一系列非必要麻烦。&lt;/p&gt;
&lt;p&gt;在开始之前先下载对应的工具，其提供了</summary>
      
    
    
    
    <category term="编译构建" scheme="https://budai.pages.dev/categories/%E7%BC%96%E8%AF%91%E6%9E%84%E5%BB%BA/"/>
    
    
    <category term="Windows" scheme="https://budai.pages.dev/tags/Windows/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>布袋青年</title>
  
  <subtitle>烽火戏诸诸诸侯</subtitle>
  <link href="https://great-jin.github.io/atom.xml" rel="self"/>
  
  <link href="https://great-jin.github.io/"/>
  <updated>2024-01-09T00:29:54.814Z</updated>
  <id>https://great-jin.github.io/</id>
  
  <author>
    <name>烽火戏诸诸诸侯</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue构建部署教程</title>
    <link href="https://great-jin.github.io/vue/deploy/"/>
    <id>https://great-jin.github.io/vue/deploy/</id>
    <published>2023-12-29T16:00:00.000Z</published>
    <updated>2024-01-09T00:29:54.814Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、项目配置"><a href="#一、项目配置" class="headerlink" title="一、项目配置"></a>一、项目配置</h3><h4 id="1-路由变更"><a href="#1-路由变更" class="headerlink" title="1. 路由变更"></a>1. 路由变更</h4><p>修改前端项目的路由模式为 <code>Hash</code>，文件在 <code>src/router/index.js</code>，下述是 <code>Vue3</code> 的配置:</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>createRouter<span class="token punctuation">,</span> createWebHashHistory<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">const</span> routes <span class="token operator">=</span> pathArray<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 设置模式为 Hash</span>    history<span class="token punctuation">:</span> <span class="token function">createWebHashHistory</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>BASE_URL<span class="token punctuation">)</span><span class="token punctuation">,</span>    routes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-服务配置"><a href="#2-服务配置" class="headerlink" title="2. 服务配置"></a>2. 服务配置</h4><p>修改项目根目录下的 <code>vue.config.js</code> 文件，注意将其中的 <code>192.168.0.100</code> 替换为你自己的服务器 <code>IP</code>。</p><p>其中 <code>8080</code> 是前端的访问端口，<code>9090</code> 为后端服务端口，<code>/daily-word</code> 为前端接口前缀，<code>/dailyWord</code> 为后端配置的 <code>servlet:context-path</code>。</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    open<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// frontend server host and port</span>    host<span class="token punctuation">:</span> <span class="token string">"192.168.0.100"</span><span class="token punctuation">,</span>    port<span class="token punctuation">:</span> <span class="token string">"8080"</span><span class="token punctuation">,</span>    https<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"/daily-word"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// backend server url</span>        target<span class="token punctuation">:</span> <span class="token string">"http://192.168.0.100:9090/"</span><span class="token punctuation">,</span>        ws<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        changOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// Rewrite path prefix to backend "servlet:context-path"</span>          <span class="token string">"/daily-word"</span><span class="token punctuation">:</span> <span class="token string">"/dailyWord"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-应用打包"><a href="#3-应用打包" class="headerlink" title="3. 应用打包"></a>3. 应用打包</h4><p>在前端工程指定 <code>build</code> 命令完成后将会在项目根目录生成 <code>dist</code> 目录，其则为打包后的文件，将其上传到服务器的你期望的目录。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> run build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="二、后端配置"><a href="#二、后端配置" class="headerlink" title="二、后端配置"></a>二、后端配置</h3><h4 id="1-跨域处理"><a href="#1-跨域处理" class="headerlink" title="1. 跨域处理"></a>1. 跨域处理</h4><p>为了部署之后前端接口请求能正常访问后端服务，后端需要设置跨域白名单。</p><p>在 <code>Spring</code> 工程中新建类并实现 <code>WebMvcConfigurer</code> 接口类定义跨域规则，这里为了方便我设置放行所有请求和地址，可根据需求进行调整。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${auth.host.cors}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String hosts<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span>CorsRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> crosHost <span class="token operator">=</span> hosts<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置允许跨域的路径</span>        registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 设置允许跨域请求的域名</span>                <span class="token punctuation">.</span><span class="token function">allowedOriginPatterns</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 是否允许cookie</span>                <span class="token punctuation">.</span><span class="token function">allowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 设置允许的请求方式</span>                <span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"DELETE"</span><span class="token punctuation">,</span> <span class="token string">"PUT"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 设置允许的header属性</span>                <span class="token punctuation">.</span><span class="token function">allowedHeaders</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 跨域允许时间</span>                <span class="token punctuation">.</span><span class="token function">maxAge</span><span class="token punctuation">(</span>TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、服务部署"><a href="#三、服务部署" class="headerlink" title="三、服务部署"></a>三、服务部署</h3><h4 id="1-Nginx代理"><a href="#1-Nginx代理" class="headerlink" title="1. Nginx代理"></a>1. Nginx代理</h4><p>上述打包完成后的文件为静态资源，因此这里选择通过 <code>Nginx</code> 实现页面的访问，具体的 <code>Nginx</code> 部署教程之前的文章已经详细介绍过，这里不再重复详细展开，链接直达：<a href="https://great-jin.github.io/linux/nginx/">Nginx教程</a>。</p><h4 id="2-请求转发"><a href="#2-请求转发" class="headerlink" title="2. 请求转发"></a>2. 请求转发</h4><p>由于 <code>Nginx</code> 静态资源不支持 <code>Post</code> 接口请求，因此需要将请求进行转发。</p><pre class="line-numbers language-conf"><code class="language-conf">location / {    #root   html;    #index  index.html index.htm;    try_files $uri $uri/ /index.html;    error_page 405 =200  $request_uri;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-完整配置"><a href="#3-完整配置" class="headerlink" title="3. 完整配置"></a>3. 完整配置</h4><p>完成的 <code>Nginx</code> 配置文件如下，其中 <code>8080</code> 为页面访问地址，需要和第一步中配置的一致，<code>root</code> 配置打包上传的 <code>dist</code> 目录路径。</p><p>注意将其中的 <code>192.168.0.100</code> 替换为你自己的服务器 <code>IP</code>。</p><pre class="line-numbers language-conf"><code class="language-conf">server {    listen       8080;    server_name  localhost;    root         /home/budai/dailyword/dist;    location / {        #root   html;        #index  index.html index.htm;        try_files $uri $uri/ /index.html;        error_page 405 =200  $request_uri;    }    location ^~ /daily-word {        proxy_pass http://192.168.0.100:9090/dailyWord;    }    location @405 {        proxy_set_header Host $host;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        # ip为后端服务地址        proxy_pass http://192.168.0.100:9090$request_uri;    }    error_page   500 502 503 504  /50x.html;    location = /50x.html {        root   html;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、项目配置&quot;&gt;&lt;a href=&quot;#一、项目配置&quot; class=&quot;headerlink&quot; title=&quot;一、项目配置&quot;&gt;&lt;/a&gt;一、项目配置&lt;/h3&gt;&lt;h4 id=&quot;1-路由变更&quot;&gt;&lt;a href=&quot;#1-路由变更&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="服务部署" scheme="https://great-jin.github.io/categories/%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2/"/>
    
    
    <category term="CentOS" scheme="https://great-jin.github.io/tags/CentOS/"/>
    
    <category term="Vue" scheme="https://great-jin.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Websocket入门教程</title>
    <link href="https://great-jin.github.io/java/spring/tool/websocket/"/>
    <id>https://great-jin.github.io/java/spring/tool/websocket/</id>
    <published>2023-12-29T16:00:00.000Z</published>
    <updated>2024-01-09T00:29:54.813Z</updated>
    
    <content type="html"><![CDATA[<p>在网络通讯领域，我们最熟悉的通讯协议即 <code>HTTP</code>，其在 <code>TCP</code> 的基础上进一步扩展使之更为的简单易用。而 WebSocket 作为一种通讯方式在某些应用场景下也是一种不错的选择。</p><p><code>WebSocket</code> 是一种在单个 <code>TCP</code> 连接上进行全双工通信的通信协议，它提供了一个持久的连接（即长链接），允许客户端和服务器之间进行实时、双向的数据传输。<code>WebSocket</code> 的出现解决了传统的 <code>HTTP</code> 协议的一些限制，特别是对于需要频繁更新的实时应用程序（如聊天应用、在线游戏等）而言，<code>WebSocket</code> 提供了更低的延迟和更高的效率。</p><p><code>Websocket</code> 一个经典应用场景即消息的主动推送，即由后端向主动推送讯息，在通知与聊天场景中应用广泛。本文即着重介绍如何在前后端分离项目中实现后端的消息主动推送。</p><h3 id="一、后端配置"><a href="#一、后端配置" class="headerlink" title="一、后端配置"></a>一、后端配置</h3><h4 id="1-依赖导入"><a href="#1-依赖导入" class="headerlink" title="1. 依赖导入"></a>1. 依赖导入</h4><p>老规矩，在后端的 Spring 项目工程中导入对应的依赖，内容如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-websocket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-配置管理"><a href="#2-配置管理" class="headerlink" title="2. 配置管理"></a>2. 配置管理</h4><p>在项目中注入 <code>WebSocket Bean</code> 对象，代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>server<span class="token punctuation">.</span>standard<span class="token punctuation">.</span>ServerEndpointExporter<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServerEndpointExporter <span class="token function">serverEndpointExporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServerEndpointExporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-服务启动"><a href="#3-服务启动" class="headerlink" title="3. 服务启动"></a>3. 服务启动</h4><p>新建 <code>WebSocketServer</code> 类用于管理请求的连接与关闭，当接收到新的请求时存入缓存容器 <code>websocketMap</code>，同时计数器 <code>onlineCount</code> 自增用于记录当前的连接数。</p><p>为了区分不同的连接这里通过请求参数的第一个值作为唯一标识符，即请求地址格式为：<code>ws://$&#123;host&#125;:$&#123;port&#125;/websocket?userId=1</code>，从而使后续能够精准的推送消息给指定连接用户。</p><p>其中 <code>@ServerEndpoint</code> 注解可以理解为 <code>HTTP</code> 接口中 <code>@RequstMapping</code> 与 <code>@RestController</code> 的复合体， <code>onMessage()</code> 方法为首次连接时返回值，用于响应以便知晓是否连接成功。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ServerEndpoint</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/websocket"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketServer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> Logger log <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>WebSocketServer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 当前在线连接数     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> AtomicInteger onlineCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 存放客户端对应的 WebSocket 对象     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> WebSocketServer<span class="token operator">></span> websocketMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 会话标识     */</span>    <span class="token keyword">private</span> String flag<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 与某个客户端的连接会话，需要通过它来给客户端发送数据     */</span>    <span class="token keyword">private</span> Session session<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 连接建立成功调用的方法     */</span>    <span class="token annotation punctuation">@OnOpen</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onOpen</span><span class="token punctuation">(</span>Session session<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 添加会话至容器</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>session <span class="token operator">=</span> session<span class="token punctuation">;</span>        String queryString <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        flag <span class="token operator">=</span> queryString<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        websocketMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 计数器自增</span>        onlineCount<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Receive new session, current connected number: "</span> <span class="token operator">+</span> <span class="token function">getOnlineCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">"You have successfully connected."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Websocket IO exception, stack tree: "</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 连接关闭调用的方法     */</span>    <span class="token annotation punctuation">@OnClose</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 从容器中删除会话</span>        websocketMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 计数器自减</span>        onlineCount<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"New session close, current connected number: "</span> <span class="token operator">+</span> <span class="token function">getOnlineCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 收到客户端消息后调用的方法     *     * @param message 客户端发送过来的消息     */</span>    <span class="token annotation punctuation">@OnMessage</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span>String message<span class="token punctuation">,</span> Session session<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Receive from client, message: {}"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 群发消息</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>WebSocketServer item <span class="token operator">:</span> websocketMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                item<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Session onMessage, stack tree: "</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@OnError</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Session session<span class="token punctuation">,</span> Throwable error<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Session onError, stack tree: "</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">getBasicRemote</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sendText</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOnlineCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> onlineCount<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-消息推送"><a href="#4-消息推送" class="headerlink" title="4. 消息推送"></a>4. 消息推送</h4><p>当连接建立之后即可向连接主动推送数据消息，这里定义了两个方法 <code>send()</code> 与 <code>batchSend()</code> 用于单点推送与消息群发，其仍定义于上述的 <code>WebSocketServer</code> 类中，限于篇幅故分点介绍。</p><p>其中单点推送方法 <code>send()</code> 第一个参数 <code>key</code> 即建立连接时传入的唯一标识符，<code>batchSend()</code> 则会推送消息至所有当前的连接的用户，注意其中输入的内容为字符串，可使用 <code>Jackson</code> 等类库序列化为 <code>Json</code> 字符串后传输。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 群发自定义消息 */</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">send</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>websocketMap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Currently didn't have valid session."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        WebSocketServer server <span class="token operator">=</span> websocketMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"The session of [{}] not existed."</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        server<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Session send() error, stack tree: "</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> success<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">batchSend</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>websocketMap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Currently didn't have valid session."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>WebSocketServer item <span class="token operator">:</span> websocketMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            item<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Session batchSend() error, stack tree: "</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> success<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、前端应用"><a href="#二、前端应用" class="headerlink" title="二、前端应用"></a>二、前端应用</h3><h4 id="1-依赖安装"><a href="#1-依赖安装" class="headerlink" title="1. 依赖安装"></a>1. 依赖安装</h4><p>在 <code>Vue</code> 前端项目中同样需要安装 <code>WebSocket</code> 依赖，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> vue-websocket<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-应用监听"><a href="#2-应用监听" class="headerlink" title="2. 应用监听"></a>2. 应用监听</h4><p>完成依赖安装后即可在项目中建立依赖，通过 <code>new WebSocket(url)</code> 即可相对较为简单。 </p><p>连接建立之后通过 <code>addEventListener</code> 回调函数监听不同的连接事件，代码如下不详细介绍。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> host <span class="token operator">=</span> <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>    <span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">9090</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token string">`ws://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>host<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/websocket?userId=1`</span></span>    <span class="token keyword">const</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加WebSocket事件监听器</span>    socket<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'WebSocket 连接已打开'</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    socket<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> data <span class="token operator">=</span> event<span class="token punctuation">.</span>data      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'接受到后端信息: '</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">'接受到后端消息: '</span> <span class="token operator">+</span> data<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    socket<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'WebSocket 连接已关闭'</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    socket<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'WebSocket 错误'</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在网络通讯领域，我们最熟悉的通讯协议即 &lt;code&gt;HTTP&lt;/code&gt;，其在 &lt;code&gt;TCP&lt;/code&gt; 的基础上进一步扩展使之更为的简单易用。而 WebSocket 作为一种通讯方式在某些应用场景下也是一种不错的选择。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WebSocke</summary>
      
    
    
    
    <category term="Spring工具" scheme="https://great-jin.github.io/categories/Spring%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch基础概念</title>
    <link href="https://great-jin.github.io/db/es/basic/"/>
    <id>https://great-jin.github.io/db/es/basic/</id>
    <published>2023-12-15T16:00:00.000Z</published>
    <updated>2024-01-14T03:47:17.080Z</updated>
    
    <content type="html"><![CDATA[<p>在日常开发中，我们使用最多的数据应该就是关系型数据库如 <code>MySQL</code>, <code>Oracle</code> 等，其特性为表结构格式统一易于上手，但有一个缺点就是面对海量数据读写性能相对较差。</p><p>非关系型数据库中较为出名的就是 <code>Redis</code>, <code>Postgre</code>, <code>Mongo</code> 等，以 <code>Redis</code> 为例，其数据存储于内存之中，读写速度相对关系型有一个质的飞跃，但同时也带来了内存的损耗。</p><p><code>ElasticSearch</code> 是一款分布式存储数据库，在海量数据查询以及模糊查询时有着不错的性能，解决了 <code>MySQL</code> 等数据库性能瓶颈与 <code>Redis</code> 针对大数据量耗费资源的缺点。</p><h3 id="一、概念介绍"><a href="#一、概念介绍" class="headerlink" title="一、概念介绍"></a>一、概念介绍</h3><h4 id="1-索引"><a href="#1-索引" class="headerlink" title="1. 索引"></a>1. 索引</h4><p>在 <code>Elasticsearch</code> 中并没有库表的概念，取而代之的为索引 <code>(Indices)</code>，可以理解为传统数据库的 <code>Database</code>。</p><h4 id="2-类型"><a href="#2-类型" class="headerlink" title="2. 类型"></a>2. 类型</h4><p>在 <code>Elasticsearch 6.x</code> 中 <code>Types</code> 概念类似于数据库中的一张表，但随着版本更新，在最新的 <code>7.x</code> 版本中 <code>Types</code> 被逐渐废除，因此一个索引 <code>Indices</code> 下只允许存在一个 <code>Types</code>。</p><h4 id="3-文档"><a href="#3-文档" class="headerlink" title="3. 文档"></a>3. 文档</h4><p>在 <code>Elasticsearch</code> 中每条记录是以文档 <code>(Documents)</code> 的形式存在，相当于 <code>MySQL</code> 等数据表中的一条记录，每条文档都会自动为其分配一个唯一标识。</p><h4 id="4-字段"><a href="#4-字段" class="headerlink" title="4. 字段"></a>4. 字段</h4><p><code>Fields</code> 即为每条文档中的属性的类型，常用类型包含如下几类：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">类型</td>        <th style="text-align: center;">描述</td>    </tr>    <tr>        <td style="text-align: center;">text</td>        <td style="text-align: center;">当一个字段需要用于全文搜索(会被分词)则应该使用该类型。</td>    </tr>    <tr>        <td style="text-align: center;">keyword</td>        <td style="text-align: center;">当一个字段需要按照精确值进行过滤、排序、聚合等操作时则应该使用该类型。</td>    </tr>    <tr>        <td style="text-align: center;">date</td>        <td style="text-align: center;">时间类型，精度不包含时分秒。</td>    </tr>    <tr>        <td style="text-align: center;">boolean</td>        <td style="text-align: center;">布尔类型，即 true 与 false。</td>    </tr>    <tr>        <td style="text-align: center;">range</td>        <td style="text-align: center;">区间类型，取值范围如下：integer_range, long_range, float_range, double_range, date_range, ip_range </td>    </tr></table><h3 id="二、数据索引"><a href="#二、数据索引" class="headerlink" title="二、数据索引"></a>二、数据索引</h3><h4 id="1-索引创建"><a href="#1-索引创建" class="headerlink" title="1. 索引创建"></a>1. 索引创建</h4><p>通过 <code>PUT</code> 请求创建新索引，请求格式如下，其中 <code>settings</code> 参数非必填。</p><p><code>settings</code> 中 <code>number_of_shards</code> 用于执行数据的分片大小，类似于关系型的中的分区操作，以提高存储查询效率；<code>number_of_replicas</code> 用于指定副本大小，即集群状态多端副本保证数据的安全性以防止数据丢失或损坏。</p><pre class="line-numbers language-js"><code class="language-js">PUT http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index_name<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token string">"settings"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"number_of_shards"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        <span class="token string">"number_of_replicas"</span><span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-字段映射"><a href="#2-字段映射" class="headerlink" title="2. 字段映射"></a>2. 字段映射</h4><p>同理在创建索引时可通过 <code>mapping</code> 参数指定字段映射。</p><p>若不指定将会根据文档数据字段类型自动匹配，映射内容中的 <code>type</code> 参数上一点中的字段表格。</p><pre class="line-numbers language-js"><code class="language-js">PUT http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index_name<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token string">"settings"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"number_of_shards"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        <span class="token string">"number_of_replicas"</span><span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"mapping"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"_doc"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"properties"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"keyword"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"text"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-索引别名"><a href="#3-索引别名" class="headerlink" title="3. 索引别名"></a>3. 索引别名</h4><p><code>Elasticsearch</code> 索引别名是一个指向一个或多个索引的稳定引用名称。通过使用别名，可以将查询和索引维护从实际索引名称中分离出来，这为在切换索引版本、重建索引等操作时提供了更大的灵活性。</p><blockquote><p>使用索引别名的优点如下：</p></blockquote><ul><li><strong>日志切割</strong>：对于日志类型的索引，可以使用别名轻松地进行日志切割。</li><li><strong>切换版本</strong>：可以通过更改别名指向的实际索引，而不必更改应用程序中的查询代码。</li><li><strong>滚动升级</strong>：在进行索引版本升级时，可以创建新版本的索引，然后通过别名将查询指向新索引，实现滚动升级。</li></ul><h4 id="4-索引删除"><a href="#4-索引删除" class="headerlink" title="4. 索引删除"></a>4. 索引删除</h4><p>通过 DELETE 请求删除索引，删除索引会同步删除其对应下的数据，请求格式如下：</p><pre class="line-numbers language-js"><code class="language-js">DELETE http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index_name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="三、数据查询"><a href="#三、数据查询" class="headerlink" title="三、数据查询"></a>三、数据查询</h3><h4 id="1-查询得分"><a href="#1-查询得分" class="headerlink" title="1. 查询得分"></a>1. 查询得分</h4><p>在 <code>Elasticsearch</code> 中，每个文档的匹配程度可以通过一个称为 “分数”（<code>score</code>）的值来表示。分数反映了文档与查询条件的匹配程度，越匹配的文档得分越高。</p><p>当执行查询时，<code>Elasticsearch</code> 计算每个文档的得分，然后按照得分排序返回结果。这个得分是由查询条件中的每个子句（例如，匹配关键词的 <code>must</code> 子句）的相关性计算得出的。</p><p>对于 <code>bool</code> 查询中的 <code>must</code> 子句，其中的每个条件都会影响文档的得分。如果一个文档满足多个 <code>must</code> 子句的条件，那么它的得分会相应增加。这样，得分可以用来衡量文档与查询条件的匹配程度。</p><p>而对于 <code>filter</code> 子句，其中的条件也用于筛选文档，但它们不会影响文档的得分。<code>filter</code> 子句主要用于对文档进行精确匹配和过滤，而不涉及相关性计算。由于不计算得分，<code>filter</code> 子句的查询更轻量，对于一些不需要计算相关性的场景，这可以提高性能。</p><p>因此，当使用 <code>filter</code> 子句时，查询的主要目的是过滤文档，而不是影响查询结果的排序和相关性。这对于一些特定的过滤条件（如范围查询、精确匹配等）非常有用，因为它们可以更高效地执行，而无需计算和排序相关性得分。</p><h4 id="2-全量查询"><a href="#2-全量查询" class="headerlink" title="2. 全量查询"></a>2. 全量查询</h4><p>通过 <code>Get</code> 查询目标数据，效果等价于 <code>select * from &lt;table&gt;</code>。</p><p>默认查询仅返回十条数据，若查看多数据需分页进行，同时通过 <code>pretty=true</code> 可格式化返回的结果数据。</p><pre class="line-numbers language-js"><code class="language-js">GET http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index_name<span class="token operator">></span><span class="token operator">/</span>_searchGET http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index_name<span class="token operator">></span><span class="token operator">/</span>_search<span class="token operator">?</span>pretty<span class="token operator">=</span><span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-分页查询"><a href="#3-分页查询" class="headerlink" title="3. 分页查询"></a>3. 分页查询</h4><p>分页查询同理，在请求体内通过 <code>from</code> 与 <code>size</code> 指定分页参数，作用类似 <code>MySQL</code> 中的 <code>limit</code> 和 <code>offset</code>。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// paging query data</span>GET http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index_name<span class="token operator">></span><span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"match_all"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"from"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token string">"size"</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、条件查询"><a href="#四、条件查询" class="headerlink" title="四、条件查询"></a>四、条件查询</h3><h4 id="1-精准查询"><a href="#1-精准查询" class="headerlink" title="1. 精准查询"></a>1. 精准查询</h4><p>精准查询即与常见关系型中 <code>where</code> 条件中的 <code>=</code> 作用等价。</p><p>下述示例的作用效果即等价于 <code>select * from &lt;table&gt; where &lt;column_name&gt; = &lt;column_name&gt;</code>。</p><pre class="line-numbers language-js"><code class="language-js">GET http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index_name<span class="token operator">></span><span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"bool"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"must"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token string">"match_phrase"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"&lt;column_name>"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>              <span class="token string">"query"</span><span class="token punctuation">:</span> <span class="token string">"&lt;column_value>"</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-区间查询"><a href="#2-区间查询" class="headerlink" title="2. 区间查询"></a>2. 区间查询</h4><p>区间查询即与常见关系型中 <code>where</code> 条件中的 <code>in</code> 作用等价。</p><p>下述示例的作用效果即等价于 <code>select * from &lt;table&gt; where &lt;column_name&gt; in (1, 2, 3)</code>。</p><pre class="line-numbers language-js"><code class="language-js">GET http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index_name<span class="token operator">></span><span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"bool"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"must"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token string">"terms"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"&lt;column_name>"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>              <span class="token number">1</span><span class="token punctuation">,</span>              <span class="token number">2</span><span class="token punctuation">,</span>              <span class="token number">3</span>            <span class="token punctuation">]</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-范围查询"><a href="#3-范围查询" class="headerlink" title="3. 范围查询"></a>3. 范围查询</h4><p>范围查询即与常见关系型中 <code>where</code> 条件中的 <code>&gt;, &gt;=, &lt;, &lt;=</code> 作用等价。</p><p>其中不同的符号对应参考下表:</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">范围符</td>        <th style="text-align: center;">ES 关键字</td>    </tr>    <tr>        <td style="text-align: center;">></td>        <td style="text-align: center;">gt</td>    </tr>    <tr>        <td style="text-align: center;">>=</td>        <td style="text-align: center;">from</td>    </tr>    <tr>        <td style="text-align: center;"><</td>        <td style="text-align: center;">lt</td>    </tr>    <tr>        <td style="text-align: center;"><=</td>        <td style="text-align: center;">to</td>    </tr></table><p>下述示例的作用效果即等价于 <code>select * from &lt;table&gt; where &lt;column_name&gt; &gt;= 1</code>。</p><pre class="line-numbers language-js"><code class="language-js">GET http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index_name<span class="token operator">></span><span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"bool"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"must"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token string">"range"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"&lt;column_name>"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>              <span class="token string">"from"</span><span class="token punctuation">:</span> <span class="token string">"1"</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在日常开发中，我们使用最多的数据应该就是关系型数据库如 &lt;code&gt;MySQL&lt;/code&gt;, &lt;code&gt;Oracle&lt;/code&gt; 等，其特性为表结构格式统一易于上手，但有一个缺点就是面对海量数据读写性能相对较差。&lt;/p&gt;
&lt;p&gt;非关系型数据库中较为出名的就是 &lt;cod</summary>
      
    
    
    
    <category term="数据库" scheme="https://great-jin.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Elasticsearch" scheme="https://great-jin.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot IOC详解</title>
    <link href="https://great-jin.github.io/java/spring/ioc/"/>
    <id>https://great-jin.github.io/java/spring/ioc/</id>
    <published>2023-11-17T16:00:00.000Z</published>
    <updated>2023-12-08T11:34:01.655Z</updated>
    
    <content type="html"><![CDATA[<p><code>Spring IOC</code>（Inversion of Control，控制反转）容器是 <code>Spring</code> 框架的核心组件之一，用于管理和组织应用程序中的对象（<code>bean</code>），它负责创建、配置和管理这些对象，以实现对象之间的解耦和依赖注入。<br><img src="/album/loading.gif" data-original="/album/article/java/spring/ioc.png"></p><blockquote><p><code>IOC</code> 容器的主要功能包括：</p><ul><li><strong>实例化对象</strong>： <code>IOC</code> 容器负责实例化应用程序中定义的 <code>bean</code> 对象。它根据配置文件或注解信息创建对象的实例。</li><li><strong>管理生命周期</strong>： <code>IOC</code> 容器负责管理 <code>bean</code> 对象的生命周期，包括对象的创建、初始化和销毁。容器可以根据配置指定对象的初始化方法和销毁方法，确保对象在正确的时机被创建和销毁。</li><li><strong>依赖注入</strong>： <code>IOC</code> 容器实现了依赖注入（<code>DI</code>）机制，它通过自动将对象的依赖注入到相应的位置，消除了手动编写代码进行依赖关系的管理。</li><li><strong>解耦和松耦合</strong>： <code>IOC</code> 容器通过控制对象的创建和依赖注入，实现了对象之间的解耦。它使得对象的配置和使用可以独立于彼此进行修改，提高了代码的灵活性和可维护性。</li></ul></blockquote><h3 id="一、Bean装配"><a href="#一、Bean装配" class="headerlink" title="一、Bean装配"></a>一、Bean装配</h3><p><code>Spring</code> 提供了多个 <code>IOC</code> 容器实现，最常用的是基于 <code>XML</code> 配置的 <code>ApplicationContext</code>，此外还提供了 <code>Java</code> 配置类（如 <code>@Configuration、@Bean</code> 等）方式进行配置。</p><h4 id="1-装配方式"><a href="#1-装配方式" class="headerlink" title="1. 装配方式"></a>1. 装配方式</h4><blockquote><p><strong>(Ⅰ) XML方式装配</strong></p></blockquote><p>首先先回顾一下传统 <code>xml</code> 配置文件装配 <code>bean</code> 对象，在工程 <code>resources</code> 下新建 <code>spring-context.xml</code> 文件，文件内容如下。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">...</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.ibudai.bean.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Alex<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成后即可通过加载配置文件获取应用上下文 <code>ApplicationContext</code> 从而读取 <code>Bean</code> 实例。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"spring-context.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取 Bean</span>        User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"testBean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// User: {id=123, name=Alex}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>(Ⅱ) 注解方式装配</strong></p></blockquote><p>在 <code>Spring Boot</code> 可配合 <code>@Configuration</code> 与 <code>@Bean</code> 注解可达到同样效果。</p><p><strong>(1) @Configuration</strong></p><ul><li>作用效果等价于 <code>xml</code> 配置文件中的 <code>beans</code> 标签。</li><li>作用于 <code>Java</code> 类上， 用于配置 <code>Spring</code> 容器应用上下文。</li></ul><p><strong>(2) @Bean</strong></p><ul><li>作用于方法上，等价于 <code>xml</code> 配置文件中 <code>bean</code> 标签。</li><li>通过 <code>@Bean(name)</code> 指定 <code>bean</code> 名称，未指定时为方法名（首字母自动小写）。</li></ul><p><strong>(3) @Scope</strong></p><ul><li>通过 <code>@Scope</code> 定义 <code>bean</code> 作用域。</li><li>作用于方法上，与 <code>@Bean</code> 搭配使用。</li></ul><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">作用域</td>        <th style="text-align: center;">描述</td>    </tr>    <tr>        <td style="text-align: center;">singleton</td>        <td style="text-align: center;">默认值，在整个 IoC 容器中只存在一个共享的 bean 实例。</td>    </tr>    <tr>        <td style="text-align: center;">prototype</td>        <td style="text-align: center;">每次通过容器的 getBean() 方法获取 bean 时都会创建一个新的实例。</td>    </tr>    <tr>        <td style="text-align: center;">request</td>        <td style="text-align: center;">在一次 HTTP 请求中，该 bean 实例将保持活动状态。</td>    </tr>    <tr>        <td style="text-align: center;">session</td>        <td style="text-align: center;">在一个 HTTP Session 中，该 bean 实例将保持活动状态。</td>    </tr>    <tr>        <td style="text-align: center;">application</td>        <td style="text-align: center;">在 ServletContext 范围内，该 bean 实例将保持活动状态。</td>    </tr></table><p>下述为通过注解配置类的方式装配 <code>bean</code> 对象，最终实现效果等价于上述 <code>xml</code> 方式。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 开启配置</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"prototype"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">testBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Alex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>TestConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取 Bean</span>        User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"testBean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// User: {id=123, name=Alex}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-装配类型"><a href="#2-装配类型" class="headerlink" title="2. 装配类型"></a>2. 装配类型</h4><p><code>Bean</code> 的装配一共存在两种类型，分别为 <code>ByName</code> 与 <code>ByType</code> ，下面介绍二者的区别。</p><blockquote><p><strong>(Ⅰ) ByName（按名称注入）</strong></p></blockquote><ul><li>根据依赖的名称来查找与之匹配的 <code>bean</code> 对象进行注入。</li><li><code>ByName</code> 要求依赖的名称在容器中是唯一的或者能够通过自动装配策略(<code>@Qualifier</code>)解决。</li><li>通过名字查找与属性完全一致的 <code>bean</code> ，并将其与属性自动装配。 </li><li>若容器中找不到与依赖名称匹配的 <code>bean</code> 对象则会抛出异常；如果存在多个与依赖名称匹配的 <code>bean</code> 对象，会根据自动装配策略进行选择。</li></ul><blockquote><p><strong>(Ⅱ) ByType（按类型注入）</strong></p></blockquote><ul><li>根据依赖的类型(<code>class</code>)来查找与之匹配的 <code>bean</code> 对象进行注入。</li><li><code>ByType</code> 要求依赖的类型在容器中是唯一的或者明确指定了所需的 <code>bean</code> 对象。</li><li>通过类型查找与属性完全一致的 <code>bean</code> ，并将其与属性自动装配。 </li><li>如果存在多个该类型 <code>bean</code> 则会抛出异常，并指出不能使用 <code>byType</code> 方式进行自动装配；如果没有匹配的 <code>bean</code> 对象，会将依赖设置为 <code>null</code>。</li></ul><h4 id="3-注入方式"><a href="#3-注入方式" class="headerlink" title="3. 注入方式"></a>3. 注入方式</h4><p><code>Spring</code> 在装配 <code>bean</code> 的时提供了两种方式，但需要注意无论通过哪种方式其对应的对象需要在 <code>IOC</code> 容器中存在，否则需要加上属性  <code>required=false</code> 表示忽略当前要注入的  <code>bean</code> ，否则程序将无法正常运行。</p><ul><li><h5 id="Resource"><a href="#Resource" class="headerlink" title="@Resource"></a>@Resource</h5><p>  <code>@Resource</code> 是由 <code>J2EE</code> 本身提供的，注解默认通过 <code>byName</code>方式注入。</p><p>  当存在多个类型不同但名称相同的 <code>bean</code> 对象时此方式注入将会抛出异常。</p></li><li><h5 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h5><p>  <code>@Autowired</code> 是由 <code>Spring</code> 提供的，注解默认通过 <code>byType</code>方式注入。</p><p>  <code>@Autowired</code> 默认读取与声明实例变量同名的 <code>bean</code> 对象，当工程中同时包含多个实例时必须指明实例名否则将会异常报错，可以通过 <code>@Qualifier</code> 指定实例名。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建两个同类型实例</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"userService1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl1</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"userService2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl2</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService1<span class="token punctuation">;</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"userService2"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 声明非法，多个实例时必须指明 bean 名称</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="4-Bean获取"><a href="#4-Bean获取" class="headerlink" title="4. Bean获取"></a>4. Bean获取</h4><p>在上面介绍了 <code>bean</code> 的注入和装配， <code>Spring</code> 中同时也提供通过 <code>bean</code> 名称直接获取 <code>bean</code> 对象，通常搭配反射等特性使用，下面介绍两种的不同的 <code>bean</code> 对象获取方式。</p><blockquote><p><strong>(Ⅰ) 接口方式获取 Bean 实例</strong></p></blockquote><p>通过实现 <code>ApplicationContextAware</code> 接口从而获取应用上下文对象 <code>ApplicationContext</code> ，即可利用其实现 <code>bean</code> 对象获取。</p><p>下面是一个 <code>bean</code> 对象查询示例，注意类需要标注 <code>@Component</code> 注解。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanService</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ApplicationContext applicationContext<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取上下文对象     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span>ApplicationContext applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过名称获取 bean 对象     */</span>    <span class="token keyword">public</span> Object <span class="token function">getBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        <span class="token keyword">return</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>(Ⅱ) 注解方式获取 Bean 实例</strong></p></blockquote><p><code>Spring</code> 中同样提供了注解的方式获取应用上下文对象 <code>ApplicationContext</code>，无需上述那么复杂直接使用 <code>@Autowire</code> 注入即可，更推荐使用此类方式。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 通过装配获取上下文对象     */</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ApplicationContext applicationContext<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/**     * 通过名称获取 bean 对象     */</span>    <span class="token keyword">public</span> User <span class="token function">getBean</span><span class="token punctuation">(</span>String bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、定义注册"><a href="#二、定义注册" class="headerlink" title="二、定义注册"></a>二、定义注册</h3><h4 id="1-Bean导入"><a href="#1-Bean导入" class="headerlink" title="1. Bean导入"></a>1. Bean导入</h4><p>在 <code>Spring</code> 中除了 <code>@Bean</code> 注解还提供 <code>@Import</code> 注入 <code>bean</code> 对象，其使用方式与前者类似，默认注入的 <code>bean</code> 对象名为类的完整限定民。</p><p>如下示例中即注入了一个 <code>User</code> 对象，而 <code>User</code> 类的完整包路径为：<code>xyz.ibudai</code>，则对应的 <code>bean</code> 名称为：<code>xyz.ibudai.User</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImportConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Bean注册"><a href="#2-Bean注册" class="headerlink" title="2. Bean注册"></a>2. Bean注册</h4><p>默认 <code>@Import</code> 注入 <code>bean</code> 对象属性值都为空且对象名为类的完整限定名，若想要配置更复杂信息则需要配合 <code>ImportBeanDefinitionRegistrar</code> 使用。</p><p>在 <code>Spring Boot</code> 工程启动时则会执行 <code>ImportBeanDefinitionRegistrar</code> 实现类中的 <code>registerBeanDefinitions()</code>，顾名思义即执行 <code>bean</code> 对象的注入。其中方法的第一个参数 <code>clsMetaData</code> 为 <code>@Import</code> 注解所作用的类的元信息，第二参数为注册器。</p><p>如下示例即通过实现 <code>ImportBeanDefinitionRegistrar</code> 接口手动向 <code>IOC</code> 容器中注入了一个 <code>User</code> 的 <code>bean</code> 对象。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRegisterFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * @param clsMetaData annotation metadata of the importing class     * @param registry    current bean definition registry     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>AnnotationMetadata clsMetaData<span class="token punctuation">,</span> BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span>User<span class="token operator">></span> aClass <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>aClass<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// If not contain then register it</span>            BeanDefinition beanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>aClass<span class="token punctuation">)</span><span class="token punctuation">;</span>            registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>aClass<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-Bean定义"><a href="#3-Bean定义" class="headerlink" title="3. Bean定义"></a>3. Bean定义</h4><p>在 <code>IOC</code> 容器中 <code>Bean</code> 对象存在两个十分重要的定义，即 <code>BeanDefinitionHolder</code> 和 <code>BeanDefinition</code>，二者都是关于 <code>Bean</code> 元信息的类，它们的主要作用是描述和持有 <code>Bean</code> 的定义信息。</p><blockquote><p><strong>(Ⅰ) BeanDefinition</strong></p></blockquote><p>在 <code>Spring</code> 中每个注册到 <code>IOC</code> 容器中的 <code>Bean</code> 都有一个关联的 <code>BeanDefinition</code> 对象，该对象描述了如何创建和配置该 <code>Bean</code>。其定义了 <code>Bean</code> 的属性、依赖关系、作用域（<code>scope</code>）、初始化方法、销毁方法等配置信息。</p><p><code>BeanDefinition</code> 中包含的主要方法即描述参考下标：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">getBeanClassName()</td>        <td style="text-align: center;">获取 Bean 的类名。</td>    </tr>    <tr>        <td style="text-align: center;">getScope()</td>        <td style="text-align: center;">获取 Bean 的作用域。</td>    </tr>    <tr>        <td style="text-align: center;">isSingleton()</td>        <td style="text-align: center;">判断是否是单例。</td>    </tr>    <tr>        <td style="text-align: center;">isPrototype()</td>        <td style="text-align: center;">判断是否是原型。</td>    </tr>    <tr>        <td style="text-align: center;">getConstructorArgumentValues()</td>        <td style="text-align: center;">获取构造函数参数值。</td>    </tr>    <tr>        <td style="text-align: center;">getPropertyValues()</td>        <td style="text-align: center;">获取属性值。</td>    </tr>    <tr>        <td style="text-align: center;">getInitMethodName()</td>        <td style="text-align: center;">获取初始化方法名。</td>    </tr>    <tr>        <td style="text-align: center;">getDestroyMethodName()</td>        <td style="text-align: center;">获取销毁方法名。</td>    </tr></table><blockquote><p><strong>(Ⅱ) BeanDefinition</strong></p></blockquote><p><code>BeanDefinitionHolder</code> 是对 <code>BeanDefinition</code> 的包装，同时持有一个 <code>String</code> 类型的 <code>beanName</code>，通常在 <code>Spring</code> 容器中扫描、注册或管理 <code>Bean</code> 时使用。</p><p>在 <code>Spring</code> 中，通常在注册 <code>Bean</code> 定义时会使用 <code>BeanDefinitionHolder</code>，将 <code>Bean</code> 的定义信息和名称一并封装，然后一起注册到容器中，从而更方便管理和操作 <code>Bean</code>。</p><h4 id="4-Bean扫描"><a href="#4-Bean扫描" class="headerlink" title="4. Bean扫描"></a>4. Bean扫描</h4><p>在 <code>Spring</code> 中通过 <code>ClassPathBeanDefinitionScanner</code> 实现 <code>bean</code> 的扫描注册，即通过扫描目标包将 <code>bean</code> 注册为上述的 <code>BeanDefinitionHolder</code> 对象从而实现管理。</p><p><code>ClassPathBeanDefinitionScanner</code> 中涉及了两个相对重要的方法，其描述如下：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">registerTypeFilter()</td>        <td style="text-align: center;">添加扫描过滤器，如只扫描某一部分特定类。</td>    </tr>    <tr>        <td style="text-align: center;">doScan()</td>        <td style="text-align: center;">根据过滤器扫描指定包下的类。</td>    </tr></table><p>如下示例中即定义了只扫描类上包含 <code>BeanItem</code> 注解的类，其中 <code>proxy()</code> 方法为通过 <code>FactoryBean</code> 自定义自定义构建 <code>BeanDefinitionHolder</code> 对象。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanScannerFactory</span> <span class="token keyword">extends</span> <span class="token class-name">ClassPathBeanDefinitionScanner</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> enableProxy<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BeanScannerFactory</span><span class="token punctuation">(</span>BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">enableProxy</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> enableProxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>enableProxy <span class="token operator">=</span> enableProxy<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Register the annotation that want scan     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerTypeFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Only scan the class the Annotation of "BeanItem"</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">addIncludeFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnnotationTypeFilter</span><span class="token punctuation">(</span>BeanItem<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Scan the specify package path to find the bean.     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> <span class="token function">doScan</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> basePackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> beanDefinitionHolders <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doScan</span><span class="token punctuation">(</span>basePackages<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>enableProxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>            beanDefinitionHolders <span class="token operator">=</span> <span class="token function">proxy</span><span class="token punctuation">(</span>beanDefinitionHolders<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> beanDefinitionHolders<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Convert bean set to proxy bean set.     */</span>    <span class="token keyword">protected</span> Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> <span class="token function">proxy</span><span class="token punctuation">(</span>Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> beanDefinitionHolders<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> holderSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>beanDefinitionHolders<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanDefinitionHolder holder <span class="token operator">:</span> beanDefinitionHolders<span class="token punctuation">)</span> <span class="token punctuation">{</span>            GenericBeanDefinition beanDefinition <span class="token operator">=</span> <span class="token punctuation">(</span>GenericBeanDefinition<span class="token punctuation">)</span> holder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String beanName <span class="token operator">=</span> holder<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String beanClassName <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>beanClassName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> aClass<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                aClass <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>beanClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Transfer the parameter.</span>            <span class="token comment" spellcheck="true">// getConstructorArgumentValues(): 获取 beanDefinition 中构造函数参数值的方法</span>            <span class="token comment" spellcheck="true">// addGenericArgumentValue: 用于向 Bean 的构造函数参数中添加通用（泛型）参数值的方法。</span>            beanDefinition<span class="token punctuation">.</span><span class="token function">getConstructorArgumentValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addGenericArgumentValue</span><span class="token punctuation">(</span>aClass<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Set "BeanFactory" to use "dynamic proxy" instance the bean object</span>            beanDefinition<span class="token punctuation">.</span><span class="token function">setBeanClass</span><span class="token punctuation">(</span>MyFactoryBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            holderSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> holderSet<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而实现了 <code>bean</code> 的扫描即可搭配上一点中提到 <code>ImportBeanDefinitionRegistrar</code> 实现 <code>bean</code> 对象的自定义注册。</p><p>如下示例中利用自定义 <code>@BeanScan</code> 注解获取扫描路径通过 <code>BeanScannerFactory</code> 实现 <code>bean</code> 的扫描生成 <code>BeanDefinitionHolder</code> 对象，并通过 <code>registry</code> 实现自定义对象的注册。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanRegisterFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * @param clsMetaData annotation metadata of the importing class     * @param registry    current bean definition registry     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>AnnotationMetadata clsMetaData<span class="token punctuation">,</span> BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Get annotation attributes</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> attrMaps <span class="token operator">=</span> clsMetaData<span class="token punctuation">.</span><span class="token function">getAnnotationAttributes</span><span class="token punctuation">(</span>BeanScan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Convert attribute type to "AnnotationAttributes"</span>        AnnotationAttributes attributes <span class="token operator">=</span> AnnotationAttributes<span class="token punctuation">.</span><span class="token function">fromMap</span><span class="token punctuation">(</span>attrMaps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>attributes <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">">>>>>>>>>>>>>>>>>>>>>>> Annotation attribute is null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Register annotation and Scan the package to find</span>        <span class="token comment" spellcheck="true">// the class that use the registered annotation.</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> basePackages <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getStringArray</span><span class="token punctuation">(</span><span class="token string">"basePackages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BeanScannerFactory scannerFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanScannerFactory</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>        scannerFactory<span class="token punctuation">.</span><span class="token function">enableProxy</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scannerFactory<span class="token punctuation">.</span><span class="token function">registerTypeFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scannerFactory<span class="token punctuation">.</span><span class="token function">doScan</span><span class="token punctuation">(</span>basePackages<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-Bean工厂"><a href="#5-Bean工厂" class="headerlink" title="5. Bean工厂"></a>5. Bean工厂</h4><p>通过扫描注册到 <code>IOC</code> 容器的仅为 <code>BeanDefinitionHolder</code>，即 <code>bean</code> 对象的相关元信息，只有在使用到 <code>bean</code> 对象的时候才会进行实例化。</p><p>而通过工厂类 <code>FactoryBean</code> 即可实现动态的对象生成等操作，如实现 <code>AOP</code> 切面与 <code>RPC</code> 远程服务调用等等。</p><p>如下示例中的 <code>MyFactoryBean</code> 即通过动态代理 <code>BeanInvokeHandler</code> 方式生成代理对象从而实现方法的调用信息打印实现切面的效果。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFactoryBean</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> aClass<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyFactoryBean</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> aClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>aClass <span class="token operator">=</span> aClass<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> T <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> aInterface <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> constructor <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object instance <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BeanInvokeHandler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanInvokeHandler</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>aClass<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>aInterface<span class="token punctuation">}</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> aClass<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 动态代理处理器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanInvokeHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Object object<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BeanInvokeHandler</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>object <span class="token operator">=</span> object<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Invoke method of [{}]."</span><span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>object<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Invoke handle finish, [{}]."</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、缓存引入"><a href="#三、缓存引入" class="headerlink" title="三、缓存引入"></a>三、缓存引入</h3><h4 id="1-生命周期"><a href="#1-生命周期" class="headerlink" title="1. 生命周期"></a>1. 生命周期</h4><p><code>Spring</code> 中的 <code>Bean</code> 生命周期包括以下五个阶段：</p><ul><li><p><strong>实例化(Instantiation)：</strong> 这是 <code>Bean</code> 对象被创建的阶段。在这个阶段 <code>Spring</code> 使用 <code>Bean</code> 的构造方法来实例化对象，可以通过构造函数、静态工厂方法或者工厂 <code>Bean</code> 来创建实例。</p></li><li><p><strong>属性赋值(Population)：</strong> 在这个阶段 <code>Spring</code> 将配置文件中或者注解中定义的属性值注入到 <code>Bean</code> 中。这包括基本类型、引用类型、集合等等，这一过程可以通过 <code>XML</code> 配置、<code>Java</code> 注解、<code>JavaConfig</code> 等方式进行。</p></li><li><p><strong>初始化(Initialization)：</strong> 在这个阶段 <code>Spring</code> 会调用 <code>Bean</code> 的初始化方法。这个初始化方法可以是通过配置文件中的 <code>init-method</code> 属性指定，也可以是实现了 <code>InitializingBean</code> 接口的 <code>afterPropertiesSet</code> 方法。</p></li><li><p><strong>使用(In Use)：</strong> 此时 <code>Bean</code> 对象已经被完全初始化，可以被应用程序使用了。</p></li><li><p><strong>销毁(Destruction)：</strong> 这是 <code>Bean</code> 生命周期的最后阶段。在这个阶段 <code>Spring</code> 会调用 <code>Bean</code> 的销毁方法，该方法可以是通过配置文件中的 <code>destroy-method</code> 属性指定，也可以是实现了 <code>DisposableBean</code> 接口的 <code>destroy</code> 方法。</p></li></ul><h4 id="2-二级缓存"><a href="#2-二级缓存" class="headerlink" title="2. 二级缓存"></a>2. 二级缓存</h4><p>在 <code>Spring</code> 中为了解决循环依赖的问题引入了二级缓存从而解决该问题。</p><p>首先我们先看一下循环依赖带来的问题，假设存在两个 <code>Bean</code> 实例，其中 <code>BeanA</code> 中依赖了 <code>BeanB</code>，而 <code>BeanB</code> 又依赖了 <code>BeanA</code>，代码描述如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanA</span> <span class="token punctuation">{</span>    BeanB beanB<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanB</span> <span class="token punctuation">{</span>    BeanA beanA<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二者对象的依赖关系图示如下：<br><img src="/album/loading.gif" data-original="/album/article/java/spring/bean/1.png"></p><p>在使用 <code>IOC</code> 容器注入 <code>BeanA</code> 实例时，当为其注入属性时由于其又依赖于 <code>BeanB</code>，因此需要先创建出 <code>BeanB</code> 实例，而 <code>BeanB</code> 又依赖于 <code>BeanA</code> 二者则陷入了死循环，这也是循环依赖所带来的问题。<br><img src="/album/loading.gif" data-original="/album/article/java/spring/bean/2.png"></p><p>那二级缓存又是如何解决如何这个问题的呢？让我们一步一步来拆解。</p><p>循环依赖问题在于属性注入阶段对象属性与自身互为成员变量，那么只需每次在在创建 <code>bean</code> 实例后将其存入一份至缓存中（<code>Spring</code> 中通过 <code>Map</code> 对象缓存），后续在执行属性注入时若需要依赖了直接读取缓存即可，避免了相互依赖导致的死循环。<br><img src="/album/loading.gif" data-original="/album/article/java/spring/bean/3.png"></p><h4 id="3-三级缓存"><a href="#3-三级缓存" class="headerlink" title="3. 三级缓存"></a>3. 三级缓存</h4><p>既然二级缓存已经解决了循环依赖的问题那为什么还需要引入三级缓存？三级缓存的引入主要是为了解决切面等动态代理生成的 <code>bean</code> 对象。</p><p>先看下图中两个流程，第一个为普通的 <code>bean</code> 实例创建流程，第二为包含动态代理等操作时的流程。<br><img src="/album/loading.gif" data-original="/album/article/java/spring/bean/4.png"></p><p>在二级缓存中讲过了缓存的存入时间在实例创建之后放入，而当包含动态代理时存入缓存的实例与最终存入 <code>IOC</code> 容器的对象显然不是同一个，这就造成了一个缓存不一致的原因，因此在此需要引入三级缓存从而解决缓存对象不一致。<br><img src="/album/loading.gif" data-original="/album/article/java/spring/bean/5.png"></p><hr><p><strong>参考链接</strong></p><ol><li><a href="https://juejin.cn/post/7218080360403615804">浅谈 Spring 如何解决 Bean 的循环依赖问题</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;Spring IOC&lt;/code&gt;（Inversion of Control，控制反转）容器是 &lt;code&gt;Spring&lt;/code&gt; 框架的核心组件之一，用于管理和组织应用程序中的对象（&lt;code&gt;bean&lt;/code&gt;），它负责创建、配置和管理这些对象，以实</summary>
      
    
    
    
    <category term="Spring框架" scheme="https://great-jin.github.io/categories/Spring%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Spring Boot" scheme="https://great-jin.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop架构设计详解</title>
    <link href="https://great-jin.github.io/db/hadoop/basic/"/>
    <id>https://great-jin.github.io/db/hadoop/basic/</id>
    <published>2023-11-11T16:00:00.000Z</published>
    <updated>2023-12-16T12:03:28.530Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、HDFS"><a href="#一、HDFS" class="headerlink" title="一、HDFS"></a>一、HDFS</h3><h4 id="1-架构设计"><a href="#1-架构设计" class="headerlink" title="1. 架构设计"></a>1. 架构设计</h4><p><code>HDFS</code> 遵循主/从架构，由单个 <code>NameNode(NN)</code> 和多个 <code>DataNode(DN)</code> 组成：</p><ul><li><strong>NameNode</strong> : 负责执行有关 <code>文件系统命名空间</code> 的操作，例如打开，关闭、重命名文件和目录等。它同时还负责集群元数据的存储，记录着文件中各个数据块的位置信息。</li><li><strong>DataNode</strong>：负责提供来自文件系统客户端的读写请求，执行块的创建，删除等操作。</li></ul><h4 id="2-存储机制"><a href="#2-存储机制" class="headerlink" title="2. 存储机制"></a>2. 存储机制</h4><p><code>HDFS</code> 中的文件在物理上是分块存储 <code>(block)</code>，块的大小可以通过配置参数 <code>(dfs.blocksize)</code> 来规定，默认大小在 <code>hadoop2.x</code> 版本中是 <code>128M</code> ，老版本中是 <code>64M</code>；</p><p><code>HDFS</code> 文件系统会给客户端提供一个<strong>统一的抽象目录树</strong>，客户端通过路径来访问文件，形如：<code>hdfs://namenode:port/dir-a/dir-b/dir-c/file.data</code>；目录结构及文件分块信息(元数据)的管理由 <code>Namenode</code> 节点承担；</p><h4 id="3-存储结构"><a href="#3-存储结构" class="headerlink" title="3. 存储结构"></a>3. 存储结构</h4><ul><li><h5 id="块"><a href="#块" class="headerlink" title="块"></a>块</h5><p>  为了保证容错性，<code>HDFS</code> 提供了数据复制机制。<code>HDFS</code> 将每一个文件存储为一系列 <strong>块</strong>，每个块由多个副本来保证容错，块的大小和复制因子可以自行配置（默认情况下，块大小是 <code>128M</code>，默认复制因子是 <code>3</code>）。</p></li><li><h5 id="副本"><a href="#副本" class="headerlink" title="副本"></a>副本</h5><p>  在写入程序位于 <code>datanode</code> 上时，就优先将写入文件的一个副本放置在该 <code>datanode</code> 上，否则放在随机 <code>datanode</code> 上。之后在另一个远程机架上的任意一个节点上放置另一个副本，并在该机架上的另一个节点上放置最后一个副本。此策略可以减少机架间的写入流量，从而提高写入性能。</p></li></ul><h4 id="4-心跳机制"><a href="#4-心跳机制" class="headerlink" title="4. 心跳机制"></a>4. 心跳机制</h4><p>每个 <code>DataNode</code> 定期向 <code>NameNode</code> 发送心跳消息，如果超过指定时间没有收到心跳消息，则将 <code>DataNode</code> 标记为死亡。<code>NameNode</code> 不会将任何新的 <code>IO</code> 请求转发给标记为死亡的 <code>DataNode</code>，也不会再使用这些 <code>DataNode</code> 上的数据。由于数据不再可用，可能会导致某些块的复制因子小于其指定值，<code>NameNode</code> 会跟踪这些块，并在必要的时候进行重新复制。</p><h4 id="5-数据验证"><a href="#5-数据验证" class="headerlink" title="5. 数据验证"></a>5. 数据验证</h4><p>由于存储设备故障等原因，存储在 <code>DataNode</code> 上的数据块也会发生损坏。为了避免读取到已经损坏的数据而导致错误，<code>HDFS</code> 提供了数据完整性校验机制来保证数据的完整性，具体操作如下：</p><p>当客户端创建 <code>HDFS</code> 文件时，它会计算文件的每个块的 <code>校验和</code>，并将 <code>校验和</code> 存储在同一 <code>HDFS</code> 命名空间下的单独的隐藏文件中。当客户端检索文件内容时，它会验证从每个 <code>DataNode</code> 接收的数据是否与存储在关联校验和文件中的 <code>校验和</code> 匹配。如果匹配失败，则证明数据已经损坏，此时客户端会选择从其他 <code>DataNode</code> 获取该块的其他可用副本。</p><h3 id="二、MapReduce"><a href="#二、MapReduce" class="headerlink" title="二、MapReduce"></a>二、MapReduce</h3><h4 id="1-基本流程"><a href="#1-基本流程" class="headerlink" title="1. 基本流程"></a>1. 基本流程</h4><p><code>MapReduce</code> 处理的流程如下：</p><ul><li><strong>Input</strong> : 从 <code>HDFS</code> 上读取文本文件；</li><li><strong>Splitting</strong> : 将文件按照行进行拆分，此时得到的 <code>K1</code> 行数，<code>V1</code> 表示对应行的文本内容；</li><li><strong>Mapping</strong> : 自定义实现，对 <code>splitting</code> 拆分后的执行计算操作，即输入是一对 <code>&lt;key , value&gt;</code> 值，<code>经过Map</code> 计算后输出一对 <code>&lt;key , value&gt;</code> 值；</li><li><strong>Shuffling</strong>：由于 <code>Mapping</code> 操作可能是在不同的机器上并行处理的，所以需要通过 <code>shuffling</code> 将相同 <code>key</code> 值的数据分发到同一个节点上去合并，这样才能统计出最终的结果；</li><li><strong>Reducing</strong> : 对 <code>shuffling</code> 的结果进行进一步处理最终输出结果。</li></ul><p><code>MapReduce</code> 编程模型中 <code>splitting</code> 和 <code>shuffing</code> 操作都是由框架实现的，需要我们自己编程实现的只有 <code>mapping</code> 和 <code>reducing</code>，这也就是 <code>MapReduce</code> 这个称呼的来源。</p><h4 id="2-基础概念"><a href="#2-基础概念" class="headerlink" title="2. 基础概念"></a>2. 基础概念</h4><ul><li><h5 id="Combiner"><a href="#Combiner" class="headerlink" title="Combiner"></a>Combiner</h5><p>  <code>Combiner</code> 是 <code>Map</code> 运算后的可选操作，它实际上是一个本地化的 <code>Reduce</code> 操作，它主要是在 <code>Map</code> 计算出中间文件后做一个简单的合并重复 <code>key</code> 值的操作。</p><p>  例词频统计经过 <code>Map</code> 运算后结果如下:</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Map-1</span><span class="token punctuation">{</span>aa <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>bb <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>aa <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Map-2</span><span class="token punctuation">{</span>cc <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>dd <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>dd <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Combiner-1</span><span class="token punctuation">{</span>aa <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>bb <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Combiner-2</span><span class="token punctuation">{</span>cc <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>dd <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><h5 id="Partitioner"><a href="#Partitioner" class="headerlink" title="Partitioner"></a>Partitioner</h5><p>  <code>Partitioner</code> 可以理解成分类器，将 <code>Map</code> 的输出按照 <code>Key</code> 值的不同分别分给对应的 <code>Reducer</code>，支持自定义实现。通过 <code>Partitioner</code> 即可便捷实现将结果按照自定义的规则存储分类存储至不同的文件中。</p></li></ul><h4 id="3-Key-Process"><a href="#3-Key-Process" class="headerlink" title="3. Key Process"></a>3. Key Process</h4><p>我们以 <code>Hadoop1</code> 为例，<code>MapReduce</code> 运行过程涉及以下几类关键进程：</p><ul><li><p><strong>大数据应用进程</strong>：启动用户 <code>MapReduce</code> 程序的主入口，主要指定 <code>Map</code> 和 <code>Reduce</code> 类、输入输出文件路径等，并提交作业给 <code>Hadoop</code> 集群。</p></li><li><p><strong>JobTracker 进程</strong>：根据要处理的输入数据量启动相应数量的 <code>map</code> 和 <code>reduce</code> 进程任务，并管理整个作业生命周期的任务调度和监控。<code>JobTracker</code> 进程在整个 <code>Hadoop</code> 集群全局唯一。</p></li><li><p><strong>TaskTracker进程</strong>：负责启动和管理 <code>map</code> 和 <code>reduce</code> 进程。因为需要每个数据块都有对应的 <code>map</code> 函数，<code>TaskTracker</code> 进程通常和 <code>HDFS</code> 的 <code>DataNode</code> 进程启动在同一个服务器，也就是说，<code>Hadoop</code> 集群中绝大多数服务器同时运行 <code>DataNode</code> 进程和 <code>TaskTacker</code> 进程。</p></li></ul><h4 id="4-Running-Process"><a href="#4-Running-Process" class="headerlink" title="4. Running Process"></a>4. Running Process</h4><p>具体作业启动和计算过程如下：</p><ul><li>应用进程将用户作业 <code>jar</code> 包存储在 <code>HDFS</code> 中，将来这些 <code>jar</code> 包会分发给 <code>Hadoop</code> 集群中的服务器执行 <code>MapReduce</code> 计算。</li><li>应用程序提交 <code>job</code> 作业给 <code>JobTracker</code>。</li><li><code>JobTacker</code> 根据作业调度策略创建 <code>JobInProcess</code> 树，每个作业都会有一个自己的 <code>JobInProcess</code> 树。</li><li><code>JobInProcess</code> 根据输入数据分片数目（通常情况就是数据块的数目）和设置的 <code>reduce</code> 数目创建相应数量的 <code>TaskInProcess</code>。</li><li><code>TaskTracker</code> 进程和 <code>JobTracker</code> 进程进行定时通信。</li><li>如果 <code>TaskTracker</code> 有空闲的计算资源（空闲CPU核），<code>JobTracker</code> 就会给他分配任务。分配任务的时候会根据 <code>TaskTracker</code> 的服务器名字匹配在同一台机器上的数据块计算任务给它，使启动的计算任务正好处理本机上的数据。</li><li><code>TaskRunner</code> 收到任务后根据任务类型（<code>map</code> 还是 <code>reduce</code>），任务参数（作业 <code>jar</code> 包路径，输入数据文件路径，要处理的数据在文件中的起始位置和偏移量，数据块多个备份的DataNode主机名等）启动相应的 <code>map</code> 或 <code>reduce</code> 进程</li><li><code>map</code> 或 <code>reduce</code> 程序启动后，检查本地是否有要执行任务的 <code>jar</code> 包文件，如果没有就去 <code>HDFS</code> 下载，然后加载 <code>map</code> 或 <code>reduce</code> 代码开始执行。</li><li>如果是 <code>map</code> 进程，从 <code>HDFS</code> 读取数据（通常要读取的数据块正好存储在本机），如果是 <code>reduce</code> 进程，将结果数据写出到 HDFS。</li></ul><h3 id="三、YARN"><a href="#三、YARN" class="headerlink" title="三、YARN"></a>三、YARN</h3><p><code>Apache YARN</code>(Yet Another Resource Negotiator) 是 <code>hadoop 2.0</code> 引入的集群资源管理系统，用户可以将各种服务框架部署在 <code>YARN</code> 上，由 <code>YARN</code> 进行统一地管理和资源分配。</p><h4 id="1-ResourceManager"><a href="#1-ResourceManager" class="headerlink" title="1. ResourceManager"></a>1. ResourceManager</h4><p><code>ResourceManager</code> 通常在独立的机器上以后台进程的形式运行，它是整个集群资源的主要协调者和管理者。<code>ResourceManager</code> 负责给用户提交的所有应用程序分配资源，它根据应用程序优先级、队列容量、<code>ACLs</code>、数据位置等信息，做出决策，然后以共享的、安全的、多租户的方式制定分配策略，调度集群资源。</p><h4 id="2-NodeManager"><a href="#2-NodeManager" class="headerlink" title="2. NodeManager"></a>2. NodeManager</h4><p><code>NodeManager</code> 是 <code>YARN</code> 集群中的每个具体节点的管理者。主要负责该节点内所有容器的生命周期的管理，监视资源和跟踪节点健康。具体如下：</p><ul><li>启动时向 <code>ResourceManager</code> 注册并定时发送心跳消息，等待 <code>ResourceManager</code> 的指令；</li><li>维护 <code>Container</code> 的生命周期，监控 <code>Container</code> 的资源使用情况；<br>管理任务运行时的相关依赖，根据 <code>ApplicationMaster</code> 的需要，在启动 <code>Container</code> 之前将需要的程序及其依赖拷贝到本地。</li></ul><h4 id="3-ApplicationMaster"><a href="#3-ApplicationMaster" class="headerlink" title="3. ApplicationMaster"></a>3. ApplicationMaster</h4><p>在用户提交一个应用程序时，<code>YARN</code> 会启动一个轻量级的进程 <code>ApplicationMaster</code>。<code>ApplicationMaster</code> 负责协调来自 <code>ResourceManager</code> 的资源，并通过 <code>NodeManager</code> 监视容器内资源的使用情况，同时还负责任务的监控与容错。具体如下：</p><ul><li>根据应用的运行状态来决定动态计算资源需求；</li><li>向 <code>ResourceManager</code> 申请资源，监控申请的资源的使用情况；</li><li>跟踪任务状态和进度，报告资源的使用情况和应用的进度信息；</li><li>负责任务的容错。</li></ul><h4 id="4-Container"><a href="#4-Container" class="headerlink" title="4. Container"></a>4. Container</h4><p><code>Container</code> 是 <code>YARN</code> 中的资源抽象，它封装了某个节点上的多维度资源，如内存、<code>CPU</code>、磁盘、网络等。当 <code>AM</code> 向 <code>RM</code> <code>申请资源时，RM</code> 为 <code>AM</code> 返回的资源是用 <code>Container</code> 表示的。</p><p><code>YARN</code> 会为每个任务分配一个 <code>Container</code>，该任务只能使用该 <code>Container</code> 中描述的资源。<code>ApplicationMaster</code> 可在 <code>Container</code> 内运行任何类型的任务。例如，<code>MapReduce ApplicationMaster</code> 请求一个容器来启动 <code>map</code> 或 <code>reduce</code> 任务，而 <code>Giraph ApplicationMaster</code> 请求一个容器来运行 <code>Giraph</code> 任务。</p><hr><p><strong>参考链接</strong>：</p><ol><li><a href="https://github.com/wangzhiwubigdata/God-Of-BigData/blob/master/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/Hadoop-HDFS.md">Hadoop分布式文件系统——HDFS</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、HDFS&quot;&gt;&lt;a href=&quot;#一、HDFS&quot; class=&quot;headerlink&quot; title=&quot;一、HDFS&quot;&gt;&lt;/a&gt;一、HDFS&lt;/h3&gt;&lt;h4 id=&quot;1-架构设计&quot;&gt;&lt;a href=&quot;#1-架构设计&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="大数据" scheme="https://great-jin.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Hadoop" scheme="https://great-jin.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>常见轮询算法实现</title>
    <link href="https://great-jin.github.io/algo/round/"/>
    <id>https://great-jin.github.io/algo/round/</id>
    <published>2023-11-10T16:00:00.000Z</published>
    <updated>2023-12-08T11:34:01.633Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、基础轮询"><a href="#一、基础轮询" class="headerlink" title="一、基础轮询"></a>一、基础轮询</h3><h4 id="1-算法实现"><a href="#1-算法实现" class="headerlink" title="1. 算法实现"></a>1. 算法实现</h4><p>基础轮询是轮询算法中最常见的方式之一，即每个元素被选中的几率都是等价的。</p><p>基础轮询算法的实现也相对简单，通过类静态变量 <code>OFFSET</code> 与元素集合长度进行取余，每次完成后 <code>OFFSET</code> 都将自增，取余得到的结果的即为数组访问下标。利用 <code>static</code> 保证静态变量的值为全局共享，同时 <code>synchronized</code> 保证了多线程的并发安全问题。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BasicRound</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> OFFSET <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> nodeList<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fill</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        nodeList <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> String <span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> nodeList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> OFFSET<span class="token operator">++</span> <span class="token operator">%</span> size<span class="token punctuation">;</span>        OFFSET <span class="token operator">=</span> OFFSET <span class="token operator">&lt;</span> size <span class="token operator">?</span> OFFSET <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nodeList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-示例测试"><a href="#2-示例测试" class="headerlink" title="2. 示例测试"></a>2. 示例测试</h4><p>通过一个示例验证上述的算法效果，定义了四个节点的元素集合使用上述算法轮询 <code>1000</code> 次，可以看到最终统计输出的结果每个节点元素都被访问了 <code>250</code> 次，即实现了 <code>1:1</code> 的等价轮询。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">basicRound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> nodeList <span class="token operator">=</span> List<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>        <span class="token string">"127.0.0.1:9091"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.2:9092"</span><span class="token punctuation">,</span>         <span class="token string">"127.0.0.3:9093"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.3:9094"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Fill data</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BasicRound<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>nodeList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Simulation</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>BasicRound<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Long<span class="token operator">></span> count <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>p <span class="token operator">-</span><span class="token operator">></span> p<span class="token punctuation">,</span> Collectors<span class="token punctuation">.</span><span class="token function">counting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// {</span>    <span class="token comment" spellcheck="true">//      127.0.0.1:9094=250, </span>    <span class="token comment" spellcheck="true">//      127.0.0.1:9093=250, </span>    <span class="token comment" spellcheck="true">//      127.0.0.1:9092=250, </span>    <span class="token comment" spellcheck="true">//      127.0.0.1:9091=250</span>    <span class="token comment" spellcheck="true">// }</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Basic Round: "</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、随机轮询"><a href="#二、随机轮询" class="headerlink" title="二、随机轮询"></a>二、随机轮询</h3><h4 id="1-算法实现-1"><a href="#1-算法实现-1" class="headerlink" title="1. 算法实现"></a>1. 算法实现</h4><p>随机轮询算法相较基础轮询更为简单，即每次生成一个不大于集合大小的随机数，将这个随机数作为元素集合的访问下标，从而实现随机访问的目的。</p><p>随机算法相较于基础轮询可能会造成节点饥饿的问题，即随机的因素导致元素集合中的某个元素一直都未能被访问。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandomRound</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> nodeList<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fill</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        nodeList <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> String <span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>nodeList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nodeList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-示例测试-1"><a href="#2-示例测试-1" class="headerlink" title="2. 示例测试"></a>2. 示例测试</h4><p>同样以四个节点的集合作为目标进行轮询，通过 <code>1000</code> 次轮询后可以看到随机轮询的各个元素访问频次都各不相同，但总体上而言也趋于 <code>1:1</code> 的关系。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">randomRound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> nodeList <span class="token operator">=</span> List<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>        <span class="token string">"127.0.0.1:9091"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.2:9092"</span><span class="token punctuation">,</span>         <span class="token string">"127.0.0.3:9093"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.3:9094"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Fill data</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BasicRound<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>nodeList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Simulation</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>RandomRound<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Long<span class="token operator">></span> count <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>p <span class="token operator">-</span><span class="token operator">></span> p<span class="token punctuation">,</span> Collectors<span class="token punctuation">.</span><span class="token function">counting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// {</span>    <span class="token comment" spellcheck="true">//      127.0.0.1:9094=247, </span>    <span class="token comment" spellcheck="true">//      127.0.0.1:9093=258, </span>    <span class="token comment" spellcheck="true">//      127.0.0.1:9092=235, </span>    <span class="token comment" spellcheck="true">//      127.0.0.1:9091=260</span>    <span class="token comment" spellcheck="true">// }</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Random Round: "</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、权重轮询"><a href="#三、权重轮询" class="headerlink" title="三、权重轮询"></a>三、权重轮询</h3><h4 id="1-算法实现-2"><a href="#1-算法实现-2" class="headerlink" title="1. 算法实现"></a>1. 算法实现</h4><p>带权轮询是轮询算法中较为常见的方式，即为每个元素添加对应权重，权重越高访问到的几率也相对越高。</p><p>根据实现效果先对权重轮询的功能进行拆分，针对目标集合中权重大小相等的元素而言其实现思路与基础轮询中一致，即访问频率应处于 <code>1:1</code> 的状态，因此第一步要做的就是针对权重大小对目标集合进行分组。</p><p>完成分组后则要考虑权重的分配问题，这里通过权重值占比方式解决，即通过分组后的小集合总权重与大集合的权重占比确定轮询频次。如下述四个节点经过分组后得到两个小集合：</p><pre class="line-numbers language-bash"><code class="language-bash">node1: 1         分组后        list1: <span class="token punctuation">{</span>node1: 1, node2: 1<span class="token punctuation">}</span>node2: 1        <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">></span>      node3: 2                   node4: 2                       list2: <span class="token punctuation">{</span>node3: 2, node4: 2<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>分组后的两个集合 <code>list1</code> 与 <code>list2</code> 权重比分别为 <code>1:2</code>，因此在访问分组集合时应每访问两次 <code>list2</code> 后进行一次 <code>list1</code> 集合的访问，而针对集合内部的元素则按照基础轮询的实现方法进行。</p><p>将上述的逻辑思路转化为代码即下述所示：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeightRound</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> nodeWeightMap<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> batch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> weightSum<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">>></span> revertMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> orderKeys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> weightOffsetMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fill</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        nodeWeightMap <span class="token operator">=</span> map<span class="token punctuation">;</span>        weightSum <span class="token operator">=</span> nodeWeightMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>Integer<span class="token operator">:</span><span class="token operator">:</span>sum<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">revert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 根据权重分组并排序</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">revert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String key <span class="token operator">:</span> nodeWeightMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token punctuation">;</span>            Integer val <span class="token operator">=</span> nodeWeightMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>revertMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                list <span class="token operator">=</span> revertMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            revertMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        orderKeys<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>revertMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderKeys<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> String <span class="token function">roundWight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer weight <span class="token operator">:</span> orderKeys<span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> revertMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> fullCount <span class="token operator">=</span> weight <span class="token operator">*</span> size<span class="token punctuation">;</span>            <span class="token keyword">int</span> offset <span class="token operator">=</span> weightOffsetMap<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>weight<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">>=</span> fullCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>batch <span class="token operator">>=</span> weightSum<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    batch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    weightOffsetMap<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> offset<span class="token operator">++</span> <span class="token operator">%</span> size<span class="token punctuation">;</span>            weightOffsetMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>weight<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>            batch<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"Node list empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-示例测试-2"><a href="#2-示例测试-2" class="headerlink" title="2. 示例测试"></a>2. 示例测试</h4><p>同样这里以四个元素的集合为例，通过上述带权轮询 <code>1000</code> 次，可以看到最终输出的访问频次正好与节点权重相一致。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">weightRound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> nodeMap <span class="token operator">=</span> Map<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>        <span class="token string">"127.0.0.1:9091"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"127.0.0.2:9092"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token string">"127.0.0.3:9093"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token string">"127.0.0.3:9094"</span><span class="token punctuation">,</span> <span class="token number">1</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Fill data</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BasicRound<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>nodeMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Simulation</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>WeightRound<span class="token punctuation">.</span><span class="token function">roundWight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Long<span class="token operator">></span> count <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>p <span class="token operator">-</span><span class="token operator">></span> p<span class="token punctuation">,</span> Collectors<span class="token punctuation">.</span><span class="token function">counting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// {</span>    <span class="token comment" spellcheck="true">//      127.0.0.1:9094=167, </span>    <span class="token comment" spellcheck="true">//      127.0.0.1:9093=334, </span>    <span class="token comment" spellcheck="true">//      127.0.0.1:9092=333, </span>    <span class="token comment" spellcheck="true">//      127.0.0.1:9091=166</span>    <span class="token comment" spellcheck="true">// }</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Weight Round: "</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、基础轮询&quot;&gt;&lt;a href=&quot;#一、基础轮询&quot; class=&quot;headerlink&quot; title=&quot;一、基础轮询&quot;&gt;&lt;/a&gt;一、基础轮询&lt;/h3&gt;&lt;h4 id=&quot;1-算法实现&quot;&gt;&lt;a href=&quot;#1-算法实现&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="算法" scheme="https://great-jin.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://great-jin.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Spring Retry实现优雅的重试</title>
    <link href="https://great-jin.github.io/java/spring/tool/retry/"/>
    <id>https://great-jin.github.io/java/spring/tool/retry/</id>
    <published>2023-10-28T16:00:00.000Z</published>
    <updated>2023-12-08T11:34:01.656Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h4><p>在业务常见开发中经常我们会涉及到失败重试的逻辑，如当发送通知失败后再次尝试。</p><p>针对此类场景最简单粗暴的方式即 <code>CV</code> 大法，但显然这种方式不够优雅，为此 <code>Spring Boot</code> 中提供了 <code>Retry</code> 从而实现优雅的异常失败重试。</p><h4 id="2-依赖导入"><a href="#2-依赖导入" class="headerlink" title="2. 依赖导入"></a>2. 依赖导入</h4><p>在开始前在 <code>Spring Boot</code> 工程中引入相应的 <code>Retry</code> 依赖。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.retry<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-retry<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-异常处理"><a href="#3-异常处理" class="headerlink" title="3. 异常处理"></a>3. 异常处理</h4><p><code>Spring Retry</code> 的使用也及其简单，通过 <code>@Retryable</code> 注解配置，其基本配置参考下表。</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">参数</td>        <th style="text-align: center;">描述</td>    </tr>    <tr>        <td style="text-align: center;">value</td>        <td style="text-align: center;">配置何种情况重试。</td>    </tr>    <tr>        <td style="text-align: center;">include</td>        <td style="text-align: center;">配置触发重试情况的异常类型。</td>    </tr>    <tr>        <td style="text-align: center;">exclude</td>        <td style="text-align: center;">配置不触发重试情况的异常类型。</td>    </tr>    <tr>        <td style="text-align: center;">maxAttempts</td>        <td style="text-align: center;">通过配置尝试次数，默认为 3。</td>    </tr>    <tr>        <td style="text-align: center;">maxAttemptsExpression</td>        <td style="text-align: center;">通过表达式配置尝试次数，默认为 3。</td>    </tr>    <tr>        <td style="text-align: center;">backoff</td>        <td style="text-align: center;">通过表达式配置间隔时间。</td>    </tr>    <tr>        <td style="text-align: center;">recover</td>        <td style="text-align: center;">指定重试后仍失败触发的方法。</td>    </tr></table><p>如下述示例代码中则设置当 <code>call()</code> 方法抛出 <code>RuntimeException</code> 异常时重试两次，每次重试间隔 <code>500</code> 毫秒。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RetryService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Retryable</span><span class="token punctuation">(</span>            value <span class="token operator">=</span> RuntimeException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 设置尝试次数，默认为 3</span>            maxAttempts <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// maxAttemptsExpression = "${retry.maxAttempts}",</span>            <span class="token comment" spellcheck="true">// 设置每次尝试间隔时间，默认 1 秒，此处设为 500 毫秒</span>            backoff <span class="token operator">=</span> <span class="token annotation punctuation">@Backoff</span><span class="token punctuation">(</span>delay <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 通过表达式配置间隔时间</span>            <span class="token comment" spellcheck="true">// backoff = @Backoff(delayExpression = "${retry.maxDelay}")</span>    <span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> failed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================ >>> retry."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-恢复事件"><a href="#4-恢复事件" class="headerlink" title="4. 恢复事件"></a>4. 恢复事件</h4><p>重试的恢复事件由 <code>@Recover</code> 注解控制，即当 <code>@Retryable</code> 方法达到重试次数仍失败时触发。</p><p>需要注意的是 <code>@Recover</code> 注解的标注的方法第一个参数必须与 <code>@Retryable</code> 中的 <code>value</code> 类型一致，剩余参数则必须与 <code>@Retryable</code> 修饰的方法入参一致。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RetryService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * "@Retryable" 重试指定次数后若仍失败则触发 "@Recover"     * &lt;p>     * 第一个方法参数为 "@Retryable" 中监听的异常类型     * 第二个方法参数为 "@Retryable" 方法中剩余的入参     */</span>    <span class="token annotation punctuation">@Recover</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recover</span><span class="token punctuation">(</span>RuntimeException e<span class="token punctuation">,</span> <span class="token keyword">boolean</span> failed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================ >>> recover, params: "</span> <span class="token operator">+</span> failed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建测试类 <code>RetryController</code> 调用接口后即可看到控制台分别打印了两句 <code>&gt;&gt;&gt; retry</code> 与一句 <code>&gt;&gt;&gt; recover</code> 日志信息，说明重试机制生效了。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/retry"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RetryController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RetryService retryService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"demo1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> failed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        retryService<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>failed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-配置管理"><a href="#5-配置管理" class="headerlink" title="5. 配置管理"></a>5. 配置管理</h4><p>除了在方法上通过 <code>@Retryable</code> 注解显式设置尝试策略，也可通过全局的配置修改默认的尝试次数与间隔时间等信息。</p><p>新建配置类 <code>AppConfig</code>，具体的配置内容参考下述示例，此处的配置将全局生效，当然仍可在方法处通过 <code>@Retryable</code> 注解覆盖配置。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EnableRetry</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RetryTemplate <span class="token function">retryTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        RetryTemplate retryTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RetryTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Set retry policy</span>        SimpleRetryPolicy retryPolicy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleRetryPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        retryPolicy<span class="token punctuation">.</span><span class="token function">setMaxAttempts</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        retryTemplate<span class="token punctuation">.</span><span class="token function">setRetryPolicy</span><span class="token punctuation">(</span>retryPolicy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Set interval policy</span>        FixedBackOffPolicy backOffPolicy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FixedBackOffPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        backOffPolicy<span class="token punctuation">.</span><span class="token function">setBackOffPeriod</span><span class="token punctuation">(</span>2000l<span class="token punctuation">)</span><span class="token punctuation">;</span>        retryTemplate<span class="token punctuation">.</span><span class="token function">setBackOffPolicy</span><span class="token punctuation">(</span>backOffPolicy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> retryTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-基本介绍&quot;&gt;&lt;a href=&quot;#1-基本介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 基本介绍&quot;&gt;&lt;/a&gt;1. 基本介绍&lt;/h4&gt;&lt;p&gt;在业务常见开发中经常我们会涉及到失败重试的逻辑，如当发送通知失败后再次尝试。&lt;/p&gt;
&lt;p&gt;针对此类场景</summary>
      
    
    
    
    <category term="Spring工具" scheme="https://great-jin.github.io/categories/Spring%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Spring Boot" scheme="https://great-jin.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Java运行时内存监控</title>
    <link href="https://great-jin.github.io/java/advance/memory/"/>
    <id>https://great-jin.github.io/java/advance/memory/</id>
    <published>2023-09-15T16:00:00.000Z</published>
    <updated>2023-12-08T11:34:01.648Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、对象内存"><a href="#一、对象内存" class="headerlink" title="一、对象内存"></a>一、对象内存</h3><h4 id="1-依赖导入"><a href="#1-依赖导入" class="headerlink" title="1. 依赖导入"></a>1. 依赖导入</h4><p>想要衡量一个 <code>Java</code> 对象在内存中具体的占用情况，默认 <code>JDK</code> 中并没有提供直观的查询方式，而 <code>JOL</code> 中则提供了一系列接口供于查询。</p><p>在使用之前需要在项目的 <code>Maven</code> 中引入下述依赖。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.openjdk.jol<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jol-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-结构信息"><a href="#2-结构信息" class="headerlink" title="2. 结构信息"></a>2. 结构信息</h4><p>通过 <code>ClassLayout.parseClass()</code> 可打印输出 <code>Java</code> 对象的基本结构等详情。</p><p>如下述即打印 <code>HashMap</code> 对象的结构与内存占用信息。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">objDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    String printable <span class="token operator">=</span> ClassLayout<span class="token punctuation">.</span><span class="token function">parseClass</span><span class="token punctuation">(</span>HashMap<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>printable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行示例程序可以看到输出的信息中包含的对象头与对象成员数据类型等信息。</p><pre class="line-numbers language-txt"><code class="language-txt">java.util.HashMap object internals:OFF  SZ                       TYPE DESCRIPTION               VALUE  0   8                            (object header: mark)     N/A  8   4                            (object header: class)    N/A 12   4              java.util.Set AbstractMap.keySet        N/A 16   4       java.util.Collection AbstractMap.values        N/A 20   4                        int HashMap.size              N/A 24   4                        int HashMap.modCount          N/A 28   4                        int HashMap.threshold         N/A 32   4                      float HashMap.loadFactor        N/A 36   4   java.util.HashMap.Node[] HashMap.table             N/A 40   4              java.util.Set HashMap.entrySet          N/A 44   4                            (object alignment gap)    Instance size: 48 bytesSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-内存占用"><a href="#3-内存占用" class="headerlink" title="3. 内存占用"></a>3. 内存占用</h4><p>通过 <code>GraphLayout.parseInstance()</code> 即可获取一个对象的实际内存占用空间，其常见的方法参考下表。</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">startAddress()</td>        <td style="text-align: center;">输出对象的的内存起始地址。</td>    </tr>    <tr>        <td style="text-align: center;">endAddress()</td>        <td style="text-align: center;">输出对象的的内存终止地址。</td>    </tr>    <tr>        <td style="text-align: center;">totalCount()</td>        <td style="text-align: center;">输出对象的大小信息。</td>    </tr>    <tr>        <td style="text-align: center;">toPrintable()</td>        <td style="text-align: center;">输出对象元素的详细内存使用情况。</td>    </tr></table><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jolDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> dataMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dataMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key-"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token string">"value-"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">long</span> startAddress <span class="token operator">=</span> GraphLayout<span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>dataMap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Start address: "</span> <span class="token operator">+</span> startAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> endAddress <span class="token operator">=</span> GraphLayout<span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>dataMap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"End address: "</span> <span class="token operator">+</span> endAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> totalCount <span class="token operator">=</span> GraphLayout<span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>dataMap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">totalCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Total count: "</span> <span class="token operator">+</span> totalCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        String printable <span class="token operator">=</span> GraphLayout<span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>dataMap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Printable: "</span> <span class="token operator">+</span> printable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、运行内存"><a href="#二、运行内存" class="headerlink" title="二、运行内存"></a>二、运行内存</h3><h4 id="1-服务信息"><a href="#1-服务信息" class="headerlink" title="1. 服务信息"></a>1. 服务信息</h4><p>在 <code>java.lang</code> 包下提供了 <code>Runtime</code> 类可用于在程序运行期间获取服务运行载体信息，通俗的讲即获取服务部署的服务器信息与当前应用的 <code>JVM</code> 信息。</p><p>如下示例即通过 <code>availableProcessors()</code> 获取当前服务部署的服务器载体核心数，根据核心数的大小通过我们即可合理的设置线程等并发数量。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processorDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> processors <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Processors = "</span> <span class="token operator">+</span> processors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Runtime"><a href="#2-Runtime" class="headerlink" title="2. Runtime"></a>2. Runtime</h4><p>除了获取服务器核心数之外还可以获取当前应用的 <code>JVM</code> 内存使用信息，具体方法参考下表。</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">freeMemory()</td>        <td style="text-align: center;">JVM 空闲内存区域，即未分配的内存空间。</td>    </tr>    <tr>        <td style="text-align: center;">maxMemory()</td>        <td style="text-align: center;">JVM 可以使用的最大内存大小。</td>    </tr>    <tr>        <td style="text-align: center;">totalMemory()</td>        <td style="text-align: center;">当前已经占用的内存总量，包括了用于程序数据、堆、方法区等各种内存区域。</td>    </tr></table><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runtimeDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> heapSize <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Heap size = "</span> <span class="token operator">+</span> heapSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> heapMaxSize <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">maxMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Heap max size = "</span> <span class="token operator">+</span> heapMaxSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> heapFreeSize <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">freeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Heap free size = "</span> <span class="token operator">+</span> heapFreeSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、直接内存"><a href="#三、直接内存" class="headerlink" title="三、直接内存"></a>三、直接内存</h3><h4 id="1-内存信息"><a href="#1-内存信息" class="headerlink" title="1. 内存信息"></a>1. 内存信息</h4><p>通过 <code>sun.misc.SharedSecrets</code> 类即可快速的获取当前应用已经申请的直接内存。</p><p>需要注意在 <code>JDK 11</code> 及之后的版本需要使用 <code>jdk.internal.access.SharedSecrets</code> 实现。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>SharedSecrets<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UsagePrinter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printDirectMemoryUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// JDK 8:  "sun.misc.SharedSecrets"</span>        <span class="token comment" spellcheck="true">// JDK 11: "jdk.internal.access.SharedSecrets"</span>        <span class="token keyword">long</span> memoryUsed <span class="token operator">=</span> SharedSecrets<span class="token punctuation">.</span><span class="token function">getJavaNioAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDirectBufferPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMemoryUsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        memoryUsed <span class="token operator">=</span> memoryUsed <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Direct memory = "</span> <span class="token operator">+</span> memoryUsed <span class="token operator">+</span> <span class="token string">" KB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>JDK 9</code> 之后新增了模块特性，在 <code>JDK 11</code> 以及更新的版本中运行上述程序需添加下述参数。 </p><pre class="line-numbers language-conf"><code class="language-conf"># 1. Compile options--add-exports java.base/jdk.internal.misc=ALL-UNNAMED--add-exports java.base/jdk.internal.access=ALL-UNNAMED# 2. VM options--add-opens java.base/jdk.internal.misc=ALL-UNNAMED--add-opens java.base/jdk.internal.access=ALL-UNNAMED<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/album/loading.gif" data-original="/album/article/java/jvm/21.png"><br><img src="/album/loading.gif" data-original="/album/article/java/jvm/22.png"></p><h4 id="2-Cleaner"><a href="#2-Cleaner" class="headerlink" title="2. Cleaner"></a>2. Cleaner</h4><p>直接内存并没有提供显示的销毁方法，因此最常见的方式即通过反射方式进行，在之前 <code>NIO</code> 文章中的已详细介绍，这里不再具体描述，往期直达：<a href="https://great-jin.github.io/java/basis/nio">Java NIO介绍</a>。<br><img src="/album/loading.gif" data-original="/album/article/java/io/2.png"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">freeDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    ByteBuffer buffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocateDirect</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UsagePrinter<span class="token punctuation">.</span><span class="token function">printDirectMemoryUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">isDirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// The "DirectBuffer" is provided method "cleaner()" to return a cleaner</span>        String directBufferCls <span class="token operator">=</span> <span class="token string">"sun.nio.ch.DirectBuffer"</span><span class="token punctuation">;</span>        Method cleanerMethod <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>directBufferCls<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"cleaner"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object cleaner <span class="token operator">=</span> cleanerMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// JDK 8:  -> "sun.misc.Cleaner"</span>        <span class="token comment" spellcheck="true">// JDK 11: -> "jdk.internal.ref.Cleaner"</span>        String cleanerCls <span class="token operator">=</span> <span class="token string">"sun.misc.Cleaner"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// When we get "cleaner" then we can call "clean()" to free memory</span>        Method cleanMethod <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>cleanerCls<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"clean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cleanMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>cleaner<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    UsagePrinter<span class="token punctuation">.</span><span class="token function">printDirectMemoryUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同理若在 <code>JDK 11</code> 之后运行上述需要在 <code>VM options</code> 添加下述配置。</p><pre class="line-numbers language-jvm"><code class="language-jvm">--add-opens java.base/sun.nio.ch=ALL-UNNAMED--add-opens java.base/jdk.internal.ref=ALL-UNNAMED<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、对象内存&quot;&gt;&lt;a href=&quot;#一、对象内存&quot; class=&quot;headerlink&quot; title=&quot;一、对象内存&quot;&gt;&lt;/a&gt;一、对象内存&lt;/h3&gt;&lt;h4 id=&quot;1-依赖导入&quot;&gt;&lt;a href=&quot;#1-依赖导入&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="JAVA进阶" scheme="https://great-jin.github.io/categories/JAVA%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Java队列知识详解</title>
    <link href="https://great-jin.github.io/java/collection/block-queue/"/>
    <id>https://great-jin.github.io/java/collection/block-queue/</id>
    <published>2023-09-02T16:00:00.000Z</published>
    <updated>2023-12-08T11:34:01.652Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、优先队列"><a href="#一、优先队列" class="headerlink" title="一、优先队列"></a>一、优先队列</h3><h4 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h4><p>所谓优先队列，即赋予队列中元素访问优先级，优先级越高则出队的优先即也越高。</p><p><code>PriorityQueue</code> 内部实现了一套排序机制，默认根据存入元素的 <code>ASCII</code> 值进行存入，<code>ASCII</code> 值更小的元素哪怕后存也会在队头。如下示例中 <code>banana</code> 在 <code>pear</code> 之后入队，但 <code>b</code> 的 <code>ASCII</code> 小于 <code>p</code> 因此优先值更高，在出队时 <code>banana</code> 则会优先于 <code>pear</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">priorityDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Queue<span class="token operator">&lt;</span>String<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"pear"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 输出顺序：apple banana pear</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-排序接口"><a href="#2-排序接口" class="headerlink" title="2. 排序接口"></a>2. 排序接口</h4><p>除了使用默认的优先级规则，存入队列中的元素也可同实现  <code>Comparator</code> 接口从而自定义优先级。</p><p>通过实现 <code>Comparator</code> 接口并重写 <code>compare()</code> 方法即可自定义排序规则，其中 <code>compare()</code> 返回值取值范围为：<code>(-1，0，1)</code>，依次代表 <code>大于</code>，<code>等于</code> 和 <code>小于</code>，当调用队列的 <code>poll()</code> 方式时默认取队列中从最小的元素。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>T o1<span class="token punctuation">,</span> T o2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> Comparator<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Collections<span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-示例演示"><a href="#3-示例演示" class="headerlink" title="3. 示例演示"></a>3. 示例演示</h4><p>如下示例中在初始化优先队列时指定了自定义排序器 <code>MyComparator</code>，其根据 <code>User</code> 的年龄而大小确定优先级。</p><p>因此对于存入的三个元素，在读取时即会按照年龄的大小升序输出。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">priorityDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    PriorityQueue<span class="token operator">&lt;</span>User<span class="token operator">></span> queue1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue1<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Alex"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue1<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Beth"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue1<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>queue1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// User(Beth), User(Jack), User(Alex)</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue1<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>User o1<span class="token punctuation">,</span> User o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> interval <span class="token operator">=</span> o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>interval<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、延时队列"><a href="#二、延时队列" class="headerlink" title="二、延时队列"></a>二、延时队列</h3><p><code>Java</code> 同时提供了一种阻塞的延迟队列 <code>DelayQueue</code> ，其队列元素必须实现 <code>Delayed</code> 接口。</p><h4 id="1-延迟接口"><a href="#1-延迟接口" class="headerlink" title="1. 延迟接口"></a>1. 延迟接口</h4><p>新建一个类实现 <code>Delayed</code> 接口并重写 <code>getDelay()</code> 与 <code>compareTo()</code> 接口。</p><blockquote><p>当调用延迟队列的 <code>take()</code> 获取队列元素时将会触发 <code>Delayed</code> 接口的 <code>getDelay()</code> 方法。</p><ul><li>若返回值小于等于 <code>0</code>，返回队列元素。</li><li>若返回值大于 <code>0</code>，则访问队头的后一位元素。</li><li>若队列中所有元素的 <code>getDelay()</code> 返回值皆大于 <code>0</code>，<code>take()</code> 将一直处于阻塞状态。</li></ul></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayTask</span> <span class="token keyword">implements</span> <span class="token class-name">Delayed</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String data<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> startTime<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DelayTask</span><span class="token punctuation">(</span>String data<span class="token punctuation">,</span> <span class="token keyword">long</span> startTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>startTime <span class="token operator">=</span> startTime<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getDelay</span><span class="token punctuation">(</span>TimeUnit unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> interval <span class="token operator">=</span> startTime <span class="token operator">-</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> unit<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>interval<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Delayed o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DelayTask task <span class="token operator">=</span> <span class="token punctuation">(</span>DelayTask<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> Ints<span class="token punctuation">.</span><span class="token function">saturatedCast</span><span class="token punctuation">(</span>startTime <span class="token operator">-</span> task<span class="token punctuation">.</span>startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-示例演示"><a href="#2-示例演示" class="headerlink" title="2. 示例演示"></a>2. 示例演示</h4><p>介绍了 <code>Delayed</code> 的基本定义之后下面看一个具体的使用示例。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delayDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    BlockingQueue<span class="token operator">&lt;</span>DelayTask<span class="token operator">></span> delayQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelayQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    delayQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DelayTask</span><span class="token punctuation">(</span><span class="token string">"Alex"</span><span class="token punctuation">,</span> 1980836715841L<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    delayQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DelayTask</span><span class="token punctuation">(</span><span class="token string">"Beth"</span><span class="token punctuation">,</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DelayTask task <span class="token operator">=</span> delayQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、BlockingQueue"><a href="#三、BlockingQueue" class="headerlink" title="三、BlockingQueue"></a>三、BlockingQueue</h3><h4 id="1-基本操作"><a href="#1-基本操作" class="headerlink" title="1. 基本操作"></a>1. 基本操作</h4><p><code>Java</code> 中默认提供了两类阻塞队列，其结构为线程安全，扩展了一系列方法实现阻塞读存。</p><ul><li><code>ArrayBlockingQueue</code>：有界集合，队列容量在初始化时指定，一旦定义后续无法变更。</li><li><code>LinkedBlockingQueue</code>：无界集合，若初始化时指定容量则效果等同于 <code>ArrayBlockingQueue</code>，若不指定容量则为无界集合。</li></ul><p>在阻塞队列中除了 <code>offer()、poll()</code> 方法可以指定阻塞时间，同时提供了 <code>put()、take()</code> 方法实现阻塞读存。</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">offer()</td>        <td style="text-align: center;">阻塞新增，指定时间未能成功返回 false。</td>    </tr>    <tr>        <td style="text-align: center;">poll()</td>        <td style="text-align: center;">阻塞获取，指定时间未能成功返回 false。</td>    </tr>    <tr>        <td style="text-align: center;">put()</td>        <td style="text-align: center;">阻塞新增，若队列已满则会一直处于阻塞待有可用空间时新增。</td>    </tr>    <tr>        <td style="text-align: center;">take()</td>        <td style="text-align: center;">阻塞查询，若队列为空则会一直处于阻塞状态。</td>    </tr></table><h4 id="2-示例演示-1"><a href="#2-示例演示-1" class="headerlink" title="2. 示例演示"></a>2. 示例演示</h4><p><code>BlockingQueue</code> 具体操作示例如下，这里以 <code>ArrayBlockingQueue</code> 为例，<code>LinkedBlockingQueue</code> 仅结构有所差异，具体使用方法类似。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">blockDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    ArrayBlockingQueue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Add element</span>        <span class="token comment" spellcheck="true">// If capacity is full then wait, if still full return false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Get element</span>    <span class="token comment" spellcheck="true">// If capacity is full then wait, if still full return null</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、SynchronousQueue"><a href="#四、SynchronousQueue" class="headerlink" title="四、SynchronousQueue"></a>四、SynchronousQueue</h3><h4 id="1-基本操作-1"><a href="#1-基本操作-1" class="headerlink" title="1. 基本操作"></a>1. 基本操作</h4><p><code>SynchronousQueue</code> 是一种特殊的阻塞队列，其通过 <code>put()</code> 与 <code>take()</code> 存入与读取数据。</p><p>其特殊之处在于当通过 <code>put()</code> 存入数据时要求必须存在另一线程执行 <code>take()</code> 方法，否则将一直处于阻塞状态，<code>take()</code> 操作同理。</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">put()</td>        <td style="text-align: center;">存入数据，必须存在线程执行 take() 否则将阻塞。</td>    </tr>    <tr>        <td style="text-align: center;">take()</td>        <td style="text-align: center;">读取数据，必须存在线程执行 put() 否则将阻塞。</td>    </tr></table><h4 id="2-示例演示-2"><a href="#2-示例演示-2" class="headerlink" title="2. 示例演示"></a>2. 示例演示</h4><p>如下示例分别创建了两个读写线程，<code>t1</code> 线程用于执行 <code>put()</code> 写入，<code>t2</code> 线程用于执行 <code>take()</code> 读取。</p><p>在 <code>t1</code> 线程中通过 <code>sleep(5)</code> 模拟休眠五秒，运行示例代码可以看到当启动程序后 <code>t2</code> 线程在打印 <code>start take</code> 将陷入阻碍状态，只有在 <code>t1</code> 中休眠结束后执行 <code>put()</code> 操作 <code>t2</code> 才会退出阻塞读取数据并打印 <code>end take</code></p><p>同理如果将 <code>t1</code> 中的 <code>sleep(5)</code> 移至 <code>t2</code> 的 <code>take()</code> 之前，运行程序后 <code>t1</code> 的 <code>put()</code> 操作的则会进入阻塞等待 <code>t2</code> 的休眠结束执行 <code>take()</code> 才会退出阻塞。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">synchronousQueueDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    SynchronousQueue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> synchronousQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Thrad t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start put."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Block here only when other thread try "take()" then quit.</span>            synchronousQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end put."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"Producer"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Thrad t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start take."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Block here only when other thread try "put()" then quit.</span>            Integer take <span class="token operator">=</span> synchronousQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end take: "</span> <span class="token operator">+</span> take<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"Consumer"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、LinkedTransferQueue"><a href="#五、LinkedTransferQueue" class="headerlink" title="五、LinkedTransferQueue"></a>五、LinkedTransferQueue</h3><h4 id="1-基本操作-2"><a href="#1-基本操作-2" class="headerlink" title="1. 基本操作"></a>1. 基本操作</h4><p><code>LinkedTransferQueue</code> 即扩展了 <code>SynchronousQueue</code>，为阻塞方法提供了等待时间，到期若未成功则退出阻塞继续后续执行内容。</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">transfer(E)</td>        <td style="text-align: center;">阻塞，类似与 put() 方法。</td>    </tr>    <tr>        <td style="text-align: center;">tryTransfer(E, long, TimeUnit)</td>        <td style="text-align: center;">非阻塞，指定时间未成功将退出阻塞返回 false。</td>    </tr>    <tr>        <td style="text-align: center;">hasWaitingConsumer()</td>        <td style="text-align: center;">队列对象当前是否有线程处于 take() 阻塞状态。</td>    </tr>    <tr>        <td style="text-align: center;">getWaitingConsumerCount()</td>        <td style="text-align: center;">队列对象当前处于 take() 阻塞状态的线程数。</td>    </tr></table><h4 id="2-示例演示-3"><a href="#2-示例演示-3" class="headerlink" title="2. 示例演示"></a>2. 示例演示</h4><p><code>LinkedTransferQueue</code> 的测试示例代码如下，与 <code>SynchronousQueue</code> 模拟场景类型这里不再详细介绍。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transferQueueDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    LinkedTransferQueue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> transferQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedTransferQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Thrad t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start transfer."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Block for e second and return the transfer result</span>            <span class="token keyword">boolean</span> success <span class="token operator">=</span> transferQueue<span class="token punctuation">.</span><span class="token function">tryTransfer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end transfer, success? "</span> <span class="token operator">+</span> success<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            latch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"Producer"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Thrad t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start take."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Block here only when other thread try "put()" then quit.</span>            Integer take <span class="token operator">=</span> transferQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end take: "</span> <span class="token operator">+</span> take<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"Consumer"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、优先队列&quot;&gt;&lt;a href=&quot;#一、优先队列&quot; class=&quot;headerlink&quot; title=&quot;一、优先队列&quot;&gt;&lt;/a&gt;一、优先队列&lt;/h3&gt;&lt;h4 id=&quot;1-基本介绍&quot;&gt;&lt;a href=&quot;#1-基本介绍&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="JAVA基础" scheme="https://great-jin.github.io/categories/JAVA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>自定义 ResultSet 结果集</title>
    <link href="https://great-jin.github.io/java/advance/resultset/"/>
    <id>https://great-jin.github.io/java/advance/resultset/</id>
    <published>2023-09-01T16:00:00.000Z</published>
    <updated>2023-12-08T11:34:01.648Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h4><p>我们都知道在 <code>Java</code> 的 <code>JDBC</code> 中定义了一套标准规范，例如 <code>ResultSet</code> 用于接口语句的结果集，如果点开 <code>ResultSet</code> 内你可以看到其中定义了一系列标准接口，仅接口代码行数即达到了四千多行，当然其中一大半是注释文档，但数量依然客观。<br><img src="/album/loading.gif" data-original="/album/article/java/jdbc/1.png" alt="ResultSet接口类"></p><p>如果你想要定义自己的查询结构集，实现也相当简单，自定义你的结果集类并实现 <code>ResultSet</code> 接口，并按照按照标准重写其中接口即可。</p><p>但通过实现 <code>ResultSet</code> 接口会带来一个问题，你需要重写其中的上百个标准接口，当然你可以仅定义一个空实现，但仍然会造成大量无用代码。当然这是基于仅需要 <code>ResultSet</code> 部分功能的情况下，如果你要设计完善的数据规范，还是需要通过实现 <code>ResultSet</code> 接口来实现。</p><p>假如我们只想要实现一个类似 <code>ResultSet</code> 中通过游标逐行读取的方式，最简单的方式的方式即自定义一个结果集规范，只定义你所需的接口，从而提高代码的简洁度。</p><blockquote><p>本文的重点教你如何实现一个自己的 <code>ResultSet</code> 规范。</p></blockquote><h4 id="2-接口规范"><a href="#2-接口规范" class="headerlink" title="2. 接口规范"></a>2. 接口规范</h4><p>新建接口类 <code>AbstractResultSet</code> 用于定义我们自己的规范。</p><p>首先根据需求确定接口中所需要的定义的方法，如我想要与 <code>ResultSet</code> 中一样能够通过 <code>next()</code> 逐行读取数据，同时通过 <code>getString()</code> 读取属性字段，那么我的接口类则只需要定义下述三个方法。</p><p>这里定义的三个接口方法与 <code>ResultSet</code> 中的接口方法是一致的，只是截取过来而已。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AbstractResultSet</span> <span class="token keyword">extends</span> <span class="token class-name">AutoCloseable</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过下标访问</span>    String <span class="token function">getString</span><span class="token punctuation">(</span><span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过名称访问</span>    String <span class="token function">getString</span><span class="token punctuation">(</span>String columnLabel<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-接口实现"><a href="#3-接口实现" class="headerlink" title="3. 接口实现"></a>3. 接口实现</h4><p>定义完接口之后就简单了，创建实现类 <code>DataResultSet</code> 实现具体的细节。</p><p>具体设计参考了 <code>com.sun.rowset.CachedRowSetImpl</code> 类中的实现思路，将数据通过 <code>Map</code> 塞到内存中，再通过游标逐行读取内容，当然这种情况就没法针对大数据量，容易造成内存溢出的风险。</p><p>这里定义三个成员变量 <code>cursorRow</code>, <code>rowCount</code> 与 <code>rowContainer</code>，对应信息参考下表：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">属性</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">cursorRow</td>        <td style="text-align: center;">行游标，用于标记当前读到第几行。</td>    </tr>    <tr>        <td style="text-align: center;">rowCount</td>        <td style="text-align: center;">行数，用于记录当前结果集中的总行数。</td>    </tr>    <tr>        <td style="text-align: center;">rowContainer</td>        <td style="text-align: center;">Map容器，用于存储目标数据内容，key 存对应行下表，value存该行数据。</td>    </tr></table><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataResultSet</span> <span class="token keyword">implements</span> <span class="token class-name">AbstractResultSet</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> cursorRow<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> rowCount<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> rowContainer<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DataResultSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        rowContainer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cursorRow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        rowCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 略去具体接口实现</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-数据填充"><a href="#4-数据填充" class="headerlink" title="4. 数据填充"></a>4. 数据填充</h4><p>在上面已经提到了是通过 <code>Map</code> 容器用于接收目标数据用于后续读取，因此在 <code>DataResultSet</code> 类中新增 <code>fill()</code> 方法用于接收数据。</p><p>方法入参为 <code>List</code> 容器，容器中的每个元素代表一行数据，注意这里容器中需要指定为 <code>LinkedHashMap</code>，这样后续通过 <code>getString()</code> 才能保证通过序号访问的确定性。</p><p>因为 <code>List</code> 与 <code>LinkedHashMap</code> 皆为有序容器，因此 <code>fill()</code> 只需简单遍历目标数据按照 <code>List</code> 存放顺序存入 <code>rowContainer</code> 即可。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fill</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> theData<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>theData<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Data can't be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    rowCount <span class="token operator">=</span> theData<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> rowCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        rowContainer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> theData<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-数据验证"><a href="#5-数据验证" class="headerlink" title="5. 数据验证"></a>5. 数据验证</h4><p>在定义具体的接口实现之前这里定义了几个数据验证，用于验证读取的行标与字段下标的合法性。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cursorRow <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> cursorRow <span class="token operator">></span> rowCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Cursor is illegal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> colCount <span class="token operator">=</span> rowContainer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cursorRow<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> index <span class="token operator">></span> colCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Index is illegal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkColLabel</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keySet <span class="token operator">=</span> rowContainer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cursorRow<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>keySet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Column "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">" didn't existed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-具体实现"><a href="#6-具体实现" class="headerlink" title="6. 具体实现"></a>6. 具体实现</h4><blockquote><p><strong>(1) next() 实现</strong></p></blockquote><p><code>next()</code> 实现的较为简单，即每次执行 <code>next()</code> 时判断当前行标 <code>(cursorRow)</code> 是否已经超过行数 <code>(rowCount)</code>，若否则行标加一。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> hasRemain <span class="token operator">=</span> cursorRow <span class="token operator">&lt;</span> rowCount<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasRemain<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Move row cursor</span>        cursorRow<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> hasRemain<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>(2) getString(int index) 实现</strong></p></blockquote><p><code>getString(int)</code> 即通过下标获取属性值，因为在执行 next() 时行标已经为对应的目标行，因此通过 <code>rowContainer.get(cursorRow)</code> 即可获取行标所对应的该行数据。</p><p>获取到对应行后即可将转为数组并通过下标获取，注意这里的 <code>columnIndex</code> 是按照 <code>JDBC</code> 标准从 <code>1</code> 开始，因此转为数组读取时需要减一。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> String <span class="token function">getString</span><span class="token punctuation">(</span><span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// check row cursor is valid</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// check index is valid for column cursor</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkIndex</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> row <span class="token operator">=</span> rowContainer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cursorRow<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> row<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>columnIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>(3) getString(String name) 实现</strong></p></blockquote><p>与之对应的 <code>getString(String)</code> 即通过属性名进行查询。</p><p>这里参考了 <code>CachedRowSetImpl#getString(String)</code> 的实现思路，根据 <code>columnLabel</code> 获取对应属性的下标，即可复用上述的 <code>getString(int)</code> 方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> String <span class="token function">getString</span><span class="token punctuation">(</span>String columnLabel<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// check row cursor is valid</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// check column label</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkColLabel</span><span class="token punctuation">(</span>columnLabel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// get value by column index</span>    <span class="token keyword">return</span> <span class="token function">getString</span><span class="token punctuation">(</span><span class="token function">getColIdxByName</span><span class="token punctuation">(</span>columnLabel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 根据 name 获取下标</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getColIdxByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> record <span class="token operator">=</span> rowContainer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cursorRow<span class="token punctuation">)</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> orderMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> entry <span class="token operator">:</span> record<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        orderMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        ch<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> orderMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>(4) close() 实现</strong></p></blockquote><p>因为继承了 <code>AutoCloseable</code> 类，所以需要重写 <code>close()</code> 方法，内容也相对简单，将成员遍历重置即可。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    rowContainer <span class="token operator">=</span> null<span class="token punctuation">;</span>    cursorRow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    rowCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-示例演示"><a href="#7-示例演示" class="headerlink" title="7. 示例演示"></a>7. 示例演示</h4><p>完成上述步骤之后基本就完成了所有工作，对应的测试实例如下。</p><p>这里通过 <code>generateMockData()</code> 生成了一个五行四列的测试数据，在通过 <code>fill()</code> 填充数据之后利用 <code>next()</code> 与 <code>getString()</code> 模拟数据读取。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResultTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Mock data</span>        List<span class="token operator">&lt;</span>LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> list <span class="token operator">=</span> <span class="token function">generateMockData</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>DataResultSet resultSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataResultSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            resultSet<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"column-1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> <span class="token function">generateMockData</span><span class="token punctuation">(</span><span class="token keyword">int</span> rNum<span class="token punctuation">,</span> <span class="token keyword">int</span> colNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> colNum<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"column-"</span> <span class="token operator">+</span> j<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-基本介绍&quot;&gt;&lt;a href=&quot;#1-基本介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 基本介绍&quot;&gt;&lt;/a&gt;1. 基本介绍&lt;/h4&gt;&lt;p&gt;我们都知道在 &lt;code&gt;Java&lt;/code&gt; 的 &lt;code&gt;JDBC&lt;/code&gt; 中定义了一套标</summary>
      
    
    
    
    <category term="JAVA进阶" scheme="https://great-jin.github.io/categories/JAVA%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>在IDEA中优雅的断点测试</title>
    <link href="https://great-jin.github.io/app/idea/debug/"/>
    <id>https://great-jin.github.io/app/idea/debug/</id>
    <published>2023-08-31T16:00:00.000Z</published>
    <updated>2023-12-08T11:34:01.633Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、功能介绍"><a href="#一、功能介绍" class="headerlink" title="一、功能介绍"></a>一、功能介绍</h3><p><img src="/album/loading.gif" data-original="/album/article/tool/idea/debug/1.png"></p><h4 id="1-Resume-programme"><a href="#1-Resume-programme" class="headerlink" title="1. Resume programme"></a>1. Resume programme</h4><p>对应上图中的 <code>模块1</code>，当程序执行到断点处将停止，通过 <code>Resume programme</code> 即直接略过中间代码跳到一处断点，若后续不存在断点则执行到程序结束。</p><h4 id="2-Step-Over"><a href="#2-Step-Over" class="headerlink" title="2. Step Over"></a>2. Step Over</h4><p>对应上图中的 <code>模块2</code>，即从断点处开始逐行执行，若执行的代码为方法并不会进入内部而是直接得到该方法执行结果。</p><h4 id="3-Step-Into"><a href="#3-Step-Into" class="headerlink" title="3. Step Into"></a>3. Step Into</h4><p>对应上图中的 <code>模块3</code>，同样是从断点处开始逐行执行，但是与 <code>Step Over</code> 不同的是 <code>Step Into</code> 若执行的当前行若是方法则会进入方法内部继续逐行断点。</p><h4 id="4-Step-out"><a href="#4-Step-out" class="headerlink" title="4. Step out"></a>4. Step out</h4><p>对应上图中的 <code>模块4</code>，用于略过当前执行的方法内剩余代码执行过程，若存在方法内后续仍存在断点则执行到断点处。如在不存在其它断点的情况下通过 <code>Step Into</code> 进入某个方法的之后触发 <code>Step out</code> 则会直接执行剩余代码并返回至 <code>Step Into</code> 入口的下一行。 </p><h4 id="5-View-Breakponints"><a href="#5-View-Breakponints" class="headerlink" title="5. View Breakponints"></a>5. View Breakponints</h4><p>对应上图中的 <code>模块5</code>，用于查看当前代码中已经添加的断点。</p><h4 id="6-Mute-Breakpoint"><a href="#6-Mute-Breakpoint" class="headerlink" title="6. Mute Breakpoint"></a>6. Mute Breakpoint</h4><p>对应上图中的 <code>模块6</code>，通过触发 <code>Mute Breakpoint</code> 则当前代码中的所有断点将不再生效，意味着执行到断点处不会停止。</p><h3 id="二、示例演示"><a href="#二、示例演示" class="headerlink" title="二、示例演示"></a>二、示例演示</h3><p>为了更好的介绍断点作用效果下面通过一个具体示例进行介绍。</p><h4 id="1-测试代码"><a href="#1-测试代码" class="headerlink" title="1. 测试代码"></a>1. 测试代码</h4><p>在开始之前准备一个简单的测试代码，完整代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Example start."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Example finish."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Into method 1."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Exit method 1."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Into method 2."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Exit method 2."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-示例分析"><a href="#2-示例分析" class="headerlink" title="2. 示例分析"></a>2. 示例分析</h4><blockquote><p><strong>测试一</strong></p></blockquote><p>在上述示例代码 <code>第6行</code> 处打上断点并执行 <code>demo</code> 模块，第一大点中不同功能触发效果如下：</p><ul><li>若执行 <code>Step Over</code> : 断点将移至 <code>第7行</code>，若继续触发则会逐行向下执行，但在执行 <code>method1()</code> 等方法时并不会进入其方法体。</li><li>若执行 <code>Step Into</code> : 断点将移至方法 <code>method1()</code> 内，即上述中的 <code>第12行</code>。</li><li>若执行 <code>Step Out</code> : 将从 <code>第6行</code> 开始执行剩余代码并返回。</li></ul><blockquote><p><strong>测试二</strong></p></blockquote><p>同样在 <code>第6行</code> 打上断点执行后 <code>demo</code> 模块。</p><ul><li>在触发断点后选择 <code>Step Into</code> 进入 <code>method1()</code> 方法体内。</li><li>进入 <code>method1()</code> 后触发 <code>Step Out</code> 则会返回到 <code>demo()</code> 中的 <code>第7行</code>，即 <code>Step Into</code> 入口的下一行。 </li></ul><blockquote><p><strong>测试三</strong></p></blockquote><p>分别在 <code>第6行</code> 和 <code>第14行</code> 打上断点执行后 <code>demo</code> 模块。</p><ul><li>在触发断点后选择 <code>Step Into</code> 进入 <code>method1()</code> 方法体内。</li><li>进入 <code>method1()</code> 后触发 <code>Step Out</code> 则会在 <code>第14行</code> 处停止，即若当前方法内存在断点则不会退出方法而是在断点处停止。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、功能介绍&quot;&gt;&lt;a href=&quot;#一、功能介绍&quot; class=&quot;headerlink&quot; title=&quot;一、功能介绍&quot;&gt;&lt;/a&gt;一、功能介绍&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/album/loading.gif&quot; data-original=&quot;/album/ar</summary>
      
    
    
    
    <category term="开发工具" scheme="https://great-jin.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
    <category term="IDEA" scheme="https://great-jin.github.io/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>Kafka基础概念详解</title>
    <link href="https://great-jin.github.io/db/kafka/basis/"/>
    <id>https://great-jin.github.io/db/kafka/basis/</id>
    <published>2023-08-25T16:00:00.000Z</published>
    <updated>2023-12-16T12:03:21.857Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、基本结构"><a href="#一、基本结构" class="headerlink" title="一、基本结构"></a>一、基本结构</h3><p><img src="/album/loading.gif" data-original="/album/article/db/kafka/2.png" alt="结构示意图"></p><h4 id="1-User"><a href="#1-User" class="headerlink" title="1. User"></a>1. User</h4><p>消息的发送者叫 <code>Producer</code> ，消息的使用者和接收者是 <code>Consumer</code>，生产者将数据保存到 <code>Kafka</code> 集群中，消费者从中获取消息进行业务的处理。</p><h4 id="2-Broker"><a href="#2-Broker" class="headerlink" title="2. Broker"></a>2. Broker</h4><p><code>Kafka</code> 集群中有很多台 <code>Server</code>，其中每一台 <code>Server</code> 都可以存储消息，将每一台 <code>Server</code> 称为一个实例，也称为 <code>Broker</code>。</p><p>当部署 <code>Kafka</code> 集群时则存在多个 <code>Broker</code> 节点，通常将主节点称之为 <code>Leader</code> 节点，其它 <code>Broker</code> 节点称为 <code>Follwer</code> 节点。</p><h4 id="3-Topic"><a href="#3-Topic" class="headerlink" title="3. Topic"></a>3. Topic</h4><p>一个 <code>Topic</code> 里保存的是同类消息，相当于对消息的分类，每个 <code>Producer</code> 将消息发送到 <code>kafka</code> 中都需要指明 <code>Topic</code> ，即指明这个消息属于哪一类。</p><h4 id="4-Partition"><a href="#4-Partition" class="headerlink" title="4. Partition"></a>4. Partition</h4><p>每个 <code>Topic</code> 都可以分成多个 <code>Partition</code>，每个 <code>Partition</code> 在存储层面是 <code>append log</code> 文件，任何发布到此 <code>Partition</code> 的消息都会被直接追加到 <code>log</code> 文件的尾部。</p><p>为什么要进行分区呢？最根本的原因就是 <code>Kafka</code> 基于文件存储，当文件内容大到一定程度时，很容易达到单个磁盘的上限，因此采用分区的办法，即一个分区对应一个文件，这样就可以将数据分别存储到不同的 <code>Server</code> 上去，同时也可以实现负载均衡从而容纳更多的消费者。</p><blockquote><p><strong>(1) Replica</strong></p></blockquote><p>分区 <code>Partition</code> 中的数据是以文件的形式存在，而为了实现故障高可用，<code>Kafka</code> 中引入了副本概念 <code>(Replica)</code>。</p><p>即在集群模式下，每个 <code>Partition</code> 下的消息文件将按照一定规则均匀分布到各个节点，因此当存在某个故障节点仍可从其它节点读取从而保证数据的安全性。</p><ul><li><code>Kafka</code> 的 <code>Replica</code> 包含主节点 <code>(leader)</code> 与子节点 <code>(follower)</code>。</li><li><code>Partition</code> 的 <code>Replica</code> 默认情况会均匀分布到所有 <code>Broker</code> 上。</li><li>当 <code>Topic</code> 的 <code>replication-factor</code> 为 <code>N(N&gt;1)</code> 时，则每个 <code>Partition</code> 都会有 <code>N</code> 个副本。</li><li>当 <code>Replica</code> 的个数小于或等于 <code>Broker</code> 的个数，对于每个 <code>Partition</code> 而言，每个 <code>Broker</code> 上最多只会有一个 <code>Replica</code>，因此可以使用 <code>Broker id</code> 指定 <code>Partition</code> 的 <code>Replica</code>。</li></ul><h4 id="5-Offset"><a href="#5-Offset" class="headerlink" title="5. Offset"></a>5. Offset</h4><p>一个分区对应一个磁盘上的文件，而消息在文件中的位置就称为偏移量 <code>(Offset)</code>，<code>Offset</code> 为一个 <code>long</code> 型数字，它可以唯一标记条消息。</p><p>由于 <code>Kafka</code> 并没有提供基他额外的索引机制来存储 <code>Offset</code> ，文件只能顺序的读写，所以在 <code>Kafka</code> 中几乎不允许对消息进行”随机读写”。</p><h3 id="二、传输过程"><a href="#二、传输过程" class="headerlink" title="二、传输过程"></a>二、传输过程</h3><h4 id="1-生产者"><a href="#1-生产者" class="headerlink" title="1. 生产者"></a>1. 生产者</h4><p>对于生产者要写入的条记录，可以指定四个参数：分别是 <code>Topic, Partition, Key, Value(需存入的数据)</code>，其中 <code>Topic</code> 和 <code>Value</code> 是必须要指定的，而 <code>Key</code> 和 <code>Partition</code> 是可选的。</p><blockquote><p>对于一条记录，先对其进行序列化，按照 <code>Topic</code> 和 <code>Partition</code> 放进对应的发送队列中；</p><ul><li>若 <code>Partition</code> 没填，则分为两类情况：</li><li>(1) 若 <code>Key</code> 没填，通过 <code>Round-Robin</code> 来选 <code>Partition</code>；</li><li>(2) 若 <code>Key</code> 有填，按照 <code>Key</code> 进行哈希，相同 <code>Key</code> 去一个 <code>Partition</code>；</li></ul></blockquote><p><img src="/album/loading.gif" data-original="/album/article/db/kafka/5.png"></p><h4 id="2-消费者"><a href="#2-消费者" class="headerlink" title="2. 消费者"></a>2. 消费者</h4><p>消费者不是以单独的形式存在的，每一个消费者属于一个 <code>Consumer Group</code> ，一个 <code>Group</code> 可以包含多个 <code>Consumer</code>。<br><img src="/album/loading.gif" data-original="/album/article/db/kafka/3.png"></p><p>特别需要注意的是：订阅 <code>Topic</code> 是以一个消费组来订阅的，发送到 <code>Topic</code> 的消息只会被订阅此 <code>Topic</code> 的每个 <code>Group</code> 中的一个 <code>Consumer</code> 消费，即同一个消费组的两个消费者不会同时消费一个 <code>Partition</code>。如果所有的 <code>Consumer</code> 都具有相同的 <code>Group</code>，那么就像是一个点对点的消息系统；如果每个 <code>Consumer</code> 都具有不同的 <code>Group</code>，那么消息会广播给所有的消费者。</p><p>具体说来，这实际上是根据 <code>Partition</code> 来分的，一个 <code>Partition</code> 只被消费组里的一个消费者消费，但是可以同时被多个消费组消费，消费组里的每个消费者是关联到一个 <code>Partition</code> 的，因此对于一个 <code>Topic</code> 而言，同一个 <code>Group</code> 中不能有多于 <code>Partition</code> 个数的 <code>Consumer</code> 同时消费，否则将意味着某些 <code>Consumer</code> 将无法得到消息。</p><h3 id="三、数据同步"><a href="#三、数据同步" class="headerlink" title="三、数据同步"></a>三、数据同步</h3><h4 id="1-ISR机制"><a href="#1-ISR机制" class="headerlink" title="1. ISR机制"></a>1. ISR机制</h4><p><code>Kafka</code> 中通过 <code>ISR(in-sync replica set)</code> 机制管理集群节点，其机制如下：</p><ul><li><code>Leader</code> 会维护一个与其基本保持同步的 <code>Replica</code> 列表，该列表称为 <code>ISR</code> ，每个 <code>Partition</code> 都会有一个 <code>ISR</code>，而且是由 <code>Leader</code> 动态维护。</li><li>如果一个 <code>Flower</code> 比一个 <code>Leader</code> 落后太多，或者超过一定时间未发起数据复制请求，则 <code>Leader</code> 将其重 <code>ISR</code> 中移除。</li><li>当 <code>ISR</code> 中所有 <code>Replica</code> 都向 <code>Leader</code> 发送 <code>ACK</code> 时，<code>Leader</code> 才 <code>commit</code>。</li><li>该时间阈值由 <code>replica.lag.time.max.ms</code> 参数设定，当 <code>Leader</code> 发生故障后会从 <code>ISR</code> 中选举出新的 <code>Leader</code>。</li></ul><h4 id="2-ACK机制"><a href="#2-ACK机制" class="headerlink" title="2. ACK机制"></a>2. ACK机制</h4><p><code>Kafka</code> 采用的是至少一次 <code>At least once</code>，消息不会丢但是可能会重复传输，通过 <code>ACK</code> 参数配置传输模式。</p><ul><li><strong>同步复制</strong>：只有所有的 <code>follower</code> 把数据拿过去后才 <code>commit</code>，一致性好，可用性不高。</li><li><strong>异步复制</strong>：只要 <code>leader</code> 拿到数据立即 <code>commit</code>，等 <code>follower</code> 慢慢去复制，可用性高立即返回，但一致性差一些。</li></ul><blockquote><p>设置等待 <code>acks</code> 返回的机制，有下述三个值：</p><ul><li><code>-1</code>：默认，等待所有 <code>Flower</code> 同步完消息后再发送(绝对不会丢数据)；</li><li><code>0</code>：不等待返回的 <code>ack</code> (可能会丢数据，因为发送消息没有了失败重试机制，但是这是最低延迟)；</li><li><code>1</code>：消息发送给 <code>Kafka</code> 分区中的 <code>Leader</code> 后就返回(如果 <code>Flower</code> 没有同步完成 <code>Leader</code> 就宕机了，就会丢数据)；</li></ul></blockquote><p><code>acks</code> 的默认值即为 <code>1</code>，代表我们的消息被 <code>Leader</code> 副本接收之后就算被成功发送，可以配置 <code>acks = all</code>  代表则所有副本都要接收到该消息之后该消息才算真正成功被发送。即保证消息不丢失的，设置消息持久化后再返回消息发送成功响应，对应 <code>Spring</code> 配置 <code>spring.kafka.producer.acks=-1</code></p><h4 id="3-故障转移"><a href="#3-故障转移" class="headerlink" title="3. 故障转移"></a>3. 故障转移</h4><blockquote><p><strong>(1) Leader故障</strong></p></blockquote><p><code>Leader</code> 发生故障后，会从 <code>ISR</code> 中选出一个新的 <code>Leader</code>，同时为保证多个副本之间的数据一致性，其余的 <code>Follower</code> 会先将各自的 <code>log</code> 文件高于 <code>HW(High Watermark, 消费者的消费进度)</code> 的部分截掉，然后从新的 <code>Leader</code> 同步数据。</p><p>这只能保证副本之间的数据一致性，并不能保证数据不丢失或者不重复。</p><blockquote><p><strong>(2) Follower故障</strong></p></blockquote><p><code>Follower</code> 发生故障后会被临时踢出 <code>ISR</code> 集合，待该 <code>Follower</code> 恢复后，将会读取本地磁盘记录的上次的 <code>HW</code>，并将 <code>log</code> 文件高于 <code>HW</code> 的部分截取掉，从 <code>HW</code> 开始向 <code>Leader</code> 进行同步数据操作，等该 <code>Follower</code> 的 <code>LEO(Log End Offset，日志的末尾偏移量)</code> 大于等于该 <code>Partition</code> 的 <code>HW</code>，即 <code>Follower</code> 追上 <code>Leader</code> 后，就可以重新加入 <code>ISR</code> 了。</p><h4 id="4-幂等性"><a href="#4-幂等性" class="headerlink" title="4. 幂等性"></a>4. 幂等性</h4><p><code>Producer</code> 不论向 <code>Server</code> 发送多少重复数据，<code>Server</code> 端都只会持久化一条，<code>Producer</code> 的参数中 <code>enable.idompotence</code> 设置为 <code>true</code> 即可。</p><p>开启幂等性的 <code>Producer</code> 在初始化时会被分配一个 <code>PID</code>，发往同一 <code>Partition</code> 的消息会附带 <code>Sequence Number</code>，而 <code>Broker</code> 端会对 <code>&lt;PID,Partition,SeqNumber&gt;</code> 做缓存，当具有相同主键的消息提交时，<code>Broker</code> 只会持久化一条。  但是 <code>PID</code> 重启后就会变化，同时不同的 <code>Partition</code> 也具有不同主键，所以幂等性无法保证跨分区会话的 <code>Exactly Once</code>。</p><h3 id="四、传输优势"><a href="#四、传输优势" class="headerlink" title="四、传输优势"></a>四、传输优势</h3><h4 id="1-生产者-1"><a href="#1-生产者-1" class="headerlink" title="1. 生产者"></a>1. 生产者</h4><blockquote><p><strong>(1) 批量发送</strong></p></blockquote><p><code>Kafka</code> 采用了批量发送消息的方式，通过将多条消息按照分区进行分组，然后每次发送一个消息集合，从而大大减少了网络传输的 <code>overhead</code>。</p><blockquote><p><strong>(2) 消息压缩</strong></p></blockquote><p>消息压缩的目的是为了进一步减少网络传输带宽，但其不仅仅减少了网络 <code>IO</code>，它还大大降低了磁盘 <code>IO</code>。因为批量消息在持久化到 <code>Broker</code> 中的磁盘时保持的仍是压缩状态，最终是在 <code>Consumer</code> 端做了解压缩操作。</p><blockquote><p><strong>(3) 高效序列化</strong></p></blockquote><p>只需要提供相应的序列化和反序列化器，用户可以根据实际情况选用快速且紧凑的序列化方式来减少实际的网络传输量以及磁盘存储量，进一步提高吞吐量。</p><blockquote><p><strong>(4) 内存池复用</strong></p></blockquote><p><code>Producer</code> 一上来就会占用一个固定大小的内存块，比如 <code>64MB</code>，然后将 <code>64 MB</code> 划分成 <code>M</code> 个小内存块(比如一个小内存块大小是 <code>16KB</code>)。</p><p>当需要创建一个新的 <code>Batch</code> 时，直接从内存池中取出一个 <code>16 KB</code> 的内存块即可，然后往里面不断写入消息，但最大写入量就是 <code>16 KB</code>，接着将 <code>Batch</code> 发送给 <code>Broker</code> ，此时该内存块就可以还回到缓冲池中继续复用了，根本不涉及垃圾回收。  </p><h4 id="2-Broker-1"><a href="#2-Broker-1" class="headerlink" title="2. Broker"></a>2. Broker</h4><blockquote><p><strong>(1) IO多路复用</strong></p></blockquote><p><code>Kafka</code> 采用 <code>Reactor</code> 网络通信模型实现复用以提高效率。</p><p><code>Acceptor</code>线程负责监听新的连接，<code>Processor</code>线程都有自己的 <code>selector</code>，负责从 <code>Socket</code> 中读写数据。<code>KafkaRequestHandler</code>业务处理线程进行业务处理，然后生成 <code>Response</code>，再交由给 <code>Processor</code> 线程。  </p><blockquote><p><strong>(2) 磁盘顺序写</strong></p></blockquote><p><code>Kafka</code> 本质上就是一个队列，是先进先出的，而且消息一旦生产了就不可变，这种有序性和不可变性使得 <code>Kafka</code> 完全可以「<strong>顺序写</strong>」日志文件。</p><p>对于普通的机械磁盘，如果是随机写入性能确实极差，但如果是顺序写入，则大大节省磁盘寻道和盘片旋转的时间，因此性能提升了 <code>3</code> 个数量级。</p><blockquote><p><strong>(3) Page Cache</strong></p></blockquote><p>在读写磁盘日志文件时，利用了操作系统本身的缓存技术，其实操作的都是内存，然后由操作系统决定什么时候将 <code>Page Cache</code> 里的数据真正刷入磁盘，类似于 <code>MySQL</code> 中的 <code>Change Buffer</code>。</p><blockquote><p><strong>(4) 分区分段</strong></p></blockquote><p>当面对海量消息时，单机的存储容量和读写性能有限，对数据进行分区存储，可以更好的利用不同机器的读写能力，应对海量数据的存储。</p><p><code>Kafka</code> 通过水平拆分方案，对数据进行拆分，拆分后的数据子集叫做 <code>Partition</code>，各个分区的数据合集即全量数据。每个 <code>Partition</code> 又被分成了多个 <code>Segment</code>，引入 <code>Segment</code> 可以防止 <code>Partition</code> 过大m，同时做历史消息删除时，常见的操作时需要将文件前面的内容删除，这有悖顺序写的设计。而 <code>Segment</code> 的引入，只需将旧的 <code>Segment</code> 文件删除即可，保证了每个<code>Segment</code> 的顺序写。</p><h4 id="3-消费者"><a href="#3-消费者" class="headerlink" title="3. 消费者"></a>3. 消费者</h4><blockquote><p><strong>(1) 稀疏索引</strong></p></blockquote><p><code>Kafka</code> 查询的场景主要是能按照 <code>offset</code> 或者 <code>timestamp</code> 查到消息即可。因此 <code>Kafka</code> 消息的 <code>offset</code> 设计成有序的，将消息划分成若干个 <code>block</code>，而稀疏索引记录每个 <code>block</code> 第一条消息的 <code>offset</code>，查找的时候便可以便捷的使用二分查找高效定位。</p><p>稀疏索引不会为 <strong>每个搜索关键字创建索引记录</strong>，此处的索引记录包含搜索键和指向磁盘上数据的实际指针，搜索记录时首先按索引记录进行操作，然后到达数据的实际位置再进行顺序搜索，直到找到所需的数据为止。<code>B+</code> 树随着记录插入需要频繁的页分裂效率较低，而 <code>Hash</code> 索引的常驻内存，若高达几百万的消息写入，会将内存撑爆。</p><blockquote><p><strong>(2)零拷贝</strong></p></blockquote><p>零拷贝是指数据直接从磁盘文件复制到网卡设备，而无需经过应用程序，减少了内核和用户模式之间的上下文切换，从而提高了消息消费效率。</p><blockquote><p><strong>(3) 批量拉取</strong></p></blockquote><p>和生产者批量发送消息类似，消息者也是批量拉取消息的，每次拉取一个消息集合以降低了频次，从而大大减少了网络传输的 <code>overhead</code>。</p><blockquote><p><strong>(4) MMAP</strong></p></blockquote><p><code>kafka</code> 在 <strong>索引文件的读写</strong> 中用到了 <code>MMAP(memory mapped files)</code>。</p><p><code>MMAP</code> 是一种内存映射文件的方法，即将一个文件或者其它对象映射到进程的地址空间，实现文件磁盘地址和进程虚拟地址空间中一段虚拟地址的一一对映关系。实现这样的映射关系后，进程就可以采用指针的方式读写操作这一段内存，而系统会自动回 <strong>写脏页面</strong> 到对应的文件磁盘上，即完成了对文件的操作而不必再调用read,write等系统调用函数。  </p><p><code>Kafka</code> 的 <code>log</code> 文件为什么不使用 <code>MMAP</code>？<code>MMAP</code> 有多少字节可以映射到内存中与地址空间有关，<code>32</code> 位的体系结构只能处理 <code>4GB</code> 甚至更小的文件。<code>Kafka</code> 日志通常足够大，可能一次只能映射部分，因此读取它们将变得非常复杂。然而，索引文件是稀疏的，它们相对较小，将它们映射到内存中可以加快查找过程，这是内存映射文件提供的主要好处。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、基本结构&quot;&gt;&lt;a href=&quot;#一、基本结构&quot; class=&quot;headerlink&quot; title=&quot;一、基本结构&quot;&gt;&lt;/a&gt;一、基本结构&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/album/loading.gif&quot; data-original=&quot;/album/ar</summary>
      
    
    
    
    <category term="大数据" scheme="https://great-jin.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Kafka" scheme="https://great-jin.github.io/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Spring接口结果统一封装</title>
    <link href="https://great-jin.github.io/java/spring/tool/unify/"/>
    <id>https://great-jin.github.io/java/spring/tool/unify/</id>
    <published>2023-07-29T16:00:00.000Z</published>
    <updated>2023-12-08T11:34:01.657Z</updated>
    
    <content type="html"><![CDATA[<p>在应用开发中，为了提高开发效率通常需要对后端的响应结果定义统一的规范，即无论失败还是成功，返回的响应信息都应该具备固定的样式。</p><p>本文即介绍如何在 <code>Spring Boot</code> 接口开发中实现统一的响应结果规范。</p><h4 id="1-前提准备"><a href="#1-前提准备" class="headerlink" title="1. 前提准备"></a>1. 前提准备</h4><p>在开始前先准备实体类 <code>ResponseData</code> 作用统一返回的结果对象。</p><p><code>ResponseData</code> 中定义了 <code>success()</code> 与 <code>failed()</code> 两个方法分别对应成功请求与程序异常。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseData</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> code<span class="token punctuation">;</span>    <span class="token keyword">private</span> String message<span class="token punctuation">;</span>    <span class="token keyword">private</span> Object data<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ResponseData <span class="token function">success</span><span class="token punctuation">(</span>Object data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ResponseData response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResponseData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> response<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> ResponseData <span class="token function">failed</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ResponseData response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResponseData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> response<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-异常处理"><a href="#2-异常处理" class="headerlink" title="2. 异常处理"></a>2. 异常处理</h4><p>针对程序运行中的异常我们需要单独进行处理，新建处理类 <code>ExceptionHandle</code> 并通过 <code>@RestControllerAdvice</code> 与 <code>@ExceptionHandler</code> 注解实现异常的捕获监听处理。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionHandle</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 监听异常请求并处理返回     */</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ResponseData <span class="token function">handleNotFoundException</span><span class="token punctuation">(</span>Exception ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> ResponseData<span class="token punctuation">.</span><span class="token function">failed</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-结果封装"><a href="#3-结果封装" class="headerlink" title="3. 结果封装"></a>3. 结果封装</h4><p>通过 <code>@RestControllerAdvice</code> 注解与 <code>ResponseBodyAdvice</code> 接口我们接口实现返回结果的统一封装。</p><blockquote><p><code>ResponseBodyAdvice</code> 接口类中存在两个接口方法：</p><ul><li><strong>supports()：</strong>用于控制是否启用。</li><li><strong>beforeBodyWrite()：</strong>用于控制具体实现逻辑。</li></ul></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestControllerAdvice</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseHandle</span> <span class="token keyword">implements</span> <span class="token class-name">ResponseBodyAdvice</span><span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ObjectMapper objectMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">supports</span><span class="token punctuation">(</span>MethodParameter methodParameter<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">HttpMessageConverter</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> aClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@SneakyThrows</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">beforeBodyWrite</span><span class="token punctuation">(</span>Object o<span class="token punctuation">,</span> MethodParameter methodParameter<span class="token punctuation">,</span> MediaType mediaType<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">HttpMessageConverter</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> aClass<span class="token punctuation">,</span> ServerHttpRequest serverHttpRequest<span class="token punctuation">,</span> ServerHttpResponse serverHttpResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ResponseData responseData<span class="token punctuation">;</span>        responseData <span class="token operator">=</span> ResponseData<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// String 类型需要转为 Json 格式返回</span>            <span class="token keyword">return</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>responseData<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">ResponseData</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 异常处理中已经包了一层这里直接返回</span>            <span class="token keyword">return</span> o<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> responseData<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-示例演示"><a href="#4-示例演示" class="headerlink" title="4. 示例演示"></a>4. 示例演示</h4><p>完成上述配置之后新建如下几个测试接口：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/seal"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BasicController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"demo1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"demo2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"demo3"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">demo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"demo4"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">demo4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token string">"Alex"</span><span class="token punctuation">,</span> <span class="token string">"Test user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"demo5"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">demo5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"user-"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token string">"Test user "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> userList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"demo6"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">demo6</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> DemoException <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">DemoException</span><span class="token punctuation">(</span><span class="token string">"Program went wrong!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述示例接口的请求效果如下：<br><img src="/album/loading.gif" data-original="/album/article/java/spring/seal/1.png" alt="基本类型"><br><img src="/album/loading.gif" data-original="/album/article/java/spring/seal/2.png" alt="复杂对象"><br><img src="/album/loading.gif" data-original="/album/article/java/spring/seal/3.png" alt="异常结果"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在应用开发中，为了提高开发效率通常需要对后端的响应结果定义统一的规范，即无论失败还是成功，返回的响应信息都应该具备固定的样式。&lt;/p&gt;
&lt;p&gt;本文即介绍如何在 &lt;code&gt;Spring Boot&lt;/code&gt; 接口开发中实现统一的响应结果规范。&lt;/p&gt;
&lt;h4 id=&quot;1-</summary>
      
    
    
    
    <category term="Spring工具" scheme="https://great-jin.github.io/categories/Spring%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Spring Boot" scheme="https://great-jin.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Java设计模式介绍</title>
    <link href="https://great-jin.github.io/java/advance/design/"/>
    <id>https://great-jin.github.io/java/advance/design/</id>
    <published>2023-07-17T16:00:00.000Z</published>
    <updated>2023-12-08T11:34:01.646Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、构造模式"><a href="#一、构造模式" class="headerlink" title="一、构造模式"></a>一、构造模式</h3><p>在以往的文章分享过如何改造 <code>Java</code> 对象实现 <code>build</code> 方式构建，如常见的 <code>OkHttp</code> 类库中就涉及到此类操作，这里就不再重复介绍，往期直达：<a href="https://great-jin.github.io/java/advance/builder/">Java Build对象构建教程</a>。</p><pre class="line-numbers language-java"><code class="language-java">Request request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、单例模式"><a href="#二、单例模式" class="headerlink" title="二、单例模式"></a>二、单例模式</h3><p>单例模式即通过 <code>volatile</code> 与类变量的双重验证实现对象的单例创建，在之前锁的文章中介绍到 <code>volatile</code> 关键字时也进行了详细的阐述，往期直达：<a href="https://great-jin.github.io/java/thread/lock/">Java线程锁详解</a></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> Singleton instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Singleton <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 实例为空则获取锁</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>Singleton<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// synchronized 防止多线程同时初始化实例</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、工厂模式"><a href="#三、工厂模式" class="headerlink" title="三、工厂模式"></a>三、工厂模式</h3><h4 id="1-模式介绍"><a href="#1-模式介绍" class="headerlink" title="1. 模式介绍"></a>1. 模式介绍</h4><p>工厂模式是项目开发中最常涉及的设计模式，可能你已经实际应用了只是没意识到而已，同时工厂模式搭配 <code>SPI</code> 即可实现动态的模块打包加载。</p><p>关于 <code>SPI</code> 的介绍参考之前文章，往期直达：<a href="https://great-jin.github.io/java/framwork/spi/">Java SPI介绍与实践</a></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FactorTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        AnimalFactory catFactor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CatFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object cat <span class="token operator">=</span> catFactor<span class="token punctuation">.</span><span class="token function">createAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cat<span class="token punctuation">)</span><span class="token punctuation">;</span>        AnimalFactory dogFactor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DogFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object dog <span class="token operator">=</span> dogFactor<span class="token punctuation">.</span><span class="token function">createAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-示例演示"><a href="#2-示例演示" class="headerlink" title="2. 示例演示"></a>2. 示例演示</h4><p>这里以一个简单的动物工厂为例，首先创建工厂接口类 <code>AnimalFactory</code> 并添加工厂接口 <code>createAnimal()</code> 用于表示创建一类动物，而具体创建的动物类型有工厂实现者重写。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AnimalFactory</span> <span class="token punctuation">{</span>    Object <span class="token function">createAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成工厂类创建之后新建两个工厂实现者 <code>CatFactory</code> 和 <code>DogFactory</code> 分别对应两个不同的类别，并自定义重写工厂中的工厂方法。</p><p>工厂模式的核心思想即在于抽象提取，将同一类别的事物进行抽象，从而让代码的层级结构更为清晰。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CatFactory</span> <span class="token keyword">implements</span> <span class="token class-name">AnimalFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">createAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cat<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Cat"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cat<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DogFactory</span> <span class="token keyword">implements</span> <span class="token class-name">AnimalFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">createAnimal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cat<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"Dog"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cat<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、策略模式"><a href="#四、策略模式" class="headerlink" title="四、策略模式"></a>四、策略模式</h3><h4 id="1-模式介绍-1"><a href="#1-模式介绍-1" class="headerlink" title="1. 模式介绍"></a>1. 模式介绍</h4><p>策略模式即将对象的执行操作与触发条件进行抽象，从而避免业务逻辑中出现大量的 <code>if else</code> 造成程序可读性低。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StrategyTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Operator add <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdditionOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>add<span class="token punctuation">.</span><span class="token function">isSupport</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            add<span class="token punctuation">.</span><span class="token function">doOperate</span><span class="token punctuation">(</span><span class="token string">"Alex"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Operator multiply <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MultiplyOperator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>multiply<span class="token punctuation">.</span><span class="token function">isSupport</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            multiply<span class="token punctuation">.</span><span class="token function">doOperate</span><span class="token punctuation">(</span><span class="token string">"Beth"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-示例演示-1"><a href="#2-示例演示-1" class="headerlink" title="2. 示例演示"></a>2. 示例演示</h4><p>新增策略接口 <code>Operator</code> 并定义两个接口方法，分别用于指定触发条件与执行事件。</p><blockquote><ul><li><strong>isSupport()：</strong> 定义事件触发需满足的条件。</li><li><strong>doOperate()：</strong> 定义相应的触发执行业务逻辑。</li></ul></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Operator</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> <span class="token function">isSupport</span><span class="token punctuation">(</span><span class="token keyword">int</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">doOperate</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成策略接口的定义之后即可进行应用，创建实现类 <code>AdditionOperator</code> 与 <code>MultiplyOperator</code> 分别对应加法与乘法操作。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdditionOperator</span> <span class="token keyword">implements</span> <span class="token class-name">Operator</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSupport</span><span class="token punctuation">(</span><span class="token keyword">int</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> type <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doOperate</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" do addition(+100), result "</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultiplyOperator</span> <span class="token keyword">implements</span> <span class="token class-name">Operator</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isSupport</span><span class="token punctuation">(</span><span class="token keyword">int</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> type <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doOperate</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> num <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" do multiply(*100), result "</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、代理模式"><a href="#五、代理模式" class="headerlink" title="五、代理模式"></a>五、代理模式</h3><h4 id="1-模式介绍-2"><a href="#1-模式介绍-2" class="headerlink" title="1. 模式介绍"></a>1. 模式介绍</h4><p>代理模式顾名思义即在原有的执行逻辑顺序上添加一层代理，而不更改原有的具体业务逻辑，其执行流程如下：<br><img src="/album/loading.gif" data-original="/album/article/java/design/proxy.png"></p><p>在代理层应用最为广泛的即入参与出参的日志信息打印，从而在不更改业务逻辑的情况实现信息打印输出。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ProxyService proxyService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String result <span class="token operator">=</span> proxyService<span class="token punctuation">.</span><span class="token function">proxySendMessage</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-示例演示-2"><a href="#2-示例演示-2" class="headerlink" title="2. 示例演示"></a>2. 示例演示</h4><p>先创建 <code>UserService</code> 用于定义具体的业务逻辑流程，其代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    String <span class="token function">sendMessage</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">sendMessage</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Send user message: "</span> <span class="token operator">+</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成后创建相应的代理服务 <code>ProxyService</code> 用于调用上述的 <code>UserService</code> 中对应的方法，在代理中我们可以实现调用前后的入参与出参数据打印，即可实现不修改 <code>UserService</code> 业务逻辑的请求下进行日志打印。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">proxySendMessage</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Print log</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Proxy start log: "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Proxy request</span>        UserService userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String result <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Print log</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Proxy end log: "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Proxy request</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六、模板模式"><a href="#六、模板模式" class="headerlink" title="六、模板模式"></a>六、模板模式</h3><h4 id="1-模式介绍-3"><a href="#1-模式介绍-3" class="headerlink" title="1. 模式介绍"></a>1. 模式介绍</h4><p>模板模式即事物的操作是按照固定的流程模板运转，不同的仅仅是流程的节点的具体实现有所差异。</p><p>这里以旅行为例，其大体的流程可分为三部分：计划，出行与返回，不同的仅是这三部分具体的内容，因此我们即可定义一个固定的模板，不同的类别重写模板中的各个节点的具体内容即可。<br><img src="/album/loading.gif" data-original="/album/article/java/design/template.png"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TemplateTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============ WorkerTravel ==========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AbstractTravel workerTravel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WorkerTravel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        workerTravel<span class="token punctuation">.</span><span class="token function">doTravel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============ TeacherTravel ==========="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AbstractTravel teacherTravel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TeacherTravel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        teacherTravel<span class="token punctuation">.</span><span class="token function">doTravel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-示例演示-3"><a href="#2-示例演示-3" class="headerlink" title="2. 示例演示"></a>2. 示例演示</h4><p>新建抽象类 <code>AbstractTravel</code> 并定义了旅行模板 <code>doTravel()</code>，模板中提供了三个抽象方法表示具体的执行节点由继承者自定义重写，在对外开放的接口也仅有 <code>doTravel()</code> 方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractTravel</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Defined the procedure and active order.     * &lt;p>     * Each extends class only need to override the abstract method.     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doTravel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">plan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">backHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">plan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">backHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建两个类 <code>TeacherTravel</code> 与 <code>WorkerTravel</code> 继承与 <code>AbstractTravel</code> 并重写其三个抽象方法，分别定义各自对象所对应的模板节点处理逻辑。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TeacherTravel</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTravel</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">plan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Teacher plan."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Teacher play."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">backHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Teacher back home."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WorkerTravel</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTravel</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">plan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Worker plan."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Worker play."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">backHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Worker backHome."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="七、责任链模式"><a href="#七、责任链模式" class="headerlink" title="七、责任链模式"></a>七、责任链模式</h3><h4 id="1-模式介绍-4"><a href="#1-模式介绍-4" class="headerlink" title="1. 模式介绍"></a>1. 模式介绍</h4><p>责任链模式与模板模式有点类似，都是基于一定的流程，但责任链模式中的流程节点是不固定的，而模板模式的流程节点则是固定的。</p><p>责任链模式的核心在于链路，其流程是根据一定顺序执行，即一定流程节点一定存在先后关系，至于流程节点内容其并不关心。<br><img src="/album/loading.gif" data-original="/album/article/java/design/chain.png"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChainTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Set chain</span>        AbstractHandler h1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FirstHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AbstractHandler h2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SecondHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AbstractHandler h3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThirdHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h1<span class="token punctuation">.</span><span class="token function">nextHandler</span><span class="token punctuation">(</span>h2<span class="token punctuation">)</span><span class="token punctuation">;</span>        h2<span class="token punctuation">.</span><span class="token function">nextHandler</span><span class="token punctuation">(</span>h3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Active chain</span>        HandleChain chain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HandleChain</span><span class="token punctuation">(</span><span class="token string">"demo-chain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        h1<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>chain<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-示例演示-4"><a href="#2-示例演示-4" class="headerlink" title="2. 示例演示"></a>2. 示例演示</h4><p>首先创建责任链对应 <code>HandleChain</code> 用于定义存放链路中的数据与下一节点信息。</p><p>同时创建抽象类 <code>AbstractHandler</code> 用于设置链路处理逻辑与配置下级链路信息，其内容包含下述三部分。</p><blockquote><ul><li><strong>handle()：</strong> 定义链路节点业务处理逻辑。</li><li><strong>nextHandler()：</strong> 用于配置当前节点的下级节点。</li><li><strong>invokeNext()：</strong> 当下级节点不为空时传递至下级节点。</li></ul></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HandleChain</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Object data<span class="token punctuation">;</span>    <span class="token keyword">private</span> HandleChain nextChain<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">HandleChain</span><span class="token punctuation">(</span>Object data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 责任链中的下一个处理对象     */</span>    <span class="token keyword">protected</span> AbstractHandler next<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 核心处理逻辑     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span>HandleChain chain<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 设置下一个处理对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nextHandler</span><span class="token punctuation">(</span>AbstractHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> handler<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 调用下一个处理对象     */</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">invokeNext</span><span class="token punctuation">(</span>HandleChain chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            next<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>chain<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建一个处理节点 <code>FirstHandler</code>、 <code>SecondHandler</code> 与 <code>ThirdHandler</code>，重写 <code>handle()</code> 方法实现自定义业务逻辑，并在方法结束时调用 <code>invokeNext()</code> 触发下一节点（在存在下级节点的情况下）。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstHandler</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span>HandleChain chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Update context</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============= First handle =============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Receive data: "</span> <span class="token operator">+</span> chain<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chain<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"First update data."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Process to next</span>        <span class="token function">invokeNext</span><span class="token punctuation">(</span>chain<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecondHandler</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span>HandleChain chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Update context</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============= Second handle =============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Receive data: "</span> <span class="token operator">+</span> chain<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chain<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"Second update data."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Process to next</span>        <span class="token function">invokeNext</span><span class="token punctuation">(</span>chain<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThirdHandler</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractHandler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span>HandleChain chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Update context</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============= Third handle =============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Receive data: "</span> <span class="token operator">+</span> chain<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        chain<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"Third update data."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Process to next</span>        <span class="token function">invokeNext</span><span class="token punctuation">(</span>chain<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="八、观察者模式"><a href="#八、观察者模式" class="headerlink" title="八、观察者模式"></a>八、观察者模式</h3><h4 id="1-模式介绍-5"><a href="#1-模式介绍-5" class="headerlink" title="1. 模式介绍"></a>1. 模式介绍</h4><p>观察者模式即为对象创建监听器，当事件触发时通知对应的观察者。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObserverTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Listener<span class="token operator">&lt;</span>Observer<span class="token operator">></span> listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObserverListener</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Register listener</span>        listener<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StatusObserver</span><span class="token punctuation">(</span><span class="token string">"Status-1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listener<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StatusObserver</span><span class="token punctuation">(</span><span class="token string">"Status-2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listener<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObjectObserver</span><span class="token punctuation">(</span><span class="token string">"Object-1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        listener<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ObjectObserver</span><span class="token punctuation">(</span><span class="token string">"Object-2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Send notification</span>        listener<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-示例演示-5"><a href="#2-示例演示-5" class="headerlink" title="2. 示例演示"></a>2. 示例演示</h4><p>首先新建观察者对象 <code>Observer</code> 与监听器工厂 <code>Listener</code> 并实现了一个观察者监听器 <code>ObserverListener</code> 。</p><blockquote><p>其中观察者用于接收事件通知，监听器工厂中定义了三个主要事件：</p><ul><li><strong>register()：</strong> 添加观察者对象。</li><li><strong>remove()：</strong> 移除观察者对象。</li><li><strong>notify()：</strong> 通知已添加注册的观察者。</li></ul></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Listener</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">notify</span><span class="token punctuation">(</span>String t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">received</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObserverListener</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Observer</span><span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Listener</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> listenerList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        listenerList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        listenerList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">notify</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>T t <span class="token operator">:</span> listenerList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            t<span class="token punctuation">.</span><span class="token function">received</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成后实现 <code>Observer</code> 类创建不同类型的观察者对象用于事件的观察监听。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObjectObserver</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ObjectObserver</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">received</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s received message: %s%n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StatusObserver</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">StatusObserver</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">received</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s received message: %s%n"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="九、标记模式"><a href="#九、标记模式" class="headerlink" title="九、标记模式"></a>九、标记模式</h3><h4 id="1-模式介绍-6"><a href="#1-模式介绍-6" class="headerlink" title="1. 模式介绍"></a>1. 模式介绍</h4><p>标记模式其实很简单，即通过一个空接口用于表示标记，如 <code>Java</code> 中序列化接口 <code>Serializable</code>，其并没有定义任意内容，仅起到标记内容，如果一个类没有实现该接口，则说明不支持该操作。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MarkTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> objList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">markDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">putContainer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">EnableMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedOperationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">putContainer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DisableMark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedOperationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>objList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">putContainer</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> markCls <span class="token operator">=</span> Marker<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>markCls<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Class [%s] is supported.\n"</span><span class="token punctuation">,</span> clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            objList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"The class ["</span> <span class="token operator">+</span> clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] is not supported putContainer()."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-示例演示-6"><a href="#2-示例演示-6" class="headerlink" title="2. 示例演示"></a>2. 示例演示</h4><p>标记模式的定义相对简单，新建空接口 <code>Marker</code>，若一个类实现了 <code>Marker</code> 表示支持标记，在程序中即可通过 <code>isAssignableFrom()</code> 方法返回是否实现了该接口类。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Marker</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DisableMark</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnableMark</span> <span class="token keyword">implements</span> <span class="token class-name">Marker</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="十、回调模式"><a href="#十、回调模式" class="headerlink" title="十、回调模式"></a>十、回调模式</h3><h4 id="1-模式介绍-7"><a href="#1-模式介绍-7" class="headerlink" title="1. 模式介绍"></a>1. 模式介绍</h4><p>在传统的方法定义中，若一个方法不为 <code>void</code> 则结果都是通过 <code>return</code> 进行返回，而返回则是通过回调在方法入参进行返回。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CallbackTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FutureEvent<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> caller <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            String key <span class="token operator">=</span> caller<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Receive message: "</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FutureEvent<span class="token punctuation">.</span><span class="token function">activated</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">EventHandle</span><span class="token operator">&lt;</span>Properties<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">success</span><span class="token punctuation">(</span>Properties props<span class="token punctuation">)</span> <span class="token punctuation">{</span>                String key <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Receive message: "</span> <span class="token operator">+</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">failed</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">,</span> Properties props<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Capture exception: "</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-示例演示-7"><a href="#2-示例演示-7" class="headerlink" title="2. 示例演示"></a>2. 示例演示</h4><blockquote><p>常见的回调方式有以下两类：</p><ul><li><strong>第一类</strong>：将执行完成后的结果通过回调返回。</li><li><strong>第二类</strong>：将执行结果拆分，提供结果接口与异常接口。</li></ul></blockquote><p>上述二者回调接口具体定义内容如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Callback</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">callback</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">EventHandle</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">success</span><span class="token punctuation">(</span>T data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">failed</span><span class="token punctuation">(</span>Throwable e<span class="token punctuation">,</span> T data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FutureEvent</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">callback</span><span class="token punctuation">(</span>T t<span class="token punctuation">,</span> Callback<span class="token operator">&lt;</span>T<span class="token operator">></span> caller<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// do something to "props" then transfer it</span>        caller<span class="token punctuation">.</span><span class="token function">callback</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">void</span> <span class="token function">activated</span><span class="token punctuation">(</span>T t<span class="token punctuation">,</span> EventHandle<span class="token operator">&lt;</span>T<span class="token operator">></span> handle<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"illegal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// do something to data(t) then transfer it</span>            handle<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            handle<span class="token punctuation">.</span><span class="token function">failed</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>参考文章</strong></p><ol><li><a href="https://juejin.cn/post/7166466161398251528">两万字盘点被玩烂了的9种设计模式</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、构造模式&quot;&gt;&lt;a href=&quot;#一、构造模式&quot; class=&quot;headerlink&quot; title=&quot;一、构造模式&quot;&gt;&lt;/a&gt;一、构造模式&lt;/h3&gt;&lt;p&gt;在以往的文章分享过如何改造 &lt;code&gt;Java&lt;/code&gt; 对象实现 &lt;code&gt;build&lt;/code</summary>
      
    
    
    
    <category term="JAVA进阶" scheme="https://great-jin.github.io/categories/JAVA%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot文件上下载</title>
    <link href="https://great-jin.github.io/java/spring/tool/upload/"/>
    <id>https://great-jin.github.io/java/spring/tool/upload/</id>
    <published>2023-07-07T16:00:00.000Z</published>
    <updated>2023-12-08T11:34:01.657Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、前端设计"><a href="#一、前端设计" class="headerlink" title="一、前端设计"></a>一、前端设计</h3><h4 id="1-页面设计"><a href="#1-页面设计" class="headerlink" title="1. 页面设计"></a>1. 页面设计</h4><p>前端页面这里我选择了 <code>Vue Antd</code> 提供的上传组件实现，页面效果如下：<br><img src="/album/loading.gif" data-original="/album/article/java/spring/upload.png"></p><p>当用户未选择文件之前 <code>上传</code> 按钮是状态是不可点击，选择文件之后点击上传则将文件传至后端进行保存，下载则通过文件名进行匹配。</p><p>页面实现示例代码如下：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">{</span><span class="token property">margin</span><span class="token punctuation">:</span> <span class="token string">'10px 20px'</span><span class="token punctuation">}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- File upload --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a-upload</span> <span class="token attr-name">:file-list</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fileList<span class="token punctuation">"</span></span> <span class="token attr-name">:remove</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleRemove<span class="token punctuation">"</span></span> <span class="token attr-name">:before-upload</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beforeUpload<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a-button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a-icon</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upload<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        选择文件      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a-button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a-button</span>        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span>        <span class="token attr-name">:disabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fileList.length <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span> 0<span class="token punctuation">"</span></span>        <span class="token attr-name">:loading</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uploading<span class="token punctuation">"</span></span>        <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleUpload<span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span> {{ uploading ? '上传中' : '上传' }}      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a-button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a-upload</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- File download --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a-row</span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">{</span><span class="token property">marginTop</span><span class="token punctuation">:</span> <span class="token string">'20px'</span><span class="token punctuation">}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a-input</span>          <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fileName<span class="token punctuation">"</span></span>          <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入文件名<span class="token punctuation">"</span></span>        <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a-col</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a-button</span>          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span>          <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>download(<span class="token punctuation">'</span>file<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span>下载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a-button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a-col</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a-col</span> <span class="token attr-name">:span</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a-button</span>          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span>          <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>download(<span class="token punctuation">'</span>export<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span>导出<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a-button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a-col</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a-row</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-方法设计"><a href="#2-方法设计" class="headerlink" title="2. 方法设计"></a>2. 方法设计</h4><p>上述页面中定义的数据与方法代码如下，其中 <code>files.js</code> 为通过 <code>axios</code> 定义的请求接口，在后续的后端接口设计中将会提供。</p><p>其中较为核心的部分即为 <code>handleUpload()</code> 与 <code>download()</code> 方法，分别对应文件的上传与下载，这里详细讲解一下 <code>handleUpload()</code> 的操作。</p><p>通常文件上传使用 <code>Content-Type</code> 为 <code>multipart/form-data</code>，因此这里使用 <code>FormData()</code> 对象将用户上传的对象传至后端，通过 <code>forEach</code> 函数将文件列表依次由 <code>append()</code> 进行赋值，后端将通过数组进行接收。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">handleUpload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>fileList<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>uploading <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建表单对象</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    fileList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>file <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 表单数据赋值</span>        data<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"files"</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 调用接口上传</span>    <span class="token function">uploadFile</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>fileList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">'上传成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>uploading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'上传失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>uploading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成的方法示例代码如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">{</span>uploadFile<span class="token punctuation">,</span> downloadFile<span class="token punctuation">,</span> downloadExcel<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'@/api/files.js'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      fileList<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      uploading<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      fileName<span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">handleRemove</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> index <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fileList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> newFileList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fileList<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      newFileList<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>fileList <span class="token operator">=</span> newFileList<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">beforeUpload</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>fileList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>fileList<span class="token punctuation">,</span> file<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">handleUpload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span>fileList<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>uploading <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      fileList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>file <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        data<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"files"</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token function">uploadFile</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>fileList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">'上传成功'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>uploading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'上传失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>uploading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">download</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'file'</span><span class="token punctuation">:</span>          <span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fileName          <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> file <span class="token operator">!==</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"下载文件"</span><span class="token punctuation">)</span>            <span class="token function">downloadFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"请输入文件名"</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'export'</span><span class="token punctuation">:</span>          <span class="token function">downloadExcel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、文件上传"><a href="#二、文件上传" class="headerlink" title="二、文件上传"></a>二、文件上传</h3><h4 id="1-文件接收"><a href="#1-文件接收" class="headerlink" title="1. 文件接收"></a>1. 文件接收</h4><p><code>MultipartFile</code> 为 <code>Spring</code> 提供的文件类用于文件的上传等操作，这里定义了一个数组对象接收前端的传输的文件集合。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/file"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> FileService fileService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"upload"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"files"</span><span class="token punctuation">)</span> MultipartFile<span class="token punctuation">[</span><span class="token punctuation">]</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>MultipartFile file <span class="token operator">:</span> files<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 保存文件</span>            fileService<span class="token punctuation">.</span><span class="token function">saveFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-文件转存"><a href="#2-文件转存" class="headerlink" title="2. 文件转存"></a>2. 文件转存</h4><p>后端在选择转存文件时存在两种方案，第一种即转存至当前运行服务器上，第二种即转存至第三方对象存储服务中（如 <code>OSS、MinIO</code> 等），这里以本地转为例。</p><p>在之前的文章分享过 <code>MinIO</code> 转存，有兴趣的可以去考个古，<a href="https://great-jin.github.io/db/minio/spring/">Spring Boot集成MinIO</a>。</p><p>上一步中的 <code>saveFile()</code> 方法代码如下，通过 <code>Files.copy()</code> 将接收的文件进行转存。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">FileService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Path path <span class="token operator">=</span> Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"E:\\Temporary\\"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveFile</span><span class="token punctuation">(</span>MultipartFile file<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String fileName <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span> <span class="token operator">||</span> fileName<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            fileName <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Files<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-接口对接"><a href="#3-接口对接" class="headerlink" title="3. 接口对接"></a>3. 接口对接</h4><p>为了方便接口调用这里通过 <code>Axios</code> 对接口进行简单封装，注意需要在请求头中指定 <code>Content-Type</code> 为 <code>multipart/form-data</code> 表示表单文件上传。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">'./util/axios'</span><span class="token punctuation">;</span><span class="token keyword">const</span> prefix <span class="token operator">=</span> <span class="token string">"/api/file"</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">uploadFile</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    method<span class="token punctuation">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>    url<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>prefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/upload`</span></span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> params<span class="token punctuation">,</span>    headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'multipart/form-data'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、文件下载"><a href="#三、文件下载" class="headerlink" title="三、文件下载"></a>三、文件下载</h3><h4 id="1-文件读取"><a href="#1-文件读取" class="headerlink" title="1. 文件读取"></a>1. 文件读取</h4><p>通过传入的文件名从目标路径读取文件，并将文件转为字节数组写入相应体返回前端以供下载。</p><p>完整的实现代码示例如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/file"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileController</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> FileService fileService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"download"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"fileName"</span><span class="token punctuation">)</span> String fileName<span class="token punctuation">,</span>                         HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        fileService<span class="token punctuation">.</span><span class="token function">download</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">FileService</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> Path path <span class="token operator">=</span> Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"E:\\Temporary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">download</span><span class="token punctuation">(</span>String fileName<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 读取文件</span>            File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path <span class="token operator">+</span> File<span class="token punctuation">.</span>separator <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"文件不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 读取类型</span>            String type <span class="token operator">=</span> Files<span class="token punctuation">.</span><span class="token function">probeContentType</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"filename"</span><span class="token punctuation">,</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 写入文件</span>            response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// 写入数据</span>                    <span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token function">inputStreamToByte</span><span class="token punctuation">(</span>Files<span class="token punctuation">.</span><span class="token function">newInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">toPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * InputStream 转 byte 数组     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">inputStreamToByte</span><span class="token punctuation">(</span>InputStream in<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>ByteArrayOutputStream bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> ch<span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ch <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> bos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-文件导出"><a href="#2-文件导出" class="headerlink" title="2. 文件导出"></a>2. 文件导出</h4><p>在下载文件时除了直接读取已有文件之外通常还有一种情况即从数据库表中导出数据，最常用的第三方工具即 <code>easyexcel</code>，在项目中导入下述依赖。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>easyexcel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>easyexcel</code> 工具可以编辑的将 <code>Java</code> 中的集合列表等数据结构转为 <code>Excel</code> 文件以供下载，其基本 <code>API</code> 参考下表。</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">head()</td>        <td style="text-align: center;">防止。</td>    </tr>    <tr>        <td style="text-align: center;">sheet()</td>        <td style="text-align: center;">判断。</td>    </tr>    <tr>        <td style="text-align: center;">registerWriteHandler()</td>        <td style="text-align: center;">判断。</td>    </tr>    <tr>        <td style="text-align: center;">doWrite()</td>        <td style="text-align: center;">委托。</td>    </tr></table><p>完整的 <code>Excel</code> 文件导出示例代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"export"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">downloadExcel</span><span class="token punctuation">(</span>HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 设置请求头</span>    response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/vnd.ms-excel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"filename"</span><span class="token punctuation">,</span> URLEncoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"user-list"</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 查询数据列表</span>    List<span class="token operator">&lt;</span>SysUser<span class="token operator">></span> userList <span class="token operator">=</span> sysUserService<span class="token punctuation">.</span><span class="token function">queryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"编号"</span><span class="token punctuation">,</span> <span class="token string">"用户名"</span><span class="token punctuation">,</span> <span class="token string">"简介"</span><span class="token punctuation">,</span> <span class="token string">"性别"</span><span class="token punctuation">,</span> <span class="token string">"生日"</span><span class="token punctuation">,</span> <span class="token string">"电话"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>String<span class="token operator">>></span> collect <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Arrays<span class="token operator">:</span><span class="token operator">:</span>asList<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 写入请求</span>    EasyExcel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// Excel 头</span>            <span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span>collect<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token string">"Info"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 宽度自适应</span>            <span class="token punctuation">.</span><span class="token function">registerWriteHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LongestMatchColumnWidthStyleStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 写入内容</span>            <span class="token punctuation">.</span><span class="token function">doWrite</span><span class="token punctuation">(</span>userList<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-接口设计"><a href="#3-接口设计" class="headerlink" title="3. 接口设计"></a>3. 接口设计</h4><p>与文件上传同理这里通过 <code>Axios</code> 对文件下载接口进行封装实现更便捷调用，代码内容如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> request <span class="token keyword">from</span> <span class="token string">'./util/axios'</span><span class="token punctuation">;</span><span class="token keyword">const</span> prefix <span class="token operator">=</span> <span class="token string">"/api/file"</span><span class="token keyword">export</span> <span class="token keyword">const</span> downloadFile <span class="token operator">=</span> params <span class="token operator">=</span><span class="token operator">></span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  method<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>  url<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>prefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/download`</span></span><span class="token punctuation">,</span>  params<span class="token punctuation">:</span> params<span class="token punctuation">,</span>  responseType<span class="token punctuation">:</span> <span class="token string">'blob'</span><span class="token punctuation">,</span>  headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">'Access-Control-Allow-origin'</span><span class="token punctuation">:</span> <span class="token string">'*'</span><span class="token punctuation">,</span>    <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'charset=UTF-8'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 读取文件名</span>    <span class="token keyword">let</span> fileName <span class="token operator">=</span> <span class="token string">''</span> <span class="token operator">+</span> res<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>filename    fileName <span class="token operator">=</span> <span class="token function">decodeURI</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 读取文件数据</span>    <span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>res<span class="token punctuation">.</span>data<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> brower <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Edge'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      brower <span class="token operator">=</span> <span class="token string">'Edge'</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'download'</span> <span class="token keyword">in</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>brower <span class="token operator">===</span> <span class="token string">'Edge'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        navigator<span class="token punctuation">.</span><span class="token function">msSaveBlob</span><span class="token punctuation">(</span>blob<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span>        <span class="token keyword">return</span>      <span class="token punctuation">}</span>      <span class="token keyword">const</span> url <span class="token operator">=</span> window<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>      <span class="token keyword">const</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>      link<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span>      link<span class="token punctuation">.</span>href <span class="token operator">=</span> url      link<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'download'</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      link<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      URL<span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span>herf<span class="token punctuation">)</span>      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// IE10+下载</span>      navigator<span class="token punctuation">.</span><span class="token function">msSaveBlob</span><span class="token punctuation">(</span>blob<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">const</span> downloadExcel <span class="token operator">=</span> params <span class="token operator">=</span><span class="token operator">></span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  method<span class="token punctuation">:</span> <span class="token string">'get'</span><span class="token punctuation">,</span>  url<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>prefix<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/export`</span></span><span class="token punctuation">,</span>  params<span class="token punctuation">:</span> params<span class="token punctuation">,</span>  responseType<span class="token punctuation">:</span> <span class="token string">'blob'</span><span class="token punctuation">,</span>  headers<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">'Access-Control-Allow-origin'</span><span class="token punctuation">:</span> <span class="token string">'*'</span><span class="token punctuation">,</span>    <span class="token string">'Content-Type'</span><span class="token punctuation">:</span> <span class="token string">'charset=UTF-8'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>res <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 设置文件后缀</span>    <span class="token keyword">let</span> fileName <span class="token operator">=</span> <span class="token string">''</span> <span class="token operator">+</span> res<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>filename <span class="token operator">+</span> <span class="token string">'.xlsx'</span>    fileName <span class="token operator">=</span> <span class="token function">decodeURI</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 读取文件数据</span>    <span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>res<span class="token punctuation">.</span>data<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> brower <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'Edge'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      brower <span class="token operator">=</span> <span class="token string">'Edge'</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'download'</span> <span class="token keyword">in</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>brower <span class="token operator">===</span> <span class="token string">'Edge'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        navigator<span class="token punctuation">.</span><span class="token function">msSaveBlob</span><span class="token punctuation">(</span>blob<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span>        <span class="token keyword">return</span>      <span class="token punctuation">}</span>      <span class="token keyword">const</span> url <span class="token operator">=</span> window<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>      <span class="token keyword">const</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>      link<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">'none'</span>      link<span class="token punctuation">.</span>href <span class="token operator">=</span> url      link<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'download'</span><span class="token punctuation">,</span> fileName<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span>      <span class="token punctuation">}</span>      link<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      URL<span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span>herf<span class="token punctuation">)</span>      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// IE10+下载</span>      navigator<span class="token punctuation">.</span><span class="token function">msSaveBlob</span><span class="token punctuation">(</span>blob<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、前端设计&quot;&gt;&lt;a href=&quot;#一、前端设计&quot; class=&quot;headerlink&quot; title=&quot;一、前端设计&quot;&gt;&lt;/a&gt;一、前端设计&lt;/h3&gt;&lt;h4 id=&quot;1-页面设计&quot;&gt;&lt;a href=&quot;#1-页面设计&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="Spring工具" scheme="https://great-jin.github.io/categories/Spring%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Spring Boot" scheme="https://great-jin.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Java定时任务介绍</title>
    <link href="https://great-jin.github.io/java/basis/schedule/"/>
    <id>https://great-jin.github.io/java/basis/schedule/</id>
    <published>2023-06-30T16:00:00.000Z</published>
    <updated>2023-12-08T11:34:01.651Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、定时任务"><a href="#一、定时任务" class="headerlink" title="一、定时任务"></a>一、定时任务</h3><p>在 <code>java.util</code> 包下提供了 <code>Timer</code> 与 <code>TimerTask</code> 用于提交定时任务，其中 <code>Timer</code> 用于管理定时任务，<code>TimerTask</code> 创建定义定时任务的具体执行内容。</p><h4 id="1-定时任务"><a href="#1-定时任务" class="headerlink" title="1. 定时任务"></a>1. 定时任务</h4><p><code>TimerTask</code> 使用类似于线程，新建任务类 <code>CustomTask</code> 继承 <code>TimerTask</code> 类并重写 <code>run()</code> 方法，在 <code>run()</code> 方法中定义任务的具体执行逻辑。</p><p>如下示例中我定义了一个定时任务打印当前系统时间并自增计数器 <code>num</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">CustomTask</span> <span class="token keyword">extends</span> <span class="token class-name">TimerTask</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String taskName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CustomTask</span><span class="token punctuation">(</span>String taskName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>taskName <span class="token operator">=</span> taskName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            DateTimeFormatter formatter <span class="token operator">=</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd hh:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String nowadays <span class="token operator">=</span> formatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Schedule [%s] active, current time: %s%n"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>taskName<span class="token punctuation">,</span> nowadays<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Error running thread "</span> <span class="token operator">+</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        num<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-任务提交"><a href="#2-任务提交" class="headerlink" title="2. 任务提交"></a>2. 任务提交</h4><p>完成定时任务的创建之后即可通过 <code>Timer</code> 类的 <code>schedule()</code> 方法进行提交，Timer 中维护了一个默认大小为 128 的工作队列用于接收传入定时任务。</p><p><code>schedule(task, delay, period)</code> 方法的三个入参描述参考下表。</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">描述</td>    </tr>    <tr>        <td style="text-align: center;">task</td>        <td style="text-align: center;">需要指定的定时任务。</td>    </tr>    <tr>        <td style="text-align: center;">delay</td>        <td style="text-align: center;">long 类型，任务首次触发时间与当前的时间差。</td>    </tr>    <tr>        <td style="text-align: center;">period</td>        <td style="text-align: center;">long 类型，定时任务间隔周期。</td>    </tr></table><p>如下示例中通过 <code>Timer</code> 提交了一个定时任务，并设置在 <code>2</code> 秒后触发，任务每隔 <code>5</code> 秒执行一次。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduleTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> AtomicInteger num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">timeTaskDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        Timer time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> delay <span class="token operator">=</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> period <span class="token operator">=</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        time<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> delay<span class="token punctuation">,</span> period<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                time<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cancel time task."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// purge(): Remove the cancelled task from time queue.</span>        <span class="token comment" spellcheck="true">// If timer queue is empty that is eligible for gc</span>        time<span class="token punctuation">.</span><span class="token function">purge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了 <code>schedule()</code> 方法 <code>Timer</code> 类中还提供其它相应的操作，具体信息参考下表：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">描述</td>    </tr>    <tr>        <td style="text-align: center;">cancel()</td>        <td style="text-align: center;">清空排队中定时任务并不再接收新提交任务，但是正在执行的任务不会中断。</td>    </tr>    <tr>        <td style="text-align: center;">purge()</td>        <td style="text-align: center;">清空队列中已经被 cancel 的任务，当队列为空时即可被 GC。</td>    </tr></table><h3 id="二、延时类"><a href="#二、延时类" class="headerlink" title="二、延时类"></a>二、延时类</h3><h4 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h4><p>在 <code>Java</code> 中提供了 <code>Delayed</code> 接口类以供延迟队列，延迟队列中的元素必须实现 <code>Delayed</code> 接口。</p><p><code>Delayed</code> 接口中包含了重要接口方法 <code>getDelay()</code>，新建自定义延迟任务类 <code>DelayTask</code> 并重新该方法，当延迟队列 <code>DelayQueue</code> 在获取元素即会调用该方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">DelayTask</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Delayed</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> EXPIRE <span class="token operator">=</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> T t<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> startTime<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DelayTask</span><span class="token punctuation">(</span>T t<span class="token punctuation">,</span> <span class="token keyword">long</span> startTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>t <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>startTime <span class="token operator">=</span> startTime <span class="token operator">+</span> EXPIRE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Get element will activate getDelay().     * &lt;p>     * If "interval" lower the zero then retrieved to get.     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getDelay</span><span class="token punctuation">(</span>TimeUnit unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> interval <span class="token operator">=</span> startTime <span class="token operator">-</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// convert time interval to milliseconds</span>        <span class="token keyword">return</span> unit<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>interval<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Delayed o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DelayTask<span class="token operator">&lt;</span>T<span class="token operator">></span> task <span class="token operator">=</span> <span class="token punctuation">(</span>DelayTask<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> Ints<span class="token punctuation">.</span><span class="token function">saturatedCast</span><span class="token punctuation">(</span>startTime <span class="token operator">-</span> task<span class="token punctuation">.</span>startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-任务提交-1"><a href="#2-任务提交-1" class="headerlink" title="2. 任务提交"></a>2. 任务提交</h4><p>完成延迟任务对象定义之后即可创建延迟队列，其常用方法参考下表：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">add()</td>        <td style="text-align: center;">添加延时任务至队列，返回 boolean 值。</td>    </tr>    <tr>        <td style="text-align: center;">put()</td>        <td style="text-align: center;">添加延时任务至队列，无返回值。</td>    </tr>    <tr>        <td style="text-align: center;">take()</td>        <td style="text-align: center;">以阻塞的方式获取队列元素。</td>    </tr></table><p>这里重点介绍一下 <code>take()</code> 方法的作用效果。</p><blockquote><p>当 <code>take()</code> 获取队列元素时将会触发 <code>Delayed</code> 接口的 <code>getDelay()</code> 方法。</p><ul><li>若返回值小于等于 <code>0</code>，返回队列元素。</li><li>若返回值大于 <code>0</code>，则访问队头的后一位元素。</li><li>若队列中所有元素的 <code>getDelay()</code> 返回值皆大于 <code>0</code>，<code>take()</code> 将一直处于阻塞状态。</li></ul></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delayDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    DelayQueue<span class="token operator">&lt;</span>DelayTask<span class="token operator">&lt;</span>String<span class="token operator">>></span> delayQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelayQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    delayQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DelayTask</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"Alex"</span><span class="token punctuation">,</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    delayQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DelayTask</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"Beth"</span><span class="token punctuation">,</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * task(): Get queue head element and active getDelay() result     * ==> 1. result &lt;= 0: return element.     * ==> 2. result > 0: skit element and visit next, if all > 0 then block.     */</span>    DelayTask<span class="token operator">&lt;</span>String<span class="token operator">></span> task <span class="token operator">=</span> delayQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Task: "</span> <span class="token operator">+</span> task<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、定时线程池"><a href="#三、定时线程池" class="headerlink" title="三、定时线程池"></a>三、定时线程池</h3><h4 id="1-基本介绍-1"><a href="#1-基本介绍-1" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h4><p>上述提到 Timer 类中维护了一个工作队列并以单线程执行定时任务，而 <code>ScheduledExecutorService</code> 可用于创建定时线程任务资源池。</p><p><code>ScheduledExecutorService</code> 提交任务不再限制必须继承于 <code>TimerTask</code>，任务类继承于线程同样允许。</p><h4 id="2-任务提交-2"><a href="#2-任务提交-2" class="headerlink" title="2. 任务提交"></a>2. 任务提交</h4><p>通过 <code>newScheduledThreadPool()</code> 创建定时任务线程池资源，通过构造器指定线程数。</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">schedule()</td>        <td style="text-align: center;">提交定时任务，仅执行一次。</td>    </tr>    <tr>        <td style="text-align: center;">scheduleAtFixedRate()</td>        <td style="text-align: center;">提交定时任务，任务触发间隔周期是按上次任务开始时间计算。</td>    </tr>    <tr>        <td style="text-align: center;">scheduleWithFixedDelay()</td>        <td style="text-align: center;">提交定时任务，任务触发间隔周期是按上次任务完成时间计算。</td>    </tr></table><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">scheduledPoolDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    ScheduledExecutorService executor <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> interval <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前时间 1 秒后执行一次</span>    executor<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Task-1 running."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> interval<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 当前时间 1 秒后执行, 且每隔 3 秒重复执行</span>    <span class="token comment" spellcheck="true">// (间隔时间：上一次任务开始时计时)</span>    executor<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token string">"fixed-rate"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> interval<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 当前时间 1 秒后执行, 上一任务执行完成 3 秒后重复执行</span>    <span class="token comment" spellcheck="true">// (间隔时间：上一次任务结束时计时)</span>    executor<span class="token punctuation">.</span><span class="token function">scheduleWithFixedDelay</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Task</span><span class="token punctuation">(</span><span class="token string">"fixed-delay"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> interval<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    executor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意 <code>scheduleAtFixedRate </code> 与 <code>scheduleWithFixedDelay</code> 的区别。</p><ul><li><h5 id="scheduleAtFixedRate"><a href="#scheduleAtFixedRate" class="headerlink" title="scheduleAtFixedRate()"></a>scheduleAtFixedRate()</h5>  间隔时间是从上一个任务开始时计算，无论上个任务是否已经结束。</li><li><h5 id="scheduleWithFixedDelay"><a href="#scheduleWithFixedDelay" class="headerlink" title="scheduleWithFixedDelay()"></a>scheduleWithFixedDelay()</h5>  间隔时间是从上个任务完成时开始计算，只有当上个任务结束才会开始计时。<br>  <img src="/album/loading.gif" data-original="/album/article/java/thread/1.png" alt="scheduleAtFixedRate 与 scheduleWithFixedDelay"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、定时任务&quot;&gt;&lt;a href=&quot;#一、定时任务&quot; class=&quot;headerlink&quot; title=&quot;一、定时任务&quot;&gt;&lt;/a&gt;一、定时任务&lt;/h3&gt;&lt;p&gt;在 &lt;code&gt;java.util&lt;/code&gt; 包下提供了 &lt;code&gt;Timer&lt;/code&gt; 与 &lt;c</summary>
      
    
    
    
    <category term="JAVA基础" scheme="https://great-jin.github.io/categories/JAVA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>MySQL存储机制详解</title>
    <link href="https://great-jin.github.io/db/mysql/struct/"/>
    <id>https://great-jin.github.io/db/mysql/struct/</id>
    <published>2023-06-19T16:00:00.000Z</published>
    <updated>2023-12-08T11:34:01.641Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、数据结构"><a href="#一、数据结构" class="headerlink" title="一、数据结构"></a>一、数据结构</h3><p><code>B</code>树、 <code>B+</code>树和红黑树都是常见的平衡查找树数据结构，用于在大规模数据集中高效地进行查找、插入和删除操作。它们的设计目标是通过平衡树的结构来保证在最坏情况下的时间复杂度接近于 <code>O(log n)</code> ，其中 <code>n</code> 表示数据集的大小。</p><h4 id="1-B树"><a href="#1-B树" class="headerlink" title="1. B树"></a>1. B树</h4><p><code>B</code> 树是一种自平衡的树型数据结构，其叶子节点与非叶子节点都可用于存储数据。</p><p>如存在一组数据 <code>[2, 4, 6, 8, 10]</code> 则其对应的 <code>B</code> 树形式之一为下图所示。<br><img src="/album/loading.gif" data-original="/album/article/db/mysql/1.png" alt="B树"></p><blockquote><ul><li>它的结构类似于一个多路搜索树，每个节点可以包含多个子节点和关键字。</li><li><code>B</code>树的特点是可以存储大量的数据，并且能够高效地支持随机访问和范围查询。</li><li><code>B</code>树的节点可以存储大量的关键字，而且节点可以有多个子节点，这使得 <code>B</code> 树在磁盘等外部存储上具有良好的性能，因为每个节点可以存储大量的关键字，从而减少了磁盘 <code>I/O</code> 的次数。</li></ul></blockquote><h4 id="2-B-树"><a href="#2-B-树" class="headerlink" title="2. B+树"></a>2. B+树</h4><p><code>B+</code> 树是在 <code>B</code> 树基础上进行了改进的一种树型数据结构，其所有数据皆在叶子节点，<code>MySQL</code> 中即通过 <code>B+</code> 树存储数据。</p><p>同样的若存在一组数据 <code>[2, 4, 6, 8, 10]</code> 则其对应的 <code>B+</code> 树形式之一为下图所示，非叶子节点仅用于数据的索引，不存储真实数据。注意这里仅以最基本的二路 <code>B+</code> 树为例，若在 <code>MySQL</code> 中通常为数十上百路的形式存储。<br><img src="/album/loading.gif" data-original="/album/article/db/mysql/2.png" alt="B+树"></p><blockquote><ul><li><code>B+</code> 树与 <code>B</code> 树相似，但其所有的关键字都出现在叶子节点上。</li><li><code>B+</code> 树中每个叶子节点之间通过链表连接，形成一个有序的数据链表。</li><li>内部节点只包含用于导航的关键字，而不存储数据本身。这样的设计使得 <code>B+</code> 树更适合用于范围查询，因为范围查询可以直接沿着叶子节点的链表进行遍历，而无需回溯到内部节点。</li></ul></blockquote><h4 id="3-红黑树"><a href="#3-红黑树" class="headerlink" title="3. 红黑树"></a>3. 红黑树</h4><p>红黑树是一种自平衡的二叉查找树，它在树的节点上增加了额外的颜色属性，可以是红色或黑色。红黑树的数据存储于非叶子节点，而叶子节点通常是 <code>NIL(占位符)</code> 节点，即不存储实际的数据，只是用来表示树的末端。</p><blockquote><p>红黑树具有以下特点：</p><ul><li>每个节点都有一个颜色属性，要么是红色，要么是黑色。</li><li>根节点是黑色的。</li><li>所有叶子节点（<code>NIL</code>节点）都是黑色的。</li><li>如果一个节点是红色的，则它的子节点必须是黑色的。</li><li>从根节点到叶子节点的每条路径上，黑色节点的数量相同。</li></ul></blockquote><p>红黑树通过保持上述特性来保持平衡。这使得红黑树在插入和删除节点时能够保持树的平衡性，并且可以在最坏情况下保证 <code>O(log n)</code> 的查找、插入和删除操作。</p><h4 id="4-差异点"><a href="#4-差异点" class="headerlink" title="4. 差异点"></a>4. 差异点</h4><p><code>B</code> 树和 <code>B+</code> 树适用于存储大规模数据的场景，特别是磁盘上的数据存储，它们具有高度的扇出性能，可以减少磁盘 <code>I/O</code> 次数，提高数据访问效率。而 <code>B+</code> 树相对于 <code>B</code> 树在范围查询和顺序访问方面有更好的性能。</p><p>红黑树则适用于内存中的数据结构，它通过颜色属性的调整来保持树的平衡性，具有更快的插入和删除操作。</p><h3 id="二、存储引擎"><a href="#二、存储引擎" class="headerlink" title="二、存储引擎"></a>二、存储引擎</h3><h4 id="1-InnoDB"><a href="#1-InnoDB" class="headerlink" title="1. InnoDB"></a>1. InnoDB</h4><p><code>InnoDB</code> 存储引擎支持事务，其设计目标主要面向在线事务处理(<code>OLTP</code>)的应用。其特点是行锁设计、支持外键，并支持类似于 <code>Oracle</code> 的非锁定读，即默认读取操作不会产生锁。从 <code>MySQL</code> 数据库 <code>5.5.8</code> 版本开始 <code>InnoDB</code> 存储引擎是默认的存储引擎。</p><p><code>InnoDB</code> 存储引擎将数据放在一个逻辑的表空间中，这个表空间就像黑盒一样由 <code>InnoDB</code> 存储引擎自身进行管理。从 <code>MySQL4.1</code>(包括4.1) 版本开始，它可以将每个 <code>InnoDB</code> 存储引擎的表单独存放到一个独立的 <code>ibd</code> 文件中。此外 <code>InnoDB</code> 存储引擎支持 用裸设备(<code>row disk</code>)用来建立其表空间。</p><p><code>InnoDB</code> 通过使用多版本并发控制(<code>MVCC</code>)来获得高并发性，并且实现了 <code>SQL</code> 标准的 <code>4</code> 种隔离级别，默认为 <code>REPEATABLE</code> 级别。同时，使用一种被称为 <code>next-key locking</code> 的策略来避免幻读(<code>phantom</code>)现象的产生。除此之外，<code>InnoDB</code> 储存引擎还提供了插入缓冲(<code>insert buffer</code>)、二次写(<code>double write</code>)、自适应哈希索引(<code>adaptive hash index</code>)、预读(<code>read ahead</code>)等高性能和高可用的功能。</p><p>对于表中数据的存储，<code>InnoDB</code> 存储引擎采用了聚集(<code>clustered</code>)的方式，因此每张表的存储都是按主键的顺序进行存放。如果没有显式地在表定义时指定主键，<code>InnoDB</code> 存储引擎会为每一行生成一个 <code>6</code> 字节的 <code>ROWID</code>，并以此作为主键。</p><h4 id="2-MyISAM"><a href="#2-MyISAM" class="headerlink" title="2. MyISAM"></a>2. MyISAM</h4><p><code>MyISAM</code> 存储引擎不支持事务、表锁设计，支持全文索引，主要面向一些 <code>OLAP</code>  数据库应用。在 <code>MySQL5.5.8</code> 版本之前 <code>MyISAM</code> 存储引擎是默认的存储引擎（除 <code>Windows</code> 版本外)。</p><p>数据库系统与文件系统很大的一个不同之处在于对事务的支持，然而 <code>MyISAM</code> 存储引擎是不支持事务的。究其根本，这也不是很难理解。试想用户是否在所有的应用中都需要事务呢？在数据仓库中，如果没有 <code>ETL</code> 这些操作，只是简单的报表查询是否还需要事务的支持呢？此外 <code>MyISAM</code> 存储引擎的另一个与众不同的地方是它的缓冲池只缓存(<code>cache</code>)索引文件，而不缓冲数据文件，这点和大多数的数据库都非常不同。</p><p><code>MyISAM</code> 存储引擎表由 <code>MYD</code> 和 <code>MYI</code> 组成，其中 <code>MYD</code> 用来存放数据文件，· 用来存放索引文件。可以通过使用 <code>myisampack</code> 工具来进一步压缩数据文件，因为 <code>myisampack</code> 工具使用赫夫曼(<code>Huffman</code>)编码静态算法来压缩数据，因此使用 <code>myisampack</code> 工具压缩后的表是只读的，当然用户也可以通过 <code>myisampack</code> 来解压数据文件。</p><h3 id="三、表结构"><a href="#三、表结构" class="headerlink" title="三、表结构"></a>三、表结构</h3><p>从 <code>InnoDB</code> 存储引擎的逻辑存储结构看，所有数据都被逻辑地存放在一个空间中，称之为表空间(<code>tablespace</code>)。</p><p>表空间又由段(<code>segment</code>)、区(<code>extent</code>)、页(<code>page</code>)组成。页在一些文档中有时也称为块(<code>block</code>)，存储结构大致如图所示。<br><img src="/album/loading.gif" data-original="/album/article/db/mysql/4.png"></p><h4 id="1-段-Segment"><a href="#1-段-Segment" class="headerlink" title="1. 段(Segment)"></a>1. 段(Segment)</h4><p>表空间是由各个段组成的，常见的段有数据段、索引段、回滚段等。</p><p><code>InnoDB</code> 存储引擎表是索引组织的(<code>index organized</code>)，因此数据即索引，索引即数据。那么数据段即为 <code>B+</code> 树的叶子节点，索引段即为 <code>B+</code> 树的非索引节点。</p><p>在 <code>InnoDB</code> 存储引擎中，对段的管理都是由引擎自身所完成，<code>DBA</code> 不能也没有必要对其进行控制，和 <code>Oracle</code> 数据库中的自动段空间管理( <code>ASSM</code> )类似，从一定程度上简化了 <code>DBA</code> 对于段的管理。</p><h4 id="2-区-extent"><a href="#2-区-extent" class="headerlink" title="2. 区(extent)"></a>2. 区(extent)</h4><p>区是由连续页组成的空间，在任何情况下每个区的大小都为 <code>1MB</code>，为了保证区中页的连续性，<code>InnoDB</code> 存储引擎一次从磁盘申请 <code>4~5</code> 个区。</p><p>在默认情况下，<code>InnoDB</code> 存储引擎页的大小为 <code>16KB</code>，即一个区中一共有 <code>64</code> 个连续的页。<code>InnoDB 1.Ox</code> 版本引入压缩页，即每个页的大小可通过参数 <code>KEY SIZE</code> 调整为 <code>2K、4K、8K</code>，因此每个区对应页的数量就应该为 <code>512、256、128</code>，但不论页的大小怎么变化，区的大小总是为 <code>1M</code>。</p><h4 id="3-页-page"><a href="#3-页-page" class="headerlink" title="3. 页(page)"></a>3. 页(page)</h4><p><code>InnoDB</code> 同大多数数据库一样有页(<code>Page</code>)的概念（也可以称为块），页是 <code>InnoDB</code> 磁盘管理的最小单位，默认每个页的大小为 <code>16KB</code>。</p><p>从 <code>InnoDB 1.2.x</code> 版本开始，可以通过参数 <code>innodb_page_size</code> 将页的大小设置为 <code>4K、8K、l6K</code>，设置后表中索引页的大小都为 <code>innodb_page_size</code> 所指定的大小且不允许二次修改，除非通过 <code>mysqldump</code> 导人和导出操作来产生新的库。</p><p>一个 <code>16k</code> 大小的页并不是全部空间都用于存放记录数据，其被拆分为三部分，其中页头用于存放页号与页的指针等信息，只有数据区才是真正用于存放的数据的部分，其结构示意图如下：<br><img src="/album/loading.gif" data-original="/album/article/db/mysql/7.png"></p><h4 id="4-行-row"><a href="#4-行-row" class="headerlink" title="4. 行(row)"></a>4. 行(row)</h4><p><code>Compact</code> 行记录是在 <code>MySQL 5.0</code> 中引入的，其设计目标是高效地存储数据。简单来说，一个页中存放的行数据越多，其性能就越高，其存储结构示意图如下。<br><img src="/album/loading.gif" data-original="/album/article/db/mysql/5.png"></p><blockquote><p><strong>(1) 变长字段长度列表</strong></p></blockquote><ul><li>按照列的顺序逆序放置的。</li><li>若列的长度小于 <code>255</code> 字节，用 <code>1</code> 字节表示，若大于 <code>255</code> 个字节，用 <code>2</code> 字节表示。</li><li>最大不可以超过 <code>2</code> 字节，因为 <code>MySQL</code> 中 <code>VARCHAR</code> 类型的最大长度限制为 <code>65535</code>。</li></ul><blockquote><p><strong>(2) NULL 标志位</strong></p></blockquote><ul><li>该部分所占的字节应该为 <code>1</code> 字节。</li><li>标识该行数据中是否有 <code>NULL</code> 值，有则用 <code>1</code> 表示。</li></ul><blockquote><p><strong>(3) 记录头信息(record header)</strong></p></blockquote><ul><li>固定占用 <code>5</code> 字节( <code>40</code> 位)，含义见下表。<br><img src="/album/loading.gif" data-original="/album/article/db/mysql/6.png"></li></ul><p>需要特别注意的是，<code>NULL</code> 不占该部分任何空间，即 <code>NULL</code> 除了占有 <code>NULL</code> 标志位，实际存储不占有任何空间。另外每行数据中除了用户定义的列外，还有两个隐藏列，事务 <code>ID</code> 列和回滚指针列，分别为 <code>6</code> 字节和 <code>7</code> 字节的大小。此外若 <code>InnoDB</code> 表没有定义主键，每行还会增加一个 <code>6</code> 字节的 <code>rowid</code> 列。</p><h4 id="5-存储结构"><a href="#5-存储结构" class="headerlink" title="5. 存储结构"></a>5. 存储结构</h4><p>在 <code>MySQL</code> 中数据是依据 <code>B+</code> 树结构进行存在，即非叶子节点仅用于索引作用，真实行数据记录都存于叶子节点中，其结构示例图如下：<br><img src="/album/loading.gif" data-original="/album/article/db/mysql/8.png"></p><h3 id="四、存储机制"><a href="#四、存储机制" class="headerlink" title="四、存储机制"></a>四、存储机制</h3><h4 id="1-读写机制"><a href="#1-读写机制" class="headerlink" title="1. 读写机制"></a>1. 读写机制</h4><p>在 <code>MySQL</code> 中数据存储包含 <code>内存</code> 与 <code>磁盘</code> 两个部分，增删改操作首先会被写入到 <code>redo log</code> 中，保证数据的持久性。同时为了提高写入性能，<code>MySQL</code> 还引入了 <code>Change Buffer</code> 机制，将写入的数据先暂存在 <code>Change Buffer</code> 中，再由后台线程定时将其刷入磁盘。</p><p>在执行查询操作时，先从 <code>Change Buffer</code> 中读取数据，如果数据已经被修改，会将修改后的数据写回磁盘，然后再返回给查询请求。如果数据没有被修改，则直接返回内存中的数据。这样可以避免频繁地从磁盘读取数据，提高查询性能。</p><blockquote><p><code>Change Buffer</code> 的执行顺序如下：</p><ul><li>增删改操作时，记录 <code>redo log</code>，同时将数据写入 <code>Change Buffer</code>。</li><li>后台线程定时将 <code>Change Buffer</code> 中的数据刷入磁盘。</li><li>当 <code>MySQL</code> 崩溃后，重启时会先检查 <code>redo log</code>，将未持久化的数据写入磁盘，然后再将 <code>Change Buffer</code> 中的数据刷入磁盘。</li></ul></blockquote><h4 id="2-Redo-log"><a href="#2-Redo-log" class="headerlink" title="2. Redo log"></a>2. Redo log</h4><p><code>Redo Log</code> 是一种记录 <code>MySQL</code> 数据更改的机制，它记录了数据的变化情况，以便在系统崩溃或意外宕机时进行数据恢复。</p><p><code>Redo Log</code> 分为两个部分：<code>内存缓冲区</code> 和 <code>磁盘文件</code>。内存缓冲区是用来提高性能的，当事务提交时，缓冲区中的数据会被写入磁盘文件，以保证数据的持久性。当 <code>MySQL</code> 执行事务时，先将事务的变更操作记录到 <code>Redo Log</code> 中，再将数据写入磁盘，在系统发生崩溃或宕机时，可以通过 <code>Redo Log</code> 中记录的数据来恢复数据的变更操作。</p><blockquote><p><code>Redo log</code> 中同样维护着一套缓存，通过 <code>innodb_flush_log_at_trx_commit</code> 属性配置级别，推荐设置为 <code>2</code>。</p><ul><li><strong>1</strong>：实时将变更刷入服务器磁盘中，稳定性最高效率最低。</li><li><strong>0</strong>：将变更刷入 <code>Redo log buffer</code> ，再定期将 <code>Redo log buffer</code> 数据写入磁盘。</li><li><strong>2</strong>：将变更刷入物理机内存中，再每隔一秒执行一次数据磁盘写入操作，更推荐此方案。</li></ul></blockquote><h4 id="3-Undo-log"><a href="#3-Undo-log" class="headerlink" title="3. Undo log"></a>3. Undo log</h4><p><code>Undo log</code> 用于处理事务数据回滚，将修改前数据存入 <code>Undo log</code> ，此时若发生事务即可直接从 <code>Undo log</code> 中读取变化前数据实现事务数据回滚。</p><h4 id="4-Bin-log"><a href="#4-Bin-log" class="headerlink" title="4. Bin log"></a>4. Bin log</h4><p><code>Bin log</code> 是 <code>MySQL</code> 的一种服务器日志，用于记录所有数据库更新操作，包括数据定义语句和数据操作语句等。与 <code>Redo log</code> 不同，<code>Bin log</code> 是在 <code>MySQL Server</code> 层产生的，记录的是 <code>SQL</code> 语句或者语句的逻辑，而不是物理的数据变更操作。</p><p><code>Bin log</code> 可以用于数据恢复、数据复制和数据同步等操作，也可以用于查询和数据分析等工作。</p><h4 id="5-Change-Buffer"><a href="#5-Change-Buffer" class="headerlink" title="5. Change Buffer"></a>5. Change Buffer</h4><p><code>Change Buffer</code>(变更缓存) 是一种缓存机制，它会将某些更新操作缓存在内存中，而不是直接写入磁盘，这样可以减少磁盘随机写入，提高性能。</p><p>当查询需要用到已经缓存在 <code>Change Buffer</code> 中的记录时， <code>MySQL</code> 会将缓存中的数据写入磁盘并清空缓存。如果缓存中的数据过多或占用内存过大， <code>MySQL</code> 会将缓存中的数据写入磁盘并清空缓存，以保证内存的可用性。</p><blockquote><p><code>Change Buffer</code> 中的操作应用到原数据页，得到最新结果的过程称为 <code>merge</code>。</p><ul><li>访问这个数据页会触发 <code>merge</code> 。</li><li>系统有后台线程会定期 <code>merge</code> 。</li><li>在数据库正常关闭 <code>(shutdown)</code> 的过程中，也会执行 <code>merge</code> 操作</li></ul></blockquote><h4 id="6-区别差异"><a href="#6-区别差异" class="headerlink" title="6. 区别差异"></a>6. 区别差异</h4><p><code>Change Buffer</code> 和 <code>Redo Log</code> 都是 <code>MySQL</code> 提高性能和保证数据一致性的重要机制，它们的作用是互相补充的。</p><ul><li><code>Change Buffer</code> 用来提高更新操作的性能，而 <code>Redo Log</code> 则用来保证数据的一致性和可恢复性。</li><li><code>Bin log</code> 记录的是 <code>Server</code> 层逻辑变更，而 <code>Redo Log</code> 记录的是物理层数据变更。</li></ul><h4 id="7-二阶段提交"><a href="#7-二阶段提交" class="headerlink" title="7. 二阶段提交"></a>7. 二阶段提交</h4><p>在上面介绍了 <code>MySQL</code> 数据的操作流程，变更的数据会先写入 <code>Change Buffer</code> 中再有执行器定期写入 <code>Redo log</code>，若通过 <code>SQL</code> 等操作变更则会同时触发 <code>Bin log</code> 机制，其基本的执行流程如下所示。</p><p>下图中以数据插入为例，若为更新等操作在 <code>Change Buffer</code> 与 <code>Redo log</code> 之间通常存在 <code>Undo log</code> 操作用于数据的事务回滚。<br><img src="/album/loading.gif" data-original="/album/article/db/mysql/9.png"></p><p>但上述的存在一种特殊情况，即 <code>Redo log</code> 写入是正常但由于某些原因使得 <code>Bin log</code> 没有正常更新，也就导致了 <code>Redo log</code> 与 <code>Bin log</code> 二者数据出现不一致的情况。</p><p>为此 <code>MySQL</code> 中引入了二阶段提交操作，将 <code>Redo log</code> 操作拆分为准备（<code>prepare</code>）与提交（<code>commit</code>），若 <code>Bin log</code> 出现异常则 <code>Redo log</code> 状态将停止于 <code>prepare</code>，当通过 <code>Redo log</code> 恢复数据时读取状态为 <code>prepare</code> 将通过事务回滚读取 <code>Bin log</code> 的值，即发生变更之前的数据，从而保证了数据的一致性。<br><img src="/album/loading.gif" data-original="/album/article/db/mysql/10.png"></p><h3 id="五、MVCC介绍"><a href="#五、MVCC介绍" class="headerlink" title="五、MVCC介绍"></a>五、MVCC介绍</h3><p>多版本并发控制 <code>MVCC</code> 是一种无锁读取的优化策略，它的无锁是特指读取时不需要加锁。</p><p>基本思路是对数据库的任何修改都不会直接覆盖之前的数据，而是产生一个新版副本与老版本共存，以此达到读取时可以完全不加锁的目的。</p><h4 id="1-实现机制"><a href="#1-实现机制" class="headerlink" title="1. 实现机制"></a>1. 实现机制</h4><p><code>MVCC</code> 用来解决读写冲突的无锁并发控制，就是为事务分配单向增长的时间戳，为每个数据修改保存一个版本，版本与事务时间戳相关联。</p><p><code>MVCC</code> 的实现原理主要是基于版本链、<code>undo</code> 日志与 <code>Read View</code> 实现，<code>InnoDB</code> 在每行数据都增加三个隐藏字段，一个唯一行号，一个记录创建的版本号，一个记录删除的版本号。</p><blockquote><ul><li>创建版本号： <code>insert</code> 操作时事务的 <code>id</code>。</li><li>删除版本号： <code>insert</code> 时为 <code>null</code>，删除时为当前事务的 <code>id</code>。  </li></ul></blockquote><p>当读操作时，读取的是删除版本号为 <code>null</code> 或创建版本号最大的数据，保证我们读取的是最新的数据。</p><h4 id="2-版本链"><a href="#2-版本链" class="headerlink" title="2. 版本链"></a>2. 版本链</h4><p>数据库中的每行数据除了肉眼看见的数据，还有几个隐藏字段，分别是 <code>db_trx_id</code>、<code>db_roll_pointer</code>、<code>db_row_id</code>。</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">字段</td>        <th style="text-align: center;">描述</td>    </tr>    <tr>        <td style="text-align: center;">db_row_id</td>        <td style="text-align: center;">隐含一个大小为 6byte 的自增 ID，如果数据表没有主键，则自动以 db_row_id 产生一个聚簇索引。</td>    </tr>    <tr>        <td style="text-align: center;">db_trx_id</td>        <td style="text-align: center;">记录创建这条记录/最后一次修改该记录的事务 ID，大小为 6byte。</td>    </tr>    <tr>        <td style="text-align: center;">db_roll_pointer</td>        <td style="text-align: center;">回滚指针(版本链关键，大小为 7byte)，指向这条记录的上一个版本(存储于 rollback segment 里)。</td>    </tr></table><br/><p>实际还有一个删除 <code>flag</code> 隐藏字段，记录被更新或删除并不代表真的删除，而是删除 <code>flag</code> 变了。当通过 delete 关键字执行删除命令时，系统并不是真正意义上的进行删除，而是将对应记录的占用的空间标记为可用。</p><hr><p><strong>参考文档</strong></p><ol><li>《MySQL InnoDB存储》</li><li><a href="https://juejin.cn/post/7116381265300815903">为什么大家说mysql数据库单表最大两千万？依据是啥？</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、数据结构&quot;&gt;&lt;a href=&quot;#一、数据结构&quot; class=&quot;headerlink&quot; title=&quot;一、数据结构&quot;&gt;&lt;/a&gt;一、数据结构&lt;/h3&gt;&lt;p&gt;&lt;code&gt;B&lt;/code&gt;树、 &lt;code&gt;B+&lt;/code&gt;树和红黑树都是常见的平衡查找树数据结构，用于</summary>
      
    
    
    
    <category term="数据库" scheme="https://great-jin.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="MySQL" scheme="https://great-jin.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>不同版本 JDK 特性介绍</title>
    <link href="https://great-jin.github.io/java/basis/feature/"/>
    <id>https://great-jin.github.io/java/basis/feature/</id>
    <published>2023-06-16T16:00:00.000Z</published>
    <updated>2023-12-08T11:34:01.650Z</updated>
    
    <content type="html"><![CDATA[<p>俗话说得好：你发任你发，我用 <code>Java 8</code>，但不得不说新版本 <code>JDK</code> 中引入的一些特性让人眼前一亮，在新项目中可以考虑采用新版 <code>JDK</code> 进行开发，并且 <code>Spring Boot 3</code> 的最低支持版本也需 <code>JDK 17</code> 了，又给了你一个新项目抛弃 <code>Java 8</code> 的理由。</p><blockquote><p>本文即介绍不同版本 JDK 中我用的较多的新特性。</p></blockquote><h3 id="一、安装配置"><a href="#一、安装配置" class="headerlink" title="一、安装配置"></a>一、安装配置</h3><h4 id="1-JDK下载"><a href="#1-JDK下载" class="headerlink" title="1. JDK下载"></a>1. JDK下载</h4><p>在开始直接先进入 <code>Oracle JDK</code> 官网下载相应的 <code>JDK</code> 版本，为了更方便同时安装多个版本，建议下载 <code>zip</code> 格式解压即享，<a href="https://www.oracle.com/java/technologies/downloads/#jdk20-windows">官网直达</a>。<br><img src="/album/loading.gif" data-original="/album/article/java/jdk/feature/1.png"></p><p>新版 <code>JDK</code> 并没有自带 <code>jre</code> 目录，因此我们需要手动编译生成，进入上述解压后的文件执行下述命令。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Windwos 下执行</span>bin\jlink.exe --module-path jmods --add-modules java.desktop --output jre<span class="token comment" spellcheck="true"># Linux 下执行</span>bin/jlink --module-path jmods --add-modules java.desktop --output jre<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-IDEA配置"><a href="#2-IDEA配置" class="headerlink" title="2. IDEA配置"></a>2. IDEA配置</h4><p>若要在 <code>IDEA</code> 中指定工程的 <code>JDK</code> 版本，需要完成下述两个步骤。</p><ul><li><h5 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h5><p>  在 <code>IDEA</code> 左上角 <code>File</code> 选择 <code>Project Structure</code> 按照下图修改，添加上述解压的 <code>JDK</code> 目录即可。</p><p>  同时可以选择图中的 <code>modules</code> 为工程的每个模块手动设置 <code>JDK</code> 版本。<br>  <img src="/album/loading.gif" data-original="/album/article/java/jdk/feature/2.png" alt="Project Structure"></p></li><li><h5 id="编译配置"><a href="#编译配置" class="headerlink" title="编译配置"></a>编译配置</h5><p>  在 <code>IDEA</code> 中左上角 <code>File</code> 选择 <code>Settings</code> 按照下图修改编译版本。<br>  <img src="/album/loading.gif" data-original="/album/article/java/jdk/feature/3.png" alt="Java Compiler"></p></li></ul><h4 id="3-Maven配置"><a href="#3-Maven配置" class="headerlink" title="3. Maven配置"></a>3. Maven配置</h4><ul><li><h5 id="文件配置"><a href="#文件配置" class="headerlink" title="文件配置"></a>文件配置</h5><p>  在 <code>Maven</code> 工程的 <code>POM</code> 文件中添加下述属性配置用于指定 <code>JDK</code> 依赖版本，完成后刷新配置即可。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><h5 id="编译配置-1"><a href="#编译配置-1" class="headerlink" title="编译配置"></a>编译配置</h5><p>  在通过 <code>Maven</code> 进行 <code>install</code> 时若提示 <code>警告：源发行版17需要目标发行版17</code> 等类似信息时是因为 <code>IDEA</code> 中配置 <code>Maven</code> 版本与实际项目的版本不匹配，需要手动在 <code>IDEA</code> 配置中修改。</p><p>  在 <code>IDEA</code> 中左上角 <code>File</code> 选择 <code>Settings</code> 按照下图修改编译版本。<br>  <img src="/album/loading.gif" data-original="/album/article/java/jdk/feature/4.png" alt="Maven Runner"></p></li></ul><h3 id="二、JDK-9"><a href="#二、JDK-9" class="headerlink" title="二、JDK 9"></a>二、JDK 9</h3><h4 id="1-集合"><a href="#1-集合" class="headerlink" title="1. 集合"></a>1. 集合</h4><p>在 <code>JDK 9</code> 中为 <code>List</code> 等集合提供了 <code>of()</code> 初始化方式，实现更便捷的默认值初始化。</p><p>相应的使用示例如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">collectionDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Set<span class="token operator">&lt;</span>Integer<span class="token operator">></span> set <span class="token operator">=</span> Set<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Set: "</span> <span class="token operator">+</span> set<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> List<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"List: "</span> <span class="token operator">+</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> map <span class="token operator">=</span> Map<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Map: "</span> <span class="token operator">+</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Stream"><a href="#2-Stream" class="headerlink" title="2. Stream"></a>2. Stream</h4><p>在 <code>JDK 8</code> 中引入了全新特性 <code>stream</code>，而在 <code>JDK 9</code> 中为 <code>stream</code> 添加了两个全新接口 <code>takeWhile()</code> 与 <code>dropWhile()</code>，具体信息如下：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">takeWhile()</td>        <td style="text-align: center;">当满足提供的条件时停止。</td>    </tr>    <tr>        <td style="text-align: center;">dropWhile()</td>        <td style="text-align: center;">与 takeWhile 相反，当满足提供的条件时开始。</td>    </tr></table><p>在使用 <code>takeWhile()</code> 与 <code>dropWhile()</code> 接口前，可通过 <code>stream</code> 的 <code>sorted()</code> 接口对目标集合按照一定规则进行排序，使得目标集合呈现一定的线性排列，从而更好的应用上述两类方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">streamDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list1 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// Break when "t > 3"</span>            <span class="token punctuation">.</span><span class="token function">takeWhile</span><span class="token punctuation">(</span>t <span class="token operator">-</span><span class="token operator">></span> t <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// list1: 1, 2</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"List takeWhile: "</span> <span class="token operator">+</span> list1<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list2 <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// Start from "t > 3"</span>            <span class="token punctuation">.</span><span class="token function">dropWhile</span><span class="token punctuation">(</span>t <span class="token operator">-</span><span class="token operator">></span> t <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// list2: 3, 4</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"List dropWhile: "</span> <span class="token operator">+</span> list2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-私有接口"><a href="#3-私有接口" class="headerlink" title="3. 私有接口"></a>3. 私有接口</h4><p>在 <code>JDK 8</code> 引入了默认接口方法与静态接口方法，而在 <code>JDK 9</code> 提供了私有接口方法以达到代码复用的目的。</p><p>通过 <code>private</code> 声明私有接口方法，其仅能在当前接口类中使用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Calculator</span> <span class="token punctuation">{</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">saySomething</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">sayGoodbye</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">saySomething</span><span class="token punctuation">(</span><span class="token string">"Goodbye!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 私有接口方法     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">saySomething</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Call private interface, message: "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-其它特性"><a href="#4-其它特性" class="headerlink" title="4. 其它特性"></a>4. 其它特性</h4><ul><li><code>G1</code> 垃圾收集器在年轻代将不会回收 <code>Humongous</code> 块的对象空间。</li></ul><h3 id="三、JDK-11"><a href="#三、JDK-11" class="headerlink" title="三、JDK 11"></a>三、JDK 11</h3><h4 id="1-var定义"><a href="#1-var定义" class="headerlink" title="1. var定义"></a>1. var定义</h4><p>在 <code>JDK 11</code> 中引入了 <code>var</code> 关键字实现泛化定义，在声明声明对象时无需显式指定对象类型，由系统自动识别。</p><p>如下中通过 <code>var</code> 定义了 <code>int</code> 变量与 <code>String</code> 变量。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">varDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    var a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a: "</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    var str <span class="token operator">=</span> <span class="token string">"hello world!"</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Str: "</span> <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-字符方法"><a href="#2-字符方法" class="headerlink" title="2. 字符方法"></a>2. 字符方法</h4><p>在 <code>JDK 11</code> 中同时为字符串新增了一系列常用接口，具体描述如下：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">isBlank()</td>        <td style="text-align: center;">判断字符串是否为空或内容皆为空格。</td>    </tr>    <tr>        <td style="text-align: center;">isEmpty()</td>        <td style="text-align: center;">判断字符串长度是否大于 0。</td>    </tr>    <tr>        <td style="text-align: center;">repeat(n)</td>        <td style="text-align: center;">用于重复拼接字符串内容。</td>    </tr></table><p>上述方式的相应示例如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">strDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    var msg <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"isBlank: "</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"isEmpty: "</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    var str <span class="token operator">=</span> <span class="token string">"ibudai"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// ibudaiibudai</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"repeat: "</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-其它特性"><a href="#3-其它特性" class="headerlink" title="3. 其它特性"></a>3. 其它特性</h4><ul><li>完善 <code>HTTP</code> 客户端 <code>API</code> 的标准化，提供更加便捷的操作 <code>HTTP</code> 请求，但我们更多使用的为 <code>OkHttp</code> 等封装类库，使用 <code>JDK</code> 自带的场景较少，这里不做详细介绍。</li><li>正式引入 <code>ZGC（Z Garbage Collector）</code> 垃圾回收器，其为一种低停顿垃圾回收器，可以更好地利用内存，减少停顿时间。</li></ul><h3 id="四、JDK-13"><a href="#四、JDK-13" class="headerlink" title="四、JDK 13"></a>四、JDK 13</h3><h4 id="1-switch"><a href="#1-switch" class="headerlink" title="1. switch"></a>1. switch</h4><p>在 <code>JDK 13</code> 中为 <code>switch</code> 引入了全新的表达式语法，并在 <code>JDK 14</code> 中进一步得到完善。</p><p>下面通过一个具体的示例演示 <code>switch</code> 表达式的作用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">switchDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">-</span><span class="token operator">></span> num <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token operator">-</span><span class="token operator">></span> num <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">default</span> <span class="token operator">-</span><span class="token operator">></span> num <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述的表达式对应的传统 <code>switch</code> 定义方式如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">switchDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            value <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>            value <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            value <span class="token operator">=</span> num <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-yield"><a href="#2-yield" class="headerlink" title="2. yield"></a>2. yield</h4><p>在 <code>switch</code> 表达式中每个 <code>case</code> 对应的内容为一个函数， <code>break</code> 无法在此使用用于结束分支。因此 JDK 13 引入全新关键字 <code>yield</code> 用于结束分支并返回结果。</p><p><code>yield</code> 关键字作用类似于 <code>break</code> 于 <code>return</code> 的结合，但 <code>break</code> 仅有中断效果没有返回结果功能，而 <code>return</code> 是结束整个方法块但 <code>yield</code> 仅结束对应的 <code>case</code> 分支。</p><p>相应的 <code>yield</code> 关键字使用示例如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">switchDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            yield num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            yield num <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">default</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            yield num <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>value2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-字符块"><a href="#3-字符块" class="headerlink" title="3. 字符块"></a>3. 字符块</h4><p>在 <code>JDK 13</code> 中为字符串引入了新的定义方式，即可通过三个引号 <code>&quot;&quot;&quot;</code> 声明，从而避免传统的字符冲突需要使用转义字符。</p><p>如下 <code>str</code> 对象定义了一个 <code>json</code> 对象，通过 <code>&quot;&quot;&quot;</code> 即可省略旧版中转义字符的使用，同时也提高了可读性。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">strDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    String str <span class="token operator">=</span> <span class="token string">""</span>"            <span class="token punctuation">{</span>              <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"alex"</span>            <span class="token punctuation">}</span>            <span class="token string">""</span>"<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、JDK-14"><a href="#五、JDK-14" class="headerlink" title="五、JDK 14"></a>五、JDK 14</h3><h4 id="1-record"><a href="#1-record" class="headerlink" title="1. record"></a>1. record</h4><p>在 <code>JDK 14</code> 中引入新的关键字 <code>record</code> 用于 <code>bean</code> 对象，默认为对象重写了 <code>equals()</code>, <code>toString()</code>, <code>hashCode()</code> 方法，并提供便捷的 <code>getter</code> 方法。</p><p>相应的 <code>record</code> 使用示例如下，通过 <code>对象.属性</code> 的方式即可实现对象成员变量的访问。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> record <span class="token function">User</span><span class="token punctuation">(</span>String id<span class="token punctuation">,</span> String name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Jdk14Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recordDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token string">"Alex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String id <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id: "</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name: "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user: "</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-其它特性"><a href="#2-其它特性" class="headerlink" title="2. 其它特性"></a>2. 其它特性</h4><p>新增了低延迟垃圾器，通过 <code>UnlockExperimentalVMOptions</code> 参数指定是否激活。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># ZGC on Windows</span>-XX:+UnlockExperimentalVMOptions -XX:+UseZGC<span class="token comment" spellcheck="true"># ZGC on macOS</span>-XX:+UnlockExperimentalVMOptions -XX:+UseZGC<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六、JDK-17"><a href="#六、JDK-17" class="headerlink" title="六、JDK 17"></a>六、JDK 17</h3><h4 id="1-sealed"><a href="#1-sealed" class="headerlink" title="1. sealed"></a>1. sealed</h4><p>在 <code>JDK 17</code> 中引入了新关键词 <code>sealed</code> 与 <code>permits</code> 用于限定类的继承关系。</p><p><code>sealed</code> 关键字可作用于类<code>（class）</code>或接口<code>（interface）</code>，通过 <code>permit</code> 关键字指定允许继承的子类，只有被 <code>permits</code> 的类才允许继承类，同时继承的子类也需标注其是否为 <code>sealed</code> 或 <code>non-sealed</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> sealed <span class="token keyword">class</span> <span class="token class-name">Human</span> permits Student <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> non<span class="token operator">-</span>sealed <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 非法，Teacher 未在 permits 集合中</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">extends</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-switch"><a href="#2-switch" class="headerlink" title="2. switch"></a>2. switch</h4><p>在 <code>JDK 17</code> 中为 <code>switch</code> 表达式升级了模式匹配，能够实现更灵活的类型比对判断。</p><p>如下为官方文档中提供的示例代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">patternSwitch</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> Integer i <span class="token operator">-</span><span class="token operator">></span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"int %d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> Long l <span class="token operator">-</span><span class="token operator">></span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"long %d"</span><span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> Double d <span class="token operator">-</span><span class="token operator">></span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"double %f"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> String s <span class="token operator">-</span><span class="token operator">></span> String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"String %s"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">default</span> <span class="token operator">-</span><span class="token operator">></span> o<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="七、JDK-19"><a href="#七、JDK-19" class="headerlink" title="七、JDK 19"></a>七、JDK 19</h3><h4 id="1-虚拟线程"><a href="#1-虚拟线程" class="headerlink" title="1. 虚拟线程"></a>1. 虚拟线程</h4><p>在 JDK 19 中引入了新的虚拟线程概念，并在 JDK 21 得到完善加强。</p><p>在之前的线程中一个线程则对应一个系统线程，针对轻度任务显然这种方式有点浪费，而虚拟线程可以粗暴的理解将一个系统工作线程进行二次拆分，从而达到更高的资源利用。</p><p>虚拟线程的创建方式提供了基础的 <code>Thread.ofVirtual()</code> 与 <code>Thread.startVirtualThread()</code> 方式用于创建单线程，同时通过 <code>Executors.newVirtualThreadPerTaskExecutor()</code> 即可创建虚拟线程池。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">vtDemo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Start a virtual thread (Base on virtual)</span>    Thread t1 <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">ofVirtual</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// Set thread name</span>            <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"vt-1"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// start(): Auto call "thread.start()"</span>            <span class="token comment" spellcheck="true">// unstarted(): Needed to manual call for "thread.start()"</span>            <span class="token punctuation">.</span><span class="token function">unstarted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Task content</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread.ofPlatform(): Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Thread t2 <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">startVirtualThread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Task content</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread.startVirtualThread(): Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>参考链接</strong>：</p><ol><li><a href="https://www.oracle.com/java/technologies/javase/jdk-relnotes-index.html">JDK 发布文档</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;俗话说得好：你发任你发，我用 &lt;code&gt;Java 8&lt;/code&gt;，但不得不说新版本 &lt;code&gt;JDK&lt;/code&gt; 中引入的一些特性让人眼前一亮，在新项目中可以考虑采用新版 &lt;code&gt;JDK&lt;/code&gt; 进行开发，并且 &lt;code&gt;Spring Boot 3&lt;/c</summary>
      
    
    
    
    <category term="JAVA基础" scheme="https://great-jin.github.io/categories/JAVA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>常见开源协议介绍</title>
    <link href="https://great-jin.github.io/coding/license/"/>
    <id>https://great-jin.github.io/coding/license/</id>
    <published>2023-06-09T16:00:00.000Z</published>
    <updated>2023-12-08T11:34:01.635Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-Apache-License"><a href="#1-Apache-License" class="headerlink" title="1. Apache License"></a>1. Apache License</h4><p><code>Apache License</code> 是 <code>Apache</code> 软件基金会发布的一个自由软件许可证。</p><p><code>Apache Licence</code> 是著名的非盈利开源组织 <code>Apache</code> 采用的协议。该协议和 <code>BSD</code> 类似，同样鼓励代码共享和最终原作者的著作权，同样允许源代码修改和再发布。</p><blockquote><p><code>Apache License</code> 二改需要遵循以下条件：</p><ul><li>需要给代码的用户一份 <code>Apache Licence</code> 。</li><li>如果修改了代码，需要再被修改的文件中说明。</li><li>在衍生的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明。</li><li>如果再发布的产品中包含一个 <code>Notice</code> 文件，则在 <code>Notice</code> 文件中需要带有 <code>Apache Licence</code> ，可以在 <code>Notice</code> 中增加自己的许可，但是不可以表现为对 <code>Apache Licence</code> 构成更改。</li><li><code>Apache Licence</code> 也是对商业应用友好的许可，使用者也可以再需要的时候修改代码来满足并作为开源或商业产品发布/销售。</li></ul></blockquote><h4 id="2-BDS-License"><a href="#2-BDS-License" class="headerlink" title="2. BDS License"></a>2. BDS License</h4><p><code>BSD</code> 是 <code>Berkeley Software Distribution</code> 的缩写，意思是”伯克利软件发行版”。</p><p><code>BSD</code> 开源协议是一个给于使用者很大自由的协议。可以自由的使用，修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。当你发布使用了 <code>BSD</code> 协议的代码，或则以 <code>BSD</code> 协议代码为基础做二次开发自己的产品时，需要满足三个条件：</p><blockquote><ul><li>不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。</li><li>如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的 <code>BSD</code> 协议。</li><li>如果再发布的只是二进制类库/软件，则需要在类库/软件的文档和版权声明中包含原来代码中的 <code>BSD</code> 协议。</li></ul></blockquote><p><code>BSD</code> 代码鼓励代码共享，但需要尊重代码作者的著作权。 <code>BSD</code> 由于允许使用者修改和重新发布代码，也允许使用或在 <code>BSD</code> 代码上开发商业软件发布和销售，因此是对商业集成很友好的协议。而很多的公司企业在选用开源产品的时候都首选 <code>BSD</code> 协议，因为可以完全控制这些第三方的代码，在必要的时候可以修改或者二次开发。</p><h4 id="3-MIT-License"><a href="#3-MIT-License" class="headerlink" title="3. MIT License"></a>3. MIT License</h4><p><code>MIT</code> 是和 <code>BSD</code> 一样宽范的许可协议，源自麻省理工学院（<code>Massachusetts Institute of Technology， MIT</code>），又称 <code>X11</code> 协议。</p><p><code>MIT</code> 与 <code>BSD</code> 类似，但是比 <code>BSD</code> 协议更加宽松，是目前最少限制的协议，协议唯一的条件就是在修改后的代码或者发行包包含原作者的许可信息，适用商业软件。<code>MIT</code> 适用于作者只想保留版权，而无任何其他限制。</p><h4 id="4-GPL-License"><a href="#4-GPL-License" class="headerlink" title="4. GPL License"></a>4. GPL License</h4><p><code>GPL</code> （<code>GNU General Public License</code>）为通用公共许可协议。</p><p><code>GPL</code> 协议和 <code>Apache Licence</code> 等鼓励代码重用的许可很不一样。 <code>GPL</code> 的出发点是代码的开源/免费使用和引用/修改/衍生代码的开源/免费使用，但不允许修改后和衍生的代码做为闭源的商业软件发布和销售。</p><p><code>Linux</code> 采用了 <code>GPL</code>，这也就是为什么我们能用免费的各种 <code>linux</code> ，包括商业公司的 <code>linux</code> 和 <code>linux</code> 上各种各样的由个人、组织以及商业软件公司开发的免费软件。</p><h4 id="5-LGPL-License"><a href="#5-LGPL-License" class="headerlink" title="5. LGPL License"></a>5. LGPL License</h4><p><code>LGPL</code> 是 <code>GPL</code> 的一个为主要为类库使用设计的开源协议。</p><p><code>LGPL</code> 与 <code>GPL</code> 协议不同的是其允许商业软件通过类库引用(<code>link</code>)方式使用 <code>LGPL</code> 类库而不需要开源商业软件的代码，这使得采用 <code>LGPL</code> 协议的开源代码可以被商业软件作为类库引用并发布和销售。</p><p>但是如果修改 <code>LGPL</code> 协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用 <code>LGPL</code> 协议。因此 <code>LGPL</code> 协议的开源代码很适合作为第三方类库被商业软件引用，但不适合希望以 <code>LGPL</code> 协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。</p><p><code>GPL</code> 与 <code>LGPL</code> 都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品。</p><h4 id="6-MPL-License"><a href="#6-MPL-License" class="headerlink" title="6. MPL License"></a>6. MPL License</h4><p><code>MPL</code> 协议允许免费重发布、免费修改，但要求修改后的代码版权归软件的发起者。</p><p>这种授权维护了商业软件的利益，它要求基于这种软件的修改无偿贡献版权给该软件。这样，围绕该软件的所有代码的版权都集中在发起开发人的手中。但 <code>MPL</code> 是允许修改，无偿使用得， <code>MPL</code> 软件对链接没有要求。</p><h4 id="7-EPL-License"><a href="#7-EPL-License" class="headerlink" title="7. EPL License"></a>7. EPL License</h4><p><code>EPL</code> 允许 <code>Recipients</code> 任意使用、复制、分发、传播、展示、修改以及改后闭源的二次商业发布。</p><blockquote><p>使用 <code>EPL</code> 协议，需要遵守以下规则：</p><ul><li>当一个 <code>Contributors</code> 将源码的整体或部分再次开源发布的时候，必须继续遵循 <code>EPL</code> 开源协议来发布，而不能改用其他协议发布，除非你得到了原源码 <code>Owner</code> 的授权；</li><li><code>EPL</code> 协议下，你可以将源码不做任何修改来商业发布，但如果你要发布修改后的源码，或者当你再发布的是 <code>Object Code</code> 的时候，你必须声明它的 <code>Source Code</code> 是可以获取的，而且要告知获取方法；</li><li>当你需要将 <code>EPL</code> 下的源码作为一部分跟其他私有的源码混和着成为一个 <code>Project</code> 发布的时候，你可以将整个 <code>Project/Product</code> 以私人的协议发布，但要声明哪一部分代码是 <code>EPL</code> 下的，而且声明那部分代码继续遵循 <code>EPL</code> ；</li><li>独立的模块(<code>Separate Module</code>)不需要开源。</li></ul></blockquote><hr><p><strong>参考链接</strong>: <a href="https://www.runoob.com/w3cnote/open-source-license.html">各种开源协议介绍</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-Apache-License&quot;&gt;&lt;a href=&quot;#1-Apache-License&quot; class=&quot;headerlink&quot; title=&quot;1. Apache License&quot;&gt;&lt;/a&gt;1. Apache License&lt;/h4&gt;&lt;p&gt;&lt;code&gt;Apache</summary>
      
    
    
    
    <category term="编程" scheme="https://great-jin.github.io/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="License" scheme="https://great-jin.github.io/tags/License/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Alibaba介绍</title>
    <link href="https://great-jin.github.io/java/spring/cloud/nacos/"/>
    <id>https://great-jin.github.io/java/spring/cloud/nacos/</id>
    <published>2023-06-09T16:00:00.000Z</published>
    <updated>2023-12-08T11:34:01.654Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Nacos部署"><a href="#一、Nacos部署" class="headerlink" title="一、Nacos部署"></a>一、Nacos部署</h3><h4 id="1-应用下载"><a href="#1-应用下载" class="headerlink" title="1. 应用下载"></a>1. 应用下载</h4><p>进入 <code>Nacos</code> 下载页面选择对应版本并下载至本地，官网直达：<a href="https://github.com/alibaba/nacos/releases">Nacos</a>。<br><img src="/album/loading.gif" data-original="/album/article/java/spring/nacos/1.png"></p><h4 id="2-持久化"><a href="#2-持久化" class="headerlink" title="2. 持久化"></a>2. 持久化</h4><p>在正式之前需要修改 <code>Nacos</code> 的相关配置，如服务模式与数据的持久化配置。</p><p>在 <code>MySQL</code> 中新建数据库 <code>nacos</code> ，然后解压上一步下载的文件并运行 <code>/conf/mysql-schema.sql</code> 脚本文件。<br><img src="/album/loading.gif" data-original="/album/article/java/spring/nacos/2.png"></p><p>创建数据库之后修改解压目录下的 <code>/conf/application.properties</code> 文件，找到下图中配置取消注释并替换为你的数据库配置。<br><img src="/album/loading.gif" data-original="/album/article/java/spring/nacos/3.png"></p><h4 id="3-服务部署"><a href="#3-服务部署" class="headerlink" title="3. 服务部署"></a>3. 服务部署</h4><p>完成上述步骤之后即可启动 <code>Nacos</code> 服务，这里以 <code>Linux</code> 为例，进入解压后的 <code>bin</code> 目录，编辑 <code>startup.sh</code> 脚本将默认启动模式设置为单体模式。</p><p>将图中的 <code>mode</code> 修改为 <code>standalone</code> ，然后通过命令 <code>sh startup.sh</code> 启动服务。<br><img src="/album/loading.gif" data-original="/album/article/java/spring/nacos/4.png"></p><p>启动服务后访问 <code>ip:8848/nacos</code> 即可看到下图内容。<br><img src="/album/loading.gif" data-original="/album/article/java/spring/nacos/5.png"></p><h3 id="二、服务注册"><a href="#二、服务注册" class="headerlink" title="二、服务注册"></a>二、服务注册</h3><p>在上一篇文章中介绍了服务中心的创建与服务激活，在 <code>Nacos</code> 中其自身即服务注册中心，因此无需再自建注册中心直接使用 <code>Nacos</code> 即可，因此这里直接新建 <code>nacos-client</code> 工程模拟服务通过 <code>Nacos</code> 实现服务注册。</p><p>之前的文章中提到过 <code>Spring Cloud</code> 的版本与 <code>Spring Boot</code> 的版本相互关联，这里引入的为 <code>Finchley</code> 版本因此 <code>Spring Boot</code> 版本需为 <code>2.0.x</code> 。</p><h4 id="1-Pom依赖"><a href="#1-Pom依赖" class="headerlink" title="1. Pom依赖"></a>1. Pom依赖</h4><p>在工程的 <code>POM</code> 文件中导入 <code>alibaba</code> 与 <code>Finchley</code> 依赖，同时引入 <code>nacos-discovery</code> 用于服务注册。</p><p>文中的涉及的工程中 <code>Spring Boot</code> 版本均为 <code>2.0.x</code> 版本且都导入 <code>alibaba</code> 与 <code>Finchley</code> 依赖，后续将省略不再具体列出。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>nacos-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencyManagement</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>Finchley.SR1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.2.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencyManagement</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-项目配置"><a href="#2-项目配置" class="headerlink" title="2. 项目配置"></a>2. 项目配置</h4><p>在工程的 <code>yml</code> 文件中添加下述内容，其中 <code>server-addr</code> 为 <code>Nacos</code> 服务地址。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8091</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>client  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 192.168.0.20<span class="token punctuation">:</span><span class="token number">8848</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-测试接口"><a href="#3-测试接口" class="headerlink" title="3. 测试接口"></a>3. 测试接口</h4><p>在这里为了后续测试添加了一个测试接口。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/client"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/demo"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Hello world!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-注册激活"><a href="#4-注册激活" class="headerlink" title="4. 注册激活"></a>4. 注册激活</h4><p>在工程启动类上添加 <code>@EnableDiscoveryClient</code> 注解激活服务注册。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NacosClientApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>NacosClientApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成后启动项目访问 <code>Nacos</code> 服务页面即可看到 <code>nacos-client</code> 已成功实现服务注册。<br><img src="/album/loading.gif" data-original="/album/article/java/spring/nacos/6.png"></p><h3 id="三、服务消费"><a href="#三、服务消费" class="headerlink" title="三、服务消费"></a>三、服务消费</h3><p>在 <code>Eureka</code> 微服务文章中讲解了如何实现服务之间的通讯消费，在 <code>Alibaba</code> 中由 <code>Nacos</code> 注册服务之后同理可通过 <code>LoadBalancerClient</code> 或 <code>Feign</code> 实现服务消费，这里以之前 <code>Feign</code> 消费为例。</p><h4 id="1-Pom依赖-1"><a href="#1-Pom依赖-1" class="headerlink" title="1. Pom依赖"></a>1. Pom依赖</h4><p>新建 <code>nacos-feign</code> 工程，在模块依赖中添加 <code>openfeign</code> 依赖，略去 <code>Spring parent</code> 与 <code>Dalston</code> 。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Feign service --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-项目配置-1"><a href="#2-项目配置-1" class="headerlink" title="2. 项目配置"></a>2. 项目配置</h4><p>在工程的 <code>YML</code> 配置文件设置 <code>Nacos</code> 服务地址进行服务注册。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8092</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>feign  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 192.168.0.20<span class="token punctuation">:</span><span class="token number">8848</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-调用示例"><a href="#3-调用示例" class="headerlink" title="3. 调用示例"></a>3. 调用示例</h4><p>新建 <code>FeignService</code> 接口并通过 <code>@FeignClient</code> 注解指定目标服务方，其中 <code>@GetMapping</code> 注解配置目标服务的接口地址。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@FeignClient</span><span class="token punctuation">(</span><span class="token string">"nacos-client"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FeignService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/api/client/demo"</span><span class="token punctuation">)</span>    String <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成 <code>FeignService</code> 配置之后新建测试接口，通过 <code>@Autowired</code> 注入 <code>FeignService</code> 实例并实现服务调用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/nacos/feign"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FeignController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> FeignService feignService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/demo"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> feignService<span class="token punctuation">.</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-注册激活-1"><a href="#4-注册激活-1" class="headerlink" title="4. 注册激活"></a>4. 注册激活</h4><p>在项目启动类添加 <code>@EnableDiscoveryClient</code> 注解激活服务注册，其中 <code>@EnableFeignClients</code> 注解用于指定 <code>FeignService</code> 等接口包路径用于启动扫描。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EnableFeignClients</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"xyz.ibudai.service"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NacosFeignApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>NacosFeignApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成后同时启动 <code>nacos-client</code> 与 <code>nacos-feign</code> 工程，访问 <code>Nacos</code> 服务列表可以看见两个服务都已注册成功。<br><img src="/album/loading.gif" data-original="/album/article/java/spring/nacos/7.png"></p><p>通过 <code>API</code> 工具请求 <code>nacos-feign</code> 服务的 <code>/demo</code> 接口，可以看到成功实现服务 <code>nacos-client</code> 中的接口请求并返回结果。<br><img src="/album/loading.gif" data-original="/album/article/java/spring/nacos/7-1.png"></p><h3 id="四、配置中心"><a href="#四、配置中心" class="headerlink" title="四、配置中心"></a>四、配置中心</h3><p><code>Nacos</code> 除了实现服务注册中心之外同时提供了另一重要作用——分布式配置中心，即通过 <code>Nacos</code> 实现各个服务模块的 <code>YML</code> 配置文件的统一托管。</p><h4 id="1-Pom依赖-2"><a href="#1-Pom依赖-2" class="headerlink" title="1. Pom依赖"></a>1. Pom依赖</h4><p>新建 <code>nacos-config</code> 工程，在工程中添加 <code>nacos-config</code> 依赖，略去 <code>Spring parent</code> 与 <code>alibaba</code> 等导入依赖。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Nacos discovery --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Nacos config --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Nacos配置"><a href="#2-Nacos配置" class="headerlink" title="2. Nacos配置"></a>2. Nacos配置</h4><p>在 <code>Nacos</code> 页面访问 <code>配置管理</code> -&gt; <code>配置列表</code> ，在左上角选择 <code>创建配置</code>。</p><p>其中 <code>Data Id</code> 设为 <code>nacos-config</code>，<code>GROUP</code> 选用默认值即可，配置格式选择 <code>yaml</code> ，并在配置内容中添加测试信息，具体配置参考下图。<br><img src="/album/loading.gif" data-original="/album/article/java/spring/nacos/8.png"></p><h4 id="3-工程配置"><a href="#3-工程配置" class="headerlink" title="3. 工程配置"></a>3. 工程配置</h4><p>在工程 <code>resources</code> 目录下新建 <code>bootstrap.yml</code> 配置文件添加如下内容，注意不是使用默认的 <code>application.yml</code> 文件，因为前者的加载优先级更高。</p><p>其中 <code>application.name</code> 需要和上述 <code>Nacos</code> 中创建的文件同名，如创建了配置文件为 <code>nacos-config.yml</code>，则这里配置文件的应用名则需要为：<code>nacos-config</code>。</p><p>下述配置中的 <code>group</code> 与 <code>discovery</code> 和 <code>config</code> 中的 <code>namespace</code> 两项可以略去不填，默认值分别为 <code>DEFAULT_GROUP</code> 和 <code>public</code> 。其中 <code>discovery</code> 与 <code>config</code> 两组配置分别对应 <code>Nacos</code> 配置页面的 <code>服务列表</code> 和 <code>配置列表</code>。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8093</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>config  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># Default: "DEFAULT_GROUP"</span>      <span class="token key atrule">group</span><span class="token punctuation">:</span> DEFAULT_GROUP      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Default: public</span>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> public        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> 192.168.0.20<span class="token punctuation">:</span><span class="token number">8848</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># namespace, use id not name</span>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.cloud.nacos.discovery.namespace<span class="token punctuation">}</span>        <span class="token key atrule">username</span><span class="token punctuation">:</span> nacos        <span class="token key atrule">password</span><span class="token punctuation">:</span> nacos        <span class="token comment" spellcheck="true"># suffix, default: properties</span>        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yml        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.cloud.nacos.discovery.server<span class="token punctuation">-</span>addr<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-公共配置"><a href="#4-公共配置" class="headerlink" title="4. 公共配置"></a>4. 公共配置</h4><p><code>Nacos</code> 同时支持公共服务的配置，通过 <code>shared-dataids</code> 与 <code>refreshable-dataids</code> 属性配置，前端指定文件名称，后者配置时候开启动态刷新（即配置变更无需重复服务）。</p><p>通过公共配置服务即可实现基础配置的复用，如系统的数据库连接配置与日志监控配置等信息，无需为每个服务模块编写重复配置，各个模块可选择是否导入即可。</p><p>如下示例中我们新建了公共配置 <code>micro-common.yml</code> 配置并添加了一个测试属性 <code>info.common</code>。<br><img src="/album/loading.gif" data-original="/album/article/java/spring/nacos/11.png"></p><p>在上述的 <code>nacos-config</code> 工程中 <code>bootstrap.yml</code> 文件的基础上添加下述内容读取公共配置，当 <code>shared-dataids</code> 中指定了多个配置时，定义越靠后的配置其文件中相同属性的优先级更高。</p><p>如定义了 <code>shared-dataids: a.yml, b.yml</code> 两个公共配置，当 <code>a.yml</code> 与 <code>b.yml</code> 中存在相同配置时最终将会应用 <code>b.yml</code> 中的配置。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Newer load config will override old</span>        <span class="token key atrule">shared-dataids</span><span class="token punctuation">:</span> micro<span class="token punctuation">-</span>common.yml        <span class="token comment" spellcheck="true"># Auto refresh config</span>        <span class="token key atrule">refreshable-dataids</span><span class="token punctuation">:</span> micro<span class="token punctuation">-</span>common.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-命名空间"><a href="#5-命名空间" class="headerlink" title="5. 命名空间"></a>5. 命名空间</h4><p>在 <code>Nacos</code> 中通过命名空间 <code>namespace</code> 可实现多个项目的注册管理，不同 <code>namespace</code> 之间相互独立互不影响。</p><p>因此即便存在多个微服务项目通过 <code>namespace</code> 也以通过同一个 <code>nacos</code> 服务实现统一管理， <code>namespace</code> 创建如下，注意创建的 <code>namespace</code> 在工程 <code>bootstrap.yml</code> 文件配置时填写为 <code>命名空间ID</code> 而非 <code>命名空间名</code> 。<br><img src="/album/loading.gif" data-original="/album/article/java/spring/nacos/9.png"></p><p>创建命名空间之后访问 <code>配置列表</code> 或 <code>服务列表</code> 即可看见新建命名空间。<br><img src="/album/loading.gif" data-original="/album/article/java/spring/nacos/10.png"></p><h4 id="6-服务测试"><a href="#6-服务测试" class="headerlink" title="6. 服务测试"></a>6. 服务测试</h4><p>新建服务测试接口通过 <code>@Value</code> 注解读取 <code>Nacos</code> 中的配置信息。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/config"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${info.name}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String infoName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${common.name}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String commonName<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/name"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> infoName <span class="token operator">+</span> <span class="token string">" - "</span> <span class="token operator">+</span> commonName<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-注册激活"><a href="#7-注册激活" class="headerlink" title="7. 注册激活"></a>7. 注册激活</h4><p>如果仅测试分布式配置中心是无需开启服务注册，但在更多的应用场景中其都是与服务注册相耦合。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NacosConsumerApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>NacosConsumerApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成后启动项目通过 <code>API</code> 工具请求 <code>/name</code> 测试接口可以看到成功读取 <code>Nacos</code> 中配置的信息。</p><hr><p><strong>Talk is cheap, show me you code。</strong></p><p>文中示例工程已上传 <code>GitHub</code> ，<a href="https://github.com/great-jin/spring-cloud-demo">仓库直达</a>。</p><p>参考链接：<a href="https://blog.didispace.com/spring-cloud-learning/">Spring Cloud 从入门到精通</a>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、Nacos部署&quot;&gt;&lt;a href=&quot;#一、Nacos部署&quot; class=&quot;headerlink&quot; title=&quot;一、Nacos部署&quot;&gt;&lt;/a&gt;一、Nacos部署&lt;/h3&gt;&lt;h4 id=&quot;1-应用下载&quot;&gt;&lt;a href=&quot;#1-应用下载&quot; class=&quot;head</summary>
      
    
    
    
    <category term="微服务" scheme="https://great-jin.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
    <category term="微服务" scheme="https://great-jin.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="Spring Cloud" scheme="https://great-jin.github.io/tags/Spring-Cloud/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>布袋青年</title>
  
  <subtitle>布袋青年</subtitle>
  <link href="https://great-jin.github.io/atom.xml" rel="self"/>
  
  <link href="https://great-jin.github.io/"/>
  <updated>2024-03-09T14:52:16.395Z</updated>
  <id>https://great-jin.github.io/</id>
  
  <author>
    <name>烽火戏诸诸诸侯</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Digester XML解析教程</title>
    <link href="https://great-jin.github.io/java/utils/xml/"/>
    <id>https://great-jin.github.io/java/utils/xml/</id>
    <published>2024-03-08T16:00:00.000Z</published>
    <updated>2024-03-09T14:52:16.395Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、前置准备"><a href="#一、前置准备" class="headerlink" title="一、前置准备"></a>一、前置准备</h3><h4 id="1-概念解释"><a href="#1-概念解释" class="headerlink" title="1. 概念解释"></a>1. 概念解释</h4><p>在 <code>XML</code> 文件中有一个十分重要的概念 <code>XPath</code>，简单而言即用于定义元素的位置。</p><p>直接通过示例直观的了解 <code>XPath</code> 的定义，如一个 <code>XML</code> 的文件内容如下。那么值 <code>Alex</code> 对应的标签 <code>name</code> 其相应的 <code>XPath</code> 则为 <code>student/name</code>，即用于定位元素的路径。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Alex<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-依赖导入"><a href="#2-依赖导入" class="headerlink" title="2. 依赖导入"></a>2. 依赖导入</h4><p><code>Apache digester</code> 是 <code>Java</code> 中一种 <code>XML</code> 解析框架，能够在耗费最低系统资源的前提下实现高效 <code>XML</code> 文件解析。</p><p>使用方法简单快捷，在 <code>Maven</code> 项目中引入下述依赖即可开箱即用。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-digester3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-文件数据"><a href="#3-文件数据" class="headerlink" title="3. 文件数据"></a>3. 文件数据</h4><p>在开始之前先准备一个 <code>XML</code> 数据文件，文件内容如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entityContainer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entity</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>alex<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attribute</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>math<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>80<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>attribute</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attribute</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>science<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>85<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>attribute</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entity</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>beth<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attribute</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>math<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>85<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>attribute</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attribute</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>science<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>90<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>attribute</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entityContainer</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、基础操作"><a href="#二、基础操作" class="headerlink" title="二、基础操作"></a>二、基础操作</h3><h4 id="1-实体对象"><a href="#1-实体对象" class="headerlink" title="1. 实体对象"></a>1. 实体对象</h4><p>相对应于 <code>XML</code> 文件，需要创建对应的 <code>Java</code> 实体类用作载体。</p><p>同上述准备的 <code>XML</code> 文件内容此处创建了三个对应的实体类 <code>EntityContainer</code>，<code>Entity</code> 与 <code>Attribute</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EntityContainer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Entity<span class="token operator">></span> entityList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addEntity</span><span class="token punctuation">(</span>Entity entity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        entityList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Entity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Attribute<span class="token operator">></span> attributes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addAttribute</span><span class="token punctuation">(</span>Attribute attribute<span class="token punctuation">)</span> <span class="token punctuation">{</span>        attributes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Attribute</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String key<span class="token punctuation">;</span>    <span class="token keyword">private</span> String value<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-规则配置"><a href="#2-规则配置" class="headerlink" title="2. 规则配置"></a>2. 规则配置</h4><p>完成上述步骤后即可开始正式的文件内容解析，<code>Digester</code> 解析工具其提供的规则配置方法参考下表：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">addObjectCreate()</td>        <td style="text-align: center;">用于设置与 Java 对象的映射关系。</td>    </tr>    <tr>        <td style="text-align: center;">addSetProperties()</td>        <td style="text-align: center;">设置对象属性值。</td>    </tr>    <tr>        <td style="text-align: center;">addBeanPropertySetter()</td>        <td style="text-align: center;">用于 XPath 与实体对象属性的匹配</td>    </tr>    <tr>        <td style="text-align: center;">addSetNext()</td>        <td style="text-align: center;">一个标签内嵌套多个同标签时用于指定添加方法。</td>    </tr></table><h4 id="3-读取示例"><a href="#3-读取示例" class="headerlink" title="3. 读取示例"></a>3. 读取示例</h4><p>因此，之前提到的 <code>XML</code> 文件其对应的解析示例如下，其中 <code>parse()</code> 方法支持输入文件流与文本块的方式，前者基于事件驱动后者基于内存驱动，在解析大文件的情况下前者显然能够占用更少的资源。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DigestXmlTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String location <span class="token operator">=</span> <span class="token string">"src\\main\\resources\\xml\\data.xml"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">basicTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Digester digester <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Digester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        digester<span class="token punctuation">.</span><span class="token function">addObjectCreate</span><span class="token punctuation">(</span><span class="token string">"entityContainer"</span><span class="token punctuation">,</span> EntityContainer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        digester<span class="token punctuation">.</span><span class="token function">addSetProperties</span><span class="token punctuation">(</span><span class="token string">"entityContainer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        digester<span class="token punctuation">.</span><span class="token function">addObjectCreate</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity"</span><span class="token punctuation">,</span> Entity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// addBeanPropertySetter(): march xml label with bean field</span>        digester<span class="token punctuation">.</span><span class="token function">addBeanPropertySetter</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/id"</span><span class="token punctuation">,</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        digester<span class="token punctuation">.</span><span class="token function">addBeanPropertySetter</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/name"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// addSetNext(): when march multiple item then put to collection</span>        digester<span class="token punctuation">.</span><span class="token function">addSetNext</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity"</span><span class="token punctuation">,</span> <span class="token string">"addEntity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        digester<span class="token punctuation">.</span><span class="token function">addObjectCreate</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/attribute"</span><span class="token punctuation">,</span> Attribute<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        digester<span class="token punctuation">.</span><span class="token function">addBeanPropertySetter</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/attribute/key"</span><span class="token punctuation">,</span> <span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        digester<span class="token punctuation">.</span><span class="token function">addBeanPropertySetter</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/attribute/value"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        digester<span class="token punctuation">.</span><span class="token function">addSetNext</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/attribute"</span><span class="token punctuation">,</span> <span class="token string">"addAttribute"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>FileReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            EntityContainer container <span class="token operator">=</span> digester<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、进阶配置"><a href="#三、进阶配置" class="headerlink" title="三、进阶配置"></a>三、进阶配置</h3><h4 id="1-规则定义"><a href="#1-规则定义" class="headerlink" title="1. 规则定义"></a>1. 规则定义</h4><p>在上述的示例中通过配置的规则即可实现数据文件的解析，但每次使用都需定义解析规则，显然过于繁杂。</p><p>因此，在 <code>Digester</code> 中提供了 <code>AbstractRulesModule</code> 可实现规则配置的统一管理，一次定义即可全局使用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRuleModule</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractRulesModule</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">forPattern</span><span class="token punctuation">(</span><span class="token string">"entityContainer"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ofType</span><span class="token punctuation">(</span>EntityContainer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">forPattern</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ofType</span><span class="token punctuation">(</span>Entity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">forPattern</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBeanProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">forPattern</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBeanProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">forPattern</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span><span class="token string">"addEntity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">forPattern</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/attribute"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ofType</span><span class="token punctuation">(</span>Attribute<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">forPattern</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/attribute/key"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBeanProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">forPattern</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/attribute/value"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBeanProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">forPattern</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/attribute"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span><span class="token string">"addAttribute"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-读取示例"><a href="#2-读取示例" class="headerlink" title="2. 读取示例"></a>2. 读取示例</h4><p>上述配置方式相对应的读取示例代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DigestXmlTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String location <span class="token operator">=</span> <span class="token string">"src\\main\\resources\\xml\\data.xml"</span><span class="token punctuation">;</span>     <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ruleTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// write once, use anywhere</span>        <span class="token keyword">final</span> DigesterLoader loader <span class="token operator">=</span> DigesterLoader<span class="token punctuation">.</span><span class="token function">newLoader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyRuleModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Digester digester <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">newDigester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// read and parse</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>FileReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            EntityContainer container <span class="token operator">=</span> digester<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、注解方式"><a href="#四、注解方式" class="headerlink" title="四、注解方式"></a>四、注解方式</h3><h4 id="1-注解介绍"><a href="#1-注解介绍" class="headerlink" title="1. 注解介绍"></a>1. 注解介绍</h4><p>除了代码配置解析规则之外，在 <code>3.x</code> 版本中提供了注解的方法，从而实现更便捷配置。</p><p><code>Digester</code> 解析规则相配套的注解及其描述参考下表：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">注解</td>        <th style="text-align: center;">描述</td>    </tr>    <tr>        <td style="text-align: center;">@ObjectCreate</td>        <td style="text-align: center;">等价于 addObjectCreate() 配置。</td>    </tr>    <tr>        <td style="text-align: center;">@BeanPropertySetter</td>        <td style="text-align: center;">等价于 addBeanPropertySetter() 配置。</td>    </tr>    <tr>        <td style="text-align: center;">@SetNext</td>        <td style="text-align: center;">等价于 addSetNext() 配置。</td>    </tr></table><h4 id="2-对象定义"><a href="#2-对象定义" class="headerlink" title="2. 对象定义"></a>2. 对象定义</h4><p>修改之前创建的实体类，通过注解方式配置 <code>XPath</code> 的值实现映射，对应代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ObjectCreate</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"entityContainer"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EntityContainer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Entity<span class="token operator">></span> entityList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@SetNext</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addEntity</span><span class="token punctuation">(</span>Entity entity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        entityList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ObjectCreate</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"entityContainer/entity"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Entity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@BeanPropertySetter</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"entityContainer/entity/id"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@BeanPropertySetter</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"entityContainer/entity/name"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>        <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Attribute<span class="token operator">></span> attributes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@SetNext</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addAttribute</span><span class="token punctuation">(</span>Attribute attribute<span class="token punctuation">)</span> <span class="token punctuation">{</span>        attributes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ObjectCreate</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"entityContainer/entity/attribute"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Attribute</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@BeanPropertySetter</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"entityContainer/entity/attribute/key"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String key<span class="token punctuation">;</span>    <span class="token annotation punctuation">@BeanPropertySetter</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"entityContainer/entity/attribute/value"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String value<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-规则定义"><a href="#3-规则定义" class="headerlink" title="3. 规则定义"></a>3. 规则定义</h4><p>类似的通过继承 <code>FromAnnotationsRuleModule</code> 配置读取实体类的注解信息。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAnnotationModule</span> <span class="token keyword">extends</span> <span class="token class-name">FromAnnotationsRuleModule</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configureRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">bindRulesFrom</span><span class="token punctuation">(</span>EntityContainer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-读取示例"><a href="#4-读取示例" class="headerlink" title="4. 读取示例"></a>4. 读取示例</h4><p>上述步骤完成之后即可实现文件解析，同样是一次定义全局可用，对应的示例代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DigestXmlTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String location <span class="token operator">=</span> <span class="token string">"src\\main\\resources\\xml\\data.xml"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">annotationTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// write once, use anywhere</span>        <span class="token keyword">final</span> DigesterLoader loader <span class="token operator">=</span> DigesterLoader<span class="token punctuation">.</span><span class="token function">newLoader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyAnnotationModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Digester digester <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">newDigester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// read and parse</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>FileReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            EntityContainer container <span class="token operator">=</span> digester<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>参考文章</strong></p><ol><li><a href="https://juejin.cn/post/7066826274836054023?searchId=20240108172348EE7C3A942D88F609E667">Apache Commons Digester 使用介绍</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、前置准备&quot;&gt;&lt;a href=&quot;#一、前置准备&quot; class=&quot;headerlink&quot; title=&quot;一、前置准备&quot;&gt;&lt;/a&gt;一、前置准备&lt;/h3&gt;&lt;h4 id=&quot;1-概念解释&quot;&gt;&lt;a href=&quot;#1-概念解释&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="后端" scheme="https://great-jin.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Java" scheme="https://great-jin.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 工厂模式实现</title>
    <link href="https://great-jin.github.io/java/design/factory/"/>
    <id>https://great-jin.github.io/java/design/factory/</id>
    <published>2024-03-07T16:00:00.000Z</published>
    <updated>2024-03-09T09:54:42.164Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-常量定义"><a href="#1-常量定义" class="headerlink" title="1. 常量定义"></a>1. 常量定义</h4><p>为了提供程序的可读性与可维护性，此处将后续涉及的常量统一外置定义。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Const</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ANIMAL_DOG <span class="token operator">=</span> <span class="token string">"dog"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ANIMAL_CAT <span class="token operator">=</span> <span class="token string">"cat"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-工厂实现"><a href="#2-工厂实现" class="headerlink" title="2. 工厂实现"></a>2. 工厂实现</h4><p>这里同样以基础的动物工厂为例，定义了接口 <code>Animal</code>，同时定义了两个实现类 <code>Dog</code> 与 <code>Cat</code>。</p><p>需要注意此处的两个实现类需要通过 <code>@Service</code> 注入 <code>Bean</code> 对象至 <code>Spring</code> 容器中，并指定了 <code>Bean</code> 名称。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">roar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span>Const<span class="token punctuation">.</span>ANIMAL_DOG<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">roar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Dog roar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span>Const<span class="token punctuation">.</span>ANIMAL_CAT<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">roar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cat roar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-示例演示"><a href="#3-示例演示" class="headerlink" title="3. 示例演示"></a>3. 示例演示</h4><p>完成上述步骤后即可通过 <code>Map</code> 与 <code>@Autowired</code> 获取对象实例，依托于 <code>Spring</code> 容器实现了类似工厂与 <code>SPI</code> 结合的效果。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Animal<span class="token operator">></span> animalMap<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// --> Dog roar</span>        animalMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Const<span class="token punctuation">.</span>ANIMAL_DOG<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// --> Cat roar</span>        animalMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Const<span class="token punctuation">.</span>ANIMAL_CAT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-常量定义&quot;&gt;&lt;a href=&quot;#1-常量定义&quot; class=&quot;headerlink&quot; title=&quot;1. 常量定义&quot;&gt;&lt;/a&gt;1. 常量定义&lt;/h4&gt;&lt;p&gt;为了提供程序的可读性与可维护性，此处将后续涉及的常量统一外置定义。&lt;/p&gt;
&lt;pre class=&quot;li</summary>
      
    
    
    
    <category term="模式设计" scheme="https://great-jin.github.io/categories/%E6%A8%A1%E5%BC%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Spring SQL 拦截器实现</title>
    <link href="https://great-jin.github.io/java/spring/native/interceptor/"/>
    <id>https://great-jin.github.io/java/spring/native/interceptor/</id>
    <published>2024-03-07T16:00:00.000Z</published>
    <updated>2024-03-09T09:54:42.167Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-依赖引入"><a href="#1-依赖引入" class="headerlink" title="1. 依赖引入"></a>1. 依赖引入</h4><p>在当下绝多数的工程中通常采用 <code>MyBatis</code> 作为数据交互框架，同类此处在项目中导入下述依赖。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-注解介绍"><a href="#2-注解介绍" class="headerlink" title="2. 注解介绍"></a>2. 注解介绍</h4><p>以往的文章中已经详细介绍过拦截器的使用，这里仅简要概述一下的 <code>@Intercepts</code> 注解的参数配置。</p><p><code>@Intercepts</code> 中提供了注解参数 <code>@Signature</code> 用于配置拦截目标信息，<code>@Signature</code> 注解的配置参数如下：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">type</td>        <td style="text-align: center;">指定目标方法所在的接口或类。</td>    </tr>    <tr>        <td style="text-align: center;">method</td>        <td style="text-align: center;">指定要拦截的目标方法的名称。</td>    </tr>    <tr>        <td style="text-align: center;">args</td>        <td style="text-align: center;">指定拦截目标方法的参数类型。</td>    </tr></table><p>假设存在目标类 <code>TargetClass</code>，并包含了两个方法，具体内容如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> TargetClass <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo1</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo2</span><span class="token punctuation">(</span>String s1<span class="token punctuation">,</span> String s2<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若想要编写一个拦截器作用于上述 <code>demo1()</code> 方法，则 <code>@Intercepts</code> 注解的定义格式如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Intercepts</span><span class="token punctuation">(</span>        <span class="token annotation punctuation">@Signature</span><span class="token punctuation">(</span>                type <span class="token operator">=</span> TargetClass<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                method <span class="token operator">=</span> <span class="token string">"demo1"</span><span class="token punctuation">,</span>                args <span class="token operator">=</span> <span class="token punctuation">{</span> String<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-拦截实现"><a href="#3-拦截实现" class="headerlink" title="3. 拦截实现"></a>3. 拦截实现</h4><p>基于上述描述，我们即可编辑拦截器实现 SQL 层面执行的跟踪编辑操作。</p><p>在 <code>MyBatis</code> 中 <code>JDBC</code> 的执行依托于 <code>org.apache.ibatis.executor.Executor</code> 接口，因此其对应的拦截器定义如下，其中定义了作用于 <code>query()</code> 方法查询。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Intercepts</span><span class="token punctuation">(</span>        <span class="token annotation punctuation">@Signature</span><span class="token punctuation">(</span>                type <span class="token operator">=</span> Executor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                method <span class="token operator">=</span> <span class="token string">"query"</span><span class="token punctuation">,</span>                args <span class="token operator">=</span> <span class="token punctuation">{</span>                        MappedStatement<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                        Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                        RowBounds<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                        ResultHandler<span class="token punctuation">.</span><span class="token keyword">class</span>                <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"rawtypes"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">plugin</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Plugin<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Invocation invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MappedStatement ms <span class="token operator">=</span> <span class="token punctuation">(</span>MappedStatement<span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        Object params <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        RowBounds rowBounds <span class="token operator">=</span> <span class="token punctuation">(</span>RowBounds<span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        ResultHandler resultHandler <span class="token operator">=</span> <span class="token punctuation">(</span>ResultHandler<span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Get sql detail</span>        Executor executor <span class="token operator">=</span> <span class="token punctuation">(</span>Executor<span class="token punctuation">)</span> invocation<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BoundSql boundSql <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getBoundSql</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">;</span>        CacheKey cacheKey <span class="token operator">=</span> executor<span class="token punctuation">.</span><span class="token function">createCacheKey</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> params<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Handle target sql</span>        SqlCommandType sqlType <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getSqlCommandType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sqlType <span class="token operator">==</span> SqlCommandType<span class="token punctuation">.</span>SELECT<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========> Query sql: "</span> <span class="token operator">+</span> boundSql<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> executor<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> params<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> cacheKey<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-工厂注入"><a href="#4-工厂注入" class="headerlink" title="4. 工厂注入"></a>4. 工厂注入</h4><p>上述步骤仅实现了拦截器，还需将其注入到 <code>SqlSessionFactory</code> 中才能在执行 <code>SQL</code> 时生效。</p><p>通过 <code>Spring Boot</code> 中的 <code>ApplicationRunner</code>，即可实现在工程启动时注入拦截器到工厂类，代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SqlFactoryRunner</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>SqlSessionFactory<span class="token operator">></span> sqlSessionFactoryList<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>ApplicationArguments args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>SqlSessionFactory sqlSessionFactory <span class="token operator">:</span> sqlSessionFactoryList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Inject interceptor to sql factory</span>            sqlSessionFactory<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueryInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-依赖引入&quot;&gt;&lt;a href=&quot;#1-依赖引入&quot; class=&quot;headerlink&quot; title=&quot;1. 依赖引入&quot;&gt;&lt;/a&gt;1. 依赖引入&lt;/h4&gt;&lt;p&gt;在当下绝多数的工程中通常采用 &lt;code&gt;MyBatis&lt;/code&gt; 作为数据交互框架，同类此处在项目</summary>
      
    
    
    
    <category term="Spring框架" scheme="https://great-jin.github.io/categories/Spring%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Spring Boot" scheme="https://great-jin.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring 动态数据源教程</title>
    <link href="https://great-jin.github.io/java/spring/tool/datasource/"/>
    <id>https://great-jin.github.io/java/spring/tool/datasource/</id>
    <published>2024-03-07T16:00:00.000Z</published>
    <updated>2024-03-09T09:54:42.170Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、工程配置"><a href="#一、工程配置" class="headerlink" title="一、工程配置"></a>一、工程配置</h3><h4 id="1-依赖导入"><a href="#1-依赖导入" class="headerlink" title="1. 依赖导入"></a>1. 依赖导入</h4><p>在工程中引入 <code>jdbc-starter</code> 与 <code>spring-data</code> 依赖，内容如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-data-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-文件配置"><a href="#2-文件配置" class="headerlink" title="2. 文件配置"></a>2. 文件配置</h4><p>在工程 <code>YML</code> 配置文件中添加多个数据源信息，这里我以两个为例。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource1</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">jdbc-url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/test_db1<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=utf<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL</span>=false    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>  <span class="token key atrule">datasource2</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">jdbc-url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/test_db2<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=utf<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL</span>=false    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、对象管理"><a href="#二、对象管理" class="headerlink" title="二、对象管理"></a>二、对象管理</h3><h4 id="1-常量定义"><a href="#1-常量定义" class="headerlink" title="1. 常量定义"></a>1. 常量定义</h4><p>为了提高程序的可维护性，这里将后续涉及的常量统一外置定义。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatasourceConst</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DS_MASTER <span class="token operator">=</span> <span class="token string">"datasource1"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DS_SLAVE <span class="token operator">=</span> <span class="token string">"datasource2"</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TM_MASTER <span class="token operator">=</span> <span class="token string">"transactionManager1"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TM_SLAVE <span class="token operator">=</span> <span class="token string">"transactionManager2"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Bean注入"><a href="#2-Bean注入" class="headerlink" title="2. Bean注入"></a>2. Bean注入</h4><p>通过 <code>@Bean</code> 将配置文件中的多个数据源信息注入 <code>Spring</code> 容器，其中 <code>@Primary</code> 标识数据源为默认源。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatasourceConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> DatasourceConst<span class="token punctuation">.</span>DS_MASTER<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"spring.datasource1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DataSource <span class="token function">dataSource1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> DataSourceBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> DatasourceConst<span class="token punctuation">.</span>DS_SLAVE<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"spring.datasource2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DataSource <span class="token function">dataSource2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> DataSourceBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token keyword">public</span> DataSource <span class="token function">dynamicDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> dataSourceMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSourceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>DatasourceConst<span class="token punctuation">.</span>DS_MASTER<span class="token punctuation">,</span> <span class="token function">dataSource1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSourceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>DatasourceConst<span class="token punctuation">.</span>DS_SLAVE<span class="token punctuation">,</span> <span class="token function">dataSource2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置动态数据源</span>        DynamicDataSource dataSources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DynamicDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSources<span class="token punctuation">.</span><span class="token function">setTargetDataSources</span><span class="token punctuation">(</span>dataSourceMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSources<span class="token punctuation">.</span><span class="token function">setDefaultTargetDataSource</span><span class="token punctuation">(</span><span class="token function">dataSource1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dataSources<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-事务配置"><a href="#3-事务配置" class="headerlink" title="3. 事务配置"></a>3. 事务配置</h4><p>同理，当配置多个数据源时若需要使用事务需要将对应的事务管理注入 <code>Spring</code> 容器。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> DatasourceConst<span class="token punctuation">.</span>TM_MASTER<span class="token punctuation">)</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Primary</span>    DataSourceTransactionManager <span class="token function">transactionManager1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>DatasourceConst<span class="token punctuation">.</span>DS_MASTER<span class="token punctuation">)</span> DataSource datasource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span>datasource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> DatasourceConst<span class="token punctuation">.</span>TM_SLAVE<span class="token punctuation">)</span>    <span class="token annotation punctuation">@Autowired</span>    DataSourceTransactionManager <span class="token function">transactionManager2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>DatasourceConst<span class="token punctuation">.</span>DS_SLAVE<span class="token punctuation">)</span> DataSource datasource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span>datasource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> DatasourceConst<span class="token punctuation">.</span>TM_CHAIN<span class="token punctuation">)</span>    <span class="token keyword">public</span> ChainedTransactionManager <span class="token function">chainedTransactionManager</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>DatasourceConst<span class="token punctuation">.</span>TM_MASTER<span class="token punctuation">)</span> DataSourceTransactionManager tm1<span class="token punctuation">,</span>                                                               <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>DatasourceConst<span class="token punctuation">.</span>TM_SLAVE<span class="token punctuation">)</span> DataSourceTransactionManager tm2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransactionManager</span><span class="token punctuation">(</span>tm1<span class="token punctuation">,</span> tm2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、数据切换"><a href="#三、数据切换" class="headerlink" title="三、数据切换"></a>三、数据切换</h3><h4 id="1-管理工具"><a href="#1-管理工具" class="headerlink" title="1. 管理工具"></a>1. 管理工具</h4><p>新建 <code>DynamicDataSourceHolder</code> 用于标识管理当前激活的数据源。</p><p>基于 <code>Web</code> 请求的特性，每个请求线程都可能使用到不同的数据源，因此选择 <code>ThreadLocal</code> 变量存储。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicDataSourceHolder</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 动态数据源名称上下文     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>String<span class="token operator">></span> DATASOURCE_HOLDER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取数据源名称     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getContextKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String key <span class="token operator">=</span> DATASOURCE_HOLDER<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> key <span class="token operator">==</span> null <span class="token operator">?</span> DatasourceConst<span class="token punctuation">.</span>DS_MASTER <span class="token operator">:</span> key<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置/切换数据源     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setContextKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DATASOURCE_HOLDER<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除当前数据源名称     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        DATASOURCE_HOLDER<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-切换配置"><a href="#2-切换配置" class="headerlink" title="2. 切换配置"></a>2. 切换配置</h4><p>新建类继承于 <code>AbstractRoutingDataSource</code>，当程序在获取数据源连接池时将会执行 <code>determineCurrentLookupKey()</code> 方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicDataSource</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractRoutingDataSource</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Through the key(bean name) to get which datasource to use.     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Object <span class="token function">determineCurrentLookupKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> DynamicDataSourceHolder<span class="token punctuation">.</span><span class="token function">getContextKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-演示示例"><a href="#3-演示示例" class="headerlink" title="3. 演示示例"></a>3. 演示示例</h4><p>在应用中切换数据源时即可通过 <code>DynamicDataSourceHolder</code> 工具类快速切换，为了更直观显示效果，建议多个数据源选择不同的库执行查询并拼接。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/sysUser"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysUserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> SysUserService sysUserService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ResponseEntity<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>SysUser<span class="token operator">></span> list1<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Query data with default datasource</span>            list1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sysUserService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Change datasource to slave node</span>            DynamicDataSourceHolder<span class="token punctuation">.</span><span class="token function">setContextKey</span><span class="token punctuation">(</span>DatasourceConst<span class="token punctuation">.</span>DS_SLAVE<span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>SysUser<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sysUserService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Merge data</span>            list1<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            DynamicDataSourceHolder<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>参考文章</strong></p><ol><li><a href="https://juejin.cn/post/6844904050262016007">搞定SpringBoot多数据源(2)：动态数据源</a></li><li><a href="https://stackoverflow.com/questions/30337582/spring-boot-configure-and-use-two-data-sources">Spring Boot configure and use two data sources</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、工程配置&quot;&gt;&lt;a href=&quot;#一、工程配置&quot; class=&quot;headerlink&quot; title=&quot;一、工程配置&quot;&gt;&lt;/a&gt;一、工程配置&lt;/h3&gt;&lt;h4 id=&quot;1-依赖导入&quot;&gt;&lt;a href=&quot;#1-依赖导入&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="Spring工具" scheme="https://great-jin.github.io/categories/Spring%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Spring Boot" scheme="https://great-jin.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Docker Compose基础</title>
    <link href="https://great-jin.github.io/linux/docker/docker%20compose/"/>
    <id>https://great-jin.github.io/linux/docker/docker%20compose/</id>
    <published>2024-02-19T16:00:00.000Z</published>
    <updated>2024-02-29T11:31:43.623Z</updated>
    
    <content type="html"><![CDATA[<p><code>Docker</code> 容器基于 <code>CLI</code> 运行，而 <code>Docker compose</code> 则基于 <code>yaml</code> 配置文件，后者相对自动化程度更高。</p><h3 id="一、服务安装"><a href="#一、服务安装" class="headerlink" title="一、服务安装"></a>一、服务安装</h3><h4 id="1-前置服务"><a href="#1-前置服务" class="headerlink" title="1. 前置服务"></a>1. 前置服务</h4><p><code>Docker compose</code> 是基于 <code>Docker</code> 扩展，因此需要先安装 <code>Docker</code> 服务。</p><p>默认 <code>Docker</code> 安装路径为 <code>/var/lib/docker</code>。</p><pre class="line-numbers language-bash"><code class="language-bash">yum <span class="token function">install</span> docker-ce -y                   <span class="token comment" spellcheck="true"># 通过 yum 源安装</span>systemctl start docker                     <span class="token comment" spellcheck="true"># 启动服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-文件下载"><a href="#2-文件下载" class="headerlink" title="2. 文件下载"></a>2. 文件下载</h4><p>若使用 <code>curl</code> 命令下载失败可直接进入 <code>Docker GitHub</code> 发布页手动下载文件再上传至服务器，<a href="https://github.com/docker/compose/releases">官网直达</a>。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 文件下载</span>curl -L <span class="token string">"https://mirrors.tuna.tsinghua.edu.cn/docker-compose/latest/<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -s<span class="token variable">)</span></span>/<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -m<span class="token variable">)</span></span>/docker-compose"</span> -o /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-链接安装"><a href="#3-链接安装" class="headerlink" title="3. 链接安装"></a>3. 链接安装</h4><p>完成 <code>Docker Compose</code> 文件下载之后需要进行授权并创建链接文件。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 文件授权</span><span class="token function">chmod</span> +x /usr/local/bin/docker-compose<span class="token comment" spellcheck="true"># 文件链接</span><span class="token function">ln</span> -s /usr/local/bin/docker-compose /usr/bin/docker-compose<span class="token comment" spellcheck="true"># 安装验证</span>docker-compose version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、文件配置"><a href="#二、文件配置" class="headerlink" title="二、文件配置"></a>二、文件配置</h3><h4 id="1-基本格式"><a href="#1-基本格式" class="headerlink" title="1. 基本格式"></a>1. 基本格式</h4><p><code>Docker Compose</code> 通过 <code>yaml</code> 文件实现容器的管理，其配置内容参数说明如下：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">参数</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">image</td>        <td style="text-align: center;">用于指定所要使用镜像。</td>    </tr>    <tr>        <td style="text-align: center;">container_name</td>        <td style="text-align: center;">用于配置启动容器的名称。</td>    </tr>    <tr>        <td style="text-align: center;">environment</td>        <td style="text-align: center;">用于配置容器环境变量。</td>    </tr>    <tr>        <td style="text-align: center;">ports</td>        <td style="text-align: center;">用于配置容器与本机的端口映射。</td>    </tr>    <tr>        <td style="text-align: center;">volumes</td>        <td style="text-align: center;">用于配置容器与本机的文件映射。</td>    </tr></table><p>下述为一个完整的 <code>yaml</code> 配置文件示例。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># Application name</span>  <span class="token key atrule">service-1</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Config the image</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> test_image        <span class="token comment" spellcheck="true"># Config the container name</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> test_service        <span class="token comment" spellcheck="true"># Config the port proxy</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"8080:8080"</span>    <span class="token comment" spellcheck="true"># Config the environment properties</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">props1</span><span class="token punctuation">:</span> value1      <span class="token punctuation">-</span> <span class="token key atrule">props2</span><span class="token punctuation">:</span> value2        <span class="token comment" spellcheck="true"># config the directory or file proxy</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /home/docker/test/application.yml<span class="token punctuation">:</span>/app/application.yml     <span class="token comment" spellcheck="true"># Sharing the same networking space with the Host</span>    <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> <span class="token string">"host"</span>    <span class="token comment" spellcheck="true"># Application name</span>  <span class="token key atrule">service-2</span><span class="token punctuation">:</span>    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> service<span class="token punctuation">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-网络配置"><a href="#2-网络配置" class="headerlink" title="2. 网络配置"></a>2. 网络配置</h4><h5 id="1-depends-on"><a href="#1-depends-on" class="headerlink" title="(1) depends_on"></a>(1) depends_on</h5><p><code>depends_on</code> 用于定义服务之间的启动顺序和依赖关系。具体而言，它指定了某个服务依赖于其他服务，即使依赖的服务启动后，也确保依赖服务在其之前启动。</p><p>然而，它并不保证服务已经完全健康或准备好接受连接，因此它主要用于启动顺序的管理。</p><h5 id="2-network-mode"><a href="#2-network-mode" class="headerlink" title="(2) network_mode"></a>(2) network_mode</h5><p><code>network_mode</code> 用于指定服务使用的网络模式。它可以设置为 <code>bridge、host、none</code> 或自定义网络名称。</p><p>默认情况下，<code>Docker Compose</code> 创建一个自定义网络，但你可以通过 <code>network_mode</code> 来覆盖这个行为。</p><h3 id="三、命令介绍"><a href="#三、命令介绍" class="headerlink" title="三、命令介绍"></a>三、命令介绍</h3><h4 id="1-服务启停"><a href="#1-服务启停" class="headerlink" title="1. 服务启停"></a>1. 服务启停</h4><p>完成 <code>yaml</code> 文件配置之后，即可在同级目录下通过下述命令启停容器。</p><p>当完成容器启动后，可同样通过 <code>docker ps</code> 等命令进行查看，与之前文章提到 <code>docker</code> 使用并无不同。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动服务</span>docker-compose up<span class="token comment" spellcheck="true"># 后台运行</span>docker-compose up -d<span class="token comment" spellcheck="true"># 停止服务</span>docker-compose down<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2. 常用命令"></a>2. 常用命令</h4><p>除了基础的服务启停之外，常用的命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 动态查看日志</span>docker-compose logs -f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;Docker&lt;/code&gt; 容器基于 &lt;code&gt;CLI&lt;/code&gt; 运行，而 &lt;code&gt;Docker compose&lt;/code&gt; 则基于 &lt;code&gt;yaml&lt;/code&gt; 配置文件，后者相对自动化程度更高。&lt;/p&gt;
&lt;h3 id=&quot;一、服务安装&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="服务运维" scheme="https://great-jin.github.io/categories/%E6%9C%8D%E5%8A%A1%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Docker" scheme="https://great-jin.github.io/tags/Docker/"/>
    
    <category term="Linux" scheme="https://great-jin.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>枚举实现优雅的验证</title>
    <link href="https://great-jin.github.io/java/design/enum/"/>
    <id>https://great-jin.github.io/java/design/enum/</id>
    <published>2024-02-19T16:00:00.000Z</published>
    <updated>2024-02-20T14:22:48.521Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-接口定义"><a href="#1-接口定义" class="headerlink" title="1. 接口定义"></a>1. 接口定义</h4><p>创建接口类 <code>Element</code> 并定义对应所需字段。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>    String <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> Object <span class="token function">defaultValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-枚举实现"><a href="#2-枚举实现" class="headerlink" title="2. 枚举实现"></a>2. 枚举实现</h4><h5 id="1-实现一"><a href="#1-实现一" class="headerlink" title="(1) 实现一"></a>(1) 实现一</h5><p>创建枚举 <code>AppleElement</code> 实现于 <code>Element</code> 接口，此时枚举中的元素成员需实现对应接口。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> AppleElement <span class="token keyword">implements</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>    SHAPE <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"shape"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Apple shape"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    MEAT <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"meat"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Apple meat"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> AppleElement <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>AppleElement value <span class="token operator">:</span> AppleElement<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-实现二"><a href="#2-实现二" class="headerlink" title="(2) 实现二"></a>(2) 实现二</h5><p>同理再创建一个枚举 <code>OrangeElement</code>，定义方式同上。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> OrangeElement <span class="token keyword">implements</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>    SHAPE <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"shape"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Orange shape"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    MEAT <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"meat"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Orange meat"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> OrangeElement <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>OrangeElement value <span class="token operator">:</span> OrangeElement<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-验证示例"><a href="#3-验证示例" class="headerlink" title="3. 验证示例"></a>3. 验证示例</h4><p>完成上述步骤后即可快速实现同源但不同类型的数据验证，相应示例如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ElementTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 定义对象用于描述 Apple</span>        var appleData <span class="token operator">=</span> List<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>                Map<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>AppleElement<span class="token punctuation">.</span>SHAPE<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"round"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                Map<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>AppleElement<span class="token punctuation">.</span>MEAT<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 定义对象用于描述 Orange</span>        var orangeData <span class="token operator">=</span> List<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>                Map<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>OrangeElement<span class="token punctuation">.</span>SHAPE<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"round"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                Map<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>OrangeElement<span class="token punctuation">.</span>MEAT<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"white"</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 验证描述信息是否符合规范</span>        <span class="token function">validate</span><span class="token punctuation">(</span>appleData<span class="token punctuation">,</span> AppleElement<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">validate</span><span class="token punctuation">(</span>orangeData<span class="token punctuation">,</span> OrangeElement<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">validate</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">>></span> dataList<span class="token punctuation">,</span>                          Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Element</span><span class="token operator">></span> aClass<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> data <span class="token operator">:</span> dataList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            var offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            var msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> row <span class="token operator">:</span> data<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                offset<span class="token operator">++</span><span class="token punctuation">;</span>                var index <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                var value <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 通过反射获取枚举对应元素</span>                Element element <span class="token operator">=</span> <span class="token punctuation">(</span>Element<span class="token punctuation">)</span> aClass                        <span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">boolean</span> blank <span class="token operator">=</span> Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">||</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 此处为验证是否为空</span>                <span class="token comment" spellcheck="true">// 可根据业务实现更复杂逻辑</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> blank<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    msg<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Filed {"</span> <span class="token operator">+</span> element<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"} can't be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>msg<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 若非法则输入信息</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>offset <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-接口定义&quot;&gt;&lt;a href=&quot;#1-接口定义&quot; class=&quot;headerlink&quot; title=&quot;1. 接口定义&quot;&gt;&lt;/a&gt;1. 接口定义&lt;/h4&gt;&lt;p&gt;创建接口类 &lt;code&gt;Element&lt;/code&gt; 并定义对应所需字段。&lt;/p&gt;
&lt;pre class</summary>
      
    
    
    
    <category term="模式设计" scheme="https://great-jin.github.io/categories/%E6%A8%A1%E5%BC%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>JVM参数调优教程</title>
    <link href="https://great-jin.github.io/java/advance/optimize/"/>
    <id>https://great-jin.github.io/java/advance/optimize/</id>
    <published>2024-02-06T16:00:00.000Z</published>
    <updated>2024-02-20T12:36:29.413Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、参数配置"><a href="#一、参数配置" class="headerlink" title="一、参数配置"></a>一、参数配置</h3><h4 id="1-配置方式"><a href="#1-配置方式" class="headerlink" title="1. 配置方式"></a>1. 配置方式</h4><p>在虚拟机中 <code>-X</code> 和 <code>-D</code> 都可用于指定 <code>JVM</code> 参数，但它们在使用方式和作用范围上有一些区别。</p><ul><li><p><code>-X</code> 用于指定非标准的 <code>JVM</code> 参数，这些参数通常是供具体的 <code>JVM</code> 实现或特定的虚拟机选项使用的。它的使用方式是 <code>-X&lt;parameter&gt;</code> ，其中 <code>&lt;parameter&gt;</code> 是具体的 <code>JVM</code> 参数名称。</p></li><li><p><code>-D</code> 用于设置系统属性，可以在应用程序中通过 <code>System.getProperty()</code> 方法获取。它的使用方式是 <code>-D&lt;property&gt;=&lt;value&gt;</code>，其中 <code>&lt;property&gt;</code> 是属性名称，<code>&lt;value&gt;</code> 是属性值。</p></li></ul><p>总结： <code>-X</code> 参数用于指定 <code>JVM</code> 的非标准参数，而 <code>-D</code> 参数用于设置系统属性。<code>-X</code> 参数通常影响 <code>JVM</code> 的行为和性能，而 <code>-D</code> 参数提供了一种在应用程序中传递配置信息的机制。</p><h5 id="1-基本格式"><a href="#1-基本格式" class="headerlink" title="(1) 基本格式"></a>(1) 基本格式</h5><p><code>JVM</code> 配置参数通常由 <code>-XX:</code> 开头，基本格式如下：</p><blockquote><ul><li>若用于配置是否启用，由 <code>+ -</code> 分别控制开启与关闭。</li><li>若用于配置大小或数值变量，遵循 <code>&lt;option&gt;=&lt;value&gt;</code> 格式。</li></ul></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 表示开启 option 选项</span>-XX:+<span class="token operator">&lt;</span>option<span class="token operator">></span><span class="token comment" spellcheck="true"># 表示关闭 option 选项</span>-XX:-<span class="token operator">&lt;</span>option<span class="token operator">></span>    <span class="token comment" spellcheck="true"># 表示将 option 值赋为 value</span>-XX:<span class="token operator">&lt;</span>option<span class="token operator">>=</span><span class="token operator">&lt;</span>value<span class="token operator">></span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-优先级"><a href="#2-优先级" class="headerlink" title="2. 优先级"></a>2. 优先级</h4><p>在 <code>Java</code> 命令行运行 <code>JAR</code> 包时，<code>JVM</code> 参数可以在 <code>-jar</code> 选项之前或之后指定，这两种方式会影响参数的解析和执行顺序。</p><blockquote><ul><li>参数在 <code>-jar</code> 之前，则会在 <code>JVM</code> 启动前解析和应用。</li><li>参数在 <code>-jar</code> 之后，则会在解析 <code>JAR</code> 包时被应用。</li><li>若 <code>JVM</code> 参数与 <code>JAR</code> 包的命令行参数存在冲突，<code>JVM</code> 参数的优先级更高。</li></ul></blockquote><p>如下示例中方式一的 <code>-Xmx512m</code> 优先级高于方式二中的 <code>-Xmx1024m</code>。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 方式一</span>java -Xmx512m -jar myapp.jar<span class="token comment" spellcheck="true"># 方式二</span>java -jar myapp.jar -Xmx1024m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、常用配置"><a href="#二、常用配置" class="headerlink" title="二、常用配置"></a>二、常用配置</h3><h4 id="1-内存参数"><a href="#1-内存参数" class="headerlink" title="1. 内存参数"></a>1. 内存参数</h4><p>常见的 <code>JVM</code> 内存参数如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 堆内存初始值</span>-Xms2G <span class="token comment" spellcheck="true"># 堆内存最大值</span>-Xmx2G<span class="token comment" spellcheck="true"># 每个线程的堆栈大小，默认 1MB，在相同物理内存下，减小这个值能生成更多的线程</span><span class="token comment" spellcheck="true"># 但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在 3000~5000 左右。</span>-Xss512k<span class="token comment" spellcheck="true"># 设置年轻代大小，增大年轻代后，将会减小年老代大小。</span><span class="token comment" spellcheck="true"># 此值对系统性能影响较大，Sun 官方推荐配置为整个堆的 3/8。</span>-Xmn1024m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-JVM参数"><a href="#2-JVM参数" class="headerlink" title="2. JVM参数"></a>2. JVM参数</h4><p>常见的 <code>JVM</code> 配置参数如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># CMS垃圾回收器并行线程线，推荐值为CPU核心数。</span>-XX:ConcGCThreads<span class="token operator">=</span>4<span class="token comment" spellcheck="true"># 新生代并行收集器的线程数。</span>-XX:ParallelGCThreads<span class="token operator">=</span>8<span class="token comment" spellcheck="true"># 设置新生代中 Eden 与 Survivor 的比例，默认为 8，即 8:1:1</span>-XX:SurvivorRatio<span class="token operator">=</span>8<span class="token comment" spellcheck="true"># 直接晋升到老年代的对象大小</span><span class="token comment" spellcheck="true"># 设置该值后将忽略 MaxTenuringThreshold 设置，当对象大小达到设置值后直接晋升老年代</span>-XX:PretenureSizeThreshold<span class="token operator">=</span>1m<span class="token comment" spellcheck="true"># 设置垃圾最大年龄，取值 0~15，默认为 15</span>-XX:MaxTenuringThreshold<span class="token operator">=</span>10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-系统参数"><a href="#3-系统参数" class="headerlink" title="3. 系统参数"></a>3. 系统参数</h4><p>常见的系统参数配置参数如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 防止虚拟机阻塞</span>-Djava.security.egd<span class="token operator">=</span>file:/dev/./urandom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-GC参数"><a href="#4-GC参数" class="headerlink" title="4. GC参数"></a>4. GC参数</h4><p>常见的虚拟机垃圾回收（<code>GC</code>）参数配置参数如下：</p><p>开启日志后生成的 <code>GC</code> 信息文件可通过工具进行分析，推荐在线分析网站：<code>https://gceasy.io</code>。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 打印 gc 发生的时间戳</span>-XX:+PrintGCDateStamps<span class="token comment" spellcheck="true"># 打印 gc 发生时的分代信息</span>-XX:+PrintTenuringDistribution<span class="token comment" spellcheck="true"># 打印 gc 停顿时长</span>-XX:+PrintGCApplicationStoppedTime<span class="token comment" spellcheck="true"># 打印 gc 间隔的服务运行时长</span>-XX:+PrintGCApplicationConcurrentTime<span class="token comment" spellcheck="true"># 打印 gc 详情，包括 gc 前/内存等</span>-XX:+PrintGCDetails<span class="token comment" spellcheck="true"># 指定 gc log 的路径，存放于当前 gclogs 目录下的 gc.log.date 文件</span>-Xloggc:./gclogs/gc.log.date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、JDK工具"><a href="#三、JDK工具" class="headerlink" title="三、JDK工具"></a>三、JDK工具</h3><h4 id="1-Jinfo"><a href="#1-Jinfo" class="headerlink" title="1. Jinfo"></a>1. Jinfo</h4><p><code>jinfo</code> 是 <code>JDK</code>中的一个命令行工具，用于实时查看和调整 <code>Java</code> 虚拟机（<code>JVM</code>）的配置信息。</p><p>通过 <code>jinfo</code> 可以获取和修改正在运行的 <code>Java</code> 进程的虚拟机配置参数，对于调优和诊断 <code>Java</code> 应用程序是很有帮助的。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看进程的虚拟机参数信息</span>jinfo <span class="token operator">&lt;</span>options<span class="token operator">></span> <span class="token operator">&lt;</span>pid<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="1-flags"><a href="#1-flags" class="headerlink" title="(1) flags"></a>(1) flags</h5><p>显示所有可用的虚拟机参数及其当前值。</p><pre class="line-numbers language-bash"><code class="language-bash">jinfo -flags <span class="token operator">&lt;</span>pid<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-flag"><a href="#2-flag" class="headerlink" title="(2) flag"></a>(2) flag</h5><p>显示指定标志的值。</p><pre class="line-numbers language-bash"><code class="language-bash">jinfo -flag <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>pid<span class="token operator">></span><span class="token comment" spellcheck="true"># 查看 pid 为 123 的 ThreadStackSize 参数信息</span><span class="token comment" spellcheck="true"># 输出: -XX:ThreadStackSize=1024</span>jinfo -flag ThreadStackSize 123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-flag"><a href="#3-flag" class="headerlink" title="(3) -flag [+|-]"></a>(3) -flag [+|-]</h5><p>启用或禁用指定的标志。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 开启配置</span>jinfo -flag +<span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>pid<span class="token operator">></span><span class="token comment" spellcheck="true"># 关闭配置</span>jinfo -flag -<span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>pid<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-sysprops"><a href="#4-sysprops" class="headerlink" title="(4) sysprops"></a>(4) sysprops</h5><p>显示 <code>Java</code> 系统属性的值。</p><pre class="line-numbers language-bash"><code class="language-bash">jinfo -sysprops <span class="token operator">&lt;</span>pid<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-Jstat"><a href="#2-Jstat" class="headerlink" title="2. Jstat"></a>2. Jstat</h4><p><code>jstat</code> 是 <code>JDK</code> 中的一个命令行工具，用于监视 <code>Java</code> 虚拟机 <code>(JVM)</code> 的各种统计信息。</p><p>它提供了对堆内存、垃圾回收、类装载、<code>JIT</code> 编译等方面的实时性能数据，帮助开发人员和系统管理员诊断和分析 <code>Java</code> 应用程序的性能问题。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># &lt;pid>: jps process id</span><span class="token comment" spellcheck="true"># &lt;interval>: time interval, ms</span>jstat -gc <span class="token operator">&lt;</span>pid<span class="token operator">></span> <span class="token operator">&lt;</span>interval<span class="token operator">></span><span class="token comment" spellcheck="true"># Simple info</span>jstat -gcutil <span class="token operator">&lt;</span>pid<span class="token operator">></span> <span class="token operator">&lt;</span>interval<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/album/loading.gif" data-original="/album/article/java/jvm/31.png"><br><img src="/album/loading.gif" data-original="/album/article/java/jvm/32.png"></p><hr><ul><li><strong>S0C</strong>：年轻代中第一个 <code>Survivor</code>（幸存区）的容量 (KB) 。</li><li><strong>S1C</strong>：年轻代中第二个 <code>Survivor</code>（幸存区）的容量 (KB)。</li><li><strong>S0U</strong>：年轻代中第一个 <code>Survivor</code>（幸存区）目前已使用空间 (KB) 。</li><li><strong>S1U</strong>：年轻代中第二个 <code>Survivor</code>（幸存区）目前已使用空间 (KB) 。</li></ul><hr><ul><li><strong>EC</strong>：年轻代中 <code>Eden</code>（伊甸园）的容量 (KB) 。</li><li><strong>EU</strong>：年轻代中 <code>Eden</code>（伊甸园）目前已使用空间 (KB)。</li></ul><hr><ul><li><strong>OC</strong>：<code>Old</code> 代的容量 (KB) 。</li><li><strong>OU</strong>：<code>Old</code> 代目前已使用空间 (KB) 。</li></ul><hr><ul><li><strong>MC</strong>：元数据区的容量 (KB) 。</li><li><strong>MU</strong>：元数据区目前已使用空间 (KB) 。</li></ul><hr><ul><li><strong>YGC</strong>：从应用程序启动到采样时年轻代中 <code>GC</code> 次数 。</li><li><strong>YGCT</strong>：从应用程序启动到采样时年轻代中 <code>GC</code> 所用时间(秒) 。</li></ul><hr><ul><li><strong>FGC</strong>：从应用程序启动到采样时 <code>Old</code> 代 <code>Full GC</code> 次数 。</li><li><strong>FGCT</strong>：从应用程序启动到采样时 <code>Old</code> 代 <code>Full GC</code> 所用时间(秒) 。</li><li><strong>GCT</strong>：从应用程序启动到采样时 <code>GC</code> 用的总时间(s) 。</li></ul><hr><ul><li><strong>NGCMN</strong>：年轻代 (<code>Young</code>) 中初始化(最小)的大小 (字节) 。</li><li><strong>NGCMX</strong>：年轻代 (<code>Young</code>) 的最大容量 (字节) 。</li><li><strong>NGC</strong>：年轻代 (<code>Young</code>) 中当前的容量 (字节) 。</li></ul><hr><ul><li><strong>OGCMN</strong>：<code>Old</code> 代中初始化(最小)的大小 (字节) 。</li><li><strong>OGCMX</strong>：<code>Old</code> 代的最大容量 (字节) 。</li><li><strong>OGC</strong>：<code>Old</code> 代当前新生成的容量 (字节) 。</li><li><strong>O</strong>：<code>Old</code> 代已使用的占当前容量百分比。</li></ul><hr><ul><li><strong>S0</strong>：年轻代中第一个 <code>Survivor</code>（幸存区）已使用的占当前容量百分比。</li><li><strong>S1</strong>：年轻代中第二个 <code>Survivor</code>（幸存区）已使用的占当前容量百分比 。</li><li><strong>S0CMX</strong>：年轻代中第一个 <code>Survivor</code>（幸存区）的最大容量 (字节) 。</li><li><strong>S1CMX</strong> ：年轻代中第二个 <code>Survivor</code>（幸存区）的最大容量 (字节) 。</li><li><strong>E</strong>：年轻代中 <code>Eden</code>（伊甸园）已使用的占当前容量百分比 。</li><li><strong>ECMX</strong>：年轻代中 <code>Eden</code>（伊甸园）的最大容量 (字节) 。</li></ul><hr><ul><li><strong>DSS</strong>：当前需要 <code>Survivor</code>（幸存区）的容量 (字节)（ <code>Eden</code> 区已满）。</li><li><strong>TT</strong>： 持有次数限制。</li><li><strong>MTT</strong> ： 最大持有次数限制。</li></ul><h4 id="3-Jstack"><a href="#3-Jstack" class="headerlink" title="3. Jstack"></a>3. Jstack</h4><p><code>jstack</code> 是 <code>JDK</code>中的一个命令行工具，用于生成 <code>Java</code> 进程的线程转储（<code>thread dump</code>）。</p><p>线程转储是一个描述 <code>Java</code> 虚拟机中所有线程当前状态的快照，包括线程的堆栈信息。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查询进程堆栈信息</span>jstack <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token operator">&lt;</span>pid<span class="token operator">></span><span class="token comment" spellcheck="true"># &lt;line num>: 限制显示行数</span><span class="token comment" spellcheck="true"># &lt;pid_16>: 进程转十六进制</span>jstack <span class="token operator">&lt;</span>pid<span class="token operator">></span> <span class="token operator">|</span> <span class="token function">grep</span> -A <span class="token operator">&lt;</span>line num<span class="token operator">></span> <span class="token operator">&lt;</span>pid_16_hex<span class="token operator">></span><span class="token comment" spellcheck="true"># 转十六进制</span><span class="token function">printf</span> <span class="token string">'%x\n'</span> <span class="token operator">&lt;</span>pid<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-l"><a href="#1-l" class="headerlink" title="(1) -l"></a>(1) -l</h5><p>除了线程堆栈外，还显示关于锁的附加信息，这将显示每个锁的拥有者和等待者。</p><pre class="line-numbers language-bash"><code class="language-bash">jstack -l <span class="token operator">&lt;</span>pid<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-F"><a href="#2-F" class="headerlink" title="(2) -F"></a>(2) -F</h5><p>当进程无响应时，强制生成线程转储，在进程卡死或无响应时非常有用。</p><pre class="line-numbers language-bash"><code class="language-bash">jstack -F <span class="token operator">&lt;</span>pid<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-m"><a href="#3-m" class="headerlink" title="(3) -m"></a>(3) -m</h5><p>打印 <code>Java</code> 和本地 <code>C/C++</code> 帧的混合堆栈。</p><pre class="line-numbers language-bash"><code class="language-bash">jstack -m <span class="token operator">&lt;</span>pid<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="4-e"><a href="#4-e" class="headerlink" title="(4) -e"></a>(4) -e</h5><p>打印线程的锁信息。</p><pre class="line-numbers language-bash"><code class="language-bash">jstack -e <span class="token operator">&lt;</span>pid<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-JMap"><a href="#4-JMap" class="headerlink" title="4. JMap"></a>4. JMap</h4><p><code>jmap</code> 是 <code>JDK</code> 中的一个命令行工具，用于生成 <code>Java</code> 进程的内存转储快照。</p><p>这个快照通常称为 <code>heap dump</code>，它是 <code>Java</code> 堆内存的详细信息，包括对象的数量、类型、分布等，对于分析内存泄漏和性能问题非常有用。</p><pre class="line-numbers language-bash"><code class="language-bash">jmap <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token operator">&lt;</span>pid<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-heap"><a href="#1-heap" class="headerlink" title="(1) -heap"></a>(1) -heap</h5><p>打印 <code>Java</code> 堆内存的概要信息，包括堆的使用情况和配置。</p><pre class="line-numbers language-bash"><code class="language-bash">jmap -heap <span class="token operator">&lt;</span>pid<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-heap"><a href="#2-heap" class="headerlink" title="(2) -heap"></a>(2) -heap</h5><p>打印 <code>Java</code> 堆内存中对象的直方图，显示每个类的实例数量和占用的内存大小。</p><pre class="line-numbers language-bash"><code class="language-bash">jmap -histo <span class="token operator">&lt;</span>pid<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-dump"><a href="#3-dump" class="headerlink" title="(3) -dump"></a>(3) -dump</h5><p>生成堆转储文件，将 <code>Java</code> 堆内存的详细信息保存到指定的文件中。</p><p>在线 <code>dump</code> 文件分析工具：<code>https://heaphero.io/index.jsp</code>。</p><pre class="line-numbers language-bash"><code class="language-bash">jmap -dump:file<span class="token operator">=</span><span class="token operator">&lt;</span>export_path<span class="token operator">></span> <span class="token operator">&lt;</span>pid<span class="token operator">></span><span class="token comment" spellcheck="true"># 生成堆栈信息日志</span>jmap -dump:format<span class="token operator">=</span>b,file<span class="token operator">=</span>./dump.bin 123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-F"><a href="#4-F" class="headerlink" title="(4) -F"></a>(4) -F</h5><p>当进程无响应时，强制生成堆转储，在处理无响应或死锁的情况下很有用。</p><pre class="line-numbers language-bash"><code class="language-bash">jmap -F -dump:file<span class="token operator">=</span><span class="token operator">&lt;</span>dumpfile<span class="token operator">></span> <span class="token operator">&lt;</span>pid<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p><strong>参考文档</strong></p><ol><li><a href="https://blog.csdn.net/m0_46316970/article/details/123585951">JVM常用调优参数 ——JVM篇</a></li><li><a href="https://juejin.cn/post/7184047757869449273#heading-1">一次简单的 JVM 调优，拿去写到简历里</a></li><li><a href="https://blog.csdn.net/m0_37298500/article/details/130400099">jstat命令查看jvm内存情况及GC内存变化</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、参数配置&quot;&gt;&lt;a href=&quot;#一、参数配置&quot; class=&quot;headerlink&quot; title=&quot;一、参数配置&quot;&gt;&lt;/a&gt;一、参数配置&lt;/h3&gt;&lt;h4 id=&quot;1-配置方式&quot;&gt;&lt;a href=&quot;#1-配置方式&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="JAVA进阶" scheme="https://great-jin.github.io/categories/JAVA%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>EasyExcel工具使用教程</title>
    <link href="https://great-jin.github.io/java/utils/easyexcel/"/>
    <id>https://great-jin.github.io/java/utils/easyexcel/</id>
    <published>2024-01-28T16:00:00.000Z</published>
    <updated>2024-03-09T09:54:42.171Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、数据读取"><a href="#一、数据读取" class="headerlink" title="一、数据读取"></a>一、数据读取</h3><h4 id="1-模拟数据"><a href="#1-模拟数据" class="headerlink" title="1. 模拟数据"></a>1. 模拟数据</h4><p>首先先准备一个 <code>Excel</code> 数据文件，文件内容如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">id</span>    name    gender    birthday1    User-1    Male    2024-01-292    User-2    Male    2024-01-293    User-3    Male    2024-01-294    User-4    Male    2024-01-29<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-实体读取"><a href="#2-实体读取" class="headerlink" title="2. 实体读取"></a>2. 实体读取</h4><p><code>EasyExcel</code> 支持匹配 <code>Java</code> 实体读取文件内容，文件的列名需要何 <code>Java</code> 类的字段名相对应。</p><p>如下示例中即读取第一步中的模拟数据最终返回一个列表集合。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExcelUser</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String gender<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birthday<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExcelReadTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readDemo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String fileLocate <span class="token operator">=</span> <span class="token string">"src\\main\\resources\\info.xls"</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>InputStream in <span class="token operator">=</span> Files<span class="token punctuation">.</span><span class="token function">newInputStream</span><span class="token punctuation">(</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>fileLocate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>ExcelUser<span class="token operator">></span> list <span class="token operator">=</span> EasyExcel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span>ExcelUser<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">doReadSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-动态读取"><a href="#3-动态读取" class="headerlink" title="3. 动态读取"></a>3. 动态读取</h4><p><code>EasyExcel</code> 除了支持实体类读取之外还可以动态指定列名进行读取，返回的结果为 <code>List&lt;LinkedMap&lt;Integer, Object&gt;&gt;</code>，其中每一个 <code>LinkMap</code> 对应文件内的一行数据。</p><p>需要注意这里传入的列头集合类型是 <code>List&lt;List&lt;String&gt;&gt;</code> 而非 <code>List&lt;String&gt;</code>，即数据格式如：<code>[[&quot;id&quot;], [&quot;name&quot;]]</code>。同时 <code>EasyExcel</code> 支持多种读入方式，在上一点示例中通过 <code>IO</code> 方法读取，下述示例则直接传入文件路径，可根据需要选择。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readDemo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    String fileLocate <span class="token operator">=</span> <span class="token string">"src\\main\\resources\\info.xls"</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>String<span class="token operator">>></span> heads <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"gender"</span><span class="token punctuation">,</span> <span class="token string">"birthday"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Arrays<span class="token operator">:</span><span class="token operator">:</span>asList<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>LinkedMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Object<span class="token operator">>></span> list <span class="token operator">=</span> EasyExcel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>fileLocate<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span>heads<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">doReadSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、数据写入"><a href="#二、数据写入" class="headerlink" title="二、数据写入"></a>二、数据写入</h3><h4 id="1-写入示例"><a href="#1-写入示例" class="headerlink" title="1. 写入示例"></a>1. 写入示例</h4><p><code>EasyExcel</code> 写入操作与读取类似，其中的 <code>excelType</code> 为文件类型，可选值有下述三类，对应三种不同的数据文件格式。</p><pre class="line-numbers language-java"><code class="language-java">ExcelTypeEnum<span class="token punctuation">.</span>CSVExcelTypeEnum<span class="token punctuation">.</span>XLSExcelTypeEnum<span class="token punctuation">.</span>XLSX<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里同样是采取实体字段名匹配的方式写入数据，示例代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readDemo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>ExcelUser<span class="token operator">></span> dataList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dataList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExcelUser</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"User-"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token string">"Male"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    String fileLocate <span class="token operator">=</span> <span class="token string">"src\\main\\resources\\info.xls"</span><span class="token punctuation">;</span>    EasyExcel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fileLocate<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">excelType</span><span class="token punctuation">(</span>ExcelTypeEnum<span class="token punctuation">.</span>XLS<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span>ExcelUser<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token string">"Test-data"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">doWrite</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Sheet管理"><a href="#2-Sheet管理" class="headerlink" title="2. Sheet管理"></a>2. Sheet管理</h4><p>当需要写入多个 <code>Sheet</code> 到同一个 <code>Excel</code> 文件时，即可使用 <code>ExcelWriterSheetBuilder</code>。</p><p>如下述示例中即创建两个 <code>Sheet</code> 页数据，<code>Sheet</code> 页名称分别为 <code>Sheet-1</code> 和 <code>Sheet-2</code>。</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">multipleWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>ExcelUser<span class="token operator">></span> dataList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dataList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExcelUser</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"User-"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token string">"Male"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    String fileLocate <span class="token operator">=</span> <span class="token string">"src\\main\\resources\\info.xls"</span><span class="token punctuation">;</span>    ExcelWriter excelWriter <span class="token operator">=</span> EasyExcel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fileLocate<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">excelType</span><span class="token punctuation">(</span>ExcelTypeEnum<span class="token punctuation">.</span>XLS<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 循环创建两个 Sheet 页数据</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ExcelWriterSheetBuilder sheetBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExcelWriterSheetBuilder</span><span class="token punctuation">(</span>excelWriter<span class="token punctuation">)</span><span class="token punctuation">;</span>        sheetBuilder<span class="token punctuation">.</span><span class="token function">sheetName</span><span class="token punctuation">(</span><span class="token string">"Sheet-"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        sheetBuilder<span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span>ExcelUser<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sheetBuilder<span class="token punctuation">.</span><span class="token function">registerWriteHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LongestMatchColumnWidthStyleStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        excelWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>dataList<span class="token punctuation">,</span> sheetBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    excelWriter<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-动态写入"><a href="#3-动态写入" class="headerlink" title="3. 动态写入"></a>3. 动态写入</h4><p>在许多场景下数据是变动的通过实体匹配显然是不合适的，因此 EasyExcel 提供了动态写入的能力。</p><p>与上述提到的读取和写入类似，其列名通过 <code>List&lt;List&lt;String&gt;&gt;</code> 指定，但不同的是其数据的载体是 <code>List&lt;Object&gt;</code> 而非 <code>List&lt;Map&gt;</code>，因此在写入时我们需要将后者数据格式转为  <code>List&lt;Object&gt;</code>，对应的数据转化样例如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// List&lt;Map&lt;String, Object>></span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>         <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>         <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"user-1"</span><span class="token punctuation">,</span>         <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token string">"Male"</span><span class="token punctuation">,</span>         <span class="token string">"birthday"</span><span class="token punctuation">:</span> <span class="token string">"2023-01-01 00:00:01"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>         <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span>         <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"user-2"</span><span class="token punctuation">,</span>         <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token string">"Male"</span><span class="token punctuation">,</span>         <span class="token string">"birthday"</span><span class="token punctuation">:</span> <span class="token string">"2023-01-01 00:00:02"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// List&lt;Object></span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"user-1"</span><span class="token punctuation">,</span> <span class="token string">"Male"</span><span class="token punctuation">,</span> <span class="token string">"2023-01-01 00:00:01"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"user-2"</span><span class="token punctuation">,</span> <span class="token string">"Male"</span><span class="token punctuation">,</span> <span class="token string">"2023-01-01 00:00:02"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据上述逻辑，其相对应的程序代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dynamicWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> dataList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> Map<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>                <span class="token string">"id"</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">,</span>                <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"user-"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span>                <span class="token string">"gender"</span><span class="token punctuation">,</span> <span class="token string">"Male"</span><span class="token punctuation">,</span>                <span class="token string">"birthday"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        dataList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Convert "List&lt;Map&lt;?, ?>>" to "List&lt;?>"</span>    List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Object<span class="token operator">>></span> rowDatas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">:</span> dataList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Object<span class="token operator">></span> row <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String name <span class="token operator">:</span> headList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            row<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        rowDatas<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Excel head</span>    List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>String<span class="token operator">>></span> heads <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"gender"</span><span class="token punctuation">,</span> <span class="token string">"birthday"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Arrays<span class="token operator">:</span><span class="token operator">:</span>asList<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Writer data</span>    String fileLocate <span class="token operator">=</span> <span class="token string">"src\\main\\resources\\info.xls"</span><span class="token punctuation">;</span>    EasyExcel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fileLocate<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">excelType</span><span class="token punctuation">(</span>ExcelTypeEnum<span class="token punctuation">.</span>XLS<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span>heads<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token string">"Test-data"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">doWrite</span><span class="token punctuation">(</span>rowDatas<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、注解使用"><a href="#三、注解使用" class="headerlink" title="三、注解使用"></a>三、注解使用</h3><h4 id="1-ExcelProperty"><a href="#1-ExcelProperty" class="headerlink" title="1. ExcelProperty"></a>1. ExcelProperty</h4><p><code>@ExcelProperty</code> 注解存在 <code>value</code> 与 <code>order</code> 两个属性，前者用于设置别名，后者用于设置列顺序。</p><p>如下示例中则最后生成 <code>Excel</code> 文件中列名分别为 <code>编号</code> 与 <code>姓名</code>，其中第一列为 <code>编号</code>，第二列为 <code>姓名</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExcelUser</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"编号"</span><span class="token punctuation">,</span> order <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span> order <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-ExcelIgnore"><a href="#2-ExcelIgnore" class="headerlink" title="2. ExcelIgnore"></a>2. ExcelIgnore</h4><p><code>@ExcelIgnore</code> 用于指定需要忽略的属性。</p><p>如下示例在读取或写入文件时将忽略 <code>address</code> 字段。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExcelUser</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelIgnore</span>    <span class="token keyword">private</span> Date address<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-DateTimeFormat"><a href="#3-DateTimeFormat" class="headerlink" title="3. DateTimeFormat"></a>3. DateTimeFormat</h4><p><code>@DateTimeFormat</code> 用于指定格式化字段时间</p><p>如下示例在读取或写入文件时将会格式化字段 <code>birthday</code> 字段 值为 <code>yyy-MM-dd</code> 格式。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExcelUser</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span><span class="token string">"yyy-MM-dd"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Date birthday<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、数据读取&quot;&gt;&lt;a href=&quot;#一、数据读取&quot; class=&quot;headerlink&quot; title=&quot;一、数据读取&quot;&gt;&lt;/a&gt;一、数据读取&lt;/h3&gt;&lt;h4 id=&quot;1-模拟数据&quot;&gt;&lt;a href=&quot;#1-模拟数据&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="后端" scheme="https://great-jin.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Java" scheme="https://great-jin.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Vue构建部署教程</title>
    <link href="https://great-jin.github.io/vue/deploy/"/>
    <id>https://great-jin.github.io/vue/deploy/</id>
    <published>2023-12-29T16:00:00.000Z</published>
    <updated>2024-01-29T12:06:39.669Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、项目配置"><a href="#一、项目配置" class="headerlink" title="一、项目配置"></a>一、项目配置</h3><h4 id="1-路由变更"><a href="#1-路由变更" class="headerlink" title="1. 路由变更"></a>1. 路由变更</h4><p>修改前端项目的路由模式为 <code>Hash</code>，文件在 <code>src/router/index.js</code>，下述是 <code>Vue3</code> 的配置:</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>createRouter<span class="token punctuation">,</span> createWebHashHistory<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">const</span> routes <span class="token operator">=</span> pathArray<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 设置模式为 Hash</span>    history<span class="token punctuation">:</span> <span class="token function">createWebHashHistory</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>BASE_URL<span class="token punctuation">)</span><span class="token punctuation">,</span>    routes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-服务配置"><a href="#2-服务配置" class="headerlink" title="2. 服务配置"></a>2. 服务配置</h4><p>修改项目根目录下的 <code>vue.config.js</code> 文件，注意将其中的 <code>192.168.0.100</code> 替换为你自己的服务器 <code>IP</code>。</p><p>其中 <code>8080</code> 是前端的访问端口，<code>9090</code> 为后端服务端口，<code>/daily-word</code> 为前端接口前缀，<code>/dailyWord</code> 为后端配置的 <code>servlet:context-path</code>。</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    open<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// frontend server host and port</span>    host<span class="token punctuation">:</span> <span class="token string">"192.168.0.100"</span><span class="token punctuation">,</span>    port<span class="token punctuation">:</span> <span class="token number">8080</span><span class="token punctuation">,</span>    https<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"/daily-word"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// backend server url</span>        target<span class="token punctuation">:</span> <span class="token string">"http://192.168.0.100:9090/"</span><span class="token punctuation">,</span>        ws<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        changOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// Rewrite path prefix to backend "servlet:context-path"</span>          <span class="token string">"/daily-word"</span><span class="token punctuation">:</span> <span class="token string">"/dailyWord"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-应用打包"><a href="#3-应用打包" class="headerlink" title="3. 应用打包"></a>3. 应用打包</h4><p>在前端工程指定 <code>build</code> 命令完成后将会在项目根目录生成 <code>dist</code> 目录，其则为打包后的文件，将其上传到服务器的你期望的目录。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> run build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="二、后端配置"><a href="#二、后端配置" class="headerlink" title="二、后端配置"></a>二、后端配置</h3><h4 id="1-跨域处理"><a href="#1-跨域处理" class="headerlink" title="1. 跨域处理"></a>1. 跨域处理</h4><p>为了部署之后前端接口请求能正常访问后端服务，后端需要设置跨域白名单。</p><p>在 <code>Spring</code> 工程中新建类并实现 <code>WebMvcConfigurer</code> 接口类定义跨域规则，这里为了方便我设置放行所有请求和地址，可根据需求进行调整。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${auth.host.cors}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String hosts<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span>CorsRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> crosHost <span class="token operator">=</span> hosts<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置允许跨域的路径</span>        registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 设置允许跨域请求的域名</span>                <span class="token punctuation">.</span><span class="token function">allowedOriginPatterns</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 是否允许cookie</span>                <span class="token punctuation">.</span><span class="token function">allowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 设置允许的请求方式</span>                <span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"DELETE"</span><span class="token punctuation">,</span> <span class="token string">"PUT"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 设置允许的header属性</span>                <span class="token punctuation">.</span><span class="token function">allowedHeaders</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 跨域允许时间</span>                <span class="token punctuation">.</span><span class="token function">maxAge</span><span class="token punctuation">(</span>TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、服务部署"><a href="#三、服务部署" class="headerlink" title="三、服务部署"></a>三、服务部署</h3><h4 id="1-Nginx代理"><a href="#1-Nginx代理" class="headerlink" title="1. Nginx代理"></a>1. Nginx代理</h4><p>上述打包完成后的文件为静态资源，因此这里选择通过 <code>Nginx</code> 实现页面的访问，具体的 <code>Nginx</code> 部署教程之前的文章已经详细介绍过，这里不再重复详细展开，链接直达：<a href="https://great-jin.github.io/linux/nginx/">Nginx教程</a>。</p><h4 id="2-请求转发"><a href="#2-请求转发" class="headerlink" title="2. 请求转发"></a>2. 请求转发</h4><p>由于 <code>Nginx</code> 静态资源不支持 <code>Post</code> 接口请求，因此需要将请求进行转发。</p><pre class="line-numbers language-conf"><code class="language-conf">location / {    #root   html;    #index  index.html index.htm;    try_files $uri $uri/ /index.html;    error_page 405 =200  $request_uri;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-完整配置"><a href="#3-完整配置" class="headerlink" title="3. 完整配置"></a>3. 完整配置</h4><p>完成的 <code>Nginx</code> 配置文件如下，其中 <code>8080</code> 为页面访问地址，需要和第一步中配置的一致，<code>root</code> 配置打包上传的 <code>dist</code> 目录路径。</p><p>注意将其中的 <code>192.168.0.100</code> 替换为你自己的服务器 <code>IP</code>。</p><pre class="line-numbers language-conf"><code class="language-conf">server {    listen       8080;    server_name  localhost;    root         /home/budai/dailyword/dist;    location / {        #root   html;        #index  index.html index.htm;        try_files $uri $uri/ /index.html;        error_page 405 =200  $request_uri;    }    location ^~ /daily-word {        proxy_pass http://192.168.0.100:9090/dailyWord;    }    location @405 {        proxy_set_header Host $host;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        # ip为后端服务地址        proxy_pass http://192.168.0.100:9090$request_uri;    }    error_page   500 502 503 504  /50x.html;    location = /50x.html {        root   html;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、项目配置&quot;&gt;&lt;a href=&quot;#一、项目配置&quot; class=&quot;headerlink&quot; title=&quot;一、项目配置&quot;&gt;&lt;/a&gt;一、项目配置&lt;/h3&gt;&lt;h4 id=&quot;1-路由变更&quot;&gt;&lt;a href=&quot;#1-路由变更&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="服务部署" scheme="https://great-jin.github.io/categories/%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2/"/>
    
    
    <category term="CentOS" scheme="https://great-jin.github.io/tags/CentOS/"/>
    
    <category term="Vue" scheme="https://great-jin.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Websocket入门教程</title>
    <link href="https://great-jin.github.io/java/spring/framework/websocket/"/>
    <id>https://great-jin.github.io/java/spring/framework/websocket/</id>
    <published>2023-12-29T16:00:00.000Z</published>
    <updated>2024-03-09T09:54:42.165Z</updated>
    
    <content type="html"><![CDATA[<p>在网络通讯领域，我们最熟悉的通讯协议即 <code>HTTP</code>，其在 <code>TCP</code> 的基础上进一步扩展使之更为的简单易用。而 WebSocket 作为一种通讯方式在某些应用场景下也是一种不错的选择。</p><p><code>WebSocket</code> 是一种在单个 <code>TCP</code> 连接上进行全双工通信的通信协议，它提供了一个持久的连接（即长链接），允许客户端和服务器之间进行实时、双向的数据传输。<code>WebSocket</code> 的出现解决了传统的 <code>HTTP</code> 协议的一些限制，特别是对于需要频繁更新的实时应用程序（如聊天应用、在线游戏等）而言，<code>WebSocket</code> 提供了更低的延迟和更高的效率。</p><p><code>Websocket</code> 一个经典应用场景即消息的主动推送，即由后端向主动推送讯息，在通知与聊天场景中应用广泛。本文即着重介绍如何在前后端分离项目中实现后端的消息主动推送。</p><h3 id="一、后端配置"><a href="#一、后端配置" class="headerlink" title="一、后端配置"></a>一、后端配置</h3><h4 id="1-依赖导入"><a href="#1-依赖导入" class="headerlink" title="1. 依赖导入"></a>1. 依赖导入</h4><p>老规矩，在后端的 Spring 项目工程中导入对应的依赖，内容如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-websocket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-配置管理"><a href="#2-配置管理" class="headerlink" title="2. 配置管理"></a>2. 配置管理</h4><p>在项目中注入 <code>WebSocket Bean</code> 对象，代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>server<span class="token punctuation">.</span>standard<span class="token punctuation">.</span>ServerEndpointExporter<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServerEndpointExporter <span class="token function">serverEndpointExporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServerEndpointExporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-服务启动"><a href="#3-服务启动" class="headerlink" title="3. 服务启动"></a>3. 服务启动</h4><p>新建 <code>WebSocketServer</code> 类用于管理请求的连接与关闭，当接收到新的请求时存入缓存容器 <code>websocketMap</code>，同时计数器 <code>onlineCount</code> 自增用于记录当前的连接数。</p><p>为了区分不同的连接这里通过请求参数的第一个值作为唯一标识符，即请求地址格式为：<code>ws://$&#123;host&#125;:$&#123;port&#125;/websocket?userId=1</code>，从而使后续能够精准的推送消息给指定连接用户。</p><p>其中 <code>@ServerEndpoint</code> 注解可以理解为 <code>HTTP</code> 接口中 <code>@RequstMapping</code> 与 <code>@RestController</code> 的复合体， <code>onMessage()</code> 方法为首次连接时返回值，用于响应以便知晓是否连接成功。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ServerEndpoint</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/websocket"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketServer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> Logger log <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>WebSocketServer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 当前在线连接数     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> AtomicInteger onlineCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 存放客户端对应的 WebSocket 对象     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> WebSocketServer<span class="token operator">></span> websocketMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 会话标识     */</span>    <span class="token keyword">private</span> String flag<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 与某个客户端的连接会话，需要通过它来给客户端发送数据     */</span>    <span class="token keyword">private</span> Session session<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 连接建立成功调用的方法     */</span>    <span class="token annotation punctuation">@OnOpen</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onOpen</span><span class="token punctuation">(</span>Session session<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 添加会话至容器</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>session <span class="token operator">=</span> session<span class="token punctuation">;</span>        String queryString <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        flag <span class="token operator">=</span> queryString<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        websocketMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 计数器自增</span>        onlineCount<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Receive new session, current connected number: "</span> <span class="token operator">+</span> <span class="token function">getOnlineCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">"You have successfully connected."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Websocket IO exception, stack tree: "</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 连接关闭调用的方法     */</span>    <span class="token annotation punctuation">@OnClose</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 从容器中删除会话</span>        websocketMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 计数器自减</span>        onlineCount<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"New session close, current connected number: "</span> <span class="token operator">+</span> <span class="token function">getOnlineCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 收到客户端消息后调用的方法     *     * @param message 客户端发送过来的消息     */</span>    <span class="token annotation punctuation">@OnMessage</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span>String message<span class="token punctuation">,</span> Session session<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Receive from client, message: {}"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 群发消息</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>WebSocketServer item <span class="token operator">:</span> websocketMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                item<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Session onMessage, stack tree: "</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@OnError</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Session session<span class="token punctuation">,</span> Throwable error<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Session onError, stack tree: "</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">getBasicRemote</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sendText</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOnlineCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> onlineCount<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-消息推送"><a href="#4-消息推送" class="headerlink" title="4. 消息推送"></a>4. 消息推送</h4><p>当连接建立之后即可向连接主动推送数据消息，这里定义了两个方法 <code>send()</code> 与 <code>batchSend()</code> 用于单点推送与消息群发，其仍定义于上述的 <code>WebSocketServer</code> 类中，限于篇幅故分点介绍。</p><p>其中单点推送方法 <code>send()</code> 第一个参数 <code>key</code> 即建立连接时传入的唯一标识符，<code>batchSend()</code> 则会推送消息至所有当前的连接的用户，注意其中输入的内容为字符串，可使用 <code>Jackson</code> 等类库序列化为 <code>Json</code> 字符串后传输。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 群发自定义消息 */</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">send</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>websocketMap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Currently didn't have valid session."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        WebSocketServer server <span class="token operator">=</span> websocketMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"The session of [{}] not existed."</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        server<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Session send() error, stack tree: "</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> success<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">batchSend</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>websocketMap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Currently didn't have valid session."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>WebSocketServer item <span class="token operator">:</span> websocketMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            item<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Session batchSend() error, stack tree: "</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> success<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、前端应用"><a href="#二、前端应用" class="headerlink" title="二、前端应用"></a>二、前端应用</h3><h4 id="1-依赖安装"><a href="#1-依赖安装" class="headerlink" title="1. 依赖安装"></a>1. 依赖安装</h4><p>在 <code>Vue</code> 前端项目中同样需要安装 <code>WebSocket</code> 依赖，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> vue-websocket<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-应用监听"><a href="#2-应用监听" class="headerlink" title="2. 应用监听"></a>2. 应用监听</h4><p>完成依赖安装后即可在项目中建立依赖，通过 <code>new WebSocket(url)</code> 即可相对较为简单。 </p><p>连接建立之后通过 <code>addEventListener</code> 回调函数监听不同的连接事件，代码如下不详细介绍。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> host <span class="token operator">=</span> <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>    <span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">9090</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token string">`ws://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>host<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/websocket?userId=1`</span></span>    <span class="token keyword">const</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加WebSocket事件监听器</span>    socket<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'WebSocket 连接已打开'</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    socket<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> data <span class="token operator">=</span> event<span class="token punctuation">.</span>data      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'接受到后端信息: '</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">'接受到后端消息: '</span> <span class="token operator">+</span> data<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    socket<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'WebSocket 连接已关闭'</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    socket<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'WebSocket 错误'</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在网络通讯领域，我们最熟悉的通讯协议即 &lt;code&gt;HTTP&lt;/code&gt;，其在 &lt;code&gt;TCP&lt;/code&gt; 的基础上进一步扩展使之更为的简单易用。而 WebSocket 作为一种通讯方式在某些应用场景下也是一种不错的选择。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WebSocke</summary>
      
    
    
    
    <category term="Spring工具" scheme="https://great-jin.github.io/categories/Spring%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch基础概念</title>
    <link href="https://great-jin.github.io/db/es/basic/"/>
    <id>https://great-jin.github.io/db/es/basic/</id>
    <published>2023-12-15T16:00:00.000Z</published>
    <updated>2024-02-29T11:31:43.619Z</updated>
    
    <content type="html"><![CDATA[<p>在日常开发中，我们使用最多的数据应该就是关系型数据库如 <code>MySQL</code>, <code>Oracle</code> 等，其特性为表结构格式统一易于上手，但有一个缺点就是面对海量数据读写性能相对较差。</p><p>非关系型数据库中较为出名的就是 <code>Redis</code>, <code>Postgre</code>, <code>Mongo</code> 等，以 <code>Redis</code> 为例，其数据存储于内存之中，读写速度相对关系型有一个质的飞跃，但同时也带来了内存的损耗。</p><p><code>ElasticSearch</code> 是一款分布式存储数据库，在海量数据查询以及模糊查询时有着不错的性能，解决了 <code>MySQL</code> 等数据库性能瓶颈与 <code>Redis</code> 针对大数据量耗费资源的缺点。</p><h3 id="一、概念介绍"><a href="#一、概念介绍" class="headerlink" title="一、概念介绍"></a>一、概念介绍</h3><h4 id="1-索引"><a href="#1-索引" class="headerlink" title="1. 索引"></a>1. 索引</h4><p>在 <code>Elasticsearch</code> 中并没有库表的概念，取而代之的为索引 <code>(Indices)</code>，可以理解为传统数据库的 <code>Database</code>。</p><h4 id="2-类型"><a href="#2-类型" class="headerlink" title="2. 类型"></a>2. 类型</h4><p>在 <code>Elasticsearch 6.x</code> 中 <code>Types</code> 概念类似于数据库中的一张表，但随着版本更新，在最新的 <code>7.x</code> 版本中 <code>Types</code> 被逐渐废除，因此一个索引 <code>Indices</code> 下只允许存在一个 <code>Types</code>。</p><h4 id="3-文档"><a href="#3-文档" class="headerlink" title="3. 文档"></a>3. 文档</h4><p>在 <code>Elasticsearch</code> 中每条记录是以文档 <code>(Documents)</code> 的形式存在，相当于 <code>MySQL</code> 等数据表中的一条记录，每条文档都会自动为其分配一个唯一标识。</p><h4 id="4-字段"><a href="#4-字段" class="headerlink" title="4. 字段"></a>4. 字段</h4><p><code>Fields</code> 即为每条文档中的属性的类型，常用类型包含如下几类：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">类型</td>        <th style="text-align: center;">描述</td>    </tr>    <tr>        <td style="text-align: center;">text</td>        <td style="text-align: center;">当一个字段需要用于全文搜索(会被分词)则应该使用该类型。</td>    </tr>    <tr>        <td style="text-align: center;">keyword</td>        <td style="text-align: center;">当一个字段需要按照精确值进行过滤、排序、聚合等操作时则应该使用该类型。</td>    </tr>    <tr>        <td style="text-align: center;">date</td>        <td style="text-align: center;">时间类型，精度不包含时分秒。</td>    </tr>    <tr>        <td style="text-align: center;">boolean</td>        <td style="text-align: center;">布尔类型，即 true 与 false。</td>    </tr>    <tr>        <td style="text-align: center;">range</td>        <td style="text-align: center;">区间类型，取值范围如下：integer_range, long_range, float_range, double_range, date_range, ip_range </td>    </tr></table><h3 id="二、数据索引"><a href="#二、数据索引" class="headerlink" title="二、数据索引"></a>二、数据索引</h3><h4 id="1-索引创建"><a href="#1-索引创建" class="headerlink" title="1. 索引创建"></a>1. 索引创建</h4><p>通过 <code>PUT</code> 请求创建新索引，请求格式如下，其中 <code>settings</code> 参数非必填。</p><p><code>settings</code> 中 <code>number_of_shards</code> 用于执行数据的分片大小，类似于关系型的中的分区操作，以提高存储查询效率；<code>number_of_replicas</code> 用于指定副本大小，即集群状态多端副本保证数据的安全性以防止数据丢失或损坏。</p><pre class="line-numbers language-js"><code class="language-js">PUT http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index_name<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token string">"settings"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"number_of_shards"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        <span class="token string">"number_of_replicas"</span><span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-字段映射"><a href="#2-字段映射" class="headerlink" title="2. 字段映射"></a>2. 字段映射</h4><p>同理在创建索引时可通过 <code>mapping</code> 参数指定字段映射。</p><p>若不指定将会根据文档数据字段类型自动匹配，映射内容中的 <code>type</code> 参数上一点中的字段表格。</p><pre class="line-numbers language-js"><code class="language-js">PUT http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index_name<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token string">"settings"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"number_of_shards"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        <span class="token string">"number_of_replicas"</span><span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"mapping"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"_doc"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"properties"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"keyword"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"text"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-索引别名"><a href="#3-索引别名" class="headerlink" title="3. 索引别名"></a>3. 索引别名</h4><p><code>Elasticsearch</code> 索引别名是一个指向一个或多个索引的稳定引用名称。通过使用别名，可以将查询和索引维护从实际索引名称中分离出来，这为在切换索引版本、重建索引等操作时提供了更大的灵活性。</p><blockquote><p>使用索引别名的优点如下：</p></blockquote><ul><li><strong>日志切割</strong>：对于日志类型的索引，可以使用别名轻松地进行日志切割。</li><li><strong>切换版本</strong>：可以通过更改别名指向的实际索引，而不必更改应用程序中的查询代码。</li><li><strong>滚动升级</strong>：在进行索引版本升级时，可以创建新版本的索引，然后通过别名将查询指向新索引，实现滚动升级。</li></ul><h4 id="4-索引删除"><a href="#4-索引删除" class="headerlink" title="4. 索引删除"></a>4. 索引删除</h4><p>通过 DELETE 请求删除索引，删除索引会同步删除其对应下的数据，请求格式如下：</p><pre class="line-numbers language-js"><code class="language-js">DELETE http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index_name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="三、数据查询"><a href="#三、数据查询" class="headerlink" title="三、数据查询"></a>三、数据查询</h3><h4 id="1-查询得分"><a href="#1-查询得分" class="headerlink" title="1. 查询得分"></a>1. 查询得分</h4><p>在 <code>Elasticsearch</code> 中，每个文档的匹配程度可以通过一个称为 “分数”（<code>score</code>）的值来表示。分数反映了文档与查询条件的匹配程度，越匹配的文档得分越高。</p><p>当执行查询时，<code>Elasticsearch</code> 计算每个文档的得分，然后按照得分排序返回结果。这个得分是由查询条件中的每个子句（例如，匹配关键词的 <code>must</code> 子句）的相关性计算得出的。</p><p>对于 <code>bool</code> 查询中的 <code>must</code> 子句，其中的每个条件都会影响文档的得分。如果一个文档满足多个 <code>must</code> 子句的条件，那么它的得分会相应增加。这样，得分可以用来衡量文档与查询条件的匹配程度。</p><p>而对于 <code>filter</code> 子句，其中的条件也用于筛选文档，但它们不会影响文档的得分。<code>filter</code> 子句主要用于对文档进行精确匹配和过滤，而不涉及相关性计算。由于不计算得分，<code>filter</code> 子句的查询更轻量，对于一些不需要计算相关性的场景，这可以提高性能。</p><p>因此，当使用 <code>filter</code> 子句时，查询的主要目的是过滤文档，而不是影响查询结果的排序和相关性。这对于一些特定的过滤条件（如范围查询、精确匹配等）非常有用，因为它们可以更高效地执行，而无需计算和排序相关性得分。</p><h4 id="2-全量查询"><a href="#2-全量查询" class="headerlink" title="2. 全量查询"></a>2. 全量查询</h4><p>通过 <code>Get</code> 查询目标数据，效果等价于 <code>select * from &lt;table&gt;</code>。</p><p>默认查询仅返回十条数据，若查看多数据需分页进行，同时通过 <code>pretty=true</code> 可格式化返回的结果数据。</p><pre class="line-numbers language-js"><code class="language-js">GET http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index_name<span class="token operator">></span><span class="token operator">/</span>_searchGET http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index_name<span class="token operator">></span><span class="token operator">/</span>_search<span class="token operator">?</span>pretty<span class="token operator">=</span><span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-分页查询"><a href="#3-分页查询" class="headerlink" title="3. 分页查询"></a>3. 分页查询</h4><p>分页查询同理，在请求体内通过 <code>from</code> 与 <code>size</code> 指定分页参数，作用类似 <code>MySQL</code> 中的 <code>limit</code> 和 <code>offset</code>。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// paging query data</span>GET http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index_name<span class="token operator">></span><span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"match_all"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"from"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token string">"size"</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、条件查询"><a href="#四、条件查询" class="headerlink" title="四、条件查询"></a>四、条件查询</h3><h4 id="1-精准查询"><a href="#1-精准查询" class="headerlink" title="1. 精准查询"></a>1. 精准查询</h4><p>精准查询即与常见关系型中 <code>where</code> 条件中的 <code>=</code> 作用等价。</p><p>下述示例的作用效果即等价于 <code>select * from &lt;table&gt; where &lt;column_name&gt; = &lt;column_name&gt;</code>。</p><pre class="line-numbers language-js"><code class="language-js">GET http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index_name<span class="token operator">></span><span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"bool"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"must"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token string">"match_phrase"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"&lt;column_name>"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>              <span class="token string">"query"</span><span class="token punctuation">:</span> <span class="token string">"&lt;column_value>"</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-区间查询"><a href="#2-区间查询" class="headerlink" title="2. 区间查询"></a>2. 区间查询</h4><p>区间查询即与常见关系型中 <code>where</code> 条件中的 <code>in</code> 作用等价。</p><p>下述示例的作用效果即等价于 <code>select * from &lt;table&gt; where &lt;column_name&gt; in (1, 2, 3)</code>。</p><pre class="line-numbers language-js"><code class="language-js">GET http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index_name<span class="token operator">></span><span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"bool"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"must"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token string">"terms"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"&lt;column_name>"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>              <span class="token number">1</span><span class="token punctuation">,</span>              <span class="token number">2</span><span class="token punctuation">,</span>              <span class="token number">3</span>            <span class="token punctuation">]</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-范围查询"><a href="#3-范围查询" class="headerlink" title="3. 范围查询"></a>3. 范围查询</h4><p>范围查询即与常见关系型中 <code>where</code> 条件中的 <code>&gt;, &gt;=, &lt;, &lt;=</code> 作用等价。</p><p>其中不同的符号对应参考下表:</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">范围符</td>        <th style="text-align: center;">ES 关键字</td>    </tr>    <tr>        <td style="text-align: center;">></td>        <td style="text-align: center;">gt</td>    </tr>    <tr>        <td style="text-align: center;">>=</td>        <td style="text-align: center;">from</td>    </tr>    <tr>        <td style="text-align: center;"><</td>        <td style="text-align: center;">lt</td>    </tr>    <tr>        <td style="text-align: center;"><=</td>        <td style="text-align: center;">to</td>    </tr></table><p>下述示例的作用效果即等价于 <code>select * from &lt;table&gt; where &lt;column_name&gt; &gt;= 1</code>。</p><pre class="line-numbers language-js"><code class="language-js">GET http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index_name<span class="token operator">></span><span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"bool"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"must"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token string">"range"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"&lt;column_name>"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>              <span class="token string">"from"</span><span class="token punctuation">:</span> <span class="token string">"1"</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在日常开发中，我们使用最多的数据应该就是关系型数据库如 &lt;code&gt;MySQL&lt;/code&gt;, &lt;code&gt;Oracle&lt;/code&gt; 等，其特性为表结构格式统一易于上手，但有一个缺点就是面对海量数据读写性能相对较差。&lt;/p&gt;
&lt;p&gt;非关系型数据库中较为出名的就是 &lt;cod</summary>
      
    
    
    
    <category term="大数据" scheme="https://great-jin.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Elasticsearch" scheme="https://great-jin.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot IOC详解</title>
    <link href="https://great-jin.github.io/java/spring/native/ioc/"/>
    <id>https://great-jin.github.io/java/spring/native/ioc/</id>
    <published>2023-11-17T16:00:00.000Z</published>
    <updated>2024-03-19T11:43:21.909Z</updated>
    
    <content type="html"><![CDATA[<p><code>Spring IOC</code>（Inversion of Control，控制反转）容器是 <code>Spring</code> 框架的核心组件之一，用于管理和组织应用程序中的对象（<code>bean</code>），它负责创建、配置和管理这些对象，以实现对象之间的解耦和依赖注入。<br><img src="/album/loading.gif" data-original="/album/article/java/spring/ioc.png"></p><h3 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h3><h4 id="1-主要功能"><a href="#1-主要功能" class="headerlink" title="1. 主要功能"></a>1. 主要功能</h4><p><code>Spring IOC</code> 容器的主要功能包括下述几点：</p><ul><li><strong>实例化对象</strong>： <code>IOC</code> 容器负责实例化应用程序中定义的 <code>bean</code> 对象。它根据配置文件或注解信息创建对象的实例。</li><li><strong>管理生命周期</strong>： <code>IOC</code> 容器负责管理 <code>bean</code> 对象的生命周期，包括对象的创建、初始化和销毁。容器可以根据配置指定对象的初始化方法和销毁方法，确保对象在正确的时机被创建和销毁。</li><li><strong>依赖注入</strong>： <code>IOC</code> 容器实现了依赖注入（<code>DI</code>）机制，它通过自动将对象的依赖注入到相应的位置，消除了手动编写代码进行依赖关系的管理。</li><li><strong>解耦和松耦合</strong>： <code>IOC</code> 容器通过控制对象的创建和依赖注入，实现了对象之间的解耦。它使得对象的配置和使用可以独立于彼此进行修改，提高了代码的灵活性和可维护性。</li></ul><h4 id="2-生命周期"><a href="#2-生命周期" class="headerlink" title="2. 生命周期"></a>2. 生命周期</h4><p><code>Spring</code> 中的 <code>Bean</code> 生命周期包括以下五个阶段：</p><ul><li><p><strong>实例化(Instantiation)：</strong> 这是 <code>Bean</code> 对象被创建的阶段。在这个阶段 <code>Spring</code> 使用 <code>Bean</code> 的构造方法来实例化对象，可以通过构造函数、静态工厂方法或者工厂 <code>Bean</code> 来创建实例。</p></li><li><p><strong>属性赋值(Population)：</strong> 在这个阶段 <code>Spring</code> 将配置文件中或者注解中定义的属性值注入到 <code>Bean</code> 中。这包括基本类型、引用类型、集合等等，这一过程可以通过 <code>XML</code> 配置、<code>Java</code> 注解、<code>JavaConfig</code> 等方式进行。</p></li><li><p><strong>初始化(Initialization)：</strong> 在这个阶段 <code>Spring</code> 会调用 <code>Bean</code> 的初始化方法。这个初始化方法可以是通过配置文件中的 <code>init-method</code> 属性指定，也可以是实现了 <code>InitializingBean</code> 接口的 <code>afterPropertiesSet</code> 方法。</p></li><li><p><strong>使用(In Use)：</strong> 此时 <code>Bean</code> 对象已经被完全初始化，可以被应用程序使用了。</p></li><li><p><strong>销毁(Destruction)：</strong> 这是 <code>Bean</code> 生命周期的最后阶段。在这个阶段 <code>Spring</code> 会调用 <code>Bean</code> 的销毁方法，该方法可以是通过配置文件中的 <code>destroy-method</code> 属性指定，也可以是实现了 <code>DisposableBean</code> 接口的 <code>destroy</code> 方法。</p></li></ul><h3 id="二、装配获取"><a href="#二、装配获取" class="headerlink" title="二、装配获取"></a>二、装配获取</h3><p><code>Spring</code> 提供了多个 <code>IOC</code> 容器实现，最常用的是基于 <code>XML</code> 配置的 <code>ApplicationContext</code>，此外还提供了 <code>Java</code> 配置类（如 <code>@Configuration、@Bean</code> 等）方式进行配置。</p><h4 id="1-装配方式"><a href="#1-装配方式" class="headerlink" title="1. 装配方式"></a>1. 装配方式</h4><blockquote><p><strong>(Ⅰ) XML方式装配</strong></p></blockquote><p>首先先回顾一下传统 <code>xml</code> 配置文件装配 <code>bean</code> 对象，在工程 <code>resources</code> 下新建 <code>spring-context.xml</code> 文件，其对应的文件内容如下:</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">...</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testBean<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xyz.ibudai.bean.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Alex<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成后即可通过加载配置文件获取应用上下文 <code>ApplicationContext</code> 从而读取 <code>Bean</code> 实例。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"spring-context.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取 Bean</span>        User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"testBean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// User: {id=123, name=Alex}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>(Ⅱ) 注解方式装配</strong></p></blockquote><p>在 <code>Spring Boot</code> 可配合 <code>@Configuration</code> 与 <code>@Bean</code> 注解可达到同样效果。</p><h5 id="1-Configuration"><a href="#1-Configuration" class="headerlink" title="(1) @Configuration"></a>(1) @Configuration</h5><ul><li>作用于类上， 用于配置 <code>Spring</code> 容器应用上下文。</li><li>作用效果等价于 <code>xml</code> 配置文件中的 <code>beans</code> 标签。</li></ul><h5 id="2-Bean"><a href="#2-Bean" class="headerlink" title="(2) @Bean"></a>(2) @Bean</h5><ul><li>作用于方法上，等价于 <code>xml</code> 配置文件中 <code>bean</code> 标签。</li><li>通过 <code>@Bean(name)</code> 指定 <code>bean</code> 名称，未指定时为方法名（首字母自动小写）。</li></ul><h5 id="3-Scope"><a href="#3-Scope" class="headerlink" title="(3) @Scope"></a>(3) @Scope</h5><ul><li>通过 <code>@Scope</code> 定义 <code>bean</code> 作用域。</li><li>作用于方法上，与 <code>@Bean</code> 搭配使用。</li></ul><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">作用域</td>        <th style="text-align: center;">描述</td>    </tr>    <tr>        <td style="text-align: center;">singleton</td>        <td style="text-align: center;">默认值，在整个 IoC 容器中只存在一个共享的 bean 实例。</td>    </tr>    <tr>        <td style="text-align: center;">prototype</td>        <td style="text-align: center;">每次通过容器的 getBean() 方法获取 bean 时都会创建一个新的实例。</td>    </tr>    <tr>        <td style="text-align: center;">request</td>        <td style="text-align: center;">在一次 HTTP 请求中，该 bean 实例将保持活动状态。</td>    </tr>    <tr>        <td style="text-align: center;">session</td>        <td style="text-align: center;">在一个 HTTP Session 中，该 bean 实例将保持活动状态。</td>    </tr>    <tr>        <td style="text-align: center;">application</td>        <td style="text-align: center;">在 ServletContext 范围内，该 bean 实例将保持活动状态。</td>    </tr></table><p>下述为通过注解配置类的方式装配 <code>bean</code> 对象，最终实现效果等价于上述 <code>xml</code> 方式。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 开启配置</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"prototype"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">testBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Alex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>TestConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取 Bean</span>        User user <span class="token operator">=</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"testBean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// User: {id=123, name=Alex}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-装配类型"><a href="#2-装配类型" class="headerlink" title="2. 装配类型"></a>2. 装配类型</h4><p><code>Bean</code> 的装配一共存在两种类型，分别为 <code>ByName</code> 与 <code>ByType</code>。</p><blockquote><p><strong>(Ⅰ) ByName（按名称注入）</strong></p></blockquote><ul><li>根据依赖的名称来查找与之匹配的 <code>bean</code> 对象进行注入。</li><li><code>ByName</code> 要求依赖的名称在容器中是唯一的或者能够通过自动装配策略 <code>(@Qualifier)</code> 解决。</li><li>通过名字查找与属性完全一致的 <code>bean</code> ，并将其与属性自动装配。 </li><li>若容器中找不到与依赖名称匹配的 <code>bean</code> 对象则会抛出异常；如果存在多个与依赖名称匹配的 <code>bean</code> 对象，会根据自动装配策略进行选择。</li></ul><blockquote><p><strong>(Ⅱ) ByType（按类型注入）</strong></p></blockquote><ul><li>根据依赖的类型 <code>(class)</code> 来查找与之匹配的 <code>bean</code> 对象进行注入。</li><li><code>ByType</code> 要求依赖的类型在容器中是唯一的或者明确指定了所需的 <code>bean</code> 对象。</li><li>通过类型查找与属性完全一致的 <code>bean</code> ，并将其与属性自动装配。 </li><li>如果存在多个该类型 <code>bean</code> 则会抛出异常，并指出不能使用 <code>byType</code> 方式进行自动装配；如果没有匹配的 <code>bean</code> 对象，会将依赖设置为 <code>null</code>。</li></ul><h4 id="3-注入方式"><a href="#3-注入方式" class="headerlink" title="3. 注入方式"></a>3. 注入方式</h4><p><code>Spring</code> 在装配 <code>bean</code> 的时提供了两种方式，但需要注意无论通过哪种方式其对应的对象需要在 <code>IOC</code> 容器中存在，否则需要加上属性  <code>required=false</code> 表示忽略当前要注入的  <code>bean</code> ，否则程序将无法正常运行。</p><h5 id="1-Resource"><a href="#1-Resource" class="headerlink" title="(1) @Resource"></a>(1) @Resource</h5><p><code>@Resource</code> 是由 <code>J2EE</code> 本身提供的，注解默认通过 <code>byName</code> 方式注入。</p><p>当存在多个类型不同但名称相同的 <code>bean</code> 对象时此方式注入将会抛出异常。</p><h5 id="2-Autowired"><a href="#2-Autowired" class="headerlink" title="(2) @Autowired"></a>(2) @Autowired</h5><p><code>@Autowired</code> 是由 <code>Spring</code> 提供的，注解默认通过 <code>byType</code> 方式注入。</p><p><code>@Autowired</code> 默认读取与声明实例变量同名的 <code>bean</code> 对象，当工程中同时包含多个实例时必须指明实例名否则将会异常报错，可以通过 <code>@Qualifier</code> 指定实例名。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建两个同类型实例</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"userService1"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl1</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"userService2"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl2</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService1<span class="token punctuation">;</span>            <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"userService2"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 声明非法，多个实例时必须指明 bean 名称</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> UserService userService<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-Bean获取"><a href="#4-Bean获取" class="headerlink" title="4. Bean获取"></a>4. Bean获取</h4><p>在上面介绍了 <code>bean</code> 的注入和装配， <code>Spring</code> 中同时也提供通过 <code>bean</code> 名称直接获取 <code>bean</code> 对象，通常搭配反射等特性使用，下面介绍两种的不同的 <code>bean</code> 对象获取方式。</p><blockquote><p><strong>(Ⅰ) 接口方式获取 Bean 实例</strong></p></blockquote><p>通过实现 <code>ApplicationContextAware</code> 接口从而获取应用上下文对象 <code>ApplicationContext</code> ，即可利用其实现 <code>bean</code> 对象获取。</p><p>下面是一个 <code>bean</code> 对象查询示例，注意类需要标注 <code>@Component</code> 注解。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanService</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ApplicationContext applicationContext<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取上下文对象     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span>ApplicationContext applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext <span class="token operator">=</span> applicationContext<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过名称获取 bean 对象     */</span>    <span class="token keyword">public</span> Object <span class="token function">getBean</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token keyword">throws</span> BeansException <span class="token punctuation">{</span>        <span class="token keyword">return</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>(Ⅱ) 注解方式获取 Bean 实例</strong></p></blockquote><p><code>Spring</code> 中同样提供了注解的方式获取应用上下文对象 <code>ApplicationContext</code>，无需上述那么复杂直接使用 <code>@Autowire</code> 注入即可，更推荐使用此类方式。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 通过装配获取上下文对象     */</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ApplicationContext applicationContext<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/**     * 通过名称获取 bean 对象     */</span>    <span class="token keyword">public</span> User <span class="token function">getBean</span><span class="token punctuation">(</span>String bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>User<span class="token punctuation">)</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、Bean导入"><a href="#三、Bean导入" class="headerlink" title="三、Bean导入"></a>三、Bean导入</h3><h4 id="1-默认导入"><a href="#1-默认导入" class="headerlink" title="1. 默认导入"></a>1. 默认导入</h4><p>在 <code>Spring</code> 中除了 <code>@Bean</code> 注解还提供 <code>@Import</code> 注入 <code>bean</code> 对象，其使用方式与前者类似，默认注入的 <code>bean</code> 对象名为类的完整限定民。</p><p>如下示例中即注入了一个 <code>User</code> 对象，若 <code>User</code> 类的完整包路径为：<code>xyz.ibudai</code>，则对应的 <code>bean</code> 名称为：<code>xyz.ibudai.User</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ImportConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成上述操作后当启动项目将注册对应 <code>Bean</code> 对象，我们即可利用 <code>ApplicationContext</code> 查询获取该 <code>Bean</code> 实例。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> ApplicationContext applicationContext<span class="token punctuation">;</span>    <span class="token keyword">public</span> Object <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"xyz.ibudai.User"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-手动导入"><a href="#2-手动导入" class="headerlink" title="2. 手动导入"></a>2. 手动导入</h4><p>默认 <code>@Import</code> 注入 <code>bean</code> 对象属性值都为空且对象名为类的完整限定名，若想要配置更复杂信息则需要配合 <code>ImportBeanDefinitionRegistrar</code> 使用。</p><p>在 <code>Spring Boot</code> 工程启动时则会执行 <code>ImportBeanDefinitionRegistrar</code> 的 <code>registerBeanDefinitions()</code> 方法，顾名思义即执行 <code>bean</code> 对象的注入。其中方法的第一个参数 <code>clsMetaData</code> 为 <code>@Import</code> 注解所作用的类的元信息，如上述示例中及为类 <code>ImportConfig</code> 的元数据对象，而第二参数为注册器。</p><p>下述示例中通过实现 <code>ImportBeanDefinitionRegistrar</code> 接口手动向 <code>IOC</code> 容器中注入了一个 <code>User</code> 的 <code>bean</code> 对象。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRegisterFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * @param clsMetaData annotation metadata of the importing class     * @param registry    current bean definition registry     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>AnnotationMetadata clsMetaData<span class="token punctuation">,</span> BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span>User<span class="token operator">></span> aClass <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span>aClass<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// If not contain then register it</span>            BeanDefinition beanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>aClass<span class="token punctuation">)</span><span class="token punctuation">;</span>            registry<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span>aClass<span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、容器缓存"><a href="#四、容器缓存" class="headerlink" title="四、容器缓存"></a>四、容器缓存</h3><h4 id="1-二级缓存"><a href="#1-二级缓存" class="headerlink" title="1. 二级缓存"></a>1. 二级缓存</h4><p>在 <code>Spring</code> 中为了解决循环依赖的问题引入了二级缓存从而解决该问题。</p><p>首先我们先看一下循环依赖带来的问题，假设存在两个 <code>Bean</code> 实例，其中 <code>BeanA</code> 中依赖了 <code>BeanB</code>，而 <code>BeanB</code> 又依赖了 <code>BeanA</code>，代码描述如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanA</span> <span class="token punctuation">{</span>    BeanB beanB<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanB</span> <span class="token punctuation">{</span>    BeanA beanA<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二者对象的依赖关系图示如下：<br><img src="/album/loading.gif" data-original="/album/article/java/spring/bean/1.png"></p><p>在使用 <code>IOC</code> 容器注入 <code>BeanA</code> 实例时，当为其注入属性时由于其又依赖于 <code>BeanB</code>，因此需要先创建出 <code>BeanB</code> 实例，而 <code>BeanB</code> 又依赖于 <code>BeanA</code> 二者则陷入了死循环，这也是循环依赖所带来的问题。<br><img src="/album/loading.gif" data-original="/album/article/java/spring/bean/2.png"></p><p>那二级缓存又是如何解决如何这个问题的呢？让我们一步一步来拆解。</p><p>循环依赖问题在于属性注入阶段对象属性与自身互为成员变量，那么只需每次在在创建 <code>bean</code> 实例后将其存入一份至缓存中（<code>Spring</code> 中通过 <code>Map</code> 对象缓存），后续在执行属性注入时若需要依赖了直接读取缓存即可，避免了相互依赖导致的死循环。<br><img src="/album/loading.gif" data-original="/album/article/java/spring/bean/3.png"></p><h4 id="2-三级缓存"><a href="#2-三级缓存" class="headerlink" title="2. 三级缓存"></a>2. 三级缓存</h4><p>既然二级缓存已经解决了循环依赖的问题那为什么还需要引入三级缓存？三级缓存的引入主要是为了解决切面等动态代理生成的 <code>bean</code> 对象。</p><p>先看下图中两个流程，第一个为普通的 <code>bean</code> 实例创建流程，第二为包含动态代理等操作时的流程。<br><img src="/album/loading.gif" data-original="/album/article/java/spring/bean/4.png"></p><p>在二级缓存中讲过了缓存的存入时间在实例创建之后放入，而当包含动态代理时存入缓存的实例与最终存入 <code>IOC</code> 容器的对象显然不是同一个，这就造成了一个缓存不一致的原因，因此在此需要引入三级缓存从而解决缓存对象不一致。<br><img src="/album/loading.gif" data-original="/album/article/java/spring/bean/5.png"></p><h3 id="五、Bean定义"><a href="#五、Bean定义" class="headerlink" title="五、Bean定义"></a>五、Bean定义</h3><p>在 <code>IOC</code> 容器中 <code>Bean</code> 对象存在两个十分重要的定义，即 <code>BeanDefinitionHolder</code> 和 <code>BeanDefinition</code>，二者都是关于 <code>Bean</code> 元信息的类，它们的主要作用是描述和持有 <code>Bean</code> 的定义信息。</p><h4 id="1-对象定义"><a href="#1-对象定义" class="headerlink" title="1. 对象定义"></a>1. 对象定义</h4><p>在 <code>Spring</code> 中每个注册到 <code>IOC</code> 容器中的 <code>Bean</code> 都有一个关联的 <code>BeanDefinition</code> 对象，该对象描述了如何创建和配置该 <code>Bean</code>。其定义了 <code>Bean</code> 的属性、依赖关系、作用域（<code>scope</code>）、初始化方法、销毁方法等配置信息。</p><p><code>BeanDefinition</code> 中包含的主要方法即描述参考下标：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">getBeanClassName()</td>        <td style="text-align: center;">获取 Bean 的类名。</td>    </tr>    <tr>        <td style="text-align: center;">getScope()</td>        <td style="text-align: center;">获取 Bean 的作用域。</td>    </tr>    <tr>        <td style="text-align: center;">isSingleton()</td>        <td style="text-align: center;">判断是否是单例。</td>    </tr>    <tr>        <td style="text-align: center;">isPrototype()</td>        <td style="text-align: center;">判断是否是原型。</td>    </tr>    <tr>        <td style="text-align: center;">getConstructorArgumentValues()</td>        <td style="text-align: center;">获取构造函数参数值。</td>    </tr>    <tr>        <td style="text-align: center;">getPropertyValues()</td>        <td style="text-align: center;">获取属性值。</td>    </tr>    <tr>        <td style="text-align: center;">getInitMethodName()</td>        <td style="text-align: center;">获取初始化方法名。</td>    </tr>    <tr>        <td style="text-align: center;">getDestroyMethodName()</td>        <td style="text-align: center;">获取销毁方法名。</td>    </tr></table><h4 id="2-定义包装"><a href="#2-定义包装" class="headerlink" title="2. 定义包装"></a>2. 定义包装</h4><p><code>BeanDefinitionHolder</code> 是对 <code>BeanDefinition</code> 的包装，同时持有一个 <code>String</code> 类型的 <code>beanName</code>，通常在 <code>Spring</code> 容器中扫描、注册或管理 <code>Bean</code> 时使用。</p><p>在 <code>Spring</code> 中，通常在注册 <code>Bean</code> 定义时会使用 <code>BeanDefinitionHolder</code>，将 <code>Bean</code> 的定义信息和名称一并封装，然后一起注册到容器中，从而更方便管理和操作 <code>Bean</code>。</p><h3 id="六、动态导入"><a href="#六、动态导入" class="headerlink" title="六、动态导入"></a>六、动态导入</h3><p>基于 <code>@Import</code> 的功能特性，即可实现动态的 <code>Bean</code> 注册，扫描指定包路径下的类并注册到 <code>Spring</code> 容器。</p><h4 id="1-注解定义"><a href="#1-注解定义" class="headerlink" title="1. 注解定义"></a>1. 注解定义</h4><p>定义 <code>@BeanScan</code> 注解用于标注目标类包路径，以及 <code>@BeanItem</code> 注解标注需要被扫描的类。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>BeanRegisterFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">BeanScan</span> <span class="token punctuation">{</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">basePackages</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">BeanItem</span> <span class="token punctuation">{</span>    String <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-工程配置"><a href="#2-工程配置" class="headerlink" title="2. 工程配置"></a>2. 工程配置</h4><p>在启动类上通过 <code>@BeanScan</code> 注解指定需要被扫描的包路径。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@BeanScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token string">"xyz.ibudai.ioc"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanRegisterApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>BeanRegisterApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-注册实现"><a href="#3-注册实现" class="headerlink" title="3. 注册实现"></a>3. 注册实现</h4><p>创建 <code>BeanRegisterFactory</code> 用于执行具体的扫描注册逻辑，启动项目时获取 <code>@BeanScan</code> 配置的包路径。</p><p>获取目标包后通过 <code>BeanScannerFactory</code> 实现 <code>bean</code> 的扫描生成 <code>BeanDefinitionHolder</code> 对象，并通过 <code>registry</code> 实现自定义对象的注册。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanRegisterFactory</span> <span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span>AnnotationMetadata clsMetaData<span class="token punctuation">,</span> BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Get annotation attributes</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> attrMaps <span class="token operator">=</span> clsMetaData<span class="token punctuation">.</span><span class="token function">getAnnotationAttributes</span><span class="token punctuation">(</span>BeanScan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Convert attribute type to "AnnotationAttributes"</span>        AnnotationAttributes attributes <span class="token operator">=</span> AnnotationAttributes<span class="token punctuation">.</span><span class="token function">fromMap</span><span class="token punctuation">(</span>attrMaps<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>attributes <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">">>>>>>>>>>>>>>>>>>>>>>> Annotation attribute is null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Register annotation and Scan the package to find</span>        <span class="token comment" spellcheck="true">// the class that use the registered annotation.</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> basePackages <span class="token operator">=</span> attributes<span class="token punctuation">.</span><span class="token function">getStringArray</span><span class="token punctuation">(</span><span class="token string">"basePackages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BeanScannerFactory scannerFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanScannerFactory</span><span class="token punctuation">(</span>registry<span class="token punctuation">)</span><span class="token punctuation">;</span>        scannerFactory<span class="token punctuation">.</span><span class="token function">registerTypeFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        scannerFactory<span class="token punctuation">.</span><span class="token function">doScan</span><span class="token punctuation">(</span>basePackages<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-Bean扫描"><a href="#4-Bean扫描" class="headerlink" title="4. Bean扫描"></a>4. Bean扫描</h4><p>在 <code>Spring</code> 中通过 <code>ClassPathBeanDefinitionScanner</code> 实现 <code>bean</code> 的扫描注册，即通过扫描目标包将 <code>bean</code> 注册为上述的 <code>BeanDefinitionHolder</code> 对象从而实现管理。</p><p><code>ClassPathBeanDefinitionScanner</code> 中涉及了两个相对重要的方法，其描述如下：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">registerTypeFilter()</td>        <td style="text-align: center;">添加扫描过滤器，如只扫描某一部分特定类。</td>    </tr>    <tr>        <td style="text-align: center;">doScan()</td>        <td style="text-align: center;">根据过滤器扫描指定包下的类。</td>    </tr></table><p>如下示例中即定义了只扫描类上包含 <code>BeanItem</code> 注解的类，其中 <code>proxy()</code> 方法为通过 <code>FactoryBean</code> 自定义自定义构建 <code>BeanDefinitionHolder</code> 对象，并通过 <code>registerTypeFilter()</code>方法筛选被 <code>@BeanItem</code> 注解标识的类。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanScannerFactory</span> <span class="token keyword">extends</span> <span class="token class-name">ClassPathBeanDefinitionScanner</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">BeanScannerFactory</span><span class="token punctuation">(</span>BeanDefinitionRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Register the annotation that want scan     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerTypeFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Only scan the class the Annotation of "BeanItem"</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">addIncludeFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AnnotationTypeFilter</span><span class="token punctuation">(</span>BeanItem<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Scan the specify package path to find the bean.     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> <span class="token function">doScan</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> basePackages<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> beanDefinitionHolders <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">doScan</span><span class="token punctuation">(</span>basePackages<span class="token punctuation">)</span><span class="token punctuation">;</span>        beanDefinitionHolders <span class="token operator">=</span> <span class="token function">proxy</span><span class="token punctuation">(</span>beanDefinitionHolders<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> beanDefinitionHolders<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Convert bean set to proxy bean set.     */</span>    <span class="token keyword">protected</span> Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> <span class="token function">proxy</span><span class="token punctuation">(</span>Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> beanDefinitionHolders<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>BeanDefinitionHolder<span class="token operator">></span> holderSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>beanDefinitionHolders<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>BeanDefinitionHolder holder <span class="token operator">:</span> beanDefinitionHolders<span class="token punctuation">)</span> <span class="token punctuation">{</span>            GenericBeanDefinition beanDefinition <span class="token operator">=</span> <span class="token punctuation">(</span>GenericBeanDefinition<span class="token punctuation">)</span> holder<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String beanName <span class="token operator">=</span> holder<span class="token punctuation">.</span><span class="token function">getBeanName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String beanClassName <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>beanClassName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> aClass<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                aClass <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>beanClassName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Transfer the parameter.</span>            <span class="token comment" spellcheck="true">// getConstructorArgumentValues(): 获取 beanDefinition 中构造函数参数值的方法</span>            <span class="token comment" spellcheck="true">// addGenericArgumentValue: 用于向 Bean 的构造函数参数中添加通用（泛型）参数值的方法。</span>            beanDefinition<span class="token punctuation">.</span><span class="token function">getConstructorArgumentValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addGenericArgumentValue</span><span class="token punctuation">(</span>aClass<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Set "BeanFactory" to use "dynamic proxy" instance the bean object</span>            beanDefinition<span class="token punctuation">.</span><span class="token function">setBeanClass</span><span class="token punctuation">(</span>MyFactoryBean<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            holderSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BeanDefinitionHolder</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> holderSet<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-Bean工厂"><a href="#5-Bean工厂" class="headerlink" title="5. Bean工厂"></a>5. Bean工厂</h4><p>通过扫描注册到 <code>IOC</code> 容器的仅为 <code>BeanDefinitionHolder</code>，即 <code>bean</code> 对象的相关元信息，只有在使用到 <code>bean</code> 对象的时候才会进行实例化。</p><p>而通过工厂类 <code>FactoryBean</code> 即可实现动态的对象生成等操作，如实现 <code>AOP</code> 切面与 <code>RPC</code> 远程服务调用等等。</p><p>如下示例中的 <code>MyFactoryBean</code> 即通过动态代理 <code>BeanInvokeHandler</code> 方式生成代理对象从而实现方法的调用信息打印实现切面的效果。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFactoryBean</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">FactoryBean</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> aClass<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MyFactoryBean</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> aClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>aClass <span class="token operator">=</span> aClass<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> T <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> aInterface <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> constructor <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object instance <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BeanInvokeHandler handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanInvokeHandler</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>aClass<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>aInterface<span class="token punctuation">}</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">getObjectType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> aClass<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * 动态代理处理器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanInvokeHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Object object<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">BeanInvokeHandler</span><span class="token punctuation">(</span>Object object<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>object <span class="token operator">=</span> object<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Invoke method of [{}]."</span><span class="token punctuation">,</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>object<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        logger<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Invoke handle finish, [{}]."</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>参考链接</strong></p><ol><li><a href="https://juejin.cn/post/7218080360403615804">浅谈 Spring 如何解决 Bean 的循环依赖问题</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;Spring IOC&lt;/code&gt;（Inversion of Control，控制反转）容器是 &lt;code&gt;Spring&lt;/code&gt; 框架的核心组件之一，用于管理和组织应用程序中的对象（&lt;code&gt;bean&lt;/code&gt;），它负责创建、配置和管理这些对象，以实</summary>
      
    
    
    
    <category term="Spring框架" scheme="https://great-jin.github.io/categories/Spring%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="Spring Boot" scheme="https://great-jin.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop架构设计详解</title>
    <link href="https://great-jin.github.io/db/hadoop/basic/"/>
    <id>https://great-jin.github.io/db/hadoop/basic/</id>
    <published>2023-11-11T16:00:00.000Z</published>
    <updated>2024-02-20T12:36:29.407Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、HDFS"><a href="#一、HDFS" class="headerlink" title="一、HDFS"></a>一、HDFS</h3><h4 id="1-架构设计"><a href="#1-架构设计" class="headerlink" title="1. 架构设计"></a>1. 架构设计</h4><p><code>HDFS</code> 遵循主/从架构，由单个 <code>NameNode(NN)</code> 和多个 <code>DataNode(DN)</code> 组成：</p><ul><li><strong>NameNode</strong> : 负责执行有关 <code>文件系统命名空间</code> 的操作，例如打开，关闭、重命名文件和目录等。它同时还负责集群元数据的存储，记录着文件中各个数据块的位置信息。</li><li><strong>DataNode</strong>：负责提供来自文件系统客户端的读写请求，执行块的创建，删除等操作。</li></ul><h4 id="2-存储机制"><a href="#2-存储机制" class="headerlink" title="2. 存储机制"></a>2. 存储机制</h4><p><code>HDFS</code> 中的文件在物理上是分块存储 <code>(block)</code>，块的大小可以通过配置参数 <code>(dfs.blocksize)</code> 来规定，默认大小在 <code>hadoop2.x</code> 版本中是 <code>128M</code> ，老版本中是 <code>64M</code>；</p><p><code>HDFS</code> 文件系统会给客户端提供一个<strong>统一的抽象目录树</strong>，客户端通过路径来访问文件，形如：<code>hdfs://namenode:port/dir-a/dir-b/dir-c/file.data</code>；目录结构及文件分块信息(元数据)的管理由 <code>Namenode</code> 节点承担；</p><h4 id="3-存储结构"><a href="#3-存储结构" class="headerlink" title="3. 存储结构"></a>3. 存储结构</h4><h5 id="1-块"><a href="#1-块" class="headerlink" title="(1) 块"></a>(1) 块</h5><p>为了保证容错性，<code>HDFS</code> 提供了数据复制机制。<code>HDFS</code> 将每一个文件存储为一系列 <strong>块</strong>，每个块由多个副本来保证容错，块的大小和复制因子可以自行配置（默认情况下，块大小是 <code>128M</code>，默认复制因子是 <code>3</code>）。</p><h5 id="2-副本"><a href="#2-副本" class="headerlink" title="(2) 副本"></a>(2) 副本</h5><p>在写入程序位于 <code>datanode</code> 上时，就优先将写入文件的一个副本放置在该 <code>datanode</code> 上，否则放在随机 <code>datanode</code> 上。之后在另一个远程机架上的任意一个节点上放置另一个副本，并在该机架上的另一个节点上放置最后一个副本。此策略可以减少机架间的写入流量，从而提高写入性能。</p><h4 id="4-心跳机制"><a href="#4-心跳机制" class="headerlink" title="4. 心跳机制"></a>4. 心跳机制</h4><p>每个 <code>DataNode</code> 定期向 <code>NameNode</code> 发送心跳消息，如果超过指定时间没有收到心跳消息，则将 <code>DataNode</code> 标记为死亡。<code>NameNode</code> 不会将任何新的 <code>IO</code> 请求转发给标记为死亡的 <code>DataNode</code>，也不会再使用这些 <code>DataNode</code> 上的数据。由于数据不再可用，可能会导致某些块的复制因子小于其指定值，<code>NameNode</code> 会跟踪这些块，并在必要的时候进行重新复制。</p><h4 id="5-数据验证"><a href="#5-数据验证" class="headerlink" title="5. 数据验证"></a>5. 数据验证</h4><p>由于存储设备故障等原因，存储在 <code>DataNode</code> 上的数据块也会发生损坏。为了避免读取到已经损坏的数据而导致错误，<code>HDFS</code> 提供了数据完整性校验机制来保证数据的完整性，具体操作如下：</p><p>当客户端创建 <code>HDFS</code> 文件时，它会计算文件的每个块的 <code>校验和</code>，并将 <code>校验和</code> 存储在同一 <code>HDFS</code> 命名空间下的单独的隐藏文件中。当客户端检索文件内容时，它会验证从每个 <code>DataNode</code> 接收的数据是否与存储在关联校验和文件中的 <code>校验和</code> 匹配。如果匹配失败，则证明数据已经损坏，此时客户端会选择从其他 <code>DataNode</code> 获取该块的其他可用副本。</p><h3 id="二、MapReduce"><a href="#二、MapReduce" class="headerlink" title="二、MapReduce"></a>二、MapReduce</h3><h4 id="1-基本流程"><a href="#1-基本流程" class="headerlink" title="1. 基本流程"></a>1. 基本流程</h4><p><code>MapReduce</code> 处理的流程如下：</p><ul><li><strong>Input</strong> : 从 <code>HDFS</code> 上读取文本文件；</li><li><strong>Splitting</strong> : 将文件按照行进行拆分，此时得到的 <code>K1</code> 行数，<code>V1</code> 表示对应行的文本内容；</li><li><strong>Mapping</strong> : 自定义实现，对 <code>splitting</code> 拆分后的执行计算操作，即输入是一对 <code>&lt;key , value&gt;</code> 值，<code>经过Map</code> 计算后输出一对 <code>&lt;key , value&gt;</code> 值；</li><li><strong>Shuffling</strong>：由于 <code>Mapping</code> 操作可能是在不同的机器上并行处理的，所以需要通过 <code>shuffling</code> 将相同 <code>key</code> 值的数据分发到同一个节点上去合并，这样才能统计出最终的结果；</li><li><strong>Reducing</strong> : 对 <code>shuffling</code> 的结果进行进一步处理最终输出结果。</li></ul><p><code>MapReduce</code> 编程模型中 <code>splitting</code> 和 <code>shuffing</code> 操作都是由框架实现的，需要我们自己编程实现的只有 <code>mapping</code> 和 <code>reducing</code>，这也就是 <code>MapReduce</code> 这个称呼的来源。</p><h4 id="2-基础概念"><a href="#2-基础概念" class="headerlink" title="2. 基础概念"></a>2. 基础概念</h4><h5 id="1-Combiner"><a href="#1-Combiner" class="headerlink" title="(1) Combiner"></a>(1) Combiner</h5><p><code>Combiner</code> 是 <code>Map</code> 运算后的可选操作，它实际上是一个本地化的 <code>Reduce</code> 操作，它主要是在 <code>Map</code> 计算出中间文件后做一个简单的合并重复 <code>key</code> 值的操作。</p><p>例词频统计经过 <code>Map</code> 运算后结果如下:</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Map-1</span><span class="token punctuation">{</span>aa <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>bb <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>aa <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Map-2</span><span class="token punctuation">{</span>cc <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>dd <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>dd <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Combiner-1</span><span class="token punctuation">{</span>aa <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>bb <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// Combiner-2</span><span class="token punctuation">{</span>cc <span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>dd <span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-Partitioner"><a href="#2-Partitioner" class="headerlink" title="(2) Partitioner"></a>(2) Partitioner</h5><p><code>Partitioner</code> 可以理解成分类器，将 <code>Map</code> 的输出按照 <code>Key</code> 值的不同分别分给对应的 <code>Reducer</code>，支持自定义实现。通过 <code>Partitioner</code> 即可便捷实现将结果按照自定义的规则存储分类存储至不同的文件中。</p><h4 id="3-Key-Process"><a href="#3-Key-Process" class="headerlink" title="3. Key Process"></a>3. Key Process</h4><p>我们以 <code>Hadoop1</code> 为例，<code>MapReduce</code> 运行过程涉及以下几类关键进程：</p><ul><li><p><strong>大数据应用进程</strong>：启动用户 <code>MapReduce</code> 程序的主入口，主要指定 <code>Map</code> 和 <code>Reduce</code> 类、输入输出文件路径等，并提交作业给 <code>Hadoop</code> 集群。</p></li><li><p><strong>JobTracker 进程</strong>：根据要处理的输入数据量启动相应数量的 <code>map</code> 和 <code>reduce</code> 进程任务，并管理整个作业生命周期的任务调度和监控。<code>JobTracker</code> 进程在整个 <code>Hadoop</code> 集群全局唯一。</p></li><li><p><strong>TaskTracker进程</strong>：负责启动和管理 <code>map</code> 和 <code>reduce</code> 进程。因为需要每个数据块都有对应的 <code>map</code> 函数，<code>TaskTracker</code> 进程通常和 <code>HDFS</code> 的 <code>DataNode</code> 进程启动在同一个服务器，也就是说，<code>Hadoop</code> 集群中绝大多数服务器同时运行 <code>DataNode</code> 进程和 <code>TaskTacker</code> 进程。</p></li></ul><h4 id="4-Running-Process"><a href="#4-Running-Process" class="headerlink" title="4. Running Process"></a>4. Running Process</h4><p>具体作业启动和计算过程如下：</p><ul><li>应用进程将用户作业 <code>jar</code> 包存储在 <code>HDFS</code> 中，将来这些 <code>jar</code> 包会分发给 <code>Hadoop</code> 集群中的服务器执行 <code>MapReduce</code> 计算。</li><li>应用程序提交 <code>job</code> 作业给 <code>JobTracker</code>。</li><li><code>JobTacker</code> 根据作业调度策略创建 <code>JobInProcess</code> 树，每个作业都会有一个自己的 <code>JobInProcess</code> 树。</li><li><code>JobInProcess</code> 根据输入数据分片数目（通常情况就是数据块的数目）和设置的 <code>reduce</code> 数目创建相应数量的 <code>TaskInProcess</code>。</li><li><code>TaskTracker</code> 进程和 <code>JobTracker</code> 进程进行定时通信。</li><li>如果 <code>TaskTracker</code> 有空闲的计算资源（空闲CPU核），<code>JobTracker</code> 就会给他分配任务。分配任务的时候会根据 <code>TaskTracker</code> 的服务器名字匹配在同一台机器上的数据块计算任务给它，使启动的计算任务正好处理本机上的数据。</li><li><code>TaskRunner</code> 收到任务后根据任务类型（<code>map</code> 还是 <code>reduce</code>），任务参数（作业 <code>jar</code> 包路径，输入数据文件路径，要处理的数据在文件中的起始位置和偏移量，数据块多个备份的DataNode主机名等）启动相应的 <code>map</code> 或 <code>reduce</code> 进程</li><li><code>map</code> 或 <code>reduce</code> 程序启动后，检查本地是否有要执行任务的 <code>jar</code> 包文件，如果没有就去 <code>HDFS</code> 下载，然后加载 <code>map</code> 或 <code>reduce</code> 代码开始执行。</li><li>如果是 <code>map</code> 进程，从 <code>HDFS</code> 读取数据（通常要读取的数据块正好存储在本机），如果是 <code>reduce</code> 进程，将结果数据写出到 HDFS。</li></ul><h3 id="三、YARN"><a href="#三、YARN" class="headerlink" title="三、YARN"></a>三、YARN</h3><p><code>Apache YARN</code>(Yet Another Resource Negotiator) 是 <code>hadoop 2.0</code> 引入的集群资源管理系统，用户可以将各种服务框架部署在 <code>YARN</code> 上，由 <code>YARN</code> 进行统一地管理和资源分配。</p><h4 id="1-ResourceManager"><a href="#1-ResourceManager" class="headerlink" title="1. ResourceManager"></a>1. ResourceManager</h4><p><code>ResourceManager</code> 通常在独立的机器上以后台进程的形式运行，它是整个集群资源的主要协调者和管理者。<code>ResourceManager</code> 负责给用户提交的所有应用程序分配资源，它根据应用程序优先级、队列容量、<code>ACLs</code>、数据位置等信息，做出决策，然后以共享的、安全的、多租户的方式制定分配策略，调度集群资源。</p><h4 id="2-NodeManager"><a href="#2-NodeManager" class="headerlink" title="2. NodeManager"></a>2. NodeManager</h4><p><code>NodeManager</code> 是 <code>YARN</code> 集群中的每个具体节点的管理者。主要负责该节点内所有容器的生命周期的管理，监视资源和跟踪节点健康。具体如下：</p><ul><li>启动时向 <code>ResourceManager</code> 注册并定时发送心跳消息，等待 <code>ResourceManager</code> 的指令；</li><li>维护 <code>Container</code> 的生命周期，监控 <code>Container</code> 的资源使用情况；<br>管理任务运行时的相关依赖，根据 <code>ApplicationMaster</code> 的需要，在启动 <code>Container</code> 之前将需要的程序及其依赖拷贝到本地。</li></ul><h4 id="3-ApplicationMaster"><a href="#3-ApplicationMaster" class="headerlink" title="3. ApplicationMaster"></a>3. ApplicationMaster</h4><p>在用户提交一个应用程序时，<code>YARN</code> 会启动一个轻量级的进程 <code>ApplicationMaster</code>。<code>ApplicationMaster</code> 负责协调来自 <code>ResourceManager</code> 的资源，并通过 <code>NodeManager</code> 监视容器内资源的使用情况，同时还负责任务的监控与容错。具体如下：</p><ul><li>根据应用的运行状态来决定动态计算资源需求；</li><li>向 <code>ResourceManager</code> 申请资源，监控申请的资源的使用情况；</li><li>跟踪任务状态和进度，报告资源的使用情况和应用的进度信息；</li><li>负责任务的容错。</li></ul><h4 id="4-Container"><a href="#4-Container" class="headerlink" title="4. Container"></a>4. Container</h4><p><code>Container</code> 是 <code>YARN</code> 中的资源抽象，它封装了某个节点上的多维度资源，如内存、<code>CPU</code>、磁盘、网络等。当 <code>AM</code> 向 <code>RM</code> <code>申请资源时，RM</code> 为 <code>AM</code> 返回的资源是用 <code>Container</code> 表示的。</p><p><code>YARN</code> 会为每个任务分配一个 <code>Container</code>，该任务只能使用该 <code>Container</code> 中描述的资源。<code>ApplicationMaster</code> 可在 <code>Container</code> 内运行任何类型的任务。例如，<code>MapReduce ApplicationMaster</code> 请求一个容器来启动 <code>map</code> 或 <code>reduce</code> 任务，而 <code>Giraph ApplicationMaster</code> 请求一个容器来运行 <code>Giraph</code> 任务。</p><hr><p><strong>参考链接</strong>：</p><ol><li><a href="https://github.com/wangzhiwubigdata/God-Of-BigData/blob/master/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/Hadoop-HDFS.md">Hadoop分布式文件系统——HDFS</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、HDFS&quot;&gt;&lt;a href=&quot;#一、HDFS&quot; class=&quot;headerlink&quot; title=&quot;一、HDFS&quot;&gt;&lt;/a&gt;一、HDFS&lt;/h3&gt;&lt;h4 id=&quot;1-架构设计&quot;&gt;&lt;a href=&quot;#1-架构设计&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="大数据" scheme="https://great-jin.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Hadoop" scheme="https://great-jin.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>常见轮询算法实现</title>
    <link href="https://great-jin.github.io/algo/round/"/>
    <id>https://great-jin.github.io/algo/round/</id>
    <published>2023-11-10T16:00:00.000Z</published>
    <updated>2023-12-08T11:34:01.633Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、基础轮询"><a href="#一、基础轮询" class="headerlink" title="一、基础轮询"></a>一、基础轮询</h3><h4 id="1-算法实现"><a href="#1-算法实现" class="headerlink" title="1. 算法实现"></a>1. 算法实现</h4><p>基础轮询是轮询算法中最常见的方式之一，即每个元素被选中的几率都是等价的。</p><p>基础轮询算法的实现也相对简单，通过类静态变量 <code>OFFSET</code> 与元素集合长度进行取余，每次完成后 <code>OFFSET</code> 都将自增，取余得到的结果的即为数组访问下标。利用 <code>static</code> 保证静态变量的值为全局共享，同时 <code>synchronized</code> 保证了多线程的并发安全问题。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BasicRound</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> OFFSET <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> nodeList<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fill</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        nodeList <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> String <span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> nodeList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> OFFSET<span class="token operator">++</span> <span class="token operator">%</span> size<span class="token punctuation">;</span>        OFFSET <span class="token operator">=</span> OFFSET <span class="token operator">&lt;</span> size <span class="token operator">?</span> OFFSET <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nodeList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-示例测试"><a href="#2-示例测试" class="headerlink" title="2. 示例测试"></a>2. 示例测试</h4><p>通过一个示例验证上述的算法效果，定义了四个节点的元素集合使用上述算法轮询 <code>1000</code> 次，可以看到最终统计输出的结果每个节点元素都被访问了 <code>250</code> 次，即实现了 <code>1:1</code> 的等价轮询。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">basicRound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> nodeList <span class="token operator">=</span> List<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>        <span class="token string">"127.0.0.1:9091"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.2:9092"</span><span class="token punctuation">,</span>         <span class="token string">"127.0.0.3:9093"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.3:9094"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Fill data</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BasicRound<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>nodeList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Simulation</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>BasicRound<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Long<span class="token operator">></span> count <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>p <span class="token operator">-</span><span class="token operator">></span> p<span class="token punctuation">,</span> Collectors<span class="token punctuation">.</span><span class="token function">counting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// {</span>    <span class="token comment" spellcheck="true">//      127.0.0.1:9094=250, </span>    <span class="token comment" spellcheck="true">//      127.0.0.1:9093=250, </span>    <span class="token comment" spellcheck="true">//      127.0.0.1:9092=250, </span>    <span class="token comment" spellcheck="true">//      127.0.0.1:9091=250</span>    <span class="token comment" spellcheck="true">// }</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Basic Round: "</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、随机轮询"><a href="#二、随机轮询" class="headerlink" title="二、随机轮询"></a>二、随机轮询</h3><h4 id="1-算法实现-1"><a href="#1-算法实现-1" class="headerlink" title="1. 算法实现"></a>1. 算法实现</h4><p>随机轮询算法相较基础轮询更为简单，即每次生成一个不大于集合大小的随机数，将这个随机数作为元素集合的访问下标，从而实现随机访问的目的。</p><p>随机算法相较于基础轮询可能会造成节点饥饿的问题，即随机的因素导致元素集合中的某个元素一直都未能被访问。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandomRound</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> nodeList<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fill</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>        nodeList <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> String <span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>nodeList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nodeList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-示例测试-1"><a href="#2-示例测试-1" class="headerlink" title="2. 示例测试"></a>2. 示例测试</h4><p>同样以四个节点的集合作为目标进行轮询，通过 <code>1000</code> 次轮询后可以看到随机轮询的各个元素访问频次都各不相同，但总体上而言也趋于 <code>1:1</code> 的关系。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">randomRound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> nodeList <span class="token operator">=</span> List<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>        <span class="token string">"127.0.0.1:9091"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.2:9092"</span><span class="token punctuation">,</span>         <span class="token string">"127.0.0.3:9093"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.3:9094"</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Fill data</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BasicRound<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>nodeList<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Simulation</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>RandomRound<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Long<span class="token operator">></span> count <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>p <span class="token operator">-</span><span class="token operator">></span> p<span class="token punctuation">,</span> Collectors<span class="token punctuation">.</span><span class="token function">counting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// {</span>    <span class="token comment" spellcheck="true">//      127.0.0.1:9094=247, </span>    <span class="token comment" spellcheck="true">//      127.0.0.1:9093=258, </span>    <span class="token comment" spellcheck="true">//      127.0.0.1:9092=235, </span>    <span class="token comment" spellcheck="true">//      127.0.0.1:9091=260</span>    <span class="token comment" spellcheck="true">// }</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Random Round: "</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、权重轮询"><a href="#三、权重轮询" class="headerlink" title="三、权重轮询"></a>三、权重轮询</h3><h4 id="1-算法实现-2"><a href="#1-算法实现-2" class="headerlink" title="1. 算法实现"></a>1. 算法实现</h4><p>带权轮询是轮询算法中较为常见的方式，即为每个元素添加对应权重，权重越高访问到的几率也相对越高。</p><p>根据实现效果先对权重轮询的功能进行拆分，针对目标集合中权重大小相等的元素而言其实现思路与基础轮询中一致，即访问频率应处于 <code>1:1</code> 的状态，因此第一步要做的就是针对权重大小对目标集合进行分组。</p><p>完成分组后则要考虑权重的分配问题，这里通过权重值占比方式解决，即通过分组后的小集合总权重与大集合的权重占比确定轮询频次。如下述四个节点经过分组后得到两个小集合：</p><pre class="line-numbers language-bash"><code class="language-bash">node1: 1         分组后        list1: <span class="token punctuation">{</span>node1: 1, node2: 1<span class="token punctuation">}</span>node2: 1        <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token operator">></span>      node3: 2                   node4: 2                       list2: <span class="token punctuation">{</span>node3: 2, node4: 2<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>分组后的两个集合 <code>list1</code> 与 <code>list2</code> 权重比分别为 <code>1:2</code>，因此在访问分组集合时应每访问两次 <code>list2</code> 后进行一次 <code>list1</code> 集合的访问，而针对集合内部的元素则按照基础轮询的实现方法进行。</p><p>将上述的逻辑思路转化为代码即下述所示：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WeightRound</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> nodeWeightMap<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> batch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> weightSum<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>String<span class="token operator">>></span> revertMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> orderKeys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> weightOffsetMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">fill</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        nodeWeightMap <span class="token operator">=</span> map<span class="token punctuation">;</span>        weightSum <span class="token operator">=</span> nodeWeightMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>Integer<span class="token operator">:</span><span class="token operator">:</span>sum<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">revert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 根据权重分组并排序</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">revert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String key <span class="token operator">:</span> nodeWeightMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token punctuation">;</span>            Integer val <span class="token operator">=</span> nodeWeightMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>revertMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                list <span class="token operator">=</span> revertMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            revertMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        orderKeys<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>revertMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        orderKeys<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>Comparator<span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> String <span class="token function">roundWight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Integer weight <span class="token operator">:</span> orderKeys<span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> revertMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>weight<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> fullCount <span class="token operator">=</span> weight <span class="token operator">*</span> size<span class="token punctuation">;</span>            <span class="token keyword">int</span> offset <span class="token operator">=</span> weightOffsetMap<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>weight<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>offset <span class="token operator">>=</span> fullCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>batch <span class="token operator">>=</span> weightSum<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    batch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    weightOffsetMap<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> offset<span class="token operator">++</span> <span class="token operator">%</span> size<span class="token punctuation">;</span>            weightOffsetMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>weight<span class="token punctuation">,</span> offset<span class="token punctuation">)</span><span class="token punctuation">;</span>            batch<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"Node list empty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-示例测试-2"><a href="#2-示例测试-2" class="headerlink" title="2. 示例测试"></a>2. 示例测试</h4><p>同样这里以四个元素的集合为例，通过上述带权轮询 <code>1000</code> 次，可以看到最终输出的访问频次正好与节点权重相一致。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">weightRound</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> nodeMap <span class="token operator">=</span> Map<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>        <span class="token string">"127.0.0.1:9091"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"127.0.0.2:9092"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token string">"127.0.0.3:9093"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token string">"127.0.0.3:9094"</span><span class="token punctuation">,</span> <span class="token number">1</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Fill data</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BasicRound<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>nodeMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Simulation</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>WeightRound<span class="token punctuation">.</span><span class="token function">roundWight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Long<span class="token operator">></span> count <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">groupingBy</span><span class="token punctuation">(</span>p <span class="token operator">-</span><span class="token operator">></span> p<span class="token punctuation">,</span> Collectors<span class="token punctuation">.</span><span class="token function">counting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// {</span>    <span class="token comment" spellcheck="true">//      127.0.0.1:9094=167, </span>    <span class="token comment" spellcheck="true">//      127.0.0.1:9093=334, </span>    <span class="token comment" spellcheck="true">//      127.0.0.1:9092=333, </span>    <span class="token comment" spellcheck="true">//      127.0.0.1:9091=166</span>    <span class="token comment" spellcheck="true">// }</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Weight Round: "</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、基础轮询&quot;&gt;&lt;a href=&quot;#一、基础轮询&quot; class=&quot;headerlink&quot; title=&quot;一、基础轮询&quot;&gt;&lt;/a&gt;一、基础轮询&lt;/h3&gt;&lt;h4 id=&quot;1-算法实现&quot;&gt;&lt;a href=&quot;#1-算法实现&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="算法" scheme="https://great-jin.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://great-jin.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Spring Retry实现优雅的重试</title>
    <link href="https://great-jin.github.io/java/spring/tool/retry/"/>
    <id>https://great-jin.github.io/java/spring/tool/retry/</id>
    <published>2023-10-28T16:00:00.000Z</published>
    <updated>2023-12-08T11:34:01.656Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h4><p>在业务常见开发中经常我们会涉及到失败重试的逻辑，如当发送通知失败后再次尝试。</p><p>针对此类场景最简单粗暴的方式即 <code>CV</code> 大法，但显然这种方式不够优雅，为此 <code>Spring Boot</code> 中提供了 <code>Retry</code> 从而实现优雅的异常失败重试。</p><h4 id="2-依赖导入"><a href="#2-依赖导入" class="headerlink" title="2. 依赖导入"></a>2. 依赖导入</h4><p>在开始前在 <code>Spring Boot</code> 工程中引入相应的 <code>Retry</code> 依赖。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.retry<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-retry<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-异常处理"><a href="#3-异常处理" class="headerlink" title="3. 异常处理"></a>3. 异常处理</h4><p><code>Spring Retry</code> 的使用也及其简单，通过 <code>@Retryable</code> 注解配置，其基本配置参考下表。</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">参数</td>        <th style="text-align: center;">描述</td>    </tr>    <tr>        <td style="text-align: center;">value</td>        <td style="text-align: center;">配置何种情况重试。</td>    </tr>    <tr>        <td style="text-align: center;">include</td>        <td style="text-align: center;">配置触发重试情况的异常类型。</td>    </tr>    <tr>        <td style="text-align: center;">exclude</td>        <td style="text-align: center;">配置不触发重试情况的异常类型。</td>    </tr>    <tr>        <td style="text-align: center;">maxAttempts</td>        <td style="text-align: center;">通过配置尝试次数，默认为 3。</td>    </tr>    <tr>        <td style="text-align: center;">maxAttemptsExpression</td>        <td style="text-align: center;">通过表达式配置尝试次数，默认为 3。</td>    </tr>    <tr>        <td style="text-align: center;">backoff</td>        <td style="text-align: center;">通过表达式配置间隔时间。</td>    </tr>    <tr>        <td style="text-align: center;">recover</td>        <td style="text-align: center;">指定重试后仍失败触发的方法。</td>    </tr></table><p>如下述示例代码中则设置当 <code>call()</code> 方法抛出 <code>RuntimeException</code> 异常时重试两次，每次重试间隔 <code>500</code> 毫秒。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RetryService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Retryable</span><span class="token punctuation">(</span>            value <span class="token operator">=</span> RuntimeException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 设置尝试次数，默认为 3</span>            maxAttempts <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// maxAttemptsExpression = "${retry.maxAttempts}",</span>            <span class="token comment" spellcheck="true">// 设置每次尝试间隔时间，默认 1 秒，此处设为 500 毫秒</span>            backoff <span class="token operator">=</span> <span class="token annotation punctuation">@Backoff</span><span class="token punctuation">(</span>delay <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 通过表达式配置间隔时间</span>            <span class="token comment" spellcheck="true">// backoff = @Backoff(delayExpression = "${retry.maxDelay}")</span>    <span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> failed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================ >>> retry."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-恢复事件"><a href="#4-恢复事件" class="headerlink" title="4. 恢复事件"></a>4. 恢复事件</h4><p>重试的恢复事件由 <code>@Recover</code> 注解控制，即当 <code>@Retryable</code> 方法达到重试次数仍失败时触发。</p><p>需要注意的是 <code>@Recover</code> 注解的标注的方法第一个参数必须与 <code>@Retryable</code> 中的 <code>value</code> 类型一致，剩余参数则必须与 <code>@Retryable</code> 修饰的方法入参一致。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RetryService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * "@Retryable" 重试指定次数后若仍失败则触发 "@Recover"     * &lt;p>     * 第一个方法参数为 "@Retryable" 中监听的异常类型     * 第二个方法参数为 "@Retryable" 方法中剩余的入参     */</span>    <span class="token annotation punctuation">@Recover</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recover</span><span class="token punctuation">(</span>RuntimeException e<span class="token punctuation">,</span> <span class="token keyword">boolean</span> failed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"================ >>> recover, params: "</span> <span class="token operator">+</span> failed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建测试类 <code>RetryController</code> 调用接口后即可看到控制台分别打印了两句 <code>&gt;&gt;&gt; retry</code> 与一句 <code>&gt;&gt;&gt; recover</code> 日志信息，说明重试机制生效了。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/retry"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RetryController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RetryService retryService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"demo1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> failed<span class="token punctuation">)</span> <span class="token punctuation">{</span>        retryService<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>failed<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-配置管理"><a href="#5-配置管理" class="headerlink" title="5. 配置管理"></a>5. 配置管理</h4><p>除了在方法上通过 <code>@Retryable</code> 注解显式设置尝试策略，也可通过全局的配置修改默认的尝试次数与间隔时间等信息。</p><p>新建配置类 <code>AppConfig</code>，具体的配置内容参考下述示例，此处的配置将全局生效，当然仍可在方法处通过 <code>@Retryable</code> 注解覆盖配置。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EnableRetry</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RetryTemplate <span class="token function">retryTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        RetryTemplate retryTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RetryTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Set retry policy</span>        SimpleRetryPolicy retryPolicy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleRetryPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        retryPolicy<span class="token punctuation">.</span><span class="token function">setMaxAttempts</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        retryTemplate<span class="token punctuation">.</span><span class="token function">setRetryPolicy</span><span class="token punctuation">(</span>retryPolicy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Set interval policy</span>        FixedBackOffPolicy backOffPolicy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FixedBackOffPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        backOffPolicy<span class="token punctuation">.</span><span class="token function">setBackOffPeriod</span><span class="token punctuation">(</span>2000l<span class="token punctuation">)</span><span class="token punctuation">;</span>        retryTemplate<span class="token punctuation">.</span><span class="token function">setBackOffPolicy</span><span class="token punctuation">(</span>backOffPolicy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> retryTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-基本介绍&quot;&gt;&lt;a href=&quot;#1-基本介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 基本介绍&quot;&gt;&lt;/a&gt;1. 基本介绍&lt;/h4&gt;&lt;p&gt;在业务常见开发中经常我们会涉及到失败重试的逻辑，如当发送通知失败后再次尝试。&lt;/p&gt;
&lt;p&gt;针对此类场景</summary>
      
    
    
    
    <category term="Spring工具" scheme="https://great-jin.github.io/categories/Spring%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Spring Boot" scheme="https://great-jin.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Java运行时内存监控</title>
    <link href="https://great-jin.github.io/java/advance/memory/"/>
    <id>https://great-jin.github.io/java/advance/memory/</id>
    <published>2023-09-15T16:00:00.000Z</published>
    <updated>2023-12-08T11:34:01.648Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、对象内存"><a href="#一、对象内存" class="headerlink" title="一、对象内存"></a>一、对象内存</h3><h4 id="1-依赖导入"><a href="#1-依赖导入" class="headerlink" title="1. 依赖导入"></a>1. 依赖导入</h4><p>想要衡量一个 <code>Java</code> 对象在内存中具体的占用情况，默认 <code>JDK</code> 中并没有提供直观的查询方式，而 <code>JOL</code> 中则提供了一系列接口供于查询。</p><p>在使用之前需要在项目的 <code>Maven</code> 中引入下述依赖。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.openjdk.jol<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jol-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-结构信息"><a href="#2-结构信息" class="headerlink" title="2. 结构信息"></a>2. 结构信息</h4><p>通过 <code>ClassLayout.parseClass()</code> 可打印输出 <code>Java</code> 对象的基本结构等详情。</p><p>如下述即打印 <code>HashMap</code> 对象的结构与内存占用信息。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">objDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    String printable <span class="token operator">=</span> ClassLayout<span class="token punctuation">.</span><span class="token function">parseClass</span><span class="token punctuation">(</span>HashMap<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>printable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行示例程序可以看到输出的信息中包含的对象头与对象成员数据类型等信息。</p><pre class="line-numbers language-txt"><code class="language-txt">java.util.HashMap object internals:OFF  SZ                       TYPE DESCRIPTION               VALUE  0   8                            (object header: mark)     N/A  8   4                            (object header: class)    N/A 12   4              java.util.Set AbstractMap.keySet        N/A 16   4       java.util.Collection AbstractMap.values        N/A 20   4                        int HashMap.size              N/A 24   4                        int HashMap.modCount          N/A 28   4                        int HashMap.threshold         N/A 32   4                      float HashMap.loadFactor        N/A 36   4   java.util.HashMap.Node[] HashMap.table             N/A 40   4              java.util.Set HashMap.entrySet          N/A 44   4                            (object alignment gap)    Instance size: 48 bytesSpace losses: 0 bytes internal + 4 bytes external = 4 bytes total<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-内存占用"><a href="#3-内存占用" class="headerlink" title="3. 内存占用"></a>3. 内存占用</h4><p>通过 <code>GraphLayout.parseInstance()</code> 即可获取一个对象的实际内存占用空间，其常见的方法参考下表。</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">startAddress()</td>        <td style="text-align: center;">输出对象的的内存起始地址。</td>    </tr>    <tr>        <td style="text-align: center;">endAddress()</td>        <td style="text-align: center;">输出对象的的内存终止地址。</td>    </tr>    <tr>        <td style="text-align: center;">totalCount()</td>        <td style="text-align: center;">输出对象的大小信息。</td>    </tr>    <tr>        <td style="text-align: center;">toPrintable()</td>        <td style="text-align: center;">输出对象元素的详细内存使用情况。</td>    </tr></table><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jolDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> dataMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dataMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"key-"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token string">"value-"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">long</span> startAddress <span class="token operator">=</span> GraphLayout<span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>dataMap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Start address: "</span> <span class="token operator">+</span> startAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> endAddress <span class="token operator">=</span> GraphLayout<span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>dataMap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"End address: "</span> <span class="token operator">+</span> endAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> totalCount <span class="token operator">=</span> GraphLayout<span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>dataMap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">totalCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Total count: "</span> <span class="token operator">+</span> totalCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        String printable <span class="token operator">=</span> GraphLayout<span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>dataMap<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Printable: "</span> <span class="token operator">+</span> printable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、运行内存"><a href="#二、运行内存" class="headerlink" title="二、运行内存"></a>二、运行内存</h3><h4 id="1-服务信息"><a href="#1-服务信息" class="headerlink" title="1. 服务信息"></a>1. 服务信息</h4><p>在 <code>java.lang</code> 包下提供了 <code>Runtime</code> 类可用于在程序运行期间获取服务运行载体信息，通俗的讲即获取服务部署的服务器信息与当前应用的 <code>JVM</code> 信息。</p><p>如下示例即通过 <code>availableProcessors()</code> 获取当前服务部署的服务器载体核心数，根据核心数的大小通过我们即可合理的设置线程等并发数量。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processorDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> processors <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Processors = "</span> <span class="token operator">+</span> processors<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Runtime"><a href="#2-Runtime" class="headerlink" title="2. Runtime"></a>2. Runtime</h4><p>除了获取服务器核心数之外还可以获取当前应用的 <code>JVM</code> 内存使用信息，具体方法参考下表。</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">freeMemory()</td>        <td style="text-align: center;">JVM 空闲内存区域，即未分配的内存空间。</td>    </tr>    <tr>        <td style="text-align: center;">maxMemory()</td>        <td style="text-align: center;">JVM 可以使用的最大内存大小。</td>    </tr>    <tr>        <td style="text-align: center;">totalMemory()</td>        <td style="text-align: center;">当前已经占用的内存总量，包括了用于程序数据、堆、方法区等各种内存区域。</td>    </tr></table><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runtimeDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">long</span> heapSize <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Heap size = "</span> <span class="token operator">+</span> heapSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> heapMaxSize <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">maxMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Heap max size = "</span> <span class="token operator">+</span> heapMaxSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> heapFreeSize <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">freeMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Heap free size = "</span> <span class="token operator">+</span> heapFreeSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、直接内存"><a href="#三、直接内存" class="headerlink" title="三、直接内存"></a>三、直接内存</h3><h4 id="1-内存信息"><a href="#1-内存信息" class="headerlink" title="1. 内存信息"></a>1. 内存信息</h4><p>通过 <code>sun.misc.SharedSecrets</code> 类即可快速的获取当前应用已经申请的直接内存。</p><p>需要注意在 <code>JDK 11</code> 及之后的版本需要使用 <code>jdk.internal.access.SharedSecrets</code> 实现。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>SharedSecrets<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UsagePrinter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printDirectMemoryUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// JDK 8:  "sun.misc.SharedSecrets"</span>        <span class="token comment" spellcheck="true">// JDK 11: "jdk.internal.access.SharedSecrets"</span>        <span class="token keyword">long</span> memoryUsed <span class="token operator">=</span> SharedSecrets<span class="token punctuation">.</span><span class="token function">getJavaNioAccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDirectBufferPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMemoryUsed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        memoryUsed <span class="token operator">=</span> memoryUsed <span class="token operator">/</span> <span class="token number">1024</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Direct memory = "</span> <span class="token operator">+</span> memoryUsed <span class="token operator">+</span> <span class="token string">" KB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>JDK 9</code> 之后新增了模块特性，在 <code>JDK 11</code> 以及更新的版本中运行上述程序需添加下述参数。 </p><pre class="line-numbers language-conf"><code class="language-conf"># 1. Compile options--add-exports java.base/jdk.internal.misc=ALL-UNNAMED--add-exports java.base/jdk.internal.access=ALL-UNNAMED# 2. VM options--add-opens java.base/jdk.internal.misc=ALL-UNNAMED--add-opens java.base/jdk.internal.access=ALL-UNNAMED<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/album/loading.gif" data-original="/album/article/java/jvm/21.png"><br><img src="/album/loading.gif" data-original="/album/article/java/jvm/22.png"></p><h4 id="2-Cleaner"><a href="#2-Cleaner" class="headerlink" title="2. Cleaner"></a>2. Cleaner</h4><p>直接内存并没有提供显示的销毁方法，因此最常见的方式即通过反射方式进行，在之前 <code>NIO</code> 文章中的已详细介绍，这里不再具体描述，往期直达：<a href="https://great-jin.github.io/java/basis/nio">Java NIO介绍</a>。<br><img src="/album/loading.gif" data-original="/album/article/java/io/2.png"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">freeDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    ByteBuffer buffer <span class="token operator">=</span> ByteBuffer<span class="token punctuation">.</span><span class="token function">allocateDirect</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    UsagePrinter<span class="token punctuation">.</span><span class="token function">printDirectMemoryUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">isDirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// The "DirectBuffer" is provided method "cleaner()" to return a cleaner</span>        String directBufferCls <span class="token operator">=</span> <span class="token string">"sun.nio.ch.DirectBuffer"</span><span class="token punctuation">;</span>        Method cleanerMethod <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>directBufferCls<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"cleaner"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object cleaner <span class="token operator">=</span> cleanerMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// JDK 8:  -> "sun.misc.Cleaner"</span>        <span class="token comment" spellcheck="true">// JDK 11: -> "jdk.internal.ref.Cleaner"</span>        String cleanerCls <span class="token operator">=</span> <span class="token string">"sun.misc.Cleaner"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// When we get "cleaner" then we can call "clean()" to free memory</span>        Method cleanMethod <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>cleanerCls<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"clean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cleanMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>cleaner<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    UsagePrinter<span class="token punctuation">.</span><span class="token function">printDirectMemoryUsage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同理若在 <code>JDK 11</code> 之后运行上述需要在 <code>VM options</code> 添加下述配置。</p><pre class="line-numbers language-jvm"><code class="language-jvm">--add-opens java.base/sun.nio.ch=ALL-UNNAMED--add-opens java.base/jdk.internal.ref=ALL-UNNAMED<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、对象内存&quot;&gt;&lt;a href=&quot;#一、对象内存&quot; class=&quot;headerlink&quot; title=&quot;一、对象内存&quot;&gt;&lt;/a&gt;一、对象内存&lt;/h3&gt;&lt;h4 id=&quot;1-依赖导入&quot;&gt;&lt;a href=&quot;#1-依赖导入&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="JAVA进阶" scheme="https://great-jin.github.io/categories/JAVA%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Java阻塞队列详解</title>
    <link href="https://great-jin.github.io/java/collection/queue/"/>
    <id>https://great-jin.github.io/java/collection/queue/</id>
    <published>2023-09-02T16:00:00.000Z</published>
    <updated>2024-03-18T14:08:16.627Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、优先队列"><a href="#一、优先队列" class="headerlink" title="一、优先队列"></a>一、优先队列</h3><h4 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h4><p>所谓优先队列，即赋予队列中元素访问优先级，优先级越高则出队的优先即也越高。</p><p><code>PriorityQueue</code> 内部实现了一套排序机制，默认根据存入元素的 <code>ASCII</code> 值进行存入，<code>ASCII</code> 值更小的元素哪怕后存也会在队头。如下示例中 <code>banana</code> 在 <code>pear</code> 之后入队，但 <code>b</code> 的 <code>ASCII</code> 小于 <code>p</code> 因此优先值更高，在出队时 <code>banana</code> 则会优先于 <code>pear</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">priorityDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Queue<span class="token operator">&lt;</span>String<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"pear"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"banana"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 输出顺序：apple banana pear</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-排序接口"><a href="#2-排序接口" class="headerlink" title="2. 排序接口"></a>2. 排序接口</h4><p>除了使用默认的优先级规则，存入队列中的元素也可同实现  <code>Comparator</code> 接口从而自定义优先级。</p><p>通过实现 <code>Comparator</code> 接口并重写 <code>compare()</code> 方法即可自定义排序规则，其中 <code>compare()</code> 返回值取值范围为：<code>(-1，0，1)</code>，依次代表 <code>(大于，等于，小于)</code>，当调用队列的 <code>poll()</code> 方式时默认取队列中从最小的元素。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>T o1<span class="token punctuation">,</span> T o2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> Comparator<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">reversed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Collections<span class="token punctuation">.</span><span class="token function">reverseOrder</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-示例演示"><a href="#3-示例演示" class="headerlink" title="3. 示例演示"></a>3. 示例演示</h4><p>如下示例中在初始化优先队列时指定了自定义排序器 <code>MyComparator</code>，其根据 <code>User</code> 的年龄而大小确定优先级。</p><p>因此对于存入的三个元素，在读取时即会按照年龄的大小升序输出。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">priorityDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    PriorityQueue<span class="token operator">&lt;</span>User<span class="token operator">></span> queue1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue1<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Alex"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue1<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Beth"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue1<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>queue1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// User(Beth), User(Jack), User(Alex)</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue1<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>User o1<span class="token punctuation">,</span> User o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> interval <span class="token operator">=</span> o1<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> o2<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Integer<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>interval<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、延时队列"><a href="#二、延时队列" class="headerlink" title="二、延时队列"></a>二、延时队列</h3><p><code>Java</code> 同时提供了一种阻塞的延迟队列 <code>DelayQueue</code> ，其队列元素必须实现 <code>Delayed</code> 接口。</p><h4 id="1-延迟接口"><a href="#1-延迟接口" class="headerlink" title="1. 延迟接口"></a>1. 延迟接口</h4><p><code>Delayed</code> 扩展了 <code>Comparable</code> 接口，因此元素实现时必须同时重写 <code>getDelay()</code> 与 <code>compareTo()</code> 方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Delayed</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token operator">&lt;</span>Delayed<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Returns the remaining delay associated with this object, in the     * given time unit.     *     * @param unit the time unit     * @return the remaining delay; zero or negative values indicate     * that the delay has already elapsed     */</span>    <span class="token keyword">long</span> <span class="token function">getDelay</span><span class="token punctuation">(</span>TimeUnit unit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-getDelay"><a href="#1-getDelay" class="headerlink" title="(1) getDelay()"></a>(1) getDelay()</h5><p>返回对象还需要延迟的时间，这个时间会以指定的时间单位（例如毫秒、秒等）返回。</p><h5 id="2-compareTo"><a href="#2-compareTo" class="headerlink" title="(2) compareTo()"></a>(2) compareTo()</h5><p>比较当前对象与指定对象的顺序，即用于设置队列元素的存入顺序。如果当前对象的延迟时间比指定对象的延迟时间更长，则返回一个正值；如果当前对象的延迟时间比指定对象的延迟时间更短，则返回一个负值；如果两者的延迟时间相等，则返回 <code>0</code>。</p><h4 id="2-队列介绍"><a href="#2-队列介绍" class="headerlink" title="2. 队列介绍"></a>2. 队列介绍</h4><p>在上述提到 <code>compareTo()</code> 方法保证了队列元素的有序性，而 <code>getDelay()</code> 则正是实现延时阻塞的关键。</p><p>查看延迟队列 <code>DelayQueue</code> 的 <code>take()</code> 方法源码可以看到线程先取锁并进入死循环，当队列元素无数据则持锁进入阻塞；若队列不为空，则判断当前队头元素的 <code>getDelay()</code> 值是否小于 <code>0</code>，若是则线程阻塞指定时间，阻塞时间值为 <code>getDelay()</code> 的值，又因 <code>delay &gt; 0</code> 所以数据并未出队，因此阻塞结束后下一循环时队头仍为上循环的元素，而经过 <code>delay</code> 时间的睡眠阻塞后其 <code>getDelay()</code> 的值一定小于或等于 <code>0</code> 此时数据将出队。</p><p>因此了解了 <code>take()</code> 的阻塞原理，若想要控制数据的阻塞获取，核心即在于定义 <code>getDelay()</code> 的处理逻辑，当其返回的值大于 <code>0</code> 时，线程将根据返回的值阻塞指定时间，从而保证下一次尝试出队时其值一定小于等于 <code>0</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> E <span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>    lock<span class="token punctuation">.</span><span class="token function">lockInterruptibly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 1. 获取队头</span>            E first <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>first <span class="token operator">==</span> null<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 2.1 队头为空，即队列为空将阻塞</span>                available<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 2.2 队列不为空调用元素的 getDelay()</span>                <span class="token keyword">long</span> delay <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">getDelay</span><span class="token punctuation">(</span>NANOSECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>delay <span class="token operator">&lt;=</span> 0L<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// 3. 结果小于 0 则返回该元素</span>                    <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                first <span class="token operator">=</span> null<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// don't retain ref while waiting</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>leader <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    available<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    Thread thisThread <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    leader <span class="token operator">=</span> thisThread<span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 4. 阻塞指定时间，值为 getDelay() 返回的大小</span>                        <span class="token comment" spellcheck="true">// 当退出阻塞后进入下一循环，此时队头 getDelay() 值一定小于或等于 0</span>                        available<span class="token punctuation">.</span><span class="token function">awaitNanos</span><span class="token punctuation">(</span>delay<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>leader <span class="token operator">==</span> thisThread<span class="token punctuation">)</span>                            leader <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>leader <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span>            available<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-示例演示-1"><a href="#3-示例演示-1" class="headerlink" title="3. 示例演示"></a>3. 示例演示</h4><p>下面通过一个具体的示例介绍阻塞队列的效果。</p><p>定义队列元素 <code>DelayTask</code> 并实现 <code>Delayed</code> 接口，元素内定义两个属性，<code>data</code> 用于存储真实数据内容，构造函数中入参 <code>offset</code> 用于控制具体阻塞时间。</p><p>队列中的元素顺序将根据 <code>compareTo()</code> 定义进行存储，此处即 <code>delayTime</code> 值更小的处于队头。当 <code>take()</code> 读取队列时，若未达到指定的 <code>offset</code> 时间其 <code>getDelay()</code> 返回的值将为正数，在上述 <code>take()</code> 源码中提到的其将会根据这个返回的时间进行阻塞。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayTask</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Delayed</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> T data<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> delayTime<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DelayTask</span><span class="token punctuation">(</span>T t<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> t<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>delayTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> offset<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getDelay</span><span class="token punctuation">(</span>TimeUnit unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">long</span> interval <span class="token operator">=</span> delayTime <span class="token operator">-</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> unit<span class="token punctuation">.</span><span class="token function">convert</span><span class="token punctuation">(</span>interval<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Delayed o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DelayTask task <span class="token operator">=</span> <span class="token punctuation">(</span>DelayTask<span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> Ints<span class="token punctuation">.</span><span class="token function">saturatedCast</span><span class="token punctuation">(</span>delayTime <span class="token operator">-</span> task<span class="token punctuation">.</span>delayTime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完成上述对象定义之后下面介绍如何使用，初始化 <code>DelayQueue</code> 并存入两个元素，因为 <code>compareTo()</code> 的作用即便 <code>Beth</code> 后执行入队其仍为队头。当执行 <code>take()</code> 方法时队列内部执行 <code>peek()</code> 获取队头调用其 <code>getDelay()</code> 方法，而 <code>Beth</code> 的 <code>offset</code> 设置为 <code>3s</code> 返回的值将大于 <code>0</code> 因而将阻塞睡眠 <code>3s</code>，睡眠结束后再次循环获取队头的 <code>getDelay()</code> 值此时将小于 <code>0</code>，从而输出队头元素。</p><p>因此下述的示例代码输出顺序应如下：程序阻塞 <code>3s</code> 后打印 <code>Beth</code>，再次阻塞两秒后打印 <code>Alex</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delayDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    BlockingQueue<span class="token operator">&lt;</span>DelayTask<span class="token operator">></span> delayQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelayQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 间隔存入数据</span>    delayQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DelayTask</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"Alex"</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    delayQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DelayTask</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"Beth"</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>delayQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 阻塞等待直到元素到期</span>            DelayTask task <span class="token operator">=</span> delayQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、BlockingQueue"><a href="#三、BlockingQueue" class="headerlink" title="三、BlockingQueue"></a>三、BlockingQueue</h3><h4 id="1-基本操作"><a href="#1-基本操作" class="headerlink" title="1. 基本操作"></a>1. 基本操作</h4><p><code>Java</code> 中默认提供了两类阻塞队列，其结构为线程安全，扩展了一系列方法实现阻塞读存。</p><ul><li><code>ArrayBlockingQueue</code>：有界集合，队列容量在初始化时指定，一旦定义后续无法变更。</li><li><code>LinkedBlockingQueue</code>：无界集合，若初始化时指定容量则效果等同于 `ArrayBlockingQueue``，若不指定容量则为无界集合。</li></ul><p>在阻塞队列中除了 <code>offer()、poll()</code> 方法可以指定阻塞时间，同时提供了 <code>put()、take()</code> 方法实现阻塞读存。</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">offer()</td>        <td style="text-align: center;">阻塞新增，指定时间未能成功返回 false。</td>    </tr>    <tr>        <td style="text-align: center;">poll()</td>        <td style="text-align: center;">阻塞获取，指定时间未能成功返回 false。</td>    </tr>    <tr>        <td style="text-align: center;">put()</td>        <td style="text-align: center;">阻塞新增，若队列已满则会一直处于阻塞待有可用空间时新增。</td>    </tr>    <tr>        <td style="text-align: center;">take()</td>        <td style="text-align: center;">阻塞查询，若队列为空则会一直处于阻塞状态。</td>    </tr></table><h4 id="2-示例演示"><a href="#2-示例演示" class="headerlink" title="2. 示例演示"></a>2. 示例演示</h4><p><code>BlockingQueue</code> 具体操作示例如下，这里以 <code>ArrayBlockingQueue</code> 为例，<code>LinkedBlockingQueue</code> 仅结构有所差异，具体使用方法类似。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">blockDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    ArrayBlockingQueue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Add element</span>        <span class="token comment" spellcheck="true">// If capacity is full then wait, if still full return false</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Get element</span>    <span class="token comment" spellcheck="true">// If capacity is full then wait, if still full return null</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、SynchronousQueue"><a href="#四、SynchronousQueue" class="headerlink" title="四、SynchronousQueue"></a>四、SynchronousQueue</h3><h4 id="1-基本操作-1"><a href="#1-基本操作-1" class="headerlink" title="1. 基本操作"></a>1. 基本操作</h4><p><code>SynchronousQueue</code> 是一种特殊的阻塞队列，其通过 <code>put()</code> 与 <code>take()</code> 存入与读取数据。</p><p>其特殊之处在于当通过 <code>put()</code> 存入数据时要求必须存在另一线程执行 <code>take()</code> 方法，否则将一直处于阻塞状态，<code>take()</code> 操作同理。</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">put()</td>        <td style="text-align: center;">存入数据，必须存在线程执行 take() 否则将阻塞。</td>    </tr>    <tr>        <td style="text-align: center;">take()</td>        <td style="text-align: center;">读取数据，必须存在线程执行 put() 否则将阻塞。</td>    </tr></table><h4 id="2-示例演示-1"><a href="#2-示例演示-1" class="headerlink" title="2. 示例演示"></a>2. 示例演示</h4><p>如下示例分别创建了两个读写线程，<code>t1</code> 线程用于执行 <code>put()</code> 写入，<code>t2</code> 线程用于执行 <code>take()</code> 读取。</p><p>在 <code>t1</code> 线程中通过 <code>sleep(5)</code> 模拟休眠五秒，运行示例代码可以看到当启动程序后 <code>t2</code> 线程在打印 <code>start take</code> 将陷入阻碍状态，只有在 <code>t1</code> 中休眠结束后执行 <code>put()</code> 操作 <code>t2</code> 才会退出阻塞读取数据并打印 <code>end take</code></p><p>同理如果将 <code>t1</code> 中的 <code>sleep(5)</code> 移至 <code>t2</code> 的 <code>take()</code> 之前，运行程序后 <code>t1</code> 的 <code>put()</code> 操作的则会进入阻塞等待 <code>t2</code> 的休眠结束执行 <code>take()</code> 才会退出阻塞。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">synchronousQueueDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    SynchronousQueue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> synchronousQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Thrad t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start put."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Block here only when other thread try "take()" then quit.</span>            synchronousQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end put."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"Producer"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Thrad t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start take."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Block here only when other thread try "put()" then quit.</span>            Integer take <span class="token operator">=</span> synchronousQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end take: "</span> <span class="token operator">+</span> take<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"Consumer"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、LinkedTransferQueue"><a href="#五、LinkedTransferQueue" class="headerlink" title="五、LinkedTransferQueue"></a>五、LinkedTransferQueue</h3><h4 id="1-基本操作-2"><a href="#1-基本操作-2" class="headerlink" title="1. 基本操作"></a>1. 基本操作</h4><p><code>LinkedTransferQueue</code> 即扩展了 <code>SynchronousQueue</code>，为阻塞方法提供了等待时间，到期若未成功则退出阻塞继续后续执行内容。</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">transfer(E)</td>        <td style="text-align: center;">阻塞，类似与 put() 方法。</td>    </tr>    <tr>        <td style="text-align: center;">tryTransfer(E, long, TimeUnit)</td>        <td style="text-align: center;">非阻塞，指定时间未成功将退出阻塞返回 false。</td>    </tr>    <tr>        <td style="text-align: center;">hasWaitingConsumer()</td>        <td style="text-align: center;">队列对象当前是否有线程处于 take() 阻塞状态。</td>    </tr>    <tr>        <td style="text-align: center;">getWaitingConsumerCount()</td>        <td style="text-align: center;">队列对象当前处于 take() 阻塞状态的线程数。</td>    </tr></table><h4 id="2-示例演示-2"><a href="#2-示例演示-2" class="headerlink" title="2. 示例演示"></a>2. 示例演示</h4><p><code>LinkedTransferQueue</code> 的测试示例代码如下，与 <code>SynchronousQueue</code> 模拟场景类型这里不再详细介绍。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transferQueueDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    LinkedTransferQueue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> transferQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedTransferQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Thrad t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start transfer."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Block for e second and return the transfer result</span>            <span class="token keyword">boolean</span> success <span class="token operator">=</span> transferQueue<span class="token punctuation">.</span><span class="token function">tryTransfer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end transfer, success? "</span> <span class="token operator">+</span> success<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            latch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"Producer"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Thrad t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start take."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Block here only when other thread try "put()" then quit.</span>            Integer take <span class="token operator">=</span> transferQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end take: "</span> <span class="token operator">+</span> take<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"Consumer"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、优先队列&quot;&gt;&lt;a href=&quot;#一、优先队列&quot; class=&quot;headerlink&quot; title=&quot;一、优先队列&quot;&gt;&lt;/a&gt;一、优先队列&lt;/h3&gt;&lt;h4 id=&quot;1-基本介绍&quot;&gt;&lt;a href=&quot;#1-基本介绍&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="JAVA基础" scheme="https://great-jin.github.io/categories/JAVA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>自定义 ResultSet 结果集</title>
    <link href="https://great-jin.github.io/java/advance/resultset/"/>
    <id>https://great-jin.github.io/java/advance/resultset/</id>
    <published>2023-09-01T16:00:00.000Z</published>
    <updated>2024-02-20T12:36:29.414Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h4><p>我们都知道在 <code>Java</code> 的 <code>JDBC</code> 中定义了一套标准规范，例如 <code>ResultSet</code> 用于接口语句的结果集，如果点开 <code>ResultSet</code> 内你可以看到其中定义了一系列标准接口，仅接口代码行数即达到了四千多行，当然其中一大半是注释文档，但数量依然客观。<br><img src="/album/loading.gif" data-original="/album/article/java/jdbc/1.png" alt="ResultSet接口类"></p><p>如果你想要定义自己的查询结构集，实现也相当简单，自定义你的结果集类并实现 <code>ResultSet</code> 接口，并按照按照标准重写其中接口即可。</p><p>但通过实现 <code>ResultSet</code> 接口会带来一个问题，你需要重写其中的上百个标准接口，当然你可以仅定义一个空实现，但仍然会造成大量无用代码。当然这是基于仅需要 <code>ResultSet</code> 部分功能的情况下，如果你要设计完善的数据规范，还是需要通过实现 <code>ResultSet</code> 接口来实现。</p><p>假如我们只想要实现一个类似 <code>ResultSet</code> 中通过游标逐行读取的方式，最简单的方式的方式即自定义一个结果集规范，只定义你所需的接口，从而提高代码的简洁度。</p><blockquote><p>本文的重点教你如何实现一个自己的 <code>ResultSet</code> 规范。</p></blockquote><h4 id="2-接口规范"><a href="#2-接口规范" class="headerlink" title="2. 接口规范"></a>2. 接口规范</h4><p>新建接口类 <code>AbstractResultSet</code> 用于定义我们自己的规范。</p><p>首先根据需求确定接口中所需要的定义的方法，如我想要与 <code>ResultSet</code> 中一样能够通过 <code>next()</code> 逐行读取数据，同时通过 <code>getString()</code> 读取属性字段，那么我的接口类则只需要定义下述三个方法。</p><p>这里定义的三个接口方法与 <code>ResultSet</code> 中的接口方法是一致的，只是截取过来而已。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AbstractResultSet</span> <span class="token keyword">extends</span> <span class="token class-name">AutoCloseable</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过下标访问</span>    String <span class="token function">getString</span><span class="token punctuation">(</span><span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过名称访问</span>    String <span class="token function">getString</span><span class="token punctuation">(</span>String columnLabel<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-接口实现"><a href="#3-接口实现" class="headerlink" title="3. 接口实现"></a>3. 接口实现</h4><p>定义完接口之后就简单了，创建实现类 <code>DataResultSet</code> 实现具体的细节。</p><p>具体设计参考了 <code>com.sun.rowset.CachedRowSetImpl</code> 类中的实现思路，将数据通过 <code>Map</code> 塞到内存中，再通过游标逐行读取内容，当然这种情况就没法针对大数据量，容易造成内存溢出的风险。</p><p>这里定义三个成员变量 <code>cursorRow</code>, <code>rowCount</code> 与 <code>rowContainer</code>，对应信息参考下表：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">属性</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">cursorRow</td>        <td style="text-align: center;">行游标，用于标记当前读到第几行。</td>    </tr>    <tr>        <td style="text-align: center;">rowCount</td>        <td style="text-align: center;">行数，用于记录当前结果集中的总行数。</td>    </tr>    <tr>        <td style="text-align: center;">rowContainer</td>        <td style="text-align: center;">Map容器，用于存储目标数据内容，key 存对应行下表，value存该行数据。</td>    </tr></table><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataResultSet</span> <span class="token keyword">implements</span> <span class="token class-name">AbstractResultSet</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> cursorRow<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> rowCount<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> rowContainer<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DataResultSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        rowContainer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cursorRow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        rowCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 略去具体接口实现</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-数据填充"><a href="#4-数据填充" class="headerlink" title="4. 数据填充"></a>4. 数据填充</h4><p>在上面已经提到了是通过 <code>Map</code> 容器用于接收目标数据用于后续读取，因此在 <code>DataResultSet</code> 类中新增 <code>fill()</code> 方法用于接收数据。</p><p>方法入参为 <code>List</code> 容器，容器中的每个元素代表一行数据，注意这里容器中需要指定为 <code>LinkedHashMap</code>，这样后续通过 <code>getString()</code> 才能保证通过序号访问的确定性。</p><p>因为 <code>List</code> 与 <code>LinkedHashMap</code> 皆为有序容器，因此 <code>fill()</code> 只需简单遍历目标数据按照 <code>List</code> 存放顺序存入 <code>rowContainer</code> 即可。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fill</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> theData<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>theData<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Data can't be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    rowCount <span class="token operator">=</span> theData<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> rowCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        rowContainer<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> theData<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-数据验证"><a href="#5-数据验证" class="headerlink" title="5. 数据验证"></a>5. 数据验证</h4><p>在定义具体的接口实现之前这里定义了几个数据验证，用于验证读取的行标与字段下标的合法性。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cursorRow <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> cursorRow <span class="token operator">></span> rowCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Cursor is illegal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> colCount <span class="token operator">=</span> rowContainer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cursorRow<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> index <span class="token operator">></span> colCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Index is illegal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">checkColLabel</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keySet <span class="token operator">=</span> rowContainer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cursorRow<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>keySet<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Column "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">" didn't existed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-具体实现"><a href="#6-具体实现" class="headerlink" title="6. 具体实现"></a>6. 具体实现</h4><blockquote><p><strong>(Ⅰ) next() 实现</strong></p></blockquote><p><code>next()</code> 实现的较为简单，即每次执行 <code>next()</code> 时判断当前行标 <code>(cursorRow)</code> 是否已经超过行数 <code>(rowCount)</code>，若否则行标加一。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> hasRemain <span class="token operator">=</span> cursorRow <span class="token operator">&lt;</span> rowCount<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasRemain<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Move row cursor</span>        cursorRow<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> hasRemain<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>(Ⅱ) getString(int index) 实现</strong></p></blockquote><p><code>getString(int)</code> 即通过下标获取属性值，因为在执行 next() 时行标已经为对应的目标行，因此通过 <code>rowContainer.get(cursorRow)</code> 即可获取行标所对应的该行数据。</p><p>获取到对应行后即可将转为数组并通过下标获取，注意这里的 <code>columnIndex</code> 是按照 <code>JDBC</code> 标准从 <code>1</code> 开始，因此转为数组读取时需要减一。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> String <span class="token function">getString</span><span class="token punctuation">(</span><span class="token keyword">int</span> columnIndex<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// check row cursor is valid</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// check index is valid for column cursor</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkIndex</span><span class="token punctuation">(</span>columnIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> row <span class="token operator">=</span> rowContainer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cursorRow<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> row<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>columnIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>(Ⅲ) getString(String name) 实现</strong></p></blockquote><p>与之对应的 <code>getString(String)</code> 即通过属性名进行查询。</p><p>这里参考了 <code>CachedRowSetImpl#getString(String)</code> 的实现思路，根据 <code>columnLabel</code> 获取对应属性的下标，即可复用上述的 <code>getString(int)</code> 方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> String <span class="token function">getString</span><span class="token punctuation">(</span>String columnLabel<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// check row cursor is valid</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkCursor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// check column label</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">checkColLabel</span><span class="token punctuation">(</span>columnLabel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// get value by column index</span>    <span class="token keyword">return</span> <span class="token function">getString</span><span class="token punctuation">(</span><span class="token function">getColIdxByName</span><span class="token punctuation">(</span>columnLabel<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 根据 name 获取下标</span><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">getColIdxByName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> record <span class="token operator">=</span> rowContainer<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cursorRow<span class="token punctuation">)</span><span class="token punctuation">;</span>    Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Integer<span class="token operator">></span> orderMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ch <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> entry <span class="token operator">:</span> record<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        orderMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        ch<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> orderMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>(Ⅳ) close() 实现</strong></p></blockquote><p>因为继承了 <code>AutoCloseable</code> 类，所以需要重写 <code>close()</code> 方法，内容也相对简单，将成员遍历重置即可。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    rowContainer <span class="token operator">=</span> null<span class="token punctuation">;</span>    cursorRow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    rowCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-示例演示"><a href="#7-示例演示" class="headerlink" title="7. 示例演示"></a>7. 示例演示</h4><p>完成上述步骤之后基本就完成了所有工作，对应的测试实例如下。</p><p>这里通过 <code>generateMockData()</code> 生成了一个五行四列的测试数据，在通过 <code>fill()</code> 填充数据之后利用 <code>next()</code> 与 <code>getString()</code> 模拟数据读取。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResultTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Mock data</span>        List<span class="token operator">&lt;</span>LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> list <span class="token operator">=</span> <span class="token function">generateMockData</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>DataResultSet resultSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataResultSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            resultSet<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"column-1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> <span class="token function">generateMockData</span><span class="token punctuation">(</span><span class="token keyword">int</span> rNum<span class="token punctuation">,</span> <span class="token keyword">int</span> colNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rNum<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            LinkedHashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> colNum<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"column-"</span> <span class="token operator">+</span> j<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-基本介绍&quot;&gt;&lt;a href=&quot;#1-基本介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 基本介绍&quot;&gt;&lt;/a&gt;1. 基本介绍&lt;/h4&gt;&lt;p&gt;我们都知道在 &lt;code&gt;Java&lt;/code&gt; 的 &lt;code&gt;JDBC&lt;/code&gt; 中定义了一套标</summary>
      
    
    
    
    <category term="JAVA进阶" scheme="https://great-jin.github.io/categories/JAVA%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>在IDEA中优雅的断点测试</title>
    <link href="https://great-jin.github.io/app/idea/debug/"/>
    <id>https://great-jin.github.io/app/idea/debug/</id>
    <published>2023-08-31T16:00:00.000Z</published>
    <updated>2024-02-21T14:44:59.097Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、功能介绍"><a href="#一、功能介绍" class="headerlink" title="一、功能介绍"></a>一、功能介绍</h3><p><img src="/album/loading.gif" data-original="/album/article/tool/idea/debug/1.png"></p><h4 id="1-Resume-programme"><a href="#1-Resume-programme" class="headerlink" title="1. Resume programme"></a>1. Resume programme</h4><p>对应上图中的 <code>模块1</code>，当程序执行到断点处将停止，通过 <code>Resume programme</code> 即直接略过中间代码跳到一处断点，若后续不存在断点则执行到程序结束。</p><p>如在下述中分别在 <code>1，3</code> 输出处断点，当程序运行 <code>println(1)</code> 时将暂停，执行 <code>Resume programme</code> 后则将在 <code>println(3)</code> 处再次暂停，再次执行 <code>Resume programme</code> 则会执行剩余代码然后退出。</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 此段断点</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 此段断点</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Step-Over"><a href="#2-Step-Over" class="headerlink" title="2. Step Over"></a>2. Step Over</h4><p>对应上图中的 <code>模块2</code>，即从断点处开始逐行执行，若执行的代码为方法并不会进入内部而是直接得到该方法执行结果。</p><p>同样在 <code>println(1)</code> 处断点，当程序运行 <code>println(1)</code> 时将暂停，执行 <code>Step Over</code> 后则将在 <code>println(2)</code> 处再次暂停，再次执行 <code>Step Over</code> 则将在 <code>println(3)</code> 处暂停，即逐行向下执行。</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 此段断点</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-Step-Into"><a href="#3-Step-Into" class="headerlink" title="3. Step Into"></a>3. Step Into</h4><p>对应上图中的 <code>模块3</code>，同样是从断点处开始逐行执行，但是与 <code>Step Over</code> 不同的是 <code>Step Into</code> 若执行的当前行若是方法则会进入方法内部继续逐行断点。</p><p>如下中在 <code>test()</code> 处断点，程序运行后将在该行暂停，执行 <code>Step Into</code> 后将跳到 <code>println(2)</code> 处暂停，若不存在方法嵌套则继续选择其将类似 <code>Step Over</code> 逐行向下执行。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 此段断点</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-Step-out"><a href="#4-Step-out" class="headerlink" title="4. Step out"></a>4. Step out</h4><p>对应上图中的 <code>模块4</code>，用于略过当前执行的方法内剩余代码执行过程，若存在方法内后续仍存在断点则执行到断点处。如在不存在其它断点的情况下通过 <code>Step Into</code> 进入某个方法的之后触发 <code>Step out</code> 则会直接执行剩余代码并返回至 <code>Step Into</code> 入口的下一行。 </p><p>如下中在 <code>println(2)</code> 处断点，程序启动后将在该行暂停，执行 <code>Step out</code> 后将会执行 <code>test()</code> 方法内剩余代码转至 <code>println(4)</code> 处暂停。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 此段断点</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-View-Breakponints"><a href="#5-View-Breakponints" class="headerlink" title="5. View Breakponints"></a>5. View Breakponints</h4><p>对应上图中的 <code>模块5</code>，用于查看当前代码中已经添加的断点。</p><h4 id="6-Mute-Breakpoint"><a href="#6-Mute-Breakpoint" class="headerlink" title="6. Mute Breakpoint"></a>6. Mute Breakpoint</h4><p>对应上图中的 <code>模块6</code>，通过触发 <code>Mute Breakpoint</code> 则当前代码中的所有断点将不再生效，意味着执行到断点处不会停止。</p><h3 id="二、示例演示"><a href="#二、示例演示" class="headerlink" title="二、示例演示"></a>二、示例演示</h3><p>为了更好的介绍断点作用效果下面通过一个具体示例进行介绍。</p><h4 id="1-测试代码"><a href="#1-测试代码" class="headerlink" title="1. 测试代码"></a>1. 测试代码</h4><p>在开始之前准备一个简单的测试代码，完整代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Example start."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Example finish."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Into method 1."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Exit method 1."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Into method 2."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Exit method 2."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-示例分析"><a href="#2-示例分析" class="headerlink" title="2. 示例分析"></a>2. 示例分析</h4><h5 id="1-测试一"><a href="#1-测试一" class="headerlink" title="(1) 测试一"></a>(1) 测试一</h5><p>在上述示例代码 <code>第6行</code> 处打上断点并执行 <code>demo</code> 模块，第一大点中不同功能触发效果如下：</p><ul><li>若执行 <code>Step Over</code> : 断点将移至 <code>第7行</code>，若继续触发则会逐行向下执行，但在执行 <code>method1()</code> 等方法时并不会进入其方法体。</li><li>若执行 <code>Step Into</code> : 断点将移至方法 <code>method1()</code> 内，即上述中的 <code>第12行</code>。</li><li>若执行 <code>Step Out</code> : 将从 <code>第6行</code> 开始执行剩余代码并返回。</li></ul><h5 id="2-测试二"><a href="#2-测试二" class="headerlink" title="(2) 测试二"></a>(2) 测试二</h5><p>同样在 <code>第6行</code> 打上断点执行后 <code>demo</code> 模块。</p><ul><li>在触发断点后选择 <code>Step Into</code> 进入 <code>method1()</code> 方法体内。</li><li>进入 <code>method1()</code> 后触发 <code>Step Out</code> 则会返回到 <code>demo()</code> 中的 <code>第7行</code>，即 <code>Step Into</code> 入口的下一行。 </li></ul><h5 id="3-测试二"><a href="#3-测试二" class="headerlink" title="(3) 测试二"></a>(3) 测试二</h5><p>分别在 <code>第6行</code> 和 <code>第14行</code> 打上断点执行后 <code>demo</code> 模块。</p><ul><li>在触发断点后选择 <code>Step Into</code> 进入 <code>method1()</code> 方法体内。</li><li>进入 <code>method1()</code> 后触发 <code>Step Out</code> 则会在 <code>第14行</code> 处停止，即若当前方法内存在断点则不会退出方法而是在断点处停止。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、功能介绍&quot;&gt;&lt;a href=&quot;#一、功能介绍&quot; class=&quot;headerlink&quot; title=&quot;一、功能介绍&quot;&gt;&lt;/a&gt;一、功能介绍&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/album/loading.gif&quot; data-original=&quot;/album/ar</summary>
      
    
    
    
    <category term="开发工具" scheme="https://great-jin.github.io/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
    <category term="IDEA" scheme="https://great-jin.github.io/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>Kafka基础概念详解</title>
    <link href="https://great-jin.github.io/db/kafka/basis/"/>
    <id>https://great-jin.github.io/db/kafka/basis/</id>
    <published>2023-08-25T16:00:00.000Z</published>
    <updated>2024-02-20T12:36:29.408Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、基本结构"><a href="#一、基本结构" class="headerlink" title="一、基本结构"></a>一、基本结构</h3><p><img src="/album/loading.gif" data-original="/album/article/db/kafka/2.png" alt="结构示意图"></p><h4 id="1-User"><a href="#1-User" class="headerlink" title="1. User"></a>1. User</h4><p>消息的发送者叫 <code>Producer</code> ，消息的使用者和接收者是 <code>Consumer</code>，生产者将数据保存到 <code>Kafka</code> 集群中，消费者从中获取消息进行业务的处理。</p><h4 id="2-Broker"><a href="#2-Broker" class="headerlink" title="2. Broker"></a>2. Broker</h4><p><code>Kafka</code> 集群中有很多台 <code>Server</code>，其中每一台 <code>Server</code> 都可以存储消息，将每一台 <code>Server</code> 称为一个实例，也称为 <code>Broker</code>。</p><p>当部署 <code>Kafka</code> 集群时则存在多个 <code>Broker</code> 节点，通常将主节点称之为 <code>Leader</code> 节点，其它 <code>Broker</code> 节点称为 <code>Follwer</code> 节点。</p><h4 id="3-Topic"><a href="#3-Topic" class="headerlink" title="3. Topic"></a>3. Topic</h4><p>一个 <code>Topic</code> 里保存的是同类消息，相当于对消息的分类，每个 <code>Producer</code> 将消息发送到 <code>kafka</code> 中都需要指明 <code>Topic</code> ，即指明这个消息属于哪一类。</p><h4 id="4-Partition"><a href="#4-Partition" class="headerlink" title="4. Partition"></a>4. Partition</h4><p>每个 <code>Topic</code> 都可以分成多个 <code>Partition</code>，每个 <code>Partition</code> 在存储层面是 <code>append log</code> 文件，任何发布到此 <code>Partition</code> 的消息都会被直接追加到 <code>log</code> 文件的尾部。</p><p>为什么要进行分区呢？最根本的原因就是 <code>Kafka</code> 基于文件存储，当文件内容大到一定程度时，很容易达到单个磁盘的上限，因此采用分区的办法，即一个分区对应一个文件，这样就可以将数据分别存储到不同的 <code>Server</code> 上去，同时也可以实现负载均衡从而容纳更多的消费者。</p><h5 id="1-Replica"><a href="#1-Replica" class="headerlink" title="(1) Replica"></a>(1) Replica</h5><p>分区 <code>Partition</code> 中的数据是以文件的形式存在，而为了实现故障高可用，<code>Kafka</code> 中引入了副本概念 <code>(Replica)</code>。</p><p>即在集群模式下，每个 <code>Partition</code> 下的消息文件将按照一定规则均匀分布到各个节点，因此当存在某个故障节点仍可从其它节点读取从而保证数据的安全性。</p><ul><li><code>Kafka</code> 的 <code>Replica</code> 包含主节点 <code>(leader)</code> 与子节点 <code>(follower)</code>。</li><li><code>Partition</code> 的 <code>Replica</code> 默认情况会均匀分布到所有 <code>Broker</code> 上。</li><li>当 <code>Topic</code> 的 <code>replication-factor</code> 为 <code>N(N&gt;1)</code> 时，则每个 <code>Partition</code> 都会有 <code>N</code> 个副本。</li><li>当 <code>Replica</code> 的个数小于或等于 <code>Broker</code> 的个数，对于每个 <code>Partition</code> 而言，每个 <code>Broker</code> 上最多只会有一个 <code>Replica</code>，因此可以使用 <code>Broker id</code> 指定 <code>Partition</code> 的 <code>Replica</code>。</li></ul><h4 id="5-Offset"><a href="#5-Offset" class="headerlink" title="5. Offset"></a>5. Offset</h4><p>一个分区对应一个磁盘上的文件，而消息在文件中的位置就称为偏移量 <code>(Offset)</code>，<code>Offset</code> 为一个 <code>long</code> 型数字，它可以唯一标记条消息。</p><p>由于 <code>Kafka</code> 并没有提供基他额外的索引机制来存储 <code>Offset</code> ，文件只能顺序的读写，所以在 <code>Kafka</code> 中几乎不允许对消息进行”随机读写”。</p><h3 id="二、传输过程"><a href="#二、传输过程" class="headerlink" title="二、传输过程"></a>二、传输过程</h3><h4 id="1-生产者"><a href="#1-生产者" class="headerlink" title="1. 生产者"></a>1. 生产者</h4><p>对于生产者要写入的条记录，可以指定四个参数：分别是 <code>Topic, Partition, Key, Value(需存入的数据)</code>，其中 <code>Topic</code> 和 <code>Value</code> 是必须要指定的，而 <code>Key</code> 和 <code>Partition</code> 是可选的。</p><blockquote><p>对于一条记录，先对其进行序列化，按照 <code>Topic</code> 和 <code>Partition</code> 放进对应的发送队列中；</p><ul><li>若 <code>Partition</code> 没填，则分为两类情况：</li><li>(1) 若 <code>Key</code> 没填，通过 <code>Round-Robin</code> 来选 <code>Partition</code>；</li><li>(2) 若 <code>Key</code> 有填，按照 <code>Key</code> 进行哈希，相同 <code>Key</code> 去一个 <code>Partition</code>；</li></ul></blockquote><p><img src="/album/loading.gif" data-original="/album/article/db/kafka/5.png"></p><h4 id="2-消费者"><a href="#2-消费者" class="headerlink" title="2. 消费者"></a>2. 消费者</h4><p>消费者不是以单独的形式存在的，每一个消费者属于一个 <code>Consumer Group</code> ，一个 <code>Group</code> 可以包含多个 <code>Consumer</code>。<br><img src="/album/loading.gif" data-original="/album/article/db/kafka/3.png"></p><p>特别需要注意的是：订阅 <code>Topic</code> 是以一个消费组来订阅的，发送到 <code>Topic</code> 的消息只会被订阅此 <code>Topic</code> 的每个 <code>Group</code> 中的一个 <code>Consumer</code> 消费，即同一个消费组的两个消费者不会同时消费一个 <code>Partition</code>。如果所有的 <code>Consumer</code> 都具有相同的 <code>Group</code>，那么就像是一个点对点的消息系统；如果每个 <code>Consumer</code> 都具有不同的 <code>Group</code>，那么消息会广播给所有的消费者。</p><p>具体说来，这实际上是根据 <code>Partition</code> 来分的，一个 <code>Partition</code> 只被消费组里的一个消费者消费，但是可以同时被多个消费组消费，消费组里的每个消费者是关联到一个 <code>Partition</code> 的，因此对于一个 <code>Topic</code> 而言，同一个 <code>Group</code> 中不能有多于 <code>Partition</code> 个数的 <code>Consumer</code> 同时消费，否则将意味着某些 <code>Consumer</code> 将无法得到消息。</p><h3 id="三、数据同步"><a href="#三、数据同步" class="headerlink" title="三、数据同步"></a>三、数据同步</h3><h4 id="1-ISR机制"><a href="#1-ISR机制" class="headerlink" title="1. ISR机制"></a>1. ISR机制</h4><p><code>Kafka</code> 中通过 <code>ISR(in-sync replica set)</code> 机制管理集群节点，其机制如下：</p><ul><li><code>Leader</code> 会维护一个与其基本保持同步的 <code>Replica</code> 列表，该列表称为 <code>ISR</code> ，每个 <code>Partition</code> 都会有一个 <code>ISR</code>，而且是由 <code>Leader</code> 动态维护。</li><li>如果一个 <code>Flower</code> 比一个 <code>Leader</code> 落后太多，或者超过一定时间未发起数据复制请求，则 <code>Leader</code> 将其重 <code>ISR</code> 中移除。</li><li>当 <code>ISR</code> 中所有 <code>Replica</code> 都向 <code>Leader</code> 发送 <code>ACK</code> 时，<code>Leader</code> 才 <code>commit</code>。</li><li>该时间阈值由 <code>replica.lag.time.max.ms</code> 参数设定，当 <code>Leader</code> 发生故障后会从 <code>ISR</code> 中选举出新的 <code>Leader</code>。</li></ul><h4 id="2-ACK机制"><a href="#2-ACK机制" class="headerlink" title="2. ACK机制"></a>2. ACK机制</h4><p><code>Kafka</code> 采用的是至少一次 <code>At least once</code>，消息不会丢但是可能会重复传输，通过 <code>ACK</code> 参数配置传输模式。</p><ul><li><strong>同步复制</strong>：只有所有的 <code>follower</code> 把数据拿过去后才 <code>commit</code>，一致性好，可用性不高。</li><li><strong>异步复制</strong>：只要 <code>leader</code> 拿到数据立即 <code>commit</code>，等 <code>follower</code> 慢慢去复制，可用性高立即返回，但一致性差一些。</li></ul><blockquote><p>设置等待 <code>acks</code> 返回的机制，有下述三个值：</p><ul><li><code>-1</code>：默认，等待所有 <code>Flower</code> 同步完消息后再发送(绝对不会丢数据)；</li><li><code>0</code>：不等待返回的 <code>ack</code> (可能会丢数据，因为发送消息没有了失败重试机制，但是这是最低延迟)；</li><li><code>1</code>：消息发送给 <code>Kafka</code> 分区中的 <code>Leader</code> 后就返回(如果 <code>Flower</code> 没有同步完成 <code>Leader</code> 就宕机了，就会丢数据)；</li></ul></blockquote><p><code>acks</code> 的默认值即为 <code>1</code>，代表我们的消息被 <code>Leader</code> 副本接收之后就算被成功发送，可以配置 <code>acks = all</code>  代表则所有副本都要接收到该消息之后该消息才算真正成功被发送。即保证消息不丢失的，设置消息持久化后再返回消息发送成功响应，对应 <code>Spring</code> 配置 <code>spring.kafka.producer.acks=-1</code></p><h4 id="3-故障转移"><a href="#3-故障转移" class="headerlink" title="3. 故障转移"></a>3. 故障转移</h4><h5 id="1-Leader故障"><a href="#1-Leader故障" class="headerlink" title="(1) Leader故障"></a>(1) Leader故障</h5><p><code>Leader</code> 发生故障后，会从 <code>ISR</code> 中选出一个新的 <code>Leader</code>，同时为保证多个副本之间的数据一致性，其余的 <code>Follower</code> 会先将各自的 <code>log</code> 文件高于 <code>HW(High Watermark, 消费者的消费进度)</code> 的部分截掉，然后从新的 <code>Leader</code> 同步数据。</p><p>这只能保证副本之间的数据一致性，并不能保证数据不丢失或者不重复。</p><h5 id="2-Follower故障"><a href="#2-Follower故障" class="headerlink" title="(2) Follower故障"></a>(2) Follower故障</h5><p><code>Follower</code> 发生故障后会被临时踢出 <code>ISR</code> 集合，待该 <code>Follower</code> 恢复后，将会读取本地磁盘记录的上次的 <code>HW</code>，并将 <code>log</code> 文件高于 <code>HW</code> 的部分截取掉，从 <code>HW</code> 开始向 <code>Leader</code> 进行同步数据操作，等该 <code>Follower</code> 的 <code>LEO(Log End Offset，日志的末尾偏移量)</code> 大于等于该 <code>Partition</code> 的 <code>HW</code>，即 <code>Follower</code> 追上 <code>Leader</code> 后，就可以重新加入 <code>ISR</code> 了。</p><h4 id="4-幂等性"><a href="#4-幂等性" class="headerlink" title="4. 幂等性"></a>4. 幂等性</h4><p><code>Producer</code> 不论向 <code>Server</code> 发送多少重复数据，<code>Server</code> 端都只会持久化一条，<code>Producer</code> 的参数中 <code>enable.idompotence</code> 设置为 <code>true</code> 即可。</p><p>开启幂等性的 <code>Producer</code> 在初始化时会被分配一个 <code>PID</code>，发往同一 <code>Partition</code> 的消息会附带 <code>Sequence Number</code>，而 <code>Broker</code> 端会对 <code>&lt;PID,Partition,SeqNumber&gt;</code> 做缓存，当具有相同主键的消息提交时，<code>Broker</code> 只会持久化一条。  但是 <code>PID</code> 重启后就会变化，同时不同的 <code>Partition</code> 也具有不同主键，所以幂等性无法保证跨分区会话的 <code>Exactly Once</code>。</p><h3 id="四、Broker"><a href="#四、Broker" class="headerlink" title="四、Broker"></a>四、Broker</h3><h4 id="1-IO多路复用"><a href="#1-IO多路复用" class="headerlink" title="1. IO多路复用"></a>1. IO多路复用</h4><p><code>Kafka</code> 采用 <code>Reactor</code> 网络通信模型实现复用以提高效率。</p><p><code>Acceptor</code>线程负责监听新的连接，<code>Processor</code>线程都有自己的 <code>selector</code>，负责从 <code>Socket</code> 中读写数据。<code>KafkaRequestHandler</code>业务处理线程进行业务处理，然后生成 <code>Response</code>，再交由给 <code>Processor</code> 线程。  </p><h4 id="2-磁盘顺序写"><a href="#2-磁盘顺序写" class="headerlink" title="2. 磁盘顺序写"></a>2. 磁盘顺序写</h4><p><code>Kafka</code> 本质上就是一个队列，是先进先出的，而且消息一旦生产了就不可变，这种有序性和不可变性使得 <code>Kafka</code> 完全可以「<strong>顺序写</strong>」日志文件。</p><p>对于普通的机械磁盘，如果是随机写入性能确实极差，但如果是顺序写入，则大大节省磁盘寻道和盘片旋转的时间，因此性能提升了 <code>3</code> 个数量级。</p><h4 id="3-Page-Cache"><a href="#3-Page-Cache" class="headerlink" title="3. Page Cache"></a>3. Page Cache</h4><p>在读写磁盘日志文件时，利用了操作系统本身的缓存技术，其实操作的都是内存，然后由操作系统决定什么时候将 <code>Page Cache</code> 里的数据真正刷入磁盘，类似于 <code>MySQL</code> 中的 <code>Change Buffer</code>。</p><h4 id="4-分区分段"><a href="#4-分区分段" class="headerlink" title="4. 分区分段"></a>4. 分区分段</h4><p>当面对海量消息时，单机的存储容量和读写性能有限，对数据进行分区存储，可以更好的利用不同机器的读写能力，应对海量数据的存储。</p><p><code>Kafka</code> 通过水平拆分方案，对数据进行拆分，拆分后的数据子集叫做 <code>Partition</code>，各个分区的数据合集即全量数据。每个 <code>Partition</code> 又被分成了多个 <code>Segment</code>，引入 <code>Segment</code> 可以防止 <code>Partition</code> 过大m，同时做历史消息删除时，常见的操作时需要将文件前面的内容删除，这有悖顺序写的设计。而 <code>Segment</code> 的引入，只需将旧的 <code>Segment</code> 文件删除即可，保证了每个<code>Segment</code> 的顺序写。</p><h3 id="五、生产者"><a href="#五、生产者" class="headerlink" title="五、生产者"></a>五、生产者</h3><h4 id="1-批量发送"><a href="#1-批量发送" class="headerlink" title="1. 批量发送"></a>1. 批量发送</h4><p><code>Kafka</code> 采用了批量发送消息的方式，通过将多条消息按照分区进行分组，然后每次发送一个消息集合，从而大大减少了网络传输的 <code>overhead</code>。</p><h4 id="2-消息压缩"><a href="#2-消息压缩" class="headerlink" title="2. 消息压缩"></a>2. 消息压缩</h4><p>消息压缩的目的是为了进一步减少网络传输带宽，但其不仅仅减少了网络 <code>IO</code>，它还大大降低了磁盘 <code>IO</code>。因为批量消息在持久化到 <code>Broker</code> 中的磁盘时保持的仍是压缩状态，最终是在 <code>Consumer</code> 端做了解压缩操作。</p><h4 id="3-高效序列化"><a href="#3-高效序列化" class="headerlink" title="3. 高效序列化"></a>3. 高效序列化</h4><p>只需要提供相应的序列化和反序列化器，用户可以根据实际情况选用快速且紧凑的序列化方式来减少实际的网络传输量以及磁盘存储量，进一步提高吞吐量。</p><h4 id="4-内存池复用"><a href="#4-内存池复用" class="headerlink" title="4. 内存池复用"></a>4. 内存池复用</h4><p><code>Producer</code> 一上来就会占用一个固定大小的内存块，比如 <code>64MB</code>，然后将 <code>64 MB</code> 划分成 <code>M</code> 个小内存块(比如一个小内存块大小是 <code>16KB</code>)。</p><p>当需要创建一个新的 <code>Batch</code> 时，直接从内存池中取出一个 <code>16 KB</code> 的内存块即可，然后往里面不断写入消息，但最大写入量就是 <code>16 KB</code>，接着将 <code>Batch</code> 发送给 <code>Broker</code> ，此时该内存块就可以还回到缓冲池中继续复用了，根本不涉及垃圾回收。  </p><h3 id="六、消费者"><a href="#六、消费者" class="headerlink" title="六、消费者"></a>六、消费者</h3><h4 id="1-稀疏索引"><a href="#1-稀疏索引" class="headerlink" title="1. 稀疏索引"></a>1. 稀疏索引</h4><p><code>Kafka</code> 查询的场景主要是能按照 <code>offset</code> 或者 <code>timestamp</code> 查到消息即可。因此 <code>Kafka</code> 消息的 <code>offset</code> 设计成有序的，将消息划分成若干个 <code>block</code>，而稀疏索引记录每个 <code>block</code> 第一条消息的 <code>offset</code>，查找的时候便可以便捷的使用二分查找高效定位。</p><p>稀疏索引不会为 <strong>每个搜索关键字创建索引记录</strong>，此处的索引记录包含搜索键和指向磁盘上数据的实际指针，搜索记录时首先按索引记录进行操作，然后到达数据的实际位置再进行顺序搜索，直到找到所需的数据为止。<code>B+</code> 树随着记录插入需要频繁的页分裂效率较低，而 <code>Hash</code> 索引的常驻内存，若高达几百万的消息写入，会将内存撑爆。</p><h4 id="2-零拷贝"><a href="#2-零拷贝" class="headerlink" title="2. 零拷贝"></a>2. 零拷贝</h4><p>零拷贝是指数据直接从磁盘文件复制到网卡设备，而无需经过应用程序，减少了内核和用户模式之间的上下文切换，从而提高了消息消费效率。</p><h4 id="3-批量拉取"><a href="#3-批量拉取" class="headerlink" title="3. 批量拉取"></a>3. 批量拉取</h4><p>和生产者批量发送消息类似，消息者也是批量拉取消息的，每次拉取一个消息集合以降低了频次，从而大大减少了网络传输的 <code>overhead</code>。</p><h4 id="4-MMAP"><a href="#4-MMAP" class="headerlink" title="4. MMAP"></a>4. MMAP</h4><p><code>kafka</code> 在 <strong>索引文件的读写</strong> 中用到了 <code>MMAP(memory mapped files)</code>。</p><p><code>MMAP</code> 是一种内存映射文件的方法，即将一个文件或者其它对象映射到进程的地址空间，实现文件磁盘地址和进程虚拟地址空间中一段虚拟地址的一一对映关系。实现这样的映射关系后，进程就可以采用指针的方式读写操作这一段内存，而系统会自动回 <strong>写脏页面</strong> 到对应的文件磁盘上，即完成了对文件的操作而不必再调用read,write等系统调用函数。  </p><p><code>Kafka</code> 的 <code>log</code> 文件为什么不使用 <code>MMAP</code>？<code>MMAP</code> 有多少字节可以映射到内存中与地址空间有关，<code>32</code> 位的体系结构只能处理 <code>4GB</code> 甚至更小的文件。<code>Kafka</code> 日志通常足够大，可能一次只能映射部分，因此读取它们将变得非常复杂。然而，索引文件是稀疏的，它们相对较小，将它们映射到内存中可以加快查找过程，这是内存映射文件提供的主要好处。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、基本结构&quot;&gt;&lt;a href=&quot;#一、基本结构&quot; class=&quot;headerlink&quot; title=&quot;一、基本结构&quot;&gt;&lt;/a&gt;一、基本结构&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/album/loading.gif&quot; data-original=&quot;/album/ar</summary>
      
    
    
    
    <category term="大数据" scheme="https://great-jin.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Kafka" scheme="https://great-jin.github.io/tags/Kafka/"/>
    
  </entry>
  
</feed>

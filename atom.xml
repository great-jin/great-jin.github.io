<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>布袋青年</title>
  
  <subtitle>布袋青年</subtitle>
  <link href="https://great-jin.github.io/atom.xml" rel="self"/>
  
  <link href="https://great-jin.github.io/"/>
  <updated>2024-06-05T14:13:42.110Z</updated>
  <id>https://great-jin.github.io/</id>
  
  <author>
    <name>烽火戏诸诸诸侯</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Windows开发环境清单</title>
    <link href="https://great-jin.github.io/windows/environment/"/>
    <id>https://great-jin.github.io/windows/environment/</id>
    <published>2024-06-04T16:00:00.000Z</published>
    <updated>2024-06-05T14:13:42.110Z</updated>
    
    <content type="html"><![CDATA[<p>熟话说的好：工欲善其事，必先利其器。因此，对于程序员而言拥有趁手的开发工具尤为重要，本文将分享个人日常开发中所涉及的软件及插件工具。</p><h3 id="一、系统环境"><a href="#一、系统环境" class="headerlink" title="一、系统环境"></a>一、系统环境</h3><h4 id="1-JDK"><a href="#1-JDK" class="headerlink" title="1. JDK"></a>1. JDK</h4><p><code>Java</code> 环境安装，<a href="https://www.oracle.com/java/technologies/downloads/">官网直达</a>。</p><h4 id="2-Node"><a href="#2-Node" class="headerlink" title="2. Node"></a>2. Node</h4><p><code>Node.js</code> 工具，<a href="https://nodejs.org/en/download/package-manager/current">官网直达</a>。</p><h4 id="3-Git"><a href="#3-Git" class="headerlink" title="3. Git"></a>3. Git</h4><p><code>Git</code> 版本控制工具，<a href="https://www.git-scm.com/downloads">官网直达</a>。</p><h4 id="4-TortoiseGit"><a href="#4-TortoiseGit" class="headerlink" title="4. TortoiseGit"></a>4. TortoiseGit</h4><p><code>TortoiseGit</code> 为 <code>Git</code> 提供了可视化操作页面，实现更便捷的管理，<a href="https://tortoisegit.org/download/">官网直达</a>。</p><h4 id="5-Maven"><a href="#5-Maven" class="headerlink" title="5. Maven"></a>5. Maven</h4><p><code>Maven</code> 提供了对 <code>Java</code> 依赖的模块化管理，<a href="https://archive.apache.org/dist/maven/maven-3/">官网直达</a>。</p><h3 id="二、编程工具"><a href="#二、编程工具" class="headerlink" title="二、编程工具"></a>二、编程工具</h3><h4 id="1-IDEA"><a href="#1-IDEA" class="headerlink" title="1. IDEA"></a>1. IDEA</h4><p><code>IDEA</code> 应该无需过多介绍了，<a href="https://www.jetbrains.com/idea/download/">官网直达</a>。</p><h4 id="2-VS-Code"><a href="#2-VS-Code" class="headerlink" title="2. VS Code"></a>2. VS Code</h4><p><code>Visual Studio Code</code> 是微软旗下开源的 <code>IDE</code>，支持多类型文件编辑量大管饱，<a href="https://code.visualstudio.com/download">官网直达</a>。</p><h4 id="3-Postman"><a href="#3-Postman" class="headerlink" title="3. Postman"></a>3. Postman</h4><p><code>Postman</code> 是一款高效的 <code>API</code> 测试软件，<a href="https://www.postman.com/downloads/">官网直达</a>。</p><h4 id="4-JD-GUI"><a href="#4-JD-GUI" class="headerlink" title="4. JD-GUI"></a>4. JD-GUI</h4><p><code>JD-GUI</code> 可查看 <code>Java</code> 编译后的 <code>Jar</code> 文件内容，<a href="https://github.com/java-decompiler/jd-gui/releases">官网直达</a>。</p><h4 id="5-JMeter"><a href="#5-JMeter" class="headerlink" title="5. JMeter"></a>5. JMeter</h4><p><code>JMeter</code> 是 <code>Apache</code> 旗下的一款接口压测工具，<a href="https://jmeter.apache.org/download_jmeter.cgi">官网直达</a>。</p><h4 id="6-Obsidian"><a href="#6-Obsidian" class="headerlink" title="6. Obsidian"></a>6. Obsidian</h4><p><code>Obsidian</code> 是一款 <code>Markdown</code> 笔记管理应用，可搭配 <code>GitHub</code> 实现云备份，<a href="https://obsidian.md/download">官网直达</a>。</p><h3 id="三、数据库工具"><a href="#三、数据库工具" class="headerlink" title="三、数据库工具"></a>三、数据库工具</h3><h4 id="1-DBeaver"><a href="#1-DBeaver" class="headerlink" title="1. DBeaver"></a>1. DBeaver</h4><p><code>DBeaver</code> 是一款开源的数据库管理工具，支持海量的数据如 <code>MySQL</code>、<code>Oracle</code> 与 <code>Postgresql</code> 等数据库。应用提供了社区免费版及旗舰版，旗舰版中新增了 <code>Redis</code> 与 <code>MongoDB</code> 的支持，<a href="https://dbeaver.io/">官网直达</a>。</p><h4 id="2-PrettyZoo"><a href="#2-PrettyZoo" class="headerlink" title="2. PrettyZoo"></a>2. PrettyZoo</h4><p><code>PrettyZoo</code> 是一款开源的 <code>Zookeeper</code> 连接管理工具，<a href="https://github.com/vran-dev/PrettyZoo/releases">官网直达</a>。</p><h4 id="3-Offset-Explorer"><a href="#3-Offset-Explorer" class="headerlink" title="3. Offset Explorer"></a>3. Offset Explorer</h4><p><code>Offset Explorer</code> 是针对于 <code>Kafka</code> 的连接管理工具，<a href="https://kafkatool.com/download.html">官网直达</a>。</p><h4 id="4-Redis-Manager"><a href="#4-Redis-Manager" class="headerlink" title="4. Redis Manager"></a>4. Redis Manager</h4><p><code>Another Redis Desktop Manager</code> 是针对 <code>Redis</code> 的连接管理工具，<a href="https://github.com/qishibo/AnotherRedisDesktopManager/releases">官网直达</a>。</p><h4 id="5-Elastic-View"><a href="#5-Elastic-View" class="headerlink" title="5. Elastic View"></a>5. Elastic View</h4><p><code>Elastic View</code> 是针对 <code>Elastic Search</code> 的开源连接管理工具，注意其为 <code>Web</code> 服务不提供安装程序而需要自行部署，<a href="https://github.com/1340691923/ElasticView">官网直达</a>。</p><h3 id="四、远程工具"><a href="#四、远程工具" class="headerlink" title="四、远程工具"></a>四、远程工具</h3><h4 id="1-1Remote"><a href="#1-1Remote" class="headerlink" title="1. 1Remote"></a>1. 1Remote</h4><p><code>1Remote</code> 是一款开源的连接客户端，支持连接 <code>FTP</code>、<code>SSH</code> 等等，<a href="https://github.com/1Remote/1Remote/releases">官网直达</a>。</p><h4 id="2-Windterm"><a href="#2-Windterm" class="headerlink" title="2. Windterm"></a>2. Windterm</h4><p><code>Windterm</code> 是基于 <code>C</code> 开发的开源 <code>SSH</code> 连接工具，小巧但却十分高效，<a href="https://github.com/kingToolbox/WindTerm/releases">官网直达</a>。</p><h3 id="五、便捷工具"><a href="#五、便捷工具" class="headerlink" title="五、便捷工具"></a>五、便捷工具</h3><h4 id="1-uTools"><a href="#1-uTools" class="headerlink" title="1. uTools"></a>1. uTools</h4><p><code>uTools</code> 是一款高效的工具箱，丰富的插件生态能覆盖绝多数日常场景，<a href="https://www.u.tools/download/">官网直达</a>。</p><h4 id="2-Nexus"><a href="#2-Nexus" class="headerlink" title="2. Nexus"></a>2. Nexus</h4><p><code>Nexus</code> 是一款 <code>Windows</code> 桌面美化工具，提供了免费版以及旗舰版，<a href="https://www.winstep.net/nexus.asp">官网直达</a>。</p><h4 id="3-Wiztree"><a href="#3-Wiztree" class="headerlink" title="3. Wiztree"></a>3. Wiztree</h4><p><code>Wiztree</code> 是一款高效的 <code>Windows</code> 文件管理工具，能在秒级实现硬盘的全盘文件扫描，<a href="https://www.diskanalyzer.com/download">官网直达</a>。</p><h4 id="4-Snipaste"><a href="#4-Snipaste" class="headerlink" title="4. Snipaste"></a>4. Snipaste</h4><p><code>Snipaste</code> 是一款便捷的截图工具，提供截图固定等丰富的操作，<a href="https://zh.snipaste.com/">官网直达</a>。</p><h4 id="5-图吧工具箱"><a href="#5-图吧工具箱" class="headerlink" title="5. 图吧工具箱"></a>5. 图吧工具箱</h4><p>装机佬无人不知无人不晓，集成了一系列硬件管理监控工具，<a href="https://www.tbtool.cn/">官网直达</a>。</p><h4 id="6-TrafficMonitor"><a href="#6-TrafficMonitor" class="headerlink" title="6. TrafficMonitor"></a>6. TrafficMonitor</h4><p><code>TrafficMonitor</code> 是一款开源的 <code>Windows</code> 流量监控，同时提供了 <code>CPU</code> 与内存等占用监控能力，<a href="https://github.com/zhongyang219/TrafficMonitor/releases">官网直达</a>。</p><h4 id="7-TranslucentTB"><a href="#7-TranslucentTB" class="headerlink" title="7. TranslucentTB"></a>7. TranslucentTB</h4><p><code>TranslucentTB</code> 能够透明化 <code>Windows</code> 下的任务栏，<a href="https://github.com/TranslucentTB/TranslucentTB/releases">官网直达</a>。</p><h4 id="8-Nilesoft-Shell"><a href="#8-Nilesoft-Shell" class="headerlink" title="8. Nilesoft Shell"></a>8. Nilesoft Shell</h4><p><code>Nilesoft Shell</code> 能够增强 <code>Windows</code> 系统鼠标右击能力，提供更多的快捷功能，<a href="https://nilesoft.org/download">官网直达</a>。</p><h3 id="六、浏览器插件"><a href="#六、浏览器插件" class="headerlink" title="六、浏览器插件"></a>六、浏览器插件</h3><h4 id="1-篡改猴"><a href="#1-篡改猴" class="headerlink" title="1. 篡改猴"></a>1. 篡改猴</h4><p>大名鼎鼎的油猴，现中文已改名为篡改猴，<a href="https://chromewebstore.google.com/detail/%E7%AF%A1%E6%94%B9%E7%8C%B4/dhdgffkkebhmkfjojejmpbldmpobfkfo?hl=zh-CN">下载地址</a>，这里分享一个油猴插件社区：<a href="https://greasyfork.org/zh-CN">greasyfork</a>。</p><h4 id="2-CrxMouse"><a href="#2-CrxMouse" class="headerlink" title="2. CrxMouse"></a>2. CrxMouse</h4><p><code>CrxMouse</code> 为浏览器提供了一系列手势，同时也支持自定义手势，<a href="https://chromewebstore.google.com/detail/crxmouse-chrome-%E6%89%8B%E5%8A%BF/jlgkpaicikihijadgifklkbpdajbkhjo?hl=zh-CN">下载地址</a>。</p><h4 id="3-Dark-Reader"><a href="#3-Dark-Reader" class="headerlink" title="3. Dark Reader"></a>3. Dark Reader</h4><p><code>Dark Reader</code> 可一键为浏览器页面提供暗夜模式，支持对于单个 <code>Tab</code> 的独立管控，<a href="https://chromewebstore.google.com/detail/dark-reader/eimadpbcbfnmbkopoojfekhnkhdbieeh?hl=zh-CN">下载地址</a>。</p><h4 id="4-Deepl翻译"><a href="#4-Deepl翻译" class="headerlink" title="4. Deepl翻译"></a>4. Deepl翻译</h4><p><code>Deepl</code> 翻译是一筐及其编辑的翻译插件，选中需要翻译的内容即会实现翻译按钮，<a href="https://chromewebstore.google.com/detail/deepl%E7%BF%BB%E8%AF%91/cofdbpoegempjloogbagkncekinflcnj?hl=zh-CN">下载地址</a>。</p><h4 id="5-FeHelper"><a href="#5-FeHelper" class="headerlink" title="5. FeHelper"></a>5. FeHelper</h4><p><code>FeHelper</code> 是一款数据内容格式化插件，能将页面接口返回的杂乱数据进行格式化，<a href="https://chromewebstore.google.com/detail/fehelper%E5%89%8D%E7%AB%AF%E5%8A%A9%E6%89%8B/pkgccpejnmalmdinmhkkfafefagiiiad?hl=zh-CN">下载地址</a>。</p><h4 id="6-Adblock"><a href="#6-Adblock" class="headerlink" title="6. Adblock"></a>6. Adblock</h4><p>大名鼎鼎的广告屏蔽插件，能够屏蔽页面绝多数广告内容，<a href="https://chromewebstore.google.com/detail/adblock-plus-%E5%85%8D%E8%B4%B9%E7%9A%84%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AA%E5%99%A8/cfhdojbkjhnklbpkdaibdccddilifddb?hl=zh-CN">下载地址</a>。</p><h4 id="7-书签侧边栏"><a href="#7-书签侧边栏" class="headerlink" title="7. 书签侧边栏"></a>7. 书签侧边栏</h4><p>书签侧边栏能够在浏览器的两侧添加书签入口，当鼠标悬浮时即可显示，<a href="https://chromewebstore.google.com/detail/%E4%B9%A6%E7%AD%BE%E4%BE%A7%E8%BE%B9%E6%A0%8F/jdbnofccmhefkmjbkkdkfiicjkgofkdh?hl=zh-CN">下载地址</a>。</p><h3 id="七、IDEA插件"><a href="#七、IDEA插件" class="headerlink" title="七、IDEA插件"></a>七、IDEA插件</h3><h4 id="1-Vue-js"><a href="#1-Vue-js" class="headerlink" title="1. Vue.js"></a>1. Vue.js</h4><p><code>Vue.js</code> 插件提供了对 <code>Vue</code> 文件以及语法的支持，在社区版 <code>IDEA</code> 中需要自行手动安装。</p><h4 id="2-MyBatisX"><a href="#2-MyBatisX" class="headerlink" title="2. MyBatisX"></a>2. MyBatisX</h4><p><code>MyBatisX</code> 能够实现 <code>MyBatis</code> 中 <code>Mapper</code> 类与 <code>XML</code> 文件的链接跳转。</p><h4 id="3-Mavane-Helper"><a href="#3-Mavane-Helper" class="headerlink" title="3. Mavane Helper"></a>3. Mavane Helper</h4><p><code>Mavane Helper</code> 是一款极其高效的 <code>Maven</code> 项目管理插件，提供了强大的依赖管理功能。</p><h4 id="4-TestMe"><a href="#4-TestMe" class="headerlink" title="4. TestMe"></a>4. TestMe</h4><p><code>TestMe</code> 能为选中的类或方法快速生成测试用例。</p><h4 id="5-JavaDoc"><a href="#5-JavaDoc" class="headerlink" title="5. JavaDoc"></a>5. JavaDoc</h4><p><code>JavaDoc</code> 是一款能够根据方法名妓入参等信息快速生成注释的插件。</p><h4 id="6-EasyCode"><a href="#6-EasyCode" class="headerlink" title="6. EasyCode"></a>6. EasyCode</h4><p><code>EasyCode</code> 能够通过连接数据库为表快速生成工程代码，支持 <code>MyBatis</code> 与 <code>MyBatis Plus</code> 等等。</p><p>具体的使用教程可参考之前的文章，<a href="https://great-jin.github.io/java/web/generator/">后端工程生成教程</a>。</p><h4 id="7-CodeGlance"><a href="#7-CodeGlance" class="headerlink" title="7. CodeGlance"></a>7. CodeGlance</h4><p><code>CodeGlance</code> 能在屏幕右侧的滚动条生成类似 <code>VS Code</code> 中的小地图。</p><h4 id="8-Rainbow-Brackets"><a href="#8-Rainbow-Brackets" class="headerlink" title="8. Rainbow Brackets"></a>8. Rainbow Brackets</h4><p><code>Rainbow Brackets</code> 能够为代码中的想配对的括号标记为相同的颜色。</p><h4 id="9-Java-Bean-to-Json"><a href="#9-Java-Bean-to-Json" class="headerlink" title="9. Java Bean to Json"></a>9. Java Bean to Json</h4><p><code>Java Bean to Json</code> 能够将 <code>Java</code> 实体类转为 <code>Json</code> 格式数据。</p><h4 id="10-Ikun-Progress"><a href="#10-Ikun-Progress" class="headerlink" title="10. Ikun Progress"></a>10. Ikun Progress</h4><p><code>Ikun Progress</code> 能将 <code>IDEA</code> 中涉及加载进度条的动画替换为哥哥的篮球动画（逃）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;熟话说的好：工欲善其事，必先利其器。因此，对于程序员而言拥有趁手的开发工具尤为重要，本文将分享个人日常开发中所涉及的软件及插件工具。&lt;/p&gt;
&lt;h3 id=&quot;一、系统环境&quot;&gt;&lt;a href=&quot;#一、系统环境&quot; class=&quot;headerlink&quot; title=&quot;一、系统环境</summary>
      
    
    
    
    <category term="Windows" scheme="https://great-jin.github.io/categories/Windows/"/>
    
    
    <category term="Windows" scheme="https://great-jin.github.io/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>Linux Shell 入门教程</title>
    <link href="https://great-jin.github.io/linux/shell/"/>
    <id>https://great-jin.github.io/linux/shell/</id>
    <published>2024-05-25T16:00:00.000Z</published>
    <updated>2024-05-26T01:31:42.130Z</updated>
    
    <content type="html"><![CDATA[<p><code>Linux Shell</code> 是 <code>Linux</code> 中提供的一种强大的脚本工具，通过编写脚本可实现一系列动作，本文将介绍 <code>Shell</code> 脚本的基本语法以及应用。</p><h3 id="一、基础命令"><a href="#一、基础命令" class="headerlink" title="一、基础命令"></a>一、基础命令</h3><h4 id="1-内容格式"><a href="#1-内容格式" class="headerlink" title="1. 内容格式"></a>1. 内容格式</h4><p><code>Shell</code> 脚本的定义相对简单，新建 <code>.sh</code> 文件并在文件中首行添加 <code>#!/bin/bash</code> 即可，文件中后续的内容一行即为一条命令，当执行文件时将会自顶向下开始执行命令。</p><pre class="line-numbers language-sh"><code class="language-sh">#!/bin/bashcontent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当完成脚本文件的定义之后，通过还需要为文件授权为可执行文件，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建脚本文件</span><span class="token function">touch</span> <span class="token operator">&lt;</span>filename<span class="token operator">></span>.sh<span class="token comment" spellcheck="true"># 授权文件为可执行</span><span class="token function">chmod</span> +x <span class="token operator">&lt;</span>filename<span class="token operator">></span>.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-打印输出"><a href="#2-打印输出" class="headerlink" title="2. 打印输出"></a>2. 打印输出</h4><p>在 <code>Linux</code> 中通过 <code>echo</code> 命令可执行内容的打印输出，默认其将直接输出到控制台，可以通过 <code>&gt;</code> 或 <code>&gt;&gt;</code> 将其保存至指定文件中。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 输出到控制台</span><span class="token keyword">echo</span> <span class="token string">"Hello World!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在使用 <code>&gt;</code> 或 <code>&gt;&gt;</code> 将其保存到文件时需要注意，前者将会覆盖文件中原有的数据内容，后 <code>&gt;&gt;</code> 则是继续将内容添加到文件末端。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 输出到文件，覆盖原内容</span><span class="token keyword">echo</span> <span class="token string">"Hello World!"</span> <span class="token operator">></span> info.log<span class="token comment" spellcheck="true"># 输出到文件，追加到文件末端</span><span class="token keyword">echo</span> <span class="token string">"Hello World!"</span> <span class="token operator">>></span> info.log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-变量管理"><a href="#3-变量管理" class="headerlink" title="3. 变量管理"></a>3. 变量管理</h4><p><code>Shell</code> 中存在两种方式的变量定义获取方式，下面分开进行介绍。</p><h5 id="1"><a href="#1" class="headerlink" title="(1) ${}"></a>(1) ${}</h5><p>通过 <code>$&#123;&#125;</code> 即可读取已定义的变量信息，如下示例即通过 <code>$&#123;msg&#125;</code> 读取已经定义的 <code>msg</code> 变量。</p><pre class="line-numbers language-bash"><code class="language-bash">msg <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token keyword">echo</span> <span class="token variable">${msg}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同时也可以直接通过 <code>$</code> 读取变量，上述的读取也可替换为 <code>$msg</code> 但此方式不便于规范变量名从而造成歧义。</p><p>例如下述例子中，变量 <code>$msg</code> 输出即存在多种可能结果，既有可能为 <code>Hellog</code> 也有可能为 <code>World</code>。</p><pre class="line-numbers language-bash"><code class="language-bash">ms <span class="token operator">=</span> <span class="token string">"Hello"</span>msg <span class="token operator">=</span> <span class="token string">"World"</span><span class="token keyword">echo</span> <span class="token variable">$msg</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="2"><a href="#2" class="headerlink" title="(2) $()"></a>(2) $()</h5><p>通过 <code>$()</code> 获取命令执行的结果，如下述示例通过 <code>$(pwd)</code> 读取 <code>pwd</code> 命令的执行结果。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">echo</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">pwd</span><span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-执行参数"><a href="#4-执行参数" class="headerlink" title="4. 执行参数"></a>4. 执行参数</h4><p>在 <code>Shell</code> 中通过 <code>$数字</code> 接收脚本执行时的参数。</p><p>例如在下述示例中 <code>$0</code> 即为 <code>test.sh</code>，而 <code>$1</code> 为 <code>params</code>。</p><pre class="line-numbers language-bash"><code class="language-bash">sh test.sh params<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="二、语法介绍"><a href="#二、语法介绍" class="headerlink" title="二、语法介绍"></a>二、语法介绍</h3><h4 id="1-IF条件"><a href="#1-IF条件" class="headerlink" title="1. IF条件"></a>1. IF条件</h4><p>在 <code>Shell</code> 脚本中，条件判断 <code>IF</code> 的基本语法格式如下，其中通过 <code>fi</code> 标记结束，需要注意的是 <code>if</code> 和 <code>[</code> 以及条件 <code>command</code> 执行相隔的空格不能缺省。</p><pre class="line-numbers language-sh"><code class="language-sh">if [ command ]; then    march_command_1else    march_command_2fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当存在多分支时，其语法格式如下，通过 <code>elif</code> 判断多分支。</p><pre class="line-numbers language-sh"><code class="language-sh">if [ command ]; then    march_command_1elif [ command ]; then    march_command_2else    march_command_3fi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Switch"><a href="#2-Switch" class="headerlink" title="2. Switch"></a>2. Switch</h4><p><code>Shell</code> 脚本中的 <code>switch case</code> 语句规则如下：</p><blockquote><ul><li><code>case</code> 开头，以 <code>esac</code> 结尾；</li><li><code>;;</code> 作用等价于 <code>break</code>;</li><li><code>*</code> 等价于 <code>default</code>;</li><li><code>exit</code> 等价于 <code>return</code>;</li></ul></blockquote><p>下面通过一个具体的示例讲解：</p><pre class="line-numbers language-sh"><code class="language-sh">#!/bin/bashmethod_1() {    echo "Hello"}method_2() {    echo "World"}case "$1" in    p1)        method_1        ;;    p2)        method_2        ;;    *)        echo "default branch"        exit 1    ;;esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了更好的对比，将上述 <code>Shell</code> 逻辑转为 <code>Java</code> 代码：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span>String params<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">swtich</span> <span class="token punctuation">(</span>params<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">"p1"</span><span class="token operator">:</span>            <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">"p2"</span><span class="token operator">:</span>            <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"default branch"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;Linux Shell&lt;/code&gt; 是 &lt;code&gt;Linux&lt;/code&gt; 中提供的一种强大的脚本工具，通过编写脚本可实现一系列动作，本文将介绍 &lt;code&gt;Shell&lt;/code&gt; 脚本的基本语法以及应用。&lt;/p&gt;
&lt;h3 id=&quot;一、基础命令&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="服务运维" scheme="https://great-jin.github.io/categories/%E6%9C%8D%E5%8A%A1%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Linux" scheme="https://great-jin.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>开发环境搭建教程</title>
    <link href="https://great-jin.github.io/install/develop/"/>
    <id>https://great-jin.github.io/install/develop/</id>
    <published>2024-05-17T16:00:00.000Z</published>
    <updated>2024-06-01T10:30:26.362Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Gitlab"><a href="#一、Gitlab" class="headerlink" title="一、Gitlab"></a>一、Gitlab</h3><p><code>Gitlab</code> 是一款广受好评的 <code>GIT</code> 项目管理平台，其中 <code>Gitlab-CE</code> 为免费版本，下面介绍 <code>Docker</code> 方式部署。</p><h4 id="1-目录创建"><a href="#1-目录创建" class="headerlink" title="1. 目录创建"></a>1. 目录创建</h4><p>老规矩第一步还是先创建数据目录用于文件映射。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /usr/local/dockerdata/gitlab/config<span class="token function">mkdir</span> -p /usr/local/dockerdata/gitlab/data<span class="token function">mkdir</span> -p /usr/local/dockerdata/gitlab/logs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-服务启动"><a href="#2-服务启动" class="headerlink" title="2. 服务启动"></a>2. 服务启动</h4><p>完成目录创建后通过到下述命令启动 <code>Gitlab</code> 服务，其中端口映射服务可根据自身情况调整。</p><pre class="line-numbers language-bash"><code class="language-bash">docker run -d \--name gitlab \--restart always \--privileged<span class="token operator">=</span>true \-p 8080:80 \-p 8081:443 \-p 8082:22 \-v /etc/localtime:/etc/localtime:ro \-v /usr/local/dockerdata/gitlab/config:/etc/gitlab \-v /usr/local/dockerdata/gitlab/logs:/var/log/gitlab \-v /usr/local/dockerdata/gitlab/data:/var/opt/gitlab \gitlab/gitlab-ce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-配置修改"><a href="#3-配置修改" class="headerlink" title="3. 配置修改"></a>3. 配置修改</h4><p>启动容器后进入会 gitlab 映射的文件目录中编辑配置信息。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">vi</span> /usr/local/dockerdata/gitlab/config/gitlab.rb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改文件中的下述内容，将 <code>192.168.0.20</code> 替换为你的服务器 <code>IP</code>，保存后通过 <code>docker restart gitlab</code> 重启服务使其生效。</p><pre class="line-numbers language-txt"><code class="language-txt">external_url 'http://192.168.0.20'gitlab_rails['gitlab_ssh_host'] = '192.168.0.20'# 配置 22 端口映射的值gitlab_rails['gitlab_shell_ssh_port'] = 8082gitlab_rails['time_zone'] = 'Asia/Shanghai'  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-端口修改"><a href="#4-端口修改" class="headerlink" title="4. 端口修改"></a>4. 端口修改</h4><p>完成上述步骤后进入 <code>gitlab</code> 容器内，配置服务对应的端口信息。</p><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it gitlab <span class="token function">bash</span><span class="token function">vi</span> /opt/gitlab/embedded/service/gitlab-rails/config/gitlab.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>修改配置文件的 <code>port</code> 值，将其改成之前启动容器时 <code>80</code> 端口映射的值，完成后在容器中通过 <code>gitlab-ctl restart</code> 重启服务。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">production</span><span class="token punctuation">:</span> <span class="token important">&amp;base</span>  <span class="token key atrule">gitlab</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 替换为 80 端口映射的值</span>   <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8080</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-用户账号"><a href="#5-用户账号" class="headerlink" title="5. 用户账号"></a>5. 用户账号</h4><p>完成上述配置之后即可浏览器访问 <code>ip:8080</code>，默认用户名为 <code>root</code>，密码通过下述命令查看：</p><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it <span class="token operator">&lt;</span>container_id<span class="token operator">></span> <span class="token function">grep</span> <span class="token string">'Password:'</span> /etc/gitlab/initial_root_password<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="二、Confluence"><a href="#二、Confluence" class="headerlink" title="二、Confluence"></a>二、Confluence</h3><p><code>Confluence</code> 是一款强大的知识库管理工具，在团队合作中发挥着重要作用。</p><h4 id="1-服务启动"><a href="#1-服务启动" class="headerlink" title="1. 服务启动"></a>1. 服务启动</h4><p>首先创建对应的目录用于映射数据实现持久化。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /usr/local/dockerdata/confluence<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>完成后通过下述命令启动服务：</p><pre class="line-numbers language-bash"><code class="language-bash">docker run -d --privileged<span class="token operator">=</span>true \-p 8090:8090 \-v /usr/local/dockerdata/confluence:/var/confluence \--name confluence-srv \-e TZ<span class="token operator">=</span><span class="token string">'Asia/Shanghai'</span> \haxqer/confluence:8.9.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-插件破译"><a href="#2-插件破译" class="headerlink" title="2. 插件破译"></a>2. 插件破译</h4><p>启动服务之后访问 <code>ip:8090</code> 页面，将下述 <code>&lt;you-server-id&gt;</code> 替换为页面对应的 <code>server-id</code> 并在服务上执行。</p><pre class="line-numbers language-bash"><code class="language-bash">docker <span class="token function">exec</span> confluence-srv java -jar /var/agent/atlassian-agent.jar \-d \-p conf \-m Hello@world.com \-n Hello@world.com \-o your-org \-s <span class="token operator">&lt;</span>you-server-id<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-数据连接"><a href="#3-数据连接" class="headerlink" title="3. 数据连接"></a>3. 数据连接</h4><p>需要注意 <code>confluence</code> 使用 <code>MySQL</code> 存储数据，但其对应的 <code>MySQL</code> 库有下述两个要求。</p><ul><li>字符集与排序规则需要为 <code>utf8mb4</code> 和 <code>utf8mb4_bin</code>。</li><li>数据库的事务隔离级别需要为 <code>READ_COMMITTED</code>。</li></ul><p>由于 <code>MySQL</code> 默认的事务隔离级别为 <code>REPEATABLE_READ</code>，因此我们需要进行修改，这边提供两种修改方式，第一种为修改配置文件，第二种为通过命令但重启 <code>MySQL</code> 后将会失效。</p><p>方式一在 <code>MySQL</code> 的配置文件中添加下述配置修改事务隔离级别，完成后重启服务即可。</p><pre class="line-numbers language-cnf"><code class="language-cnf">transaction-isolation = READ-COMMITTED<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方式二通过下述 <code>SQL</code> 修改全局的事务隔离级别，但在 <code>MySQL</code> 重启后将会失效。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SET</span> <span class="token keyword">GLOBAL</span> <span class="token keyword">TRANSACTION</span> <span class="token keyword">ISOLATION LEVEL</span> <span class="token keyword">READ</span> <span class="token keyword">COMMITTED</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、Gitlab&quot;&gt;&lt;a href=&quot;#一、Gitlab&quot; class=&quot;headerlink&quot; title=&quot;一、Gitlab&quot;&gt;&lt;/a&gt;一、Gitlab&lt;/h3&gt;&lt;p&gt;&lt;code&gt;Gitlab&lt;/code&gt; 是一款广受好评的 &lt;code&gt;GIT&lt;/code&gt; </summary>
      
    
    
    
    <category term="服务部署" scheme="https://great-jin.github.io/categories/%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2/"/>
    
    
    <category term="Linux" scheme="https://great-jin.github.io/tags/Linux/"/>
    
    <category term="Docker" scheme="https://great-jin.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Java消息队列机制详解</title>
    <link href="https://great-jin.github.io/java/advance/message/"/>
    <id>https://great-jin.github.io/java/advance/message/</id>
    <published>2024-04-29T16:00:00.000Z</published>
    <updated>2024-04-30T14:40:20.113Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h3><h4 id="1-消息队列"><a href="#1-消息队列" class="headerlink" title="1. 消息队列"></a>1. 消息队列</h4><p>在应用开发中，消息队列可谓无处不在，它作为消息的载体，承担着异步通信、流量削峰等作用。</p><p>以常见的服务响应为例，当存在大批量用户执行请求服务时，系统可能无法同时处理所有的请求，意味着请求将会陷入排队阻塞的情况，导致系统无法接受处理新的请求，从而引发系统的瘫痪。<br><img src="/album/loading.gif" data-original="/album/article/java/message/2.png"></p><p>而通过消息队列，即可巧妙的实现请求的异步处理，提高系统服务的可用性，同样为上述示例引入队列异步处理后其运行流程如下：<br><img src="/album/loading.gif" data-original="/album/article/java/message/3.png"></p><h4 id="2-事件模型"><a href="#2-事件模型" class="headerlink" title="2. 事件模型"></a>2. 事件模型</h4><p>对于消息队列中间件，在大数据领域 <code>Kafka</code> 是当之无愧的老大哥，通过分布式的机制更是进一步提高的服务的高可用。因此，在多服务系统的场景下，<code>Kafka</code> 往往都扮演着重要的角色。</p><p>但对于单体的服务而言，在许多场景下 <code>Kafka</code> 由于需要额外引入中间件，其很难发挥其最大的优势。针对此类场景，本地消息队列服务则能取到更高的回报率，本文也将围绕本地消息队列服务展开介绍。<br><img src="/album/loading.gif" data-original="/album/article/java/message/1.png"></p><h3 id="二、工具介绍"><a href="#二、工具介绍" class="headerlink" title="二、工具介绍"></a>二、工具介绍</h3><h4 id="1-依赖引入"><a href="#1-依赖引入" class="headerlink" title="1. 依赖引入"></a>1. 依赖引入</h4><p><code>Disruptor</code> 是一个高性能队列本地消息类库，能够实现类似 <code>Kafka</code> 的消息传递，而无需依赖外部中间件。</p><p>在 <code>Maven</code> 工程中引入以下依赖即可导入依赖信息。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.lmax<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>disruptor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意 <code>4.x</code> 版本需要 <code>JDK11</code> 及以上版本，因此要在 <code>pom.xml</code> 中加入下述配置指定版本。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.11.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-事件处理"><a href="#2-事件处理" class="headerlink" title="2. 事件处理"></a>2. 事件处理</h4><p><code>Disruptor</code> 模型结构中同样包含三个重要概念：事件 <code>(Event)</code>、事件处理器 <code>(EventHandler)</code> 与事件发送者 <code>(EventPublisher)</code>。其中，<code>Event</code> 用于封装消息内容，<code>EventHandler</code> 类似于事件消费者，<code>EventPublisher</code> 类似于生产者用于发送事件消息。</p><p>新建 <code>MessageEvent</code> 用于封装传输的事件消息，这里通过泛型类用于指定多种类型消息。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageEvent</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> T t<span class="token punctuation">;</span>    <span class="token keyword">public</span> T <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>t <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建 <code>MessageEventHandler</code> 用于处理事件消息，当发送者发送事件消息时，则会执行处理器的 <code>onEvent()</code> 方法。</p><p>在下述示例中，当接受到事件消息后，则将事件内容体输出到控制台。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageEventHandler</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">EventHandler</span><span class="token operator">&lt;</span>MessageEvent<span class="token operator">&lt;</span>T<span class="token operator">>></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onEvent</span><span class="token punctuation">(</span>MessageEvent event<span class="token punctuation">,</span> <span class="token keyword">long</span> sequence<span class="token punctuation">,</span> <span class="token keyword">boolean</span> endOfBatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Event receive: "</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-事件发送"><a href="#3-事件发送" class="headerlink" title="3. 事件发送"></a>3. 事件发送</h4><p>在 <code>Disruptor</code> 中由 <code>RingBuffer</code> 负责事件的传输，当绑定事件并启动后即可通过其获取 <code>RingBuffer</code> 对象，进而执行事件的发布动作。</p><p>下述为一个简单的事件发布示例，完整的介绍文档参考官网手册：<a href="https://lmax-exchange.github.io/disruptor/user-guide/index.html">Disruptor 使用手册</a>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> bufferSize <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>        DaemonThreadFactory factory <span class="token operator">=</span> DaemonThreadFactory<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>        Disruptor<span class="token operator">&lt;</span>MessageEvent<span class="token operator">&lt;</span>String<span class="token operator">>></span> disruptor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Disruptor</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>MessageEvent<span class="token operator">:</span><span class="token operator">:</span><span class="token keyword">new</span><span class="token punctuation">,</span> bufferSize<span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Set event handler</span>        disruptor<span class="token punctuation">.</span><span class="token function">handleEventsWith</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageEventHandler</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        disruptor<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// publish event</span>        RingBuffer<span class="token operator">&lt;</span>MessageEvent<span class="token operator">&lt;</span>String<span class="token operator">>></span> ringBuffer <span class="token operator">=</span> disruptor<span class="token punctuation">.</span><span class="token function">getRingBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ringBuffer<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> sequence<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            event<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// stop disruptor</span>        disruptor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、仿造实现"><a href="#三、仿造实现" class="headerlink" title="三、仿造实现"></a>三、仿造实现</h3><h4 id="1-功能剖析"><a href="#1-功能剖析" class="headerlink" title="1. 功能剖析"></a>1. 功能剖析</h4><p>了解了 <code>Disruptor</code> 的应用效果后，我们可以自己仿造一个简易的事件监听发布模型。</p><p>消息传输模型的核心在于两方面，事件的发布 <code>(Publish)</code> 和事件的监听 <code>(Handle)</code>。同时，为了实现消息的异步处理，在事件发布的具体实现中，需要通过线程池执行具体发布操作。</p><h4 id="2-事件监听"><a href="#2-事件监听" class="headerlink" title="2. 事件监听"></a>2. 事件监听</h4><p>新建 <code>Observer</code> 接口类用于定义消息的监听器，同理将其设计为泛型类，其中 <code>R</code> 为消息类型。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">onServer</span><span class="token punctuation">(</span>R t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>MessageObserver</code> 则为具体的消息处理实现，作用效果等价于上述的 <code>MessageEventHandler</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageObserver</span><span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>R<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onServer</span><span class="token punctuation">(</span>R t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Observer data: "</span> <span class="token operator">+</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-服务注册"><a href="#3-服务注册" class="headerlink" title="3. 服务注册"></a>3. 服务注册</h4><p>新建 <code>QueueListener</code> 接口用于处理监听器的绑定和消息发送事件，由于后续涉及到线程池的管理，因此这里同时继承于 <code>AutoCloseable</code> 接口。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">QueueListener</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token keyword">extends</span> <span class="token class-name">AutoCloseable</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">publish</span><span class="token punctuation">(</span>R r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建 <code>MessageQueueListener</code> 用于实现具体的监听器注册逻辑，通过 <code>List</code> 存储注册的监听器，需要注意初始化其通过 <code>Collections.synchronizedList()</code> 创建线程安全对象，防止多线程操作异常。</p><p>同时，通过 <code>ExecutorService</code> 线程池从而实现事件异步的发送处理，为了方便此时使用的线程池由 <code>ExecutorService</code> 初始化，实际应用时可替换为 <code>ThreadPoolExecutor</code> 实现更细粒话的控制。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageQueueListener</span><span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Observer</span><span class="token operator">&lt;</span>R<span class="token operator">></span><span class="token punctuation">,</span> R<span class="token operator">></span>        <span class="token keyword">implements</span> <span class="token class-name">QueueListener</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> ExecutorService executor<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> List<span class="token operator">&lt;</span>T<span class="token operator">></span> list<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MessageQueueListener</span><span class="token punctuation">(</span><span class="token keyword">int</span> poolSize<span class="token punctuation">)</span> <span class="token punctuation">{</span>        executor <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span>poolSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        list <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">remove</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> contains <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>contains<span class="token punctuation">)</span> <span class="token punctuation">{</span>            success <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> success<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">publish</span><span class="token punctuation">(</span>R r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Queue is empty, register first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>T t <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>            executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> t<span class="token punctuation">.</span><span class="token function">onServer</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            executor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-消息发布"><a href="#4-消息发布" class="headerlink" title="4. 消息发布"></a>4. 消息发布</h4><p>完成上述的定义之后即可测试事件的发布效果，具体的测试代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Observer<span class="token operator">&lt;</span>String<span class="token operator">></span> observer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageObserver</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Observer<span class="token operator">&lt;</span>String<span class="token operator">></span> observer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageObserver</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> poolSize <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>QueueListener<span class="token operator">&lt;</span>Observer<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">,</span> String<span class="token operator">></span> listener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageQueueListener</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>poolSize<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// register handler</span>            listener<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>observer1<span class="token punctuation">)</span><span class="token punctuation">;</span>            listener<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>observer2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// publish data</span>            listener<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// remove handler</span>            listener<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>observer2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// publish data</span>            listener<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、基本介绍&quot;&gt;&lt;a href=&quot;#一、基本介绍&quot; class=&quot;headerlink&quot; title=&quot;一、基本介绍&quot;&gt;&lt;/a&gt;一、基本介绍&lt;/h3&gt;&lt;h4 id=&quot;1-消息队列&quot;&gt;&lt;a href=&quot;#1-消息队列&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="JAVA进阶" scheme="https://great-jin.github.io/categories/JAVA%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Sharding Sphere教程</title>
    <link href="https://great-jin.github.io/db/sharding/"/>
    <id>https://great-jin.github.io/db/sharding/</id>
    <published>2024-04-25T16:00:00.000Z</published>
    <updated>2024-04-30T14:40:20.112Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、分库分表"><a href="#一、分库分表" class="headerlink" title="一、分库分表"></a>一、分库分表</h3><h4 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h4><p>随着业务的不断增加，应用程序所存储的数据也将随之增长，对于传统的关系型数据而言，当单表的数据达到一定量级之后增删改效率也会有一定程度的降低，分库分表的需求也就应运而生。</p><h4 id="2-垂直分表"><a href="#2-垂直分表" class="headerlink" title="2. 垂直分表"></a>2. 垂直分表</h4><p>对于分表而言存在两种方式，这里先介绍一下垂直分表的实现逻辑。</p><p>垂直分表即将一张宽表进行纵向拆分，将使用频次较低的数据外置通过外键实现关联，从而降低单个数据表的大小，进而提高 <code>SQL</code> 的执行效率。</p><p>假如存在如下一张 <code>user</code> 表，其表结构与数据内容如下：<br><img src="/album/loading.gif" data-original="/album/article/db/sharding/1.png"></p><p>通过纵向拆分，可以将低频字段如 <code>address</code> 外提至 <code>user_info</code> 表，将利用外键 <code>u_id</code> 实现与 <code>user</code> 表的关联，拆分后得到下述两张用户表。<br><img src="/album/loading.gif" data-original="/album/article/db/sharding/2.png"></p><h4 id="3-水平分表"><a href="#3-水平分表" class="headerlink" title="3. 水平分表"></a>3. 水平分表</h4><p>水平分表即将同样为将一张数据表拆分为多张数据表，但与垂直分表不同的是每张表的结构一致，通过特定的算法确定一条记录的归属。</p><p>最常见的分表策略即取模分表，即以主键或其它唯一标识字段为依据，通过该字段求模取余得到值确定记录的归属，对于非数值字段可执行哈希后再进行计算。</p><p>如将 <code>user</code> 表拆分为 <code>user_1</code> 与 <code>user_2</code> 两张表，即可通过 <code>id</code> 主键与 <code>2</code> 求模取余，得到的结果若为 <code>1</code> 则存入 <code>user_1</code>，否则存入 <code>user_2</code>，按照此逻辑拆分即可得到下述两张表：<br><img src="/album/loading.gif" data-original="/album/article/db/sharding/3.png"></p><h3 id="二、工程集成"><a href="#二、工程集成" class="headerlink" title="二、工程集成"></a>二、工程集成</h3><h4 id="1-依赖导入"><a href="#1-依赖导入" class="headerlink" title="1. 依赖导入"></a>1. 依赖导入</h4><p><code>Sharding Sphere</code> 是 <code>Apache</code> 基金会下的开源分库分表中间件，旨在提供便利的分表分表实现。</p><p>这里就不过阐述其背景而专注于具体实现，首先在 <code>Spring Boot</code> 工程中引入下述依赖。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shardingsphere<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sharding-jdbc-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shardingsphere<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shardingsphere-jdbc-core-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.31<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.yaml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>snakeyaml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.33<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-测试数据"><a href="#2-测试数据" class="headerlink" title="2. 测试数据"></a>2. 测试数据</h4><p>在开始之前需要先准备好测试数据库与表，新建两个数据库 <code>test_db1</code> 与 <code>test_db2</code>，并分别在两个库下创建下述两张表。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>user_info_1<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>id<span class="token punctuation">`</span>          <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>name<span class="token punctuation">`</span>        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gender<span class="token punctuation">`</span>      <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span>     <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>user_info_2<span class="token punctuation">`</span><span class="token punctuation">(</span>    <span class="token punctuation">`</span>id<span class="token punctuation">`</span>          <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>name<span class="token punctuation">`</span>        <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>gender<span class="token punctuation">`</span>      <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span> <span class="token keyword">datetime</span>     <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-工程创建"><a href="#3-工程创建" class="headerlink" title="3. 工程创建"></a>3. 工程创建</h4><p>完成数据库的资源新建之后，通过工具生成对应的代码，工程代码结构如下：<br><img src="/album/loading.gif" data-original="/album/article/db/sharding/4.png"></p><h3 id="三、基本配置"><a href="#三、基本配置" class="headerlink" title="三、基本配置"></a>三、基本配置</h3><h4 id="1-服务模式"><a href="#1-服务模式" class="headerlink" title="1. 服务模式"></a>1. 服务模式</h4><p><code>shardingsphere</code> 提供多种服务启动模式，如下 <code>Standalone</code> 表示单体启动，同理还有 <code>Cluster</code> 集群模式。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">shardingsphere</span><span class="token punctuation">:</span>    <span class="token key atrule">mode</span><span class="token punctuation">:</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> Standalone      <span class="token key atrule">repository</span><span class="token punctuation">:</span>        <span class="token key atrule">type</span><span class="token punctuation">:</span> JDBC<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-日志配置"><a href="#2-日志配置" class="headerlink" title="2. 日志配置"></a>2. 日志配置</h4><p>通过下述配置开启执行的 <code>SQL</code> 语句日志输出，与 <code>MyBatis</code> 中的 <code>mybatis.configuration.log-impl</code> 配置项效果类似。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">shardingsphere</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 日志显示具体的SQL</span>    <span class="token key atrule">props</span><span class="token punctuation">:</span>      <span class="token key atrule">sql-show</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、数据分库"><a href="#四、数据分库" class="headerlink" title="四、数据分库"></a>四、数据分库</h3><h4 id="1-连接配置"><a href="#1-连接配置" class="headerlink" title="1. 连接配置"></a>1. 连接配置</h4><p>通过 <code>spring.shardingsphere.datasource</code> 配置生效的数据源连接配置，<code>names</code> 用于指定数据源名称。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">shardingsphere</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 配置数据库连接信息</span>    <span class="token key atrule">datasource</span><span class="token punctuation">:</span>      <span class="token key atrule">names</span><span class="token punctuation">:</span> ds0<span class="token punctuation">,</span> ds1      <span class="token key atrule">ds0</span><span class="token punctuation">:</span>        <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource        <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/test_db1<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=utf<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL</span>=false        <span class="token key atrule">username</span><span class="token punctuation">:</span> root        <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>      <span class="token key atrule">ds1</span><span class="token punctuation">:</span>        <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource        <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/test_db2<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=utf<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL</span>=false        <span class="token key atrule">username</span><span class="token punctuation">:</span> root        <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-分片规则"><a href="#2-分片规则" class="headerlink" title="2. 分片规则"></a>2. 分片规则</h4><p>通过 <code>rules</code> 配置生效的分片规则，通过 <code>actual-data-nodes</code> 配置实际生效的资源表，<code>database-strategy</code> 用于配置分库策略，<code>sharding-algorithm-name</code> 取的值为 <code>sharding-algorithms</code> 中所定义的策略。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">shardingsphere</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 配置分片规则</span>    <span class="token key atrule">rules</span><span class="token punctuation">:</span>      <span class="token key atrule">sharding</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 配置所有分片表</span>        <span class="token key atrule">tables</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true"># 配置表名</span>          <span class="token key atrule">user_info</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 声明表所在的数据节点</span>            <span class="token key atrule">actual-data-nodes</span><span class="token punctuation">:</span> ds$<span class="token punctuation">-</span><span class="token punctuation">></span><span class="token punctuation">{</span>0..1<span class="token punctuation">}</span>.user_info_1            <span class="token comment" spellcheck="true"># 配置分库规则</span>            <span class="token key atrule">database-strategy</span><span class="token punctuation">:</span>              <span class="token key atrule">standard</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 配置分库的路由键</span>                <span class="token key atrule">sharding-column</span><span class="token punctuation">:</span> id                <span class="token comment" spellcheck="true"># 配置分片算法，指向具体的策略</span>                <span class="token key atrule">sharding-algorithm-name</span><span class="token punctuation">:</span> db<span class="token punctuation">-</span>inline        <span class="token comment" spellcheck="true"># 定义分片算法</span>        <span class="token key atrule">sharding-algorithms</span><span class="token punctuation">:</span>          <span class="token key atrule">db-inline</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 使用自定义表达式</span>            <span class="token key atrule">type</span><span class="token punctuation">:</span> inline            <span class="token key atrule">props</span><span class="token punctuation">:</span>              <span class="token key atrule">algorithm-expression</span><span class="token punctuation">:</span> ds$<span class="token punctuation">-</span><span class="token punctuation">></span><span class="token punctuation">{</span>id % 2<span class="token punctuation">}</span>.user_info1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-inline表达式"><a href="#3-inline表达式" class="headerlink" title="3. inline表达式"></a>3. inline表达式</h4><p>这里着重介绍一下 <code>inline</code> 表达式的语法，在上述配置中的 <code>$-&gt;&#123;&#125;</code> 即为 <code>inline</code> 表达式，其语法规则如下：</p><pre class="line-numbers language-txt"><code class="language-txt">ds0, ds1==> ds$->{0..1}==> ds$->{['0','1']}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="五、数据分表"><a href="#五、数据分表" class="headerlink" title="五、数据分表"></a>五、数据分表</h3><h4 id="1-连接配置-1"><a href="#1-连接配置-1" class="headerlink" title="1. 连接配置"></a>1. 连接配置</h4><p>分表的数据源连接配置与分库类似，配置如下：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">shardingsphere</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 配置数据库连接信息</span>    <span class="token key atrule">datasource</span><span class="token punctuation">:</span>      <span class="token key atrule">names</span><span class="token punctuation">:</span> ds0      <span class="token key atrule">ds0</span><span class="token punctuation">:</span>        <span class="token key atrule">type</span><span class="token punctuation">:</span> com.alibaba.druid.pool.DruidDataSource        <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver        <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/test_db1<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=utf<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL</span>=false        <span class="token key atrule">username</span><span class="token punctuation">:</span> root        <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-分片规则-1"><a href="#2-分片规则-1" class="headerlink" title="2. 分片规则"></a>2. 分片规则</h4><p>通过 <code>rules</code> 配置生效的分片规则，注意其中的 <code>user_info</code> 配置的为逻辑表名，若数据库存在表 <code>user_info_1</code> 与 <code>user_info_2</code> 则需要配置为 <code>user_info</code>。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">shardingsphere</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 配置分片规则</span>    <span class="token key atrule">rules</span><span class="token punctuation">:</span>      <span class="token key atrule">sharding</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 配置所有分片表</span>        <span class="token key atrule">tables</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true"># 配置表名</span>          <span class="token key atrule">user_info</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 声明表所在的数据节点</span>            <span class="token key atrule">actual-data-nodes</span><span class="token punctuation">:</span> ds0.user_info_$<span class="token punctuation">-</span><span class="token punctuation">></span><span class="token punctuation">{</span>1..2<span class="token punctuation">}</span>            <span class="token comment" spellcheck="true"># 配置分表规则</span>            <span class="token key atrule">table-strategy</span><span class="token punctuation">:</span>              <span class="token key atrule">standard</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 配置分表的路由键</span>                <span class="token key atrule">sharding-column</span><span class="token punctuation">:</span> id                <span class="token comment" spellcheck="true"># 策略算法名称</span>                <span class="token key atrule">sharding-algorithm-name</span><span class="token punctuation">:</span> user<span class="token punctuation">-</span>inline        <span class="token comment" spellcheck="true"># 定义分片算法</span>        <span class="token key atrule">sharding-algorithms</span><span class="token punctuation">:</span>          <span class="token key atrule">user-inline</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 使用自定义表达式</span>            <span class="token key atrule">type</span><span class="token punctuation">:</span> inline            <span class="token key atrule">props</span><span class="token punctuation">:</span>              <span class="token key atrule">algorithm-expression</span><span class="token punctuation">:</span> user_info_$<span class="token punctuation">-</span><span class="token punctuation">></span><span class="token punctuation">{</span>(id % 2) == 0 <span class="token punctuation">?</span> 2<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、分库分表&quot;&gt;&lt;a href=&quot;#一、分库分表&quot; class=&quot;headerlink&quot; title=&quot;一、分库分表&quot;&gt;&lt;/a&gt;一、分库分表&lt;/h3&gt;&lt;h4 id=&quot;1-基本介绍&quot;&gt;&lt;a href=&quot;#1-基本介绍&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="中间件" scheme="https://great-jin.github.io/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    
    <category term="Spring Boot" scheme="https://great-jin.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>二进制位移详解</title>
    <link href="https://great-jin.github.io/java/basis/bitwise/"/>
    <id>https://great-jin.github.io/java/basis/bitwise/</id>
    <published>2024-04-19T16:00:00.000Z</published>
    <updated>2024-04-20T03:45:50.608Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、变换计算"><a href="#一、变换计算" class="headerlink" title="一、变换计算"></a>一、变换计算</h3><h4 id="1-位与操作"><a href="#1-位与操作" class="headerlink" title="1. 位与操作"></a>1. 位与操作</h4><p>位与即对两个操作数的每个位执行逻辑与操作，只有在对应的位都是 <code>1</code> 时，结果才为 <code>1</code>。<br><img src="/album/loading.gif" data-original="/album/article/java/bit/1.png"></p><p>对应 <code>Java</code> 操作示例如下，通过 <code>&amp;</code> 执行位与操作。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 二进制表示为 1001</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 二进制表示为 0101</span>    <span class="token keyword">int</span> resultAnd <span class="token operator">=</span> a <span class="token operator">&amp;</span> b<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果为 0001，即 1</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Bitwise AND: %s, \tBit: %s\n"</span><span class="token punctuation">,</span> resultAnd<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>resultAnd<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-位或操作"><a href="#2-位或操作" class="headerlink" title="2. 位或操作"></a>2. 位或操作</h4><p>位或即对两个操作数的每个位执行逻辑或操作，只要对应的位有一个为 <code>1</code>，结果就为 <code>1</code>。<br><img src="/album/loading.gif" data-original="/album/article/java/bit/2.png"></p><p>对应 <code>Java</code> 操作示例如下，通过 <code>|</code> 执行位或操作。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 二进制表示为 1001</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 二进制表示为 0101</span>    <span class="token keyword">int</span> resultOr <span class="token operator">=</span> a <span class="token operator">|</span> b<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果为 1101，即 13</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Bitwise OR: %s, \tBit: %s\n"</span><span class="token punctuation">,</span> resultOr<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>resultOr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-异或操作"><a href="#3-异或操作" class="headerlink" title="3. 异或操作"></a>3. 异或操作</h4><p>亦或即比对相同位置的数，两个数相同时为 <code>0</code>，不同时为 <code>1</code>。<br><img src="/album/loading.gif" data-original="/album/article/java/bit/3.png"></p><p>对应 <code>Java</code> 操作示例如下，通过 <code>^</code> 执行亦或操作。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 二进制表示为 1001</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 二进制表示为 0101</span>    <span class="token keyword">int</span> resultXor <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果为 1100，即 12</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Bitwise XOR: %s, \tBit: %s\n"</span><span class="token punctuation">,</span> resultXor<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>resultXor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-位非操作"><a href="#4-位非操作" class="headerlink" title="4. 位非操作"></a>4. 位非操作</h4><p>位非即对操作数的每个位执行取反操作，<code>0</code> 变 <code>1</code>，<code>1</code> 变 <code>0</code>。<br><img src="/album/loading.gif" data-original="/album/article/java/bit/4.png"></p><h3 id="二、位移计算"><a href="#二、位移计算" class="headerlink" title="二、位移计算"></a>二、位移计算</h3><h4 id="1-正数位移"><a href="#1-正数位移" class="headerlink" title="1. 正数位移"></a>1. 正数位移</h4><h5 id="1-左移"><a href="#1-左移" class="headerlink" title="(1) 左移"></a>(1) 左移</h5><p>通过符号 <code>&lt;&lt;</code> 表示左移，正数左移在末尾补 <code>0</code>。<br><img src="/album/loading.gif" data-original="/album/article/java/bit/5.png"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 10, 1010</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s, %s\n"</span><span class="token punctuation">,</span> a1<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a2 <span class="token operator">=</span> a1 <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 40, 101000</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s, %s\n"</span><span class="token punctuation">,</span> a3<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-右移"><a href="#2-右移" class="headerlink" title="(2) 右移"></a>(2) 右移</h5><p>通过符号 <code>&gt;&gt;</code> 表示右移，正数右移最高位补符号位 <code>0</code>。<br><img src="/album/loading.gif" data-original="/album/article/java/bit/6.png"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 10, 1010</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s, %s\n"</span><span class="token punctuation">,</span> a1<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a3 <span class="token operator">=</span> a1 <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2, 10</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s, %s\n"</span><span class="token punctuation">,</span> a3<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-负数位移"><a href="#2-负数位移" class="headerlink" title="2. 负数位移"></a>2. 负数位移</h4><p>开始前先看一下如何计算负数的二进制，其步骤如下：</p><ul><li>计算其对应绝对值的二进制值；</li><li>对得到的值执行取反操作，即每一位都取其相反值；</li><li>对得到的反码值加一得到补码，该补码即负数其对应的二进制；</li></ul><p>注意计算补码加一时，若对应位计算结果大于 <code>1</code> 则对应计算结果为 <code>0</code> 并向前一位加 <code>1</code>。<br><img src="/album/loading.gif" data-original="/album/article/java/bit/7.png"></p><h5 id="1-左移-1"><a href="#1-左移-1" class="headerlink" title="(1) 左移"></a>(1) 左移</h5><p>通过符号 <code>&lt;&lt;</code> 表示左移，负数左移在末尾补 <code>0</code>。<br><img src="/album/loading.gif" data-original="/album/article/java/bit/8.png"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 二进制表示为 1001</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 二进制表示为 0101</span>    <span class="token keyword">int</span> resultXor <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果为 1100，即 12</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Bitwise XOR: %s, \tBit: %s\n"</span><span class="token punctuation">,</span> resultXor<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>resultXor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-右移-1"><a href="#2-右移-1" class="headerlink" title="(2) 右移"></a>(2) 右移</h5><p>通过符号 <code>&gt;&gt;</code> 表示右移，负数右移最高位补符号位 <code>1</code>。<br><img src="/album/loading.gif" data-original="/album/article/java/bit/9.png"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 二进制表示为 1001</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 二进制表示为 0101</span>    <span class="token keyword">int</span> resultXor <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 结果为 1100，即 12</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Bitwise XOR: %s, \tBit: %s\n"</span><span class="token punctuation">,</span> resultXor<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>resultXor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-无符号位移"><a href="#3-无符号位移" class="headerlink" title="3. 无符号位移"></a>3. 无符号位移</h4><p>对于无符号右移 <code>&gt;&gt;&gt;</code>，无论是正数还是负数, 右移最高位一律补 <code>0</code>。<br><img src="/album/loading.gif" data-original="/album/article/java/bit/10.png"></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 10, 1010</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s, %s\n"</span><span class="token punctuation">,</span> a1<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a4 <span class="token operator">=</span> a1 <span class="token operator">>>></span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2, 10</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s, %s\n"</span><span class="token punctuation">,</span> a4<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span>a4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、变换计算&quot;&gt;&lt;a href=&quot;#一、变换计算&quot; class=&quot;headerlink&quot; title=&quot;一、变换计算&quot;&gt;&lt;/a&gt;一、变换计算&lt;/h3&gt;&lt;h4 id=&quot;1-位与操作&quot;&gt;&lt;a href=&quot;#1-位与操作&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="JAVA基础" scheme="https://great-jin.github.io/categories/JAVA%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Kafka零拷贝详解</title>
    <link href="https://great-jin.github.io/db/kafka/zerocopy/"/>
    <id>https://great-jin.github.io/db/kafka/zerocopy/</id>
    <published>2024-04-13T16:00:00.000Z</published>
    <updated>2024-04-14T07:37:56.036Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、数据读写"><a href="#一、数据读写" class="headerlink" title="一、数据读写"></a>一、数据读写</h3><h4 id="1-传统方式"><a href="#1-传统方式" class="headerlink" title="1. 传统方式"></a>1. 传统方式</h4><p>首先让我们看一下不做任何特殊处理的数据流读取方式，以文件下载请求为例，其大致流程如下：</p><ul><li>用户端发送 <code>read()</code> 请求读取数据；</li><li><code>CPU</code> 在接收到该请求后向磁盘发出 <code>IO</code> 请求；</li><li>磁盘接收到 <code>CPU</code> 发出的 <code>IO</code> 请求后读取数据并存入磁盘缓存区，并在完成后向 <code>CPU</code> 发送响应；</li><li><code>CPU</code> 接收到响应后读取磁盘缓存区数据至 <code>Page Cache</code>;</li><li>读取至 <code>Page Cache</code> 后需要再次拷贝至用户缓存区；<br><img src="/album/loading.gif" data-original="/album/article/db/kafka/copy/1.png"></li></ul><p>了解大致流程之后你可能会疑惑，为什么数据读取至磁盘缓冲区之后 <code>CPU</code> 不直接拷贝至用户缓存区，而是要先拷贝到 <code>Page Cache</code>？原因其实也很简单，因为用户缓存区权限相对较低，无法直接与磁盘交互，必须通过内核层进行中转，而 <code>Page Cache</code> 则是内核态的一种缓存优化方式。<br><img src="/album/loading.gif" data-original="/album/article/db/kafka/copy/2.png"></p><h4 id="2-DMA技术"><a href="#2-DMA技术" class="headerlink" title="2. DMA技术"></a>2. DMA技术</h4><p>在上述的流程中可以看到，在整个数据的拷贝过程中 <code>CPU</code> 都占据着主导地位，即干了所有的重活并一直处于阻塞状态，在此期间 <code>CPU</code> 将无法处理其它任务。很显然这种方式相对较为低效，因此 <code>DMA(Direct Memory Access)</code> 应运而生，它接替了 <code>CPU</code> 在 <code>IO</code> 操作中大部分繁重搬运任务，而 <code>CPU</code> 的核心任务则为确定的需要传输的数据以及数据的去向。</p><blockquote><p>同样以之前的 <code>read()</code> 读取为例，与之前的不同的区别如下：</p></blockquote><ul><li><code>CPU</code> 接收到 <code>IO</code> 请求后转发至 <code>DMA</code>，由其向磁盘发出 <code>IO</code> 请求；</li><li>磁盘读取完成后通知 <code>DMA</code> 执行拷贝，此过程 <code>CPU</code> 不参与搬运任务；<br><img src="/album/loading.gif" data-original="/album/article/db/kafka/copy/3.png"></li></ul><p>可以看到以一次读取为例，<code>CPU</code> 的拷贝频次由 <code>2</code> 次降为 <code>1</code> 次，而通常读取伴随着写入操作，也就意味着一次完整的读写操作就能让 <code>CPU</code> 闲置出 <code>2</code> 两次搬运操作从而执行其它任务。<br><img src="/album/loading.gif" data-original="/album/article/db/kafka/copy/4.png"></p><h4 id="3-数据缓冲"><a href="#3-数据缓冲" class="headerlink" title="3. 数据缓冲"></a>3. 数据缓冲</h4><p>上述提到的两种方式中都涉及到一个概念——内核缓冲区 <code>(Page Cache)</code>，我们都知道内存的读取效率远超于磁盘。因此，若能够在内存中操作磁盘数据效率将大大提升，而 <code>Page Cache</code> 则是磁盘数据在内存中的暂存空间。</p><p>通过 <code>Page Cache</code> 将磁盘上的数据缓存在内存中，系统可以避免频繁地访问慢速的磁盘，从而减少了 <code>I/O</code> 操作的次数，加快了数据的访问速度。当进程再次访问相同的数据时，系统可以直接从 <code>Page Cache</code> 中读取，而不必再次从磁盘中加载，从而节省了大量的时间。</p><p><code>Page Cache</code> 是一种按需加载的缓存机制，它会根据系统内存的可用情况来管理缓存。当系统内存不足时，操作系统会根据一定的策略来释放 <code>Page Cache</code> 中的部分数据，以确保系统的正常运行。</p><h3 id="二、模式优化"><a href="#二、模式优化" class="headerlink" title="二、模式优化"></a>二、模式优化</h3><h4 id="1-内存映射"><a href="#1-内存映射" class="headerlink" title="1. 内存映射"></a>1. 内存映射</h4><p>虽然 <code>DMA</code> 技术降低了 <code>CPU</code> 负载压力，让其能够执行更多的系统任务，但针对于 <code>IO</code> 操作读写任务而言，整体流程上的搬运工作并没有减轻，一次完成的读写操作仍需要搬运 <code>4</code> 次。因此，想要提高 <code>IO</code> 流程的效率，需要的是减少重复数据拷贝工作。</p><p>由于用户层与内核、磁盘之间的权限问题，导致同一份数据在此期间执行了多次搬运拷贝，以之前的提到的图示为例，如果用户层能够直接读取内核层数据，那么 <code>CPU</code> 即可省去将数据由内核层拷贝至用户层这一操作。</p><p>而 <code>mmap(Memory-mapped file support)</code> 内存映射则正是实现了这一点，其将内核缓冲区里的数据映射到用户层，从而实现在用户层即可访问内核层数据，也就节省了一次 <code>CPU</code> 数据拷贝。<br><img src="/album/loading.gif" data-original="/album/article/db/kafka/copy/6.png"></p><h4 id="2-sendfile"><a href="#2-sendfile" class="headerlink" title="2. sendfile"></a>2. sendfile</h4><p>在 <code>linux</code> 中提供了专门的文件传输函数 <code>sendfile()</code> 可用于替代 <code>read()</code> 与 <code>write()</code> 操作。该函数能够直接实现两个内核态的数据拷贝，从而减少了 <code>1</code> 次用户态层级切换，在 <code>Java</code> 的 <code>NIO</code> 中也涉及到该函数的封装调用，后面会详细介绍。</p><p>在 <code>Nginx</code> 的配置文件中经常可以看到下述配置，其即代表使用 <code>sendfile</code> 执行传输。</p><pre class="line-numbers language-conf"><code class="language-conf">http {    sendfile        on;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="三、Java实现"><a href="#三、Java实现" class="headerlink" title="三、Java实现"></a>三、Java实现</h3><h4 id="1-NIO接口"><a href="#1-NIO接口" class="headerlink" title="1. NIO接口"></a>1. NIO接口</h4><p>在上述提到 <code>linux</code> 中提供了 <code>sendfile()</code> 替换了 <code>read()</code> 和 <code>write()</code> 从而减少状态的切换，在 <code>NIO</code> 中的 <code>FileChannel</code> 正利用了这一方式提高了传输效率。</p><p>在 <code>FileChannelImpl</code> 的 <code>transferTo()</code> 方法中正是封装利用这一特性执行数据的传输，通过下述图示了解其类的层级结构。<br><img src="/album/loading.gif" data-original="/album/article/db/kafka/copy/10.png"></p><p><code>transferTo()</code> 方法的内部实现逻辑此处不具体展开描述，感兴趣的朋友可以自行查看 <code>JDk</code> 源码，这里以简洁的图示描述其执行调用路径。<br><img src="/album/loading.gif" data-original="/album/article/db/kafka/copy/11.png"></p><h4 id="2-源码解读"><a href="#2-源码解读" class="headerlink" title="2. 源码解读"></a>2. 源码解读</h4><p><code>NIO</code> 的 <code>transferTo()</code> 方法调用执行最终定格在 <code>transferTo0()</code> 方法，可以看到该方法为 <code>native</code> 关键字声明，表明其为原生 <code>c++</code> 方式实现。<br><img src="/album/loading.gif" data-original="/album/article/db/kafka/copy/12.png"></p><p>为了查看其具体内容，我们需要查看 <code>openjdk</code> 的源码，此版本为开源版本，而日常使用的并不开源也就无法查看具体 <code>native</code> 实现逻辑，具体的实现代码内容链接：<a href="https://hg.openjdk.org/jdk8/jdk8/jdk/file/687fd7c7986d/src/solaris/native/sun/nio/ch/FileChannelImpl.c">c++源码实现</a>。</p><p>这里为了更方便查看我截图部分关键代码，可以看到在 <code>Linux</code> 系统下其正是通过调用 <code>sendfile()</code> 实现。<br><img src="/album/loading.gif" data-original="/album/article/db/kafka/copy/13.png"></p><h3 id="四、大文件传输"><a href="#四、大文件传输" class="headerlink" title="四、大文件传输"></a>四、大文件传输</h3><h4 id="1-直接IO"><a href="#1-直接IO" class="headerlink" title="1. 直接IO"></a>1. 直接IO</h4><p>之前提到了 <code>Page Cache</code> 技术通过内存方式提高了数据读取效率，但对于大文件的场景下，显然此方式不太合适。若在传输的大文件时仍采取 <code>Page Cache</code> 暂存，显然内存空间是及其有限的且不论能否完整存入，其还可能触发空间的回收导致其他任务缓存的小文件内容遭到回收。</p><p>因此，对于大文件的数据读取传输，更为高效的方式即通过 <code>直接IO</code> 将磁盘缓冲区文件直接拷贝至用户缓存区。而针对大文件的直接 <code>IO</code> 方式通常使用异步进行，当完成数据到用户缓冲区的拷贝后通知用户读取数据，在此之前 <code>CPU</code> 可执行其它进程任务。<br><img src="/album/loading.gif" data-original="/album/article/db/kafka/copy/7.png"></p><hr><p><strong>参考链接</strong></p><ol><li><a href="https://mp.weixin.qq.com/s/FgBCop2zFfcX5ZszE0NoCQ">傻瓜三歪让我教他「零拷贝」</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、数据读写&quot;&gt;&lt;a href=&quot;#一、数据读写&quot; class=&quot;headerlink&quot; title=&quot;一、数据读写&quot;&gt;&lt;/a&gt;一、数据读写&lt;/h3&gt;&lt;h4 id=&quot;1-传统方式&quot;&gt;&lt;a href=&quot;#1-传统方式&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="大数据" scheme="https://great-jin.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Kafka" scheme="https://great-jin.github.io/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>GRPC远程服务调用详解</title>
    <link href="https://great-jin.github.io/java/network/grpc/"/>
    <id>https://great-jin.github.io/java/network/grpc/</id>
    <published>2024-03-23T16:00:00.000Z</published>
    <updated>2024-03-25T13:48:30.491Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、概念介绍"><a href="#一、概念介绍" class="headerlink" title="一、概念介绍"></a>一、概念介绍</h3><h4 id="1-RPC调用"><a href="#1-RPC调用" class="headerlink" title="1. RPC调用"></a>1. RPC调用</h4><p>开始之前先介绍一下 <code>RPC(Remote procedure call)</code> 的定义，即远程服务调用，即在当前的程序中调用其它程序的服务实现。</p><p>假设存在两个程序 <code>Systemc-A</code> 与 <code>Systemc-B</code>，并在 <code>Systemc-A</code> 中定义了接口 <code>getData()</code>，而实现类在 <code>Systemc-B</code> 中。当 <code>Systemc-A</code> 经过一定手段通过 <code>getData()</code> 接口调用 <code>Systemc-B</code> 中的实现类，这个过程即远程服务调用。<br><img src="/album/loading.gif" data-original="/album/article/java/rpc/1.png"></p><h4 id="2-实现原理"><a href="#2-实现原理" class="headerlink" title="2. 实现原理"></a>2. 实现原理</h4><p>针对 <code>RPC</code> 服务功能的实现，通常可通过动态代理等特性实现。</p><p>如通过动态代理的方式创建实例对象时获取目标类信息、目标方法及方法参数等信息，再经由网络传输等手段请求至远端服务将传入的信息利用反射实现服务调用并返回。</p><h3 id="二、工程配置"><a href="#二、工程配置" class="headerlink" title="二、工程配置"></a>二、工程配置</h3><h4 id="1-依赖引入"><a href="#1-依赖引入" class="headerlink" title="1. 依赖引入"></a>1. 依赖引入</h4><p><code>GRPC</code> 是由 <code>Google</code> 开发的一款 <code>RPC</code> 服务框架，基于 <code>HTTP2</code> 传输协议实现，针对网络层实现一系列优化从而达到高效传输的目的。</p><p><code>GRPC</code> 提供了多语言的集成方式，包含 <code>Java SDK</code> 依赖，在工程中添加下述依赖即可开箱即用。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.grpc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>grpc-netty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.62.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.grpc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>grpc-protobuf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.62.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.grpc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>grpc-stub<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.62.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-插件依赖"><a href="#2-插件依赖" class="headerlink" title="2. 插件依赖"></a>2. 插件依赖</h4><p><code>GRPC</code> 的服务接口并不是传统的 <code>.java</code> 文件配置，而是以其相应格式标准定义于 <code>.proto</code> 文件中，因此需要在工程依赖中添加对应的打包插件。</p><p>在工程的 <code>pom.xml</code> 文件中添加下述插件配置：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>extensions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>extension</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>kr.motd.maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>os-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>extension</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>extensions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.xolstice.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>protobuf-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.6.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginId</span><span class="token punctuation">></span></span>grpc-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>protocArtifact</span><span class="token punctuation">></span></span>                    com.google.protobuf:protoc:3.3.0:exe:${os.detected.classifier}                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>protocArtifact</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pluginArtifact</span><span class="token punctuation">></span></span>                    io.grpc:protoc-gen-grpc-java:1.4.0:exe:${os.detected.classifier}                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pluginArtifact</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>compile-custom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-插件安装"><a href="#3-插件安装" class="headerlink" title="3. 插件安装"></a>3. 插件安装</h4><p>除此之外，还需要在 <code>IDEA</code> 中安装 <code>proto</code> 编译插件用于将 <code>proto</code> 文件内容转为 <code>java</code> 文件。</p><p>如果 <code>IDEA</code> 为旗舰版则自带 <code>Protocol Buffers</code> 插件，若为社区版则需要手动去插件市场下载 <code>Protobuf</code> 插件。<br><img src="/album/loading.gif" data-original="/album/article/java/rpc/2.png"></p><h3 id="三、文件编写"><a href="#三、文件编写" class="headerlink" title="三、文件编写"></a>三、文件编写</h3><h4 id="1-基本格式"><a href="#1-基本格式" class="headerlink" title="1. 基本格式"></a>1. 基本格式</h4><p>在 <code>GRPC</code> 中，接口的定义不在处于 <code>java</code> 文件中，而是通过 <code>proto</code> 文件定义。</p><p>并且需要注意的一点是 <code>.proto</code> 文件需要放置于 <code>proto</code> 目录下，其与 <code>java</code> 目录处于同一层级。<br><img src="/album/loading.gif" data-original="/album/article/java/rpc/3.png"></p><p><code>proto</code> 文件定义并不复杂，其中通过 <code>syntax</code> 指定协议版本；<code>package</code> 用于指定报名，与 <code>java</code> 中的包名作用效果类似用于层级管理；<code>option</code> 用于添加参数配置。</p><pre class="line-numbers language-proto"><code class="language-proto">syntax = "proto3";package xyz.ibudai.practice.tool.grpc;option java_multiple_files = true;// 指定生成的 gRPC 服务接口和消息类的包名option java_package = "xyz.ibudai.practice.tool.grpc.bean";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-对象定义"><a href="#2-对象定义" class="headerlink" title="2. 对象定义"></a>2. 对象定义</h4><p>在接口定义中，通过其入参与出参都可能为复杂的 <code>Java</code> 对象，而在 <code>proto</code> 文件中即通过 <code>message</code> 关键字定义对象。</p><p>例如存在一个 <code>Java</code> 类定义如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloRequest</span> <span class="token punctuation">{</span>    String userName<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>则 <code>HelloRequest</code> 在 <code>proto</code> 中对应的定义形式如下，其中 <code>userName = 1</code> 的含义代表给 <code>userName</code> 的别名为 <code>1</code>。</p><p>众所周知，当一个类以 <code>Json</code> 等形式表达时其格式为 <code>key:value</code> 形式，即上述示例对应的为 <code>&quot;userName&quot;: &quot;Alex&quot;</code> 形式，但是在 <code>GRPC</code> 中其为 <code>&quot;1&quot;: &quot;Alex&quot;</code>，即通过数字别名取代字段名，进一步减少数据的大小降低传输压力。</p><pre class="line-numbers language-proto"><code class="language-proto">message HelloRequest {    string userName = 1;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3-接口定义"><a href="#3-接口定义" class="headerlink" title="3. 接口定义"></a>3. 接口定义</h4><p>同理在 <code>proto</code> 中接口类的定义通过 <code>service</code> 与 <code>rpc</code> 关键字定义。</p><p>如存在下述示例接口类 <code>TestService</code> 及 <code>getDate()</code> 方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TestService</span> <span class="token punctuation">{</span>    HelloResponse <span class="token function">getDate</span><span class="token punctuation">(</span>HelloRequest req<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>则上述接口在对应的 <code>proto</code> 文件中的定义格式如下：</p><pre class="line-numbers language-proto"><code class="language-proto">service TestService {    rpc getDate (HelloRequest) returns (HelloResponse) {    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>下述即为一个完整的 <code>proto</code> 文件定义示例。</p><pre class="line-numbers language-java"><code class="language-java">syntax <span class="token operator">=</span> <span class="token string">"proto3"</span><span class="token punctuation">;</span><span class="token keyword">package</span> xyz<span class="token punctuation">.</span>ibudai<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>tool<span class="token punctuation">.</span>grpc<span class="token punctuation">;</span>option java_multiple_files <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>option java_package <span class="token operator">=</span> <span class="token string">"xyz.ibudai.practice.tool.grpc.bean"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 定义请求体</span>message HelloRequest <span class="token punctuation">{</span>    string userName <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义相应内容</span>message HelloResponse <span class="token punctuation">{</span>    string message <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 服务接口，定义请求参数和相应结果</span>service TestService <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义 RPC 接口方法</span>    rpc <span class="token function">getDate</span> <span class="token punctuation">(</span>HelloRequest<span class="token punctuation">)</span> <span class="token function">returns</span> <span class="token punctuation">(</span>HelloResponse<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-文件编译"><a href="#4-文件编译" class="headerlink" title="4. 文件编译"></a>4. 文件编译</h4><p>完成上述内容编写之后需要将其编译为程序可读的 <code>Java</code> 文件。</p><p>在 <code>IDEA</code> 右侧 <code>maven</code> 中找到下述依次执行编译。<br><img src="/album/loading.gif" data-original="/album/article/java/rpc/4.png"></p><p>执行完成后即会在工程的 target 目录下生成对应的文件，其中执行 <code>compile</code> 会生成文件于 <code>target/generated-sources/protobuf/java</code> 下，执行 <code>custom</code> 文件会生成于 <code>target/generated-sources/protobuf/grpc-java</code> 下。<br><img src="/album/loading.gif" data-original="/album/article/java/rpc/5.png"></p><h3 id="四、服务端应用"><a href="#四、服务端应用" class="headerlink" title="四、服务端应用"></a>四、服务端应用</h3><h4 id="1-接口实现"><a href="#1-接口实现" class="headerlink" title="1. 接口实现"></a>1. 接口实现</h4><p>完成上述的接口定义之后即可编写接口的实现类，实现编译生成类 <code>TestServiceGrpc.TestServiceImplBase</code> 并重写接口方法，通过 <code>onNext()</code> 与 <code>onCompleted()</code> 将数据提交返回。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">TestServiceGrpc<span class="token punctuation">.</span>TestServiceImplBase</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getDate</span><span class="token punctuation">(</span>HelloRequest request<span class="token punctuation">,</span> StreamObserver<span class="token operator">&lt;</span>HelloResponse<span class="token operator">></span> responseObserver<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String data <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getUserName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server receive data: "</span> <span class="token operator">+</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>        HelloResponse response <span class="token operator">=</span> HelloResponse<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token string">"Data from server: "</span> <span class="token operator">+</span> data<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 返回数据，等价于 return response;</span>        responseObserver<span class="token punctuation">.</span><span class="token function">onNext</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        responseObserver<span class="token punctuation">.</span><span class="token function">onCompleted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-服务启动"><a href="#2-服务启动" class="headerlink" title="2. 服务启动"></a>2. 服务启动</h4><p>接口实现定义完成后即可启动服务端，通过 <code>ServerBuilder</code> 构建服务端对象，默认 <code>Host</code> 为当前本地 <code>IP</code>，其中 <code>addService()</code> 为添加服务实现类，</p><p>完成后通过 <code>start()</code> 启动服务并由 <code>awaitTermination()</code> 阻塞当前线程等待应用关闭。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PORT <span class="token operator">=</span> <span class="token number">9000</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Server server <span class="token operator">=</span> ServerBuilder<span class="token punctuation">.</span><span class="token function">forPort</span><span class="token punctuation">(</span>PORT<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addService</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TestServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        server<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        server<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、客户端应用"><a href="#五、客户端应用" class="headerlink" title="五、客户端应用"></a>五、客户端应用</h3><h4 id="1-接口请求"><a href="#1-接口请求" class="headerlink" title="1. 接口请求"></a>1. 接口请求</h4><p>相对于服务端而言客户端实现实现更为简单，通过 <code>ManagedChannelBuilder</code> 连接至服务端，并由 <code>newBlockingStub()</code> 创建实例对象。</p><p>当创建完实例对象 <code>stub</code> 即与普通的接口调用并无区别，对应的示例如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClientTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String HOST <span class="token operator">=</span> <span class="token string">"localhost"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PORT <span class="token operator">=</span> <span class="token number">9000</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ManagedChannel channel <span class="token operator">=</span> ManagedChannelBuilder<span class="token punctuation">.</span><span class="token function">forAddress</span><span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">usePlaintext</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TestServiceGrpc<span class="token punctuation">.</span>TestServiceBlockingStub stub <span class="token operator">=</span> TestServiceGrpc<span class="token punctuation">.</span><span class="token function">newBlockingStub</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span><span class="token punctuation">;</span>        HelloRequest request <span class="token operator">=</span> HelloRequest<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setUserName</span><span class="token punctuation">(</span><span class="token string">"Alex"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HelloResponse response <span class="token operator">=</span> stub<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>参考链接</strong></p><ol><li><a href="https://www.baeldung.com/grpc-introduction">Introduction to gRPC</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、概念介绍&quot;&gt;&lt;a href=&quot;#一、概念介绍&quot; class=&quot;headerlink&quot; title=&quot;一、概念介绍&quot;&gt;&lt;/a&gt;一、概念介绍&lt;/h3&gt;&lt;h4 id=&quot;1-RPC调用&quot;&gt;&lt;a href=&quot;#1-RPC调用&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    <category term="网络通信" scheme="https://great-jin.github.io/categories/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/"/>
    
    
    <category term="Java" scheme="https://great-jin.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Netty框架入门教程</title>
    <link href="https://great-jin.github.io/java/network/netty/"/>
    <id>https://great-jin.github.io/java/network/netty/</id>
    <published>2024-03-22T16:00:00.000Z</published>
    <updated>2024-03-25T13:54:47.211Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h3><h4 id="1-事件驱动"><a href="#1-事件驱动" class="headerlink" title="1. 事件驱动"></a>1. 事件驱动</h4><p><code>Netty</code> 是一款基于事件驱动的非阻塞网络请求框架，在开始前先了解一下什么是事件驱动。</p><p>事件驱动模型是一种常见的编程模型，在事件驱动模型中，系统的运行和行为主要由事件的触发和处理来驱动，而不是通过线程的阻塞和轮询来等待和处理请求。模型的核心思想是将任务的执行委托给事件驱动的机制，以实现异步、非阻塞的处理方式。</p><h4 id="2-名词解释"><a href="#2-名词解释" class="headerlink" title="2. 名词解释"></a>2. 名词解释</h4><h5 id="1-事件"><a href="#1-事件" class="headerlink" title="(1) 事件"></a>(1) 事件</h5><p>事件 <code>(Event)</code> 是系统中发生的某种特定的动作或状态变化，它可以是用户输入、网络消息、定时器触发等。事件驱动模型中的所有行为都是由事件触发和驱动的。</p><h5 id="2-事件处理器"><a href="#2-事件处理器" class="headerlink" title="(2) 事件处理器"></a>(2) 事件处理器</h5><p>事件处理器 <code>(Event Handler)</code> 是用于处理特定类型事件的组件或函数。当某个事件发生时，系统会将事件传递给相应的事件处理器来进行处理。事件处理器通常被注册到事件监听器或者事件分发器中。</p><h5 id="3-事件监听器"><a href="#3-事件监听器" class="headerlink" title="(3) 事件监听器"></a>(3) 事件监听器</h5><p>事件监听器 <code>(Event Listener)</code> 用于监听和接收特定类型的事件，并将事件分发给相应的事件处理器进行处理。它负责注册和管理事件处理器，以确保事件被正确处理。</p><h5 id="4-事件循环"><a href="#4-事件循环" class="headerlink" title="(4) 事件循环"></a>(4) 事件循环</h5><p>事件循环 <code>(Event Loop)</code> 是事件驱动模型的核心组件之一，它负责监听和接收事件，并将事件分发给相应的事件处理器进行处理。事件循环通常采用非阻塞的方式来等待事件的到来，以实现高效的事件处理。</p><h5 id="5-回调"><a href="#5-回调" class="headerlink" title="(5) 回调"></a>(5) 回调</h5><p>回调 <code>(Callback)</code> 是一种常见的事件处理机制，它通过在事件发生时调用预先注册的回调函数来处理事件。当某个事件发生时，系统会调用相应的回调函数来执行特定的逻辑。</p><h5 id="6-异步"><a href="#6-异步" class="headerlink" title="(6) 异步"></a>(6) 异步</h5><p>事件驱动模型通常采用异步 <code>(Asynchronous)</code> 的方式来处理事件，即事件的处理过程是非阻塞的，不会阻塞当前线程。通过异步处理，系统能够更好地利用资源，提高系统的并发性能和吞吐量。</p><h3 id="二、对象描述"><a href="#二、对象描述" class="headerlink" title="二、对象描述"></a>二、对象描述</h3><h4 id="1-Bootstrap"><a href="#1-Bootstrap" class="headerlink" title="1. Bootstrap"></a>1. Bootstrap</h4><p>在 <code>netty</code> 中由 <code>Bootstrap</code> 与 <code>ServerBootstrap</code> 分别用于建立服务端与客户端应用。</p><h4 id="2-EventLoop"><a href="#2-EventLoop" class="headerlink" title="2. EventLoop"></a>2. EventLoop</h4><p><code>EventLoop</code> 在 <code>netty</code> 中负责监听和接收事件，并将事件分发给相应的事件处理器。当存在一个或多个 <code>EventLoop</code> 通过 <code>EventLoopGroup</code> 进行管理，类似于线程池于线程的关系。</p><h4 id="3-ChannelFuture"><a href="#3-ChannelFuture" class="headerlink" title="3. ChannelFuture"></a>3. ChannelFuture</h4><p>在 <code>netty</code> 中通过事件的处理都是异步非阻塞，而 <code>ChannelFuture</code> 继承于 <code>Java</code> 中的 <code>Future</code> 类，返回异步事件处理结果。</p><h4 id="4-ChannelHandler"><a href="#4-ChannelHandler" class="headerlink" title="4. ChannelHandler"></a>4. ChannelHandler</h4><p>当 <code>EventLoop</code> 接收到事件时将提交至 <code>ChannelHandler</code> 进行处理，在此实现具体的业务处理逻辑。</p><h4 id="5-ChannelPipeline"><a href="#5-ChannelPipeline" class="headerlink" title="5. ChannelPipeline"></a>5. ChannelPipeline</h4><p>类似于 <code>EventLoopGroup</code>，当存在多个 <code>ChannelHandler</code> 时可将其连接为 <code>ChannelPipeline</code>，事件的处理将按照 <code>ChannelHandler</code> 在 <code>ChannelPipeline</code> 中添加的顺序有序执行。</p><h3 id="三、工程管理"><a href="#三、工程管理" class="headerlink" title="三、工程管理"></a>三、工程管理</h3><h4 id="1-依赖引入"><a href="#1-依赖引入" class="headerlink" title="1. 依赖引入"></a>1. 依赖引入</h4><p>新增 <code>Maven</code> 工程并在 <code>pom</code> 文件中引入相应依赖。</p><pre class="line-numbers language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.netty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>netty-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.89.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、服务端应用"><a href="#四、服务端应用" class="headerlink" title="四、服务端应用"></a>四、服务端应用</h3><h4 id="1-事件处理"><a href="#1-事件处理" class="headerlink" title="1. 事件处理"></a>1. 事件处理</h4><p>通过继承类 <code>SimpleChannelInboundHandler</code> 编写数据业务处理逻辑，<code>EventLoop</code> 会将数据提交至此。</p><p>当存在多个处理器时，需要在 <code>channelRead0()</code> 处理完成时通过 <code>fireChannelRead()</code> 方法将数据传递至一处理器，若只存在单个处理器则可忽略该行。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleServerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleChannelInboundHandler</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 处理客户端请求，并向客户端发送响应结果     *     * @param channelHandlerContext 请求上下文信息     * @param msg                   接收的数据     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">channelRead0</span><span class="token punctuation">(</span>ChannelHandlerContext channelHandlerContext<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server read(simple), data: "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 向下一级传递</span>        channelHandlerContext<span class="token punctuation">.</span><span class="token function">fireChannelRead</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>SimpleChannelInboundHandler</code> 继承于 <code>ChannelInboundHandlerAdapter</code> 可用于编写简单的事件处理，若需要管理连接建立与异常事件处理则需自定义继承 <code>ChannelInboundHandlerAdapter</code>。</p><p>其中 <code>channelActive()</code> 在首次通道建立时触发，由于通道的复用性其仅会触发一次；<code>channelRead()</code> 用于处理相应的业务逻辑，若执行耗时任务可通过 <code>ctx.channel().eventLoop().execute()</code> 新启线程异步执行；<code>exceptionCaught()</code> 则在通道异常时触发。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChannelServerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInboundHandlerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelActive</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server active."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server read(channel), data: "</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 当处理耗时任务时可通过 eventLoop() 启动线程异步执行</span>        <span class="token comment" spellcheck="true">// 同理通过 schedule() 启动一个延迟任务</span>        ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server read done."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 完成处理，响应客户端请求</span>        ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cause<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-链路配置"><a href="#2-链路配置" class="headerlink" title="2. 链路配置"></a>2. 链路配置</h4><p>通过继承 <code>ChannelInitializer</code> 将定义的一个或多个处理器构建添加至 <code>ChannelPipeline</code> 中。</p><p>在通道处理时将会按照此处 <code>addLast()</code> 的顺序执行，先添加的处理器处理优先级更高，可理解为一个队列逐级向后传递。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChannelServerInitializer</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 传输通道数据编解码配置     *     * @param sc 网络连接通道     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel sc<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取 ChannelPipeline 对象，用于配置网络处理器</span>        ChannelPipeline pipeline <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加字符串编解码器</span>        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加自定义的业务处理器</span>        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-事件监听"><a href="#3-事件监听" class="headerlink" title="3. 事件监听"></a>3. 事件监听</h4><p>在 <code>netty</code> 中可针对每一步操作添加监听器，用于监听处理事件的成功与失败。</p><p><code>netty</code> 提供了 <code>lamdba</code> 表达式与基础的类实例两种实现方法，下述为定义监听器类示例：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServerChannelListener</span> <span class="token keyword">implements</span> <span class="token class-name">ChannelFutureListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span>ChannelFuture channelFuture<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>channelFuture<span class="token punctuation">.</span><span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server lister, message: successful!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Server lister, message: "</span> <span class="token operator">+</span> channelFuture<span class="token punctuation">.</span><span class="token function">cause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-服务建立"><a href="#4-服务建立" class="headerlink" title="4. 服务建立"></a>4. 服务建立</h4><p>完成上述步骤后即可启动服务端应用，通过 <code>ServerBootstrap</code> 创建服务端引导类，负责设置服务器的启动配置，将不同的组件组合起来以构建服务器端应用，可以配置服务器的一些参数，如绑定端口、设置事件处理器、指定连接处理流程等。</p><p>通过 <code>group()</code> 配置线程组，其中 <code>parentGroup</code> 负责接受客户端连接，<code>childGroup</code> 负责处理连接的 <code>I/O</code> 事件，<code>childHandler()</code> 用于配置事件处理器；<code>channel()</code> 用于配置通道模型，对于异步通讯通常使用 <code>NioServerSocketChannel</code> 对象，对应的还存在 <code>OIO</code> 但其在新版中已被标记弃用。</p><p>完整的服务端应用启动代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyServerTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String HOST <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PORT <span class="token operator">=</span> <span class="token number">9090</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> ServerBootstrap bootstrap<span class="token punctuation">;</span>    <span class="token keyword">private</span> EventLoopGroup parentGroup<span class="token punctuation">,</span> childGroup<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// parentGroup: 监听客户端请求</span>        parentGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// childGroup: 处理每条连接的数据读写</span>        childGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// bootstrap: 用于创建和配置服务器，从而启动服务器入口</span>        bootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 配置线程组的角色</span>                <span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>parentGroup<span class="token punctuation">,</span> childGroup<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 配置服务端的 IO 模型, 这里取 NIO</span>                <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioServerSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 配置每条连接的数据读写和业务逻辑</span>                <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleServerInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serverSyncDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 绑定监听端口，Host 未指定时使用本地地址</span>            ChannelFuture future <span class="token operator">=</span> bootstrap<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServerChannelListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Bind done!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 等待关闭线程将阻塞。</span>            future<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>netty</code> 中每一步操作通过 <code>sync()</code> 或 <code>await()</code> 表示其为同步或异步操作，同时将返回一个 <code>ChannelFuture</code> 对象。即当以 <code>sync()</code> 操作时若任务耗时主线程将陷入阻塞，反之 <code>await()</code> 为异步则不会阻塞线程。</p><p>在 <code>netty</code> 中通过 <code>close()</code> 关闭传输通道，而 <code>closeFuture()</code> 用于获取关闭的结果。在上述示例中并未执行 <code>close()</code> 操作，因此 <code>closeFuture().sync()</code> 将会阻塞线程。</p><h3 id="五、客户端应用"><a href="#五、客户端应用" class="headerlink" title="五、客户端应用"></a>五、客户端应用</h3><h4 id="1-事件处理-1"><a href="#1-事件处理-1" class="headerlink" title="1. 事件处理"></a>1. 事件处理</h4><p>同理，客户端此处创建了一个处理器用于接收处理服务端返回的数据。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleClientHandler</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleChannelInboundHandler</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 处理客户端请求，并向客户端发送响应结果     *     * @param channelHandlerContext 请求上下文信息     * @param msg                   接收的数据     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">channelRead0</span><span class="token punctuation">(</span>ChannelHandlerContext channelHandlerContext<span class="token punctuation">,</span> String msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Client read, data: "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-链路配置-1"><a href="#2-链路配置-1" class="headerlink" title="2. 链路配置"></a>2. 链路配置</h4><p><code>ChannelPipeline</code> 的配置与服务端类似，不再详细描述。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleClientInitializer</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 传输通道数据编解码配置     *     * @param sc 网络连接通道     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel sc<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取 ChannelPipeline 对象，用于配置网络处理器</span>        ChannelPipeline pipeline <span class="token operator">=</span> sc<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加字符串编解码器</span>        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加自定义的业务处理器</span>        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleClientHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-传输数据"><a href="#3-传输数据" class="headerlink" title="3. 传输数据"></a>3. 传输数据</h4><p>在 <code>netty</code> 中提供了 <code>ByteBuf</code> 用于承当数据容器，其对标 <code>Java</code> 中的 <code>ByteBuffer</code>。</p><p><code>ByteBuf</code> 提供了两种初始化方式：<code>alloc().buffer()</code> 与 <code>alloc().directBuffer()</code>，分别对应申请的内存为堆内内存和堆外内存，其中堆外内存并不受 <code>JVM</code> 垃圾回收的管理，在使用时需要尤为注意。</p><pre class="line-numbers language-java"><code class="language-java">ByteBuf byteBuf1 <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ByteBuf byteBuf2 <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">directBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>byteBuf1<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-服务建立-1"><a href="#4-服务建立-1" class="headerlink" title="4. 服务建立"></a>4. 服务建立</h4><p>客户端的建立与服务端类似，通过 <code>Bootstrap</code> 对象构造，不同的是其 <code>group()</code> 只需配置单个 <code>EventLoopGroup</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyClientTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String HOST <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PORT <span class="token operator">=</span> <span class="token number">9090</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Bootstrap bootstrap<span class="token punctuation">;</span>    <span class="token keyword">private</span> EventLoopGroup loopGroup<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        loopGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 指定线程模型</span>                <span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>loopGroup<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 指定 IO 类型为 NIO</span>                <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 禁用 Nagle 算法，发送数据包时都会立即发送，不会等待数据包的合并发送。</span>                <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>TCP_NODELAY<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// IO 处理逻辑</span>                <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleClientInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 客户端发送同步请求，程序阻塞     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clientSyncDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 建立同步连接通道</span>            Channel channel <span class="token operator">=</span> bootstrap<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>HOST<span class="token punctuation">,</span> PORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 写入数据至 ByteBuf</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String message <span class="token operator">=</span> <span class="token string">"The message of "</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>                ByteBuf byteBuf <span class="token operator">=</span> channel<span class="token punctuation">.</span><span class="token function">alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                byteBuf<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 发送数据至服务端</span>                channel<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>byteBuf<span class="token punctuation">)</span><span class="token punctuation">;</span>                TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 关闭与当前 Channel 关联的连接。</span>            channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、基本概念&quot;&gt;&lt;a href=&quot;#一、基本概念&quot; class=&quot;headerlink&quot; title=&quot;一、基本概念&quot;&gt;&lt;/a&gt;一、基本概念&lt;/h3&gt;&lt;h4 id=&quot;1-事件驱动&quot;&gt;&lt;a href=&quot;#1-事件驱动&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="网络通信" scheme="https://great-jin.github.io/categories/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1/"/>
    
    
    <category term="Java" scheme="https://great-jin.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Digester XML解析教程</title>
    <link href="https://great-jin.github.io/java/utils/xml/"/>
    <id>https://great-jin.github.io/java/utils/xml/</id>
    <published>2024-03-08T16:00:00.000Z</published>
    <updated>2024-06-05T14:13:42.110Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、前置准备"><a href="#一、前置准备" class="headerlink" title="一、前置准备"></a>一、前置准备</h3><h4 id="1-概念解释"><a href="#1-概念解释" class="headerlink" title="1. 概念解释"></a>1. 概念解释</h4><p>在 <code>XML</code> 文件中有一个十分重要的概念 <code>XPath</code>，简单而言即用于定义元素的位置。</p><p>直接通过示例直观的了解 <code>XPath</code> 的定义，如一个 <code>XML</code> 的文件内容如下。那么值 <code>Alex</code> 对应的标签 <code>name</code> 其相应的 <code>XPath</code> 则为 <code>student/name</code>，即用于定位元素的路径。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Alex<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-依赖导入"><a href="#2-依赖导入" class="headerlink" title="2. 依赖导入"></a>2. 依赖导入</h4><p><code>Apache digester</code> 是 <code>Java</code> 中一种 <code>XML</code> 解析框架，能够在耗费最低系统资源的前提下实现高效 <code>XML</code> 文件解析。</p><p>使用方法简单快捷，在 <code>Maven</code> 项目中引入下述依赖即可开箱即用。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-digester3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-文件数据"><a href="#3-文件数据" class="headerlink" title="3. 文件数据"></a>3. 文件数据</h4><p>在开始之前先准备一个 <code>XML</code> 数据文件，文件内容如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entityContainer</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entity</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>alex<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attribute</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>math<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>80<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>attribute</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attribute</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>science<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>85<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>attribute</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entity</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entity</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>beth<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attribute</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>math<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>85<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>attribute</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>attribute</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>science<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>90<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>attribute</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entity</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entityContainer</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、基础操作"><a href="#二、基础操作" class="headerlink" title="二、基础操作"></a>二、基础操作</h3><h4 id="1-实体对象"><a href="#1-实体对象" class="headerlink" title="1. 实体对象"></a>1. 实体对象</h4><p>相对应于 <code>XML</code> 文件，需要创建对应的 <code>Java</code> 实体类用作载体。</p><p>同上述准备的 <code>XML</code> 文件内容此处创建了三个对应的实体类 <code>EntityContainer</code>，<code>Entity</code> 与 <code>Attribute</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EntityContainer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Entity<span class="token operator">></span> entityList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addEntity</span><span class="token punctuation">(</span>Entity entity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        entityList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Entity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Attribute<span class="token operator">></span> attributes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addAttribute</span><span class="token punctuation">(</span>Attribute attribute<span class="token punctuation">)</span> <span class="token punctuation">{</span>        attributes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Attribute</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String key<span class="token punctuation">;</span>    <span class="token keyword">private</span> String value<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-规则配置"><a href="#2-规则配置" class="headerlink" title="2. 规则配置"></a>2. 规则配置</h4><p>完成上述步骤后即可开始正式的文件内容解析，<code>Digester</code> 解析工具其提供的规则配置方法参考下表：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">addObjectCreate()</td>        <td style="text-align: center;">用于设置与 Java 对象的映射关系。</td>    </tr>    <tr>        <td style="text-align: center;">addSetProperties()</td>        <td style="text-align: center;">设置对象属性值。</td>    </tr>    <tr>        <td style="text-align: center;">addBeanPropertySetter()</td>        <td style="text-align: center;">用于 XPath 与实体对象属性的匹配</td>    </tr>    <tr>        <td style="text-align: center;">addSetNext()</td>        <td style="text-align: center;">一个标签内嵌套多个同标签时用于指定添加方法。</td>    </tr></table><h4 id="3-读取示例"><a href="#3-读取示例" class="headerlink" title="3. 读取示例"></a>3. 读取示例</h4><p>因此，之前提到的 <code>XML</code> 文件其对应的解析示例如下，其中 <code>parse()</code> 方法支持输入文件流与文本块的方式，前者基于事件驱动后者基于内存驱动，在解析大文件的情况下前者显然能够占用更少的资源。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DigestXmlTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String location <span class="token operator">=</span> <span class="token string">"src\\main\\resources\\xml\\data.xml"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">basicTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Digester digester <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Digester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        digester<span class="token punctuation">.</span><span class="token function">addObjectCreate</span><span class="token punctuation">(</span><span class="token string">"entityContainer"</span><span class="token punctuation">,</span> EntityContainer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        digester<span class="token punctuation">.</span><span class="token function">addSetProperties</span><span class="token punctuation">(</span><span class="token string">"entityContainer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        digester<span class="token punctuation">.</span><span class="token function">addObjectCreate</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity"</span><span class="token punctuation">,</span> Entity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// addBeanPropertySetter(): march xml label with bean field</span>        digester<span class="token punctuation">.</span><span class="token function">addBeanPropertySetter</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/id"</span><span class="token punctuation">,</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        digester<span class="token punctuation">.</span><span class="token function">addBeanPropertySetter</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/name"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// addSetNext(): when march multiple item then put to collection</span>        digester<span class="token punctuation">.</span><span class="token function">addSetNext</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity"</span><span class="token punctuation">,</span> <span class="token string">"addEntity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        digester<span class="token punctuation">.</span><span class="token function">addObjectCreate</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/attribute"</span><span class="token punctuation">,</span> Attribute<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        digester<span class="token punctuation">.</span><span class="token function">addBeanPropertySetter</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/attribute/key"</span><span class="token punctuation">,</span> <span class="token string">"key"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        digester<span class="token punctuation">.</span><span class="token function">addBeanPropertySetter</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/attribute/value"</span><span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        digester<span class="token punctuation">.</span><span class="token function">addSetNext</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/attribute"</span><span class="token punctuation">,</span> <span class="token string">"addAttribute"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>FileReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            EntityContainer container <span class="token operator">=</span> digester<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、进阶配置"><a href="#三、进阶配置" class="headerlink" title="三、进阶配置"></a>三、进阶配置</h3><h4 id="1-规则定义"><a href="#1-规则定义" class="headerlink" title="1. 规则定义"></a>1. 规则定义</h4><p>在上述的示例中通过配置的规则即可实现数据文件的解析，但每次使用都需定义解析规则，显然过于繁杂。</p><p>因此，在 <code>Digester</code> 中提供了 <code>AbstractRulesModule</code> 可实现规则配置的统一管理，一次定义即可全局使用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRuleModule</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractRulesModule</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">forPattern</span><span class="token punctuation">(</span><span class="token string">"entityContainer"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ofType</span><span class="token punctuation">(</span>EntityContainer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">forPattern</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ofType</span><span class="token punctuation">(</span>Entity<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">forPattern</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBeanProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">forPattern</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBeanProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">forPattern</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span><span class="token string">"addEntity"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">forPattern</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/attribute"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ofType</span><span class="token punctuation">(</span>Attribute<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">forPattern</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/attribute/key"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBeanProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">forPattern</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/attribute/value"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBeanProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">forPattern</span><span class="token punctuation">(</span><span class="token string">"entityContainer/entity/attribute"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span><span class="token string">"addAttribute"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-读取示例"><a href="#2-读取示例" class="headerlink" title="2. 读取示例"></a>2. 读取示例</h4><p>上述配置方式相对应的读取示例代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DigestXmlTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String location <span class="token operator">=</span> <span class="token string">"src\\main\\resources\\xml\\data.xml"</span><span class="token punctuation">;</span>     <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ruleTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// write once, use anywhere</span>        <span class="token keyword">final</span> DigesterLoader loader <span class="token operator">=</span> DigesterLoader<span class="token punctuation">.</span><span class="token function">newLoader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyRuleModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Digester digester <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">newDigester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// read and parse</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>FileReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            EntityContainer container <span class="token operator">=</span> digester<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、注解方式"><a href="#四、注解方式" class="headerlink" title="四、注解方式"></a>四、注解方式</h3><h4 id="1-注解介绍"><a href="#1-注解介绍" class="headerlink" title="1. 注解介绍"></a>1. 注解介绍</h4><p>除了代码配置解析规则之外，在 <code>3.x</code> 版本中提供了注解的方法，从而实现更便捷配置。</p><p><code>Digester</code> 解析规则相配套的注解及其描述参考下表：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">注解</td>        <th style="text-align: center;">描述</td>    </tr>    <tr>        <td style="text-align: center;">@ObjectCreate</td>        <td style="text-align: center;">等价于 addObjectCreate() 配置。</td>    </tr>    <tr>        <td style="text-align: center;">@BeanPropertySetter</td>        <td style="text-align: center;">等价于 addBeanPropertySetter() 配置。</td>    </tr>    <tr>        <td style="text-align: center;">@SetNext</td>        <td style="text-align: center;">等价于 addSetNext() 配置。</td>    </tr></table><h4 id="2-对象定义"><a href="#2-对象定义" class="headerlink" title="2. 对象定义"></a>2. 对象定义</h4><p>修改之前创建的实体类，通过注解方式配置 <code>XPath</code> 的值实现映射，对应代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ObjectCreate</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"entityContainer"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EntityContainer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Entity<span class="token operator">></span> entityList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@SetNext</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addEntity</span><span class="token punctuation">(</span>Entity entity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        entityList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>entity<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ObjectCreate</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"entityContainer/entity"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Entity</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@BeanPropertySetter</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"entityContainer/entity/id"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@BeanPropertySetter</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"entityContainer/entity/name"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>        <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Attribute<span class="token operator">></span> attributes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@SetNext</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addAttribute</span><span class="token punctuation">(</span>Attribute attribute<span class="token punctuation">)</span> <span class="token punctuation">{</span>        attributes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>attribute<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@ObjectCreate</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"entityContainer/entity/attribute"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Attribute</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@BeanPropertySetter</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"entityContainer/entity/attribute/key"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String key<span class="token punctuation">;</span>    <span class="token annotation punctuation">@BeanPropertySetter</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"entityContainer/entity/attribute/value"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String value<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-规则定义"><a href="#3-规则定义" class="headerlink" title="3. 规则定义"></a>3. 规则定义</h4><p>类似的通过继承 <code>FromAnnotationsRuleModule</code> 配置读取实体类的注解信息。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAnnotationModule</span> <span class="token keyword">extends</span> <span class="token class-name">FromAnnotationsRuleModule</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configureRules</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">bindRulesFrom</span><span class="token punctuation">(</span>EntityContainer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-读取示例"><a href="#4-读取示例" class="headerlink" title="4. 读取示例"></a>4. 读取示例</h4><p>上述步骤完成之后即可实现文件解析，同样是一次定义全局可用，对应的示例代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DigestXmlTest</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> String location <span class="token operator">=</span> <span class="token string">"src\\main\\resources\\xml\\data.xml"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">annotationTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// write once, use anywhere</span>        <span class="token keyword">final</span> DigesterLoader loader <span class="token operator">=</span> DigesterLoader<span class="token punctuation">.</span><span class="token function">newLoader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyAnnotationModule</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> Digester digester <span class="token operator">=</span> loader<span class="token punctuation">.</span><span class="token function">newDigester</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// read and parse</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>FileReader reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            EntityContainer container <span class="token operator">=</span> digester<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>参考文章</strong></p><ol><li><a href="https://juejin.cn/post/7066826274836054023?searchId=20240108172348EE7C3A942D88F609E667">Apache Commons Digester 使用介绍</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、前置准备&quot;&gt;&lt;a href=&quot;#一、前置准备&quot; class=&quot;headerlink&quot; title=&quot;一、前置准备&quot;&gt;&lt;/a&gt;一、前置准备&lt;/h3&gt;&lt;h4 id=&quot;1-概念解释&quot;&gt;&lt;a href=&quot;#1-概念解释&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="后端" scheme="https://great-jin.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Java" scheme="https://great-jin.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Spring 实现优雅的工厂模式</title>
    <link href="https://great-jin.github.io/java/design/factory/"/>
    <id>https://great-jin.github.io/java/design/factory/</id>
    <published>2024-03-07T16:00:00.000Z</published>
    <updated>2024-05-08T11:41:44.231Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、模式结构"><a href="#一、模式结构" class="headerlink" title="一、模式结构"></a>一、模式结构</h3><h4 id="1-工厂模式"><a href="#1-工厂模式" class="headerlink" title="1. 工厂模式"></a>1. 工厂模式</h4><p>在开始之前，让我们了解一下什么是工厂模式?</p><p>在程序开发中，通常会涉及到相似对象的实例创建，而没有统一的关联却很难对程序进行维护管理。举个简单例子，系统中存在 <code>Dog</code> 与 <code>Cat</code> 两个类，且二者都包含了 <code>roar()</code> 方法，不同之处仅方法内部实现。随着系统需求的增长，后续需求中可能新增其它动物类，从而将导致在实例化时需要关注具体的类实现。</p><p>在工厂模式中，通过定义一个公共接口来创建对象，然后由子类决定实例化哪个类，即可使用工厂类来创建对象而不需要了解具体实现类的细节。同样以上述的示例为准，通过定义抽象接口类 <code>Animal</code> 并定义接口方法 <code>roar()</code>，子类只需实现并重写接口方法即可。在实例化对象时，通过传入的类型决定具体的实例化类，而不必关注具体的业务实现。<br><img src="/album/loading.gif" data-original="/album/article/java/design/factory.png"></p><h4 id="2-目标效果"><a href="#2-目标效果" class="headerlink" title="2. 目标效果"></a>2. 目标效果</h4><p>在 <code>Spring Boot</code> 中的一大核心即全局的 <code>Bean</code> 对象容器管理，因此可以将工厂模式与之进一步结合。</p><p>其核心在于利用 <code>Spring</code> 的 <code>Bean</code> 容器分组效果，将工厂类的不同实例化对象注入 <code>Bean</code> 容器，当需要创建对象时，直接通过 <code>Bean</code> 容器获取即可。</p><h3 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h3><h4 id="1-常量定义"><a href="#1-常量定义" class="headerlink" title="1. 常量定义"></a>1. 常量定义</h4><p>为了提供程序的可读性与可维护性，此处将后续涉及的常量统一外置定义。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Const</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ANIMAL_DOG <span class="token operator">=</span> <span class="token string">"dog"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String ANIMAL_CAT <span class="token operator">=</span> <span class="token string">"cat"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-工厂实现"><a href="#2-工厂实现" class="headerlink" title="2. 工厂实现"></a>2. 工厂实现</h4><p>这里同样以基础的动物工厂为例，定义了接口 <code>Animal</code>，同时定义了两个实现类 <code>Dog</code> 与 <code>Cat</code>。</p><p>需要注意此处的两个实现类需要通过 <code>@Service</code> 注入 <code>Bean</code> 对象至 <code>Spring</code> 容器中，并指定了 <code>Bean</code> 名称。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">roar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span>Const<span class="token punctuation">.</span>ANIMAL_DOG<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">roar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Dog roar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span>Const<span class="token punctuation">.</span>ANIMAL_CAT<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Cat</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">roar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Cat roar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-示例演示"><a href="#3-示例演示" class="headerlink" title="3. 示例演示"></a>3. 示例演示</h4><p>完成上述步骤后即可通过 <code>Map</code> 与 <code>@Autowired</code> 获取对象实例，依托于 <code>Spring</code> 容器实现了类似工厂与 <code>SPI</code> 结合的效果。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Animal<span class="token operator">></span> animalMap<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// --> Dog roar</span>        Animal dog <span class="token operator">=</span> animalMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Const<span class="token punctuation">.</span>ANIMAL_DOG<span class="token punctuation">)</span><span class="token punctuation">;</span>        dog<span class="token punctuation">.</span><span class="token function">roar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// --> Cat roar</span>        Animal cat <span class="token operator">=</span> animalMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Const<span class="token punctuation">.</span>ANIMAL_CAT<span class="token punctuation">)</span><span class="token punctuation">;</span>        cat<span class="token punctuation">.</span><span class="token function">roar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、模式结构&quot;&gt;&lt;a href=&quot;#一、模式结构&quot; class=&quot;headerlink&quot; title=&quot;一、模式结构&quot;&gt;&lt;/a&gt;一、模式结构&lt;/h3&gt;&lt;h4 id=&quot;1-工厂模式&quot;&gt;&lt;a href=&quot;#1-工厂模式&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="模式设计" scheme="https://great-jin.github.io/categories/%E6%A8%A1%E5%BC%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>Spring SQL 拦截器实现</title>
    <link href="https://great-jin.github.io/java/spring/tool/sql-interceptor/"/>
    <id>https://great-jin.github.io/java/spring/tool/sql-interceptor/</id>
    <published>2024-03-07T16:00:00.000Z</published>
    <updated>2024-04-24T14:10:40.817Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-依赖引入"><a href="#1-依赖引入" class="headerlink" title="1. 依赖引入"></a>1. 依赖引入</h4><p>在当下绝多数的工程中通常采用 <code>MyBatis</code> 作为数据交互框架，同类此处在项目中导入下述依赖。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-注解介绍"><a href="#2-注解介绍" class="headerlink" title="2. 注解介绍"></a>2. 注解介绍</h4><p>以往的文章中已经详细介绍过拦截器的使用，这里仅简要概述一下的 <code>@Intercepts</code> 注解的参数配置。</p><p><code>@Intercepts</code> 中提供了注解参数 <code>@Signature</code> 用于配置拦截目标信息，<code>@Signature</code> 注解的配置参数如下：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">方法</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">type</td>        <td style="text-align: center;">指定目标方法所在的接口或类。</td>    </tr>    <tr>        <td style="text-align: center;">method</td>        <td style="text-align: center;">指定要拦截的目标方法的名称。</td>    </tr>    <tr>        <td style="text-align: center;">args</td>        <td style="text-align: center;">指定拦截目标方法的参数类型。</td>    </tr></table><p>假设存在目标类 <code>TargetClass</code>，并包含了两个方法，具体内容如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> TargetClass <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo1</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo2</span><span class="token punctuation">(</span>String s1<span class="token punctuation">,</span> String s2<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>若想要编写一个拦截器作用于上述 <code>demo1()</code> 方法，则 <code>@Intercepts</code> 注解的定义格式如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Intercepts</span><span class="token punctuation">(</span>        <span class="token annotation punctuation">@Signature</span><span class="token punctuation">(</span>                type <span class="token operator">=</span> TargetClass<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                method <span class="token operator">=</span> <span class="token string">"demo1"</span><span class="token punctuation">,</span>                args <span class="token operator">=</span> <span class="token punctuation">{</span> String<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-拦截实现"><a href="#3-拦截实现" class="headerlink" title="3. 拦截实现"></a>3. 拦截实现</h4><p>基于上述描述，我们即可编辑拦截器实现 SQL 层面执行的跟踪编辑操作。</p><p>在 <code>MyBatis</code> 中 <code>JDBC</code> 的执行依托于 <code>org.apache.ibatis.executor.Executor</code> 接口，因此其对应的拦截器定义如下，其中定义了作用于 <code>query()</code> 方法查询。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Intercepts</span><span class="token punctuation">(</span>        <span class="token annotation punctuation">@Signature</span><span class="token punctuation">(</span>                type <span class="token operator">=</span> Executor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                method <span class="token operator">=</span> <span class="token string">"query"</span><span class="token punctuation">,</span>                args <span class="token operator">=</span> <span class="token punctuation">{</span>                        MappedStatement<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                        Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                        RowBounds<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>                        ResultHandler<span class="token punctuation">.</span><span class="token keyword">class</span>                <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"rawtypes"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QueryInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">plugin</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Plugin<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Invocation invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        MappedStatement ms <span class="token operator">=</span> <span class="token punctuation">(</span>MappedStatement<span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        Object params <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        RowBounds rowBounds <span class="token operator">=</span> <span class="token punctuation">(</span>RowBounds<span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        ResultHandler resultHandler <span class="token operator">=</span> <span class="token punctuation">(</span>ResultHandler<span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Get sql detail</span>        Executor executor <span class="token operator">=</span> <span class="token punctuation">(</span>Executor<span class="token punctuation">)</span> invocation<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BoundSql boundSql <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getBoundSql</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">;</span>        CacheKey cacheKey <span class="token operator">=</span> executor<span class="token punctuation">.</span><span class="token function">createCacheKey</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> params<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Handle target sql</span>        SqlCommandType sqlType <span class="token operator">=</span> ms<span class="token punctuation">.</span><span class="token function">getSqlCommandType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sqlType <span class="token operator">==</span> SqlCommandType<span class="token punctuation">.</span>SELECT<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=========> Query sql: "</span> <span class="token operator">+</span> boundSql<span class="token punctuation">.</span><span class="token function">getSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> executor<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>ms<span class="token punctuation">,</span> params<span class="token punctuation">,</span> rowBounds<span class="token punctuation">,</span> resultHandler<span class="token punctuation">,</span> cacheKey<span class="token punctuation">,</span> boundSql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-工厂注入"><a href="#4-工厂注入" class="headerlink" title="4. 工厂注入"></a>4. 工厂注入</h4><p>上述步骤仅实现了拦截器，还需将其注入到 <code>SqlSessionFactory</code> 中才能在执行 <code>SQL</code> 时生效。</p><p>通过 <code>Spring Boot</code> 中的 <code>ApplicationRunner</code>，即可实现在工程启动时注入拦截器到工厂类，代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SqlFactoryRunner</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationRunner</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>SqlSessionFactory<span class="token operator">></span> sqlSessionFactoryList<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>ApplicationArguments args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>SqlSessionFactory sqlSessionFactory <span class="token operator">:</span> sqlSessionFactoryList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Inject interceptor to sql factory</span>            sqlSessionFactory<span class="token punctuation">.</span><span class="token function">getConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">QueryInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-依赖引入&quot;&gt;&lt;a href=&quot;#1-依赖引入&quot; class=&quot;headerlink&quot; title=&quot;1. 依赖引入&quot;&gt;&lt;/a&gt;1. 依赖引入&lt;/h4&gt;&lt;p&gt;在当下绝多数的工程中通常采用 &lt;code&gt;MyBatis&lt;/code&gt; 作为数据交互框架，同类此处在项目</summary>
      
    
    
    
    <category term="Spring工具" scheme="https://great-jin.github.io/categories/Spring%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Spring Boot" scheme="https://great-jin.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring 动态数据源教程</title>
    <link href="https://great-jin.github.io/java/spring/tool/datasource/"/>
    <id>https://great-jin.github.io/java/spring/tool/datasource/</id>
    <published>2024-03-07T16:00:00.000Z</published>
    <updated>2024-03-09T09:54:42.170Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、工程配置"><a href="#一、工程配置" class="headerlink" title="一、工程配置"></a>一、工程配置</h3><h4 id="1-依赖导入"><a href="#1-依赖导入" class="headerlink" title="1. 依赖导入"></a>1. 依赖导入</h4><p>在工程中引入 <code>jdbc-starter</code> 与 <code>spring-data</code> 依赖，内容如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-data-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-文件配置"><a href="#2-文件配置" class="headerlink" title="2. 文件配置"></a>2. 文件配置</h4><p>在工程 <code>YML</code> 配置文件中添加多个数据源信息，这里我以两个为例。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource1</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">jdbc-url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/test_db1<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=utf<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL</span>=false    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>  <span class="token key atrule">datasource2</span><span class="token punctuation">:</span>    <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver    <span class="token key atrule">jdbc-url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>3306/test_db2<span class="token punctuation">?</span>useUnicode=true<span class="token important">&amp;characterEncoding</span>=utf<span class="token punctuation">-</span>8<span class="token important">&amp;useSSL</span>=false    <span class="token key atrule">username</span><span class="token punctuation">:</span> root    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、对象管理"><a href="#二、对象管理" class="headerlink" title="二、对象管理"></a>二、对象管理</h3><h4 id="1-常量定义"><a href="#1-常量定义" class="headerlink" title="1. 常量定义"></a>1. 常量定义</h4><p>为了提高程序的可维护性，这里将后续涉及的常量统一外置定义。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatasourceConst</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DS_MASTER <span class="token operator">=</span> <span class="token string">"datasource1"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String DS_SLAVE <span class="token operator">=</span> <span class="token string">"datasource2"</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TM_MASTER <span class="token operator">=</span> <span class="token string">"transactionManager1"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String TM_SLAVE <span class="token operator">=</span> <span class="token string">"transactionManager2"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Bean注入"><a href="#2-Bean注入" class="headerlink" title="2. Bean注入"></a>2. Bean注入</h4><p>通过 <code>@Bean</code> 将配置文件中的多个数据源信息注入 <code>Spring</code> 容器，其中 <code>@Primary</code> 标识数据源为默认源。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DatasourceConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> DatasourceConst<span class="token punctuation">.</span>DS_MASTER<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"spring.datasource1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DataSource <span class="token function">dataSource1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> DataSourceBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> DatasourceConst<span class="token punctuation">.</span>DS_SLAVE<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"spring.datasource2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DataSource <span class="token function">dataSource2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> DataSourceBuilder<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@Primary</span>    <span class="token keyword">public</span> DataSource <span class="token function">dynamicDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> dataSourceMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSourceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>DatasourceConst<span class="token punctuation">.</span>DS_MASTER<span class="token punctuation">,</span> <span class="token function">dataSource1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSourceMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>DatasourceConst<span class="token punctuation">.</span>DS_SLAVE<span class="token punctuation">,</span> <span class="token function">dataSource2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置动态数据源</span>        DynamicDataSource dataSources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DynamicDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSources<span class="token punctuation">.</span><span class="token function">setTargetDataSources</span><span class="token punctuation">(</span>dataSourceMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        dataSources<span class="token punctuation">.</span><span class="token function">setDefaultTargetDataSource</span><span class="token punctuation">(</span><span class="token function">dataSource1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dataSources<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-事务配置"><a href="#3-事务配置" class="headerlink" title="3. 事务配置"></a>3. 事务配置</h4><p>同理，当配置多个数据源时若需要使用事务需要将对应的事务管理注入 <code>Spring</code> 容器。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> DatasourceConst<span class="token punctuation">.</span>TM_MASTER<span class="token punctuation">)</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Primary</span>    DataSourceTransactionManager <span class="token function">transactionManager1</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>DatasourceConst<span class="token punctuation">.</span>DS_MASTER<span class="token punctuation">)</span> DataSource datasource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span>datasource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> DatasourceConst<span class="token punctuation">.</span>TM_SLAVE<span class="token punctuation">)</span>    <span class="token annotation punctuation">@Autowired</span>    DataSourceTransactionManager <span class="token function">transactionManager2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>DatasourceConst<span class="token punctuation">.</span>DS_SLAVE<span class="token punctuation">)</span> DataSource datasource<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span>datasource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> DatasourceConst<span class="token punctuation">.</span>TM_CHAIN<span class="token punctuation">)</span>    <span class="token keyword">public</span> ChainedTransactionManager <span class="token function">chainedTransactionManager</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>DatasourceConst<span class="token punctuation">.</span>TM_MASTER<span class="token punctuation">)</span> DataSourceTransactionManager tm1<span class="token punctuation">,</span>                                                               <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span>DatasourceConst<span class="token punctuation">.</span>TM_SLAVE<span class="token punctuation">)</span> DataSourceTransactionManager tm2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransactionManager</span><span class="token punctuation">(</span>tm1<span class="token punctuation">,</span> tm2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、数据切换"><a href="#三、数据切换" class="headerlink" title="三、数据切换"></a>三、数据切换</h3><h4 id="1-管理工具"><a href="#1-管理工具" class="headerlink" title="1. 管理工具"></a>1. 管理工具</h4><p>新建 <code>DynamicDataSourceHolder</code> 用于标识管理当前激活的数据源。</p><p>基于 <code>Web</code> 请求的特性，每个请求线程都可能使用到不同的数据源，因此选择 <code>ThreadLocal</code> 变量存储。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicDataSourceHolder</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 动态数据源名称上下文     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>String<span class="token operator">></span> DATASOURCE_HOLDER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取数据源名称     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getContextKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String key <span class="token operator">=</span> DATASOURCE_HOLDER<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> key <span class="token operator">==</span> null <span class="token operator">?</span> DatasourceConst<span class="token punctuation">.</span>DS_MASTER <span class="token operator">:</span> key<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置/切换数据源     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setContextKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DATASOURCE_HOLDER<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除当前数据源名称     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        DATASOURCE_HOLDER<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-切换配置"><a href="#2-切换配置" class="headerlink" title="2. 切换配置"></a>2. 切换配置</h4><p>新建类继承于 <code>AbstractRoutingDataSource</code>，当程序在获取数据源连接池时将会执行 <code>determineCurrentLookupKey()</code> 方法。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicDataSource</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractRoutingDataSource</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Through the key(bean name) to get which datasource to use.     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Object <span class="token function">determineCurrentLookupKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> DynamicDataSourceHolder<span class="token punctuation">.</span><span class="token function">getContextKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-演示示例"><a href="#3-演示示例" class="headerlink" title="3. 演示示例"></a>3. 演示示例</h4><p>在应用中切换数据源时即可通过 <code>DynamicDataSourceHolder</code> 工具类快速切换，为了更直观显示效果，建议多个数据源选择不同的库执行查询并拼接。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/api/sysUser"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysUserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> SysUserService sysUserService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ResponseEntity<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>SysUser<span class="token operator">></span> list1<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Query data with default datasource</span>            list1 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sysUserService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Change datasource to slave node</span>            DynamicDataSourceHolder<span class="token punctuation">.</span><span class="token function">setContextKey</span><span class="token punctuation">(</span>DatasourceConst<span class="token punctuation">.</span>DS_SLAVE<span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>SysUser<span class="token operator">></span> list2 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sysUserService<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// Merge data</span>            list1<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            DynamicDataSourceHolder<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ResponseEntity<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>参考文章</strong></p><ol><li><a href="https://juejin.cn/post/6844904050262016007">搞定SpringBoot多数据源(2)：动态数据源</a></li><li><a href="https://stackoverflow.com/questions/30337582/spring-boot-configure-and-use-two-data-sources">Spring Boot configure and use two data sources</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、工程配置&quot;&gt;&lt;a href=&quot;#一、工程配置&quot; class=&quot;headerlink&quot; title=&quot;一、工程配置&quot;&gt;&lt;/a&gt;一、工程配置&lt;/h3&gt;&lt;h4 id=&quot;1-依赖导入&quot;&gt;&lt;a href=&quot;#1-依赖导入&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="Spring工具" scheme="https://great-jin.github.io/categories/Spring%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Spring Boot" scheme="https://great-jin.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Docker Compose基础</title>
    <link href="https://great-jin.github.io/linux/docker/docker%20compose/"/>
    <id>https://great-jin.github.io/linux/docker/docker%20compose/</id>
    <published>2024-02-19T16:00:00.000Z</published>
    <updated>2024-02-29T11:31:43.623Z</updated>
    
    <content type="html"><![CDATA[<p><code>Docker</code> 容器基于 <code>CLI</code> 运行，而 <code>Docker compose</code> 则基于 <code>yaml</code> 配置文件，后者相对自动化程度更高。</p><h3 id="一、服务安装"><a href="#一、服务安装" class="headerlink" title="一、服务安装"></a>一、服务安装</h3><h4 id="1-前置服务"><a href="#1-前置服务" class="headerlink" title="1. 前置服务"></a>1. 前置服务</h4><p><code>Docker compose</code> 是基于 <code>Docker</code> 扩展，因此需要先安装 <code>Docker</code> 服务。</p><p>默认 <code>Docker</code> 安装路径为 <code>/var/lib/docker</code>。</p><pre class="line-numbers language-bash"><code class="language-bash">yum <span class="token function">install</span> docker-ce -y                   <span class="token comment" spellcheck="true"># 通过 yum 源安装</span>systemctl start docker                     <span class="token comment" spellcheck="true"># 启动服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-文件下载"><a href="#2-文件下载" class="headerlink" title="2. 文件下载"></a>2. 文件下载</h4><p>若使用 <code>curl</code> 命令下载失败可直接进入 <code>Docker GitHub</code> 发布页手动下载文件再上传至服务器，<a href="https://github.com/docker/compose/releases">官网直达</a>。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 文件下载</span>curl -L <span class="token string">"https://mirrors.tuna.tsinghua.edu.cn/docker-compose/latest/<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -s<span class="token variable">)</span></span>/<span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> -m<span class="token variable">)</span></span>/docker-compose"</span> -o /usr/local/bin/docker-compose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-链接安装"><a href="#3-链接安装" class="headerlink" title="3. 链接安装"></a>3. 链接安装</h4><p>完成 <code>Docker Compose</code> 文件下载之后需要进行授权并创建链接文件。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 文件授权</span><span class="token function">chmod</span> +x /usr/local/bin/docker-compose<span class="token comment" spellcheck="true"># 文件链接</span><span class="token function">ln</span> -s /usr/local/bin/docker-compose /usr/bin/docker-compose<span class="token comment" spellcheck="true"># 安装验证</span>docker-compose version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、文件配置"><a href="#二、文件配置" class="headerlink" title="二、文件配置"></a>二、文件配置</h3><h4 id="1-基本格式"><a href="#1-基本格式" class="headerlink" title="1. 基本格式"></a>1. 基本格式</h4><p><code>Docker Compose</code> 通过 <code>yaml</code> 文件实现容器的管理，其配置内容参数说明如下：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">参数</td>        <th style="text-align: center;">作用</td>    </tr>    <tr>        <td style="text-align: center;">image</td>        <td style="text-align: center;">用于指定所要使用镜像。</td>    </tr>    <tr>        <td style="text-align: center;">container_name</td>        <td style="text-align: center;">用于配置启动容器的名称。</td>    </tr>    <tr>        <td style="text-align: center;">environment</td>        <td style="text-align: center;">用于配置容器环境变量。</td>    </tr>    <tr>        <td style="text-align: center;">ports</td>        <td style="text-align: center;">用于配置容器与本机的端口映射。</td>    </tr>    <tr>        <td style="text-align: center;">volumes</td>        <td style="text-align: center;">用于配置容器与本机的文件映射。</td>    </tr></table><p>下述为一个完整的 <code>yaml</code> 配置文件示例。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># Application name</span>  <span class="token key atrule">service-1</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Config the image</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> test_image        <span class="token comment" spellcheck="true"># Config the container name</span>    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> test_service        <span class="token comment" spellcheck="true"># Config the port proxy</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token string">"8080:8080"</span>    <span class="token comment" spellcheck="true"># Config the environment properties</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">props1</span><span class="token punctuation">:</span> value1      <span class="token punctuation">-</span> <span class="token key atrule">props2</span><span class="token punctuation">:</span> value2        <span class="token comment" spellcheck="true"># config the directory or file proxy</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /home/docker/test/application.yml<span class="token punctuation">:</span>/app/application.yml     <span class="token comment" spellcheck="true"># Sharing the same networking space with the Host</span>    <span class="token key atrule">network_mode</span><span class="token punctuation">:</span> <span class="token string">"host"</span>    <span class="token comment" spellcheck="true"># Application name</span>  <span class="token key atrule">service-2</span><span class="token punctuation">:</span>    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span>       <span class="token punctuation">-</span> service<span class="token punctuation">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-网络配置"><a href="#2-网络配置" class="headerlink" title="2. 网络配置"></a>2. 网络配置</h4><h5 id="1-depends-on"><a href="#1-depends-on" class="headerlink" title="(1) depends_on"></a>(1) depends_on</h5><p><code>depends_on</code> 用于定义服务之间的启动顺序和依赖关系。具体而言，它指定了某个服务依赖于其他服务，即使依赖的服务启动后，也确保依赖服务在其之前启动。</p><p>然而，它并不保证服务已经完全健康或准备好接受连接，因此它主要用于启动顺序的管理。</p><h5 id="2-network-mode"><a href="#2-network-mode" class="headerlink" title="(2) network_mode"></a>(2) network_mode</h5><p><code>network_mode</code> 用于指定服务使用的网络模式。它可以设置为 <code>bridge、host、none</code> 或自定义网络名称。</p><p>默认情况下，<code>Docker Compose</code> 创建一个自定义网络，但你可以通过 <code>network_mode</code> 来覆盖这个行为。</p><h3 id="三、命令介绍"><a href="#三、命令介绍" class="headerlink" title="三、命令介绍"></a>三、命令介绍</h3><h4 id="1-服务启停"><a href="#1-服务启停" class="headerlink" title="1. 服务启停"></a>1. 服务启停</h4><p>完成 <code>yaml</code> 文件配置之后，即可在同级目录下通过下述命令启停容器。</p><p>当完成容器启动后，可同样通过 <code>docker ps</code> 等命令进行查看，与之前文章提到 <code>docker</code> 使用并无不同。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动服务</span>docker-compose up<span class="token comment" spellcheck="true"># 后台运行</span>docker-compose up -d<span class="token comment" spellcheck="true"># 停止服务</span>docker-compose down<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2. 常用命令"></a>2. 常用命令</h4><p>除了基础的服务启停之外，常用的命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 动态查看日志</span>docker-compose logs -f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;Docker&lt;/code&gt; 容器基于 &lt;code&gt;CLI&lt;/code&gt; 运行，而 &lt;code&gt;Docker compose&lt;/code&gt; 则基于 &lt;code&gt;yaml&lt;/code&gt; 配置文件，后者相对自动化程度更高。&lt;/p&gt;
&lt;h3 id=&quot;一、服务安装&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="服务运维" scheme="https://great-jin.github.io/categories/%E6%9C%8D%E5%8A%A1%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Linux" scheme="https://great-jin.github.io/tags/Linux/"/>
    
    <category term="Docker" scheme="https://great-jin.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>枚举实现优雅的验证</title>
    <link href="https://great-jin.github.io/java/design/enum/"/>
    <id>https://great-jin.github.io/java/design/enum/</id>
    <published>2024-02-19T16:00:00.000Z</published>
    <updated>2024-05-08T11:41:44.230Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、模式结构"><a href="#一、模式结构" class="headerlink" title="一、模式结构"></a>一、模式结构</h3><h4 id="1-背景介绍"><a href="#1-背景介绍" class="headerlink" title="1. 背景介绍"></a>1. 背景介绍</h4><p>枚举的验证模式核心是基于接口实现而达到，当一个枚举类实现接口后，其每个元素都将需要实现接口类中定义的接口方法。基于此特性，我们即可将一个枚举定义为一类对象，而内部枚举成员则为对象的成员属性，同时由于接口实现的特性，枚举中的每个元素则需要接口类中定义的接口方法。</p><p>举个易懂的例子，程序中存在 <code>Apple</code> 和 <code>Orange</code> 两种水果，二者都包含 <code>MEAT</code> 与 <code>SHAPE</code> 两种属性，为了实现验证该属性的合法性，定义接口 <code>Element</code> 包含对于属性的描述方法，如名称与是否为空等等。当 <code>Apple</code> 枚举实现于 <code>Element</code> 接口，则枚举中的每个元素均需实现 <code>Element</code> 接口方法，即可在元素方法实现中定义验证规则。<br><img src="/album/loading.gif" data-original="/album/article/java/design/validate.png"></p><h3 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h3><h4 id="1-接口定义"><a href="#1-接口定义" class="headerlink" title="1. 接口定义"></a>1. 接口定义</h4><p>创建接口类 <code>Element</code> 并定义对应所需字段。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>    String <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> <span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> Object <span class="token function">defaultValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-枚举实现"><a href="#2-枚举实现" class="headerlink" title="2. 枚举实现"></a>2. 枚举实现</h4><h5 id="1-实现一"><a href="#1-实现一" class="headerlink" title="(1) 实现一"></a>(1) 实现一</h5><p>创建枚举 <code>AppleElement</code> 实现于 <code>Element</code> 接口，此时枚举中的元素成员需实现对应接口。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> AppleElement <span class="token keyword">implements</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>    SHAPE <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"shape"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Apple shape"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    MEAT <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"meat"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>                <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Apple meat"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> AppleElement <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>AppleElement value <span class="token operator">:</span> AppleElement<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-实现二"><a href="#2-实现二" class="headerlink" title="(2) 实现二"></a>(2) 实现二</h5><p>同理再创建一个枚举 <code>OrangeElement</code>，定义方式同上。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> OrangeElement <span class="token keyword">implements</span> <span class="token class-name">Element</span> <span class="token punctuation">{</span>    SHAPE <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"shape"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Orange shape"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    MEAT <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"meat"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Orange meat"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> OrangeElement <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>OrangeElement value <span class="token operator">:</span> OrangeElement<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Not found"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-验证示例"><a href="#3-验证示例" class="headerlink" title="3. 验证示例"></a>3. 验证示例</h4><p>完成上述步骤后即可快速实现同源但不同类型的数据验证，相应示例如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ElementTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 定义对象用于描述 Apple</span>        var appleData <span class="token operator">=</span> List<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>                Map<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>AppleElement<span class="token punctuation">.</span>SHAPE<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"round"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                Map<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>AppleElement<span class="token punctuation">.</span>MEAT<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 定义对象用于描述 Orange</span>        var orangeData <span class="token operator">=</span> List<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>                Map<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>OrangeElement<span class="token punctuation">.</span>SHAPE<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"round"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                Map<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>OrangeElement<span class="token punctuation">.</span>MEAT<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"white"</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 验证描述信息是否符合规范</span>        <span class="token function">validate</span><span class="token punctuation">(</span>appleData<span class="token punctuation">,</span> AppleElement<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">validate</span><span class="token punctuation">(</span>orangeData<span class="token punctuation">,</span> OrangeElement<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">validate</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">>></span> dataList<span class="token punctuation">,</span>                          Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Element</span><span class="token operator">></span> aClass<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> data <span class="token operator">:</span> dataList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            var offset <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            var msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> String<span class="token operator">></span> row <span class="token operator">:</span> data<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                offset<span class="token operator">++</span><span class="token punctuation">;</span>                var index <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                var value <span class="token operator">=</span> row<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 通过反射获取枚举对应元素</span>                Element element <span class="token operator">=</span> <span class="token punctuation">(</span>Element<span class="token punctuation">)</span> aClass                        <span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">boolean</span> blank <span class="token operator">=</span> Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">||</span> Objects<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 此处为验证是否为空</span>                <span class="token comment" spellcheck="true">// 可根据业务实现更复杂逻辑</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">required</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> blank<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    msg<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Filed {"</span> <span class="token operator">+</span> element<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"} can't be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>msg<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 若非法则输入信息</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>offset <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、模式结构&quot;&gt;&lt;a href=&quot;#一、模式结构&quot; class=&quot;headerlink&quot; title=&quot;一、模式结构&quot;&gt;&lt;/a&gt;一、模式结构&lt;/h3&gt;&lt;h4 id=&quot;1-背景介绍&quot;&gt;&lt;a href=&quot;#1-背景介绍&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="模式设计" scheme="https://great-jin.github.io/categories/%E6%A8%A1%E5%BC%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>JVM参数调优记录</title>
    <link href="https://great-jin.github.io/java/advance/optimize/"/>
    <id>https://great-jin.github.io/java/advance/optimize/</id>
    <published>2024-02-06T16:00:00.000Z</published>
    <updated>2024-05-18T11:39:41.118Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、参数配置"><a href="#一、参数配置" class="headerlink" title="一、参数配置"></a>一、参数配置</h3><h4 id="1-配置方式"><a href="#1-配置方式" class="headerlink" title="1. 配置方式"></a>1. 配置方式</h4><p>在虚拟机中 <code>-X</code> 和 <code>-D</code> 都可用于指定 <code>JVM</code> 参数，但它们在使用方式和作用范围上有一些区别。</p><ul><li><p><code>-X</code> 用于指定非标准的 <code>JVM</code> 参数，这些参数通常是供具体的 <code>JVM</code> 实现或特定的虚拟机选项使用的。它的使用方式是 <code>-X&lt;parameter&gt;</code> ，其中 <code>&lt;parameter&gt;</code> 是具体的 <code>JVM</code> 参数名称。</p></li><li><p><code>-D</code> 用于设置系统属性，可以在应用程序中通过 <code>System.getProperty()</code> 方法获取。它的使用方式是 <code>-D&lt;property&gt;=&lt;value&gt;</code>，其中 <code>&lt;property&gt;</code> 是属性名称，<code>&lt;value&gt;</code> 是属性值。</p></li></ul><p>总结： <code>-X</code> 参数用于指定 <code>JVM</code> 的非标准参数，而 <code>-D</code> 参数用于设置系统属性。<code>-X</code> 参数通常影响 <code>JVM</code> 的行为和性能，而 <code>-D</code> 参数提供了一种在应用程序中传递配置信息的机制。</p><h5 id="1-基本格式"><a href="#1-基本格式" class="headerlink" title="(1) 基本格式"></a>(1) 基本格式</h5><p><code>JVM</code> 配置参数通常由 <code>-XX:</code> 开头，基本格式如下：</p><blockquote><ul><li>若用于配置是否启用，由 <code>+ -</code> 分别控制开启与关闭。</li><li>若用于配置大小或数值变量，遵循 <code>&lt;option&gt;=&lt;value&gt;</code> 格式。</li></ul></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 表示开启 option 选项</span>-XX:+<span class="token operator">&lt;</span>option<span class="token operator">></span><span class="token comment" spellcheck="true"># 表示关闭 option 选项</span>-XX:-<span class="token operator">&lt;</span>option<span class="token operator">></span>    <span class="token comment" spellcheck="true"># 表示将 option 值赋为 value</span>-XX:<span class="token operator">&lt;</span>option<span class="token operator">>=</span><span class="token operator">&lt;</span>value<span class="token operator">></span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-优先级"><a href="#2-优先级" class="headerlink" title="2. 优先级"></a>2. 优先级</h4><p>在 <code>Java</code> 命令行运行 <code>JAR</code> 包时，<code>JVM</code> 参数可以在 <code>-jar</code> 选项之前或之后指定，这两种方式会影响参数的解析和执行顺序。</p><blockquote><ul><li>参数在 <code>-jar</code> 之前，则会在 <code>JVM</code> 启动前解析和应用。</li><li>参数在 <code>-jar</code> 之后，则会在解析 <code>JAR</code> 包时被应用。</li><li>若 <code>JVM</code> 参数与 <code>JAR</code> 包的命令行参数存在冲突，<code>JVM</code> 参数的优先级更高。</li></ul></blockquote><p>如下示例中方式一的 <code>-Xmx512m</code> 优先级高于方式二中的 <code>-Xmx1024m</code>。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 方式一</span>java -Xmx512m -jar myapp.jar<span class="token comment" spellcheck="true"># 方式二</span>java -jar myapp.jar -Xmx1024m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、常用配置"><a href="#二、常用配置" class="headerlink" title="二、常用配置"></a>二、常用配置</h3><h4 id="1-内存参数"><a href="#1-内存参数" class="headerlink" title="1. 内存参数"></a>1. 内存参数</h4><p>常见的 <code>JVM</code> 内存参数如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 堆内存初始值</span>-Xms2G <span class="token comment" spellcheck="true"># 堆内存最大值</span>-Xmx2G<span class="token comment" spellcheck="true"># 每个线程的堆栈大小，默认 1MB，在相同物理内存下，减小这个值能生成更多的线程</span><span class="token comment" spellcheck="true"># 但是操作系统对一个进程内的线程数还是有限制的，不能无限生成，经验值在 3000~5000 左右。</span>-Xss512k<span class="token comment" spellcheck="true"># 设置年轻代大小，增大年轻代后，将会减小年老代大小。</span><span class="token comment" spellcheck="true"># 此值对系统性能影响较大，Sun 官方推荐配置为整个堆的 3/8。</span>-Xmn1024m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-JVM参数"><a href="#2-JVM参数" class="headerlink" title="2. JVM参数"></a>2. JVM参数</h4><p>常见的 <code>JVM</code> 配置参数如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># CMS垃圾回收器并行线程线，推荐值为CPU核心数。</span>-XX:ConcGCThreads<span class="token operator">=</span>4<span class="token comment" spellcheck="true"># 新生代并行收集器的线程数。</span>-XX:ParallelGCThreads<span class="token operator">=</span>8<span class="token comment" spellcheck="true"># 设置新生代中 Eden 与 Survivor 的比例，默认为 8，即 8:1:1</span>-XX:SurvivorRatio<span class="token operator">=</span>8<span class="token comment" spellcheck="true"># 直接晋升到老年代的对象大小</span><span class="token comment" spellcheck="true"># 设置该值后将忽略 MaxTenuringThreshold 设置，当对象大小达到设置值后直接晋升老年代</span>-XX:PretenureSizeThreshold<span class="token operator">=</span>1m<span class="token comment" spellcheck="true"># 设置垃圾最大年龄，取值 0~15，默认为 15</span>-XX:MaxTenuringThreshold<span class="token operator">=</span>10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-系统参数"><a href="#3-系统参数" class="headerlink" title="3. 系统参数"></a>3. 系统参数</h4><p>常见的系统参数配置参数如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 防止虚拟机阻塞</span>-Djava.security.egd<span class="token operator">=</span>file:/dev/./urandom<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-GC参数"><a href="#4-GC参数" class="headerlink" title="4. GC参数"></a>4. GC参数</h4><p>常见的虚拟机垃圾回收（<code>GC</code>）参数配置参数如下：</p><p>开启日志后生成的 <code>GC</code> 信息文件可通过工具进行分析，推荐在线分析网站：<code>https://gceasy.io</code>。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 打印 gc 发生的时间戳</span>-XX:+PrintGCDateStamps<span class="token comment" spellcheck="true"># 打印 gc 发生时的分代信息</span>-XX:+PrintTenuringDistribution<span class="token comment" spellcheck="true"># 打印 gc 停顿时长</span>-XX:+PrintGCApplicationStoppedTime<span class="token comment" spellcheck="true"># 打印 gc 间隔的服务运行时长</span>-XX:+PrintGCApplicationConcurrentTime<span class="token comment" spellcheck="true"># 打印 gc 详情，包括 gc 前/内存等</span>-XX:+PrintGCDetails<span class="token comment" spellcheck="true"># 指定 gc log 的路径，存放于当前 gclogs 目录下的 gc.log.date 文件</span>-Xloggc:./gclogs/gc.log.date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、JDK工具"><a href="#三、JDK工具" class="headerlink" title="三、JDK工具"></a>三、JDK工具</h3><h4 id="1-Jinfo"><a href="#1-Jinfo" class="headerlink" title="1. Jinfo"></a>1. Jinfo</h4><p><code>jinfo</code> 是 <code>JDK</code>中的一个命令行工具，用于实时查看和调整 <code>Java</code> 虚拟机（<code>JVM</code>）的配置信息。</p><p>通过 <code>jinfo</code> 可以获取和修改正在运行的 <code>Java</code> 进程的虚拟机配置参数，对于调优和诊断 <code>Java</code> 应用程序是很有帮助的。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看进程的虚拟机参数信息</span>jinfo <span class="token operator">&lt;</span>options<span class="token operator">></span> <span class="token operator">&lt;</span>pid<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="1-flags"><a href="#1-flags" class="headerlink" title="(1) flags"></a>(1) flags</h5><p>显示所有可用的虚拟机参数及其当前值。</p><pre class="line-numbers language-bash"><code class="language-bash">jinfo -flags <span class="token operator">&lt;</span>pid<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-flag"><a href="#2-flag" class="headerlink" title="(2) flag"></a>(2) flag</h5><p>显示指定标志的值。</p><pre class="line-numbers language-bash"><code class="language-bash">jinfo -flag <span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>pid<span class="token operator">></span><span class="token comment" spellcheck="true"># 查看 pid 为 123 的 ThreadStackSize 参数信息</span><span class="token comment" spellcheck="true"># 输出: -XX:ThreadStackSize=1024</span>jinfo -flag ThreadStackSize 123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-flag"><a href="#3-flag" class="headerlink" title="(3) -flag [+|-]"></a>(3) -flag [+|-]</h5><p>启用或禁用指定的标志。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 开启配置</span>jinfo -flag +<span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>pid<span class="token operator">></span><span class="token comment" spellcheck="true"># 关闭配置</span>jinfo -flag -<span class="token operator">&lt;</span>name<span class="token operator">></span> <span class="token operator">&lt;</span>pid<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-sysprops"><a href="#4-sysprops" class="headerlink" title="(4) sysprops"></a>(4) sysprops</h5><p>显示 <code>Java</code> 系统属性的值。</p><pre class="line-numbers language-bash"><code class="language-bash">jinfo -sysprops <span class="token operator">&lt;</span>pid<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-Jstat"><a href="#2-Jstat" class="headerlink" title="2. Jstat"></a>2. Jstat</h4><p><code>jstat</code> 是 <code>JDK</code> 中的一个命令行工具，用于监视 <code>Java</code> 虚拟机 <code>(JVM)</code> 的各种统计信息。</p><p>它提供了对堆内存、垃圾回收、类装载、<code>JIT</code> 编译等方面的实时性能数据，帮助开发人员和系统管理员诊断和分析 <code>Java</code> 应用程序的性能问题。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># &lt;pid>: jps process id</span><span class="token comment" spellcheck="true"># &lt;interval>: time interval, ms</span>jstat -gc <span class="token operator">&lt;</span>pid<span class="token operator">></span> <span class="token operator">&lt;</span>interval<span class="token operator">></span><span class="token comment" spellcheck="true"># Simple info</span>jstat -gcutil <span class="token operator">&lt;</span>pid<span class="token operator">></span> <span class="token operator">&lt;</span>interval<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/album/loading.gif" data-original="/album/article/java/jvm/31.png"><br><img src="/album/loading.gif" data-original="/album/article/java/jvm/32.png"></p><hr><ul><li><strong>S0C</strong>：年轻代中第一个 <code>Survivor</code>（幸存区）的容量 (KB) 。</li><li><strong>S1C</strong>：年轻代中第二个 <code>Survivor</code>（幸存区）的容量 (KB)。</li><li><strong>S0U</strong>：年轻代中第一个 <code>Survivor</code>（幸存区）目前已使用空间 (KB) 。</li><li><strong>S1U</strong>：年轻代中第二个 <code>Survivor</code>（幸存区）目前已使用空间 (KB) 。</li></ul><hr><ul><li><strong>EC</strong>：年轻代中 <code>Eden</code>（伊甸园）的容量 (KB) 。</li><li><strong>EU</strong>：年轻代中 <code>Eden</code>（伊甸园）目前已使用空间 (KB)。</li></ul><hr><ul><li><strong>OC</strong>：<code>Old</code> 代的容量 (KB) 。</li><li><strong>OU</strong>：<code>Old</code> 代目前已使用空间 (KB) 。</li></ul><hr><ul><li><strong>MC</strong>：元数据区的容量 (KB) 。</li><li><strong>MU</strong>：元数据区目前已使用空间 (KB) 。</li></ul><hr><ul><li><strong>YGC</strong>：从应用程序启动到采样时年轻代中 <code>GC</code> 次数 。</li><li><strong>YGCT</strong>：从应用程序启动到采样时年轻代中 <code>GC</code> 所用时间(秒) 。</li></ul><hr><ul><li><strong>FGC</strong>：从应用程序启动到采样时 <code>Old</code> 代 <code>Full GC</code> 次数 。</li><li><strong>FGCT</strong>：从应用程序启动到采样时 <code>Old</code> 代 <code>Full GC</code> 所用时间(秒) 。</li><li><strong>GCT</strong>：从应用程序启动到采样时 <code>GC</code> 用的总时间(s) 。</li></ul><hr><ul><li><strong>NGCMN</strong>：年轻代 (<code>Young</code>) 中初始化(最小)的大小 (字节) 。</li><li><strong>NGCMX</strong>：年轻代 (<code>Young</code>) 的最大容量 (字节) 。</li><li><strong>NGC</strong>：年轻代 (<code>Young</code>) 中当前的容量 (字节) 。</li></ul><hr><ul><li><strong>OGCMN</strong>：<code>Old</code> 代中初始化(最小)的大小 (字节) 。</li><li><strong>OGCMX</strong>：<code>Old</code> 代的最大容量 (字节) 。</li><li><strong>OGC</strong>：<code>Old</code> 代当前新生成的容量 (字节) 。</li><li><strong>O</strong>：<code>Old</code> 代已使用的占当前容量百分比。</li></ul><hr><ul><li><strong>S0</strong>：年轻代中第一个 <code>Survivor</code>（幸存区）已使用的占当前容量百分比。</li><li><strong>S1</strong>：年轻代中第二个 <code>Survivor</code>（幸存区）已使用的占当前容量百分比 。</li><li><strong>S0CMX</strong>：年轻代中第一个 <code>Survivor</code>（幸存区）的最大容量 (字节) 。</li><li><strong>S1CMX</strong> ：年轻代中第二个 <code>Survivor</code>（幸存区）的最大容量 (字节) 。</li><li><strong>E</strong>：年轻代中 <code>Eden</code>（伊甸园）已使用的占当前容量百分比 。</li><li><strong>ECMX</strong>：年轻代中 <code>Eden</code>（伊甸园）的最大容量 (字节) 。</li></ul><hr><ul><li><strong>DSS</strong>：当前需要 <code>Survivor</code>（幸存区）的容量 (字节)（ <code>Eden</code> 区已满）。</li><li><strong>TT</strong>： 持有次数限制。</li><li><strong>MTT</strong> ： 最大持有次数限制。</li></ul><h4 id="3-Jstack"><a href="#3-Jstack" class="headerlink" title="3. Jstack"></a>3. Jstack</h4><p><code>jstack</code> 是 <code>JDK</code>中的一个命令行工具，用于生成 <code>Java</code> 进程的线程转储（<code>thread dump</code>）。</p><p>线程转储是一个描述 <code>Java</code> 虚拟机中所有线程当前状态的快照，包括线程的堆栈信息。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查询进程堆栈信息</span>jstack <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token operator">&lt;</span>pid<span class="token operator">></span><span class="token comment" spellcheck="true"># &lt;line num>: 限制显示行数</span><span class="token comment" spellcheck="true"># &lt;pid_16>: 进程转十六进制</span>jstack <span class="token operator">&lt;</span>pid<span class="token operator">></span> <span class="token operator">|</span> <span class="token function">grep</span> -A <span class="token operator">&lt;</span>line num<span class="token operator">></span> <span class="token operator">&lt;</span>pid_16_hex<span class="token operator">></span><span class="token comment" spellcheck="true"># 转十六进制</span><span class="token function">printf</span> <span class="token string">'%x\n'</span> <span class="token operator">&lt;</span>pid<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-l"><a href="#1-l" class="headerlink" title="(1) -l"></a>(1) -l</h5><p>除了线程堆栈外，还显示关于锁的附加信息，这将显示每个锁的拥有者和等待者。</p><pre class="line-numbers language-bash"><code class="language-bash">jstack -l <span class="token operator">&lt;</span>pid<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-F"><a href="#2-F" class="headerlink" title="(2) -F"></a>(2) -F</h5><p>当进程无响应时，强制生成线程转储，在进程卡死或无响应时非常有用。</p><pre class="line-numbers language-bash"><code class="language-bash">jstack -F <span class="token operator">&lt;</span>pid<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-m"><a href="#3-m" class="headerlink" title="(3) -m"></a>(3) -m</h5><p>打印 <code>Java</code> 和本地 <code>C/C++</code> 帧的混合堆栈。</p><pre class="line-numbers language-bash"><code class="language-bash">jstack -m <span class="token operator">&lt;</span>pid<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="4-e"><a href="#4-e" class="headerlink" title="(4) -e"></a>(4) -e</h5><p>打印线程的锁信息。</p><pre class="line-numbers language-bash"><code class="language-bash">jstack -e <span class="token operator">&lt;</span>pid<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-JMap"><a href="#4-JMap" class="headerlink" title="4. JMap"></a>4. JMap</h4><p><code>jmap</code> 是 <code>JDK</code> 中的一个命令行工具，用于生成 <code>Java</code> 进程的内存转储快照。</p><p>这个快照通常称为 <code>heap dump</code>，它是 <code>Java</code> 堆内存的详细信息，包括对象的数量、类型、分布等，对于分析内存泄漏和性能问题非常有用。</p><pre class="line-numbers language-bash"><code class="language-bash">jmap <span class="token punctuation">[</span>options<span class="token punctuation">]</span> <span class="token operator">&lt;</span>pid<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-heap"><a href="#1-heap" class="headerlink" title="(1) -heap"></a>(1) -heap</h5><p>打印 <code>Java</code> 堆内存的概要信息，包括堆的使用情况和配置。</p><pre class="line-numbers language-bash"><code class="language-bash">jmap -heap <span class="token operator">&lt;</span>pid<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-heap"><a href="#2-heap" class="headerlink" title="(2) -heap"></a>(2) -heap</h5><p>打印 <code>Java</code> 堆内存中对象的直方图，显示每个类的实例数量和占用的内存大小。</p><pre class="line-numbers language-bash"><code class="language-bash">jmap -histo <span class="token operator">&lt;</span>pid<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-dump"><a href="#3-dump" class="headerlink" title="(3) -dump"></a>(3) -dump</h5><p>生成堆转储文件，将 <code>Java</code> 堆内存的详细信息保存到指定的文件中。</p><p>在线 <code>dump</code> 文件分析工具：<code>https://heaphero.io/index.jsp</code>。</p><pre class="line-numbers language-bash"><code class="language-bash">jmap -dump:file<span class="token operator">=</span><span class="token operator">&lt;</span>export_path<span class="token operator">></span> <span class="token operator">&lt;</span>pid<span class="token operator">></span><span class="token comment" spellcheck="true"># 生成堆栈信息日志</span>jmap -dump:format<span class="token operator">=</span>b,file<span class="token operator">=</span>./dump.bin 123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-F"><a href="#4-F" class="headerlink" title="(4) -F"></a>(4) -F</h5><p>当进程无响应时，强制生成堆转储，在处理无响应或死锁的情况下很有用。</p><pre class="line-numbers language-bash"><code class="language-bash">jmap -F -dump:file<span class="token operator">=</span><span class="token operator">&lt;</span>dumpfile<span class="token operator">></span> <span class="token operator">&lt;</span>pid<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><p><strong>参考文档</strong></p><ol><li><a href="https://blog.csdn.net/m0_46316970/article/details/123585951">JVM常用调优参数 ——JVM篇</a></li><li><a href="https://juejin.cn/post/7184047757869449273#heading-1">一次简单的 JVM 调优，拿去写到简历里</a></li><li><a href="https://blog.csdn.net/m0_37298500/article/details/130400099">jstat命令查看jvm内存情况及GC内存变化</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、参数配置&quot;&gt;&lt;a href=&quot;#一、参数配置&quot; class=&quot;headerlink&quot; title=&quot;一、参数配置&quot;&gt;&lt;/a&gt;一、参数配置&lt;/h3&gt;&lt;h4 id=&quot;1-配置方式&quot;&gt;&lt;a href=&quot;#1-配置方式&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="JAVA进阶" scheme="https://great-jin.github.io/categories/JAVA%E8%BF%9B%E9%98%B6/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>EasyExcel工具使用教程</title>
    <link href="https://great-jin.github.io/java/utils/easyexcel/"/>
    <id>https://great-jin.github.io/java/utils/easyexcel/</id>
    <published>2024-01-28T16:00:00.000Z</published>
    <updated>2024-03-09T09:54:42.171Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、数据读取"><a href="#一、数据读取" class="headerlink" title="一、数据读取"></a>一、数据读取</h3><h4 id="1-模拟数据"><a href="#1-模拟数据" class="headerlink" title="1. 模拟数据"></a>1. 模拟数据</h4><p>首先先准备一个 <code>Excel</code> 数据文件，文件内容如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">id</span>    name    gender    birthday1    User-1    Male    2024-01-292    User-2    Male    2024-01-293    User-3    Male    2024-01-294    User-4    Male    2024-01-29<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-实体读取"><a href="#2-实体读取" class="headerlink" title="2. 实体读取"></a>2. 实体读取</h4><p><code>EasyExcel</code> 支持匹配 <code>Java</code> 实体读取文件内容，文件的列名需要何 <code>Java</code> 类的字段名相对应。</p><p>如下示例中即读取第一步中的模拟数据最终返回一个列表集合。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExcelUser</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String gender<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birthday<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExcelReadTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readDemo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String fileLocate <span class="token operator">=</span> <span class="token string">"src\\main\\resources\\info.xls"</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span>InputStream in <span class="token operator">=</span> Files<span class="token punctuation">.</span><span class="token function">newInputStream</span><span class="token punctuation">(</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>fileLocate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>ExcelUser<span class="token operator">></span> list <span class="token operator">=</span> EasyExcel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span>ExcelUser<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">doReadSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-动态读取"><a href="#3-动态读取" class="headerlink" title="3. 动态读取"></a>3. 动态读取</h4><p><code>EasyExcel</code> 除了支持实体类读取之外还可以动态指定列名进行读取，返回的结果为 <code>List&lt;LinkedMap&lt;Integer, Object&gt;&gt;</code>，其中每一个 <code>LinkMap</code> 对应文件内的一行数据。</p><p>需要注意这里传入的列头集合类型是 <code>List&lt;List&lt;String&gt;&gt;</code> 而非 <code>List&lt;String&gt;</code>，即数据格式如：<code>[[&quot;id&quot;], [&quot;name&quot;]]</code>。同时 <code>EasyExcel</code> 支持多种读入方式，在上一点示例中通过 <code>IO</code> 方法读取，下述示例则直接传入文件路径，可根据需要选择。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readDemo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    String fileLocate <span class="token operator">=</span> <span class="token string">"src\\main\\resources\\info.xls"</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>String<span class="token operator">>></span> heads <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"gender"</span><span class="token punctuation">,</span> <span class="token string">"birthday"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Arrays<span class="token operator">:</span><span class="token operator">:</span>asList<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>LinkedMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Object<span class="token operator">>></span> list <span class="token operator">=</span> EasyExcel<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>fileLocate<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span>heads<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">doReadSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、数据写入"><a href="#二、数据写入" class="headerlink" title="二、数据写入"></a>二、数据写入</h3><h4 id="1-写入示例"><a href="#1-写入示例" class="headerlink" title="1. 写入示例"></a>1. 写入示例</h4><p><code>EasyExcel</code> 写入操作与读取类似，其中的 <code>excelType</code> 为文件类型，可选值有下述三类，对应三种不同的数据文件格式。</p><pre class="line-numbers language-java"><code class="language-java">ExcelTypeEnum<span class="token punctuation">.</span>CSVExcelTypeEnum<span class="token punctuation">.</span>XLSExcelTypeEnum<span class="token punctuation">.</span>XLSX<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里同样是采取实体字段名匹配的方式写入数据，示例代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">readDemo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>ExcelUser<span class="token operator">></span> dataList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dataList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExcelUser</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"User-"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token string">"Male"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    String fileLocate <span class="token operator">=</span> <span class="token string">"src\\main\\resources\\info.xls"</span><span class="token punctuation">;</span>    EasyExcel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fileLocate<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">excelType</span><span class="token punctuation">(</span>ExcelTypeEnum<span class="token punctuation">.</span>XLS<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span>ExcelUser<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token string">"Test-data"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">doWrite</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-Sheet管理"><a href="#2-Sheet管理" class="headerlink" title="2. Sheet管理"></a>2. Sheet管理</h4><p>当需要写入多个 <code>Sheet</code> 到同一个 <code>Excel</code> 文件时，即可使用 <code>ExcelWriterSheetBuilder</code>。</p><p>如下述示例中即创建两个 <code>Sheet</code> 页数据，<code>Sheet</code> 页名称分别为 <code>Sheet-1</code> 和 <code>Sheet-2</code>。</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">multipleWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>ExcelUser<span class="token operator">></span> dataList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        dataList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExcelUser</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"User-"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token string">"Male"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    String fileLocate <span class="token operator">=</span> <span class="token string">"src\\main\\resources\\info.xls"</span><span class="token punctuation">;</span>    ExcelWriter excelWriter <span class="token operator">=</span> EasyExcel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fileLocate<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">excelType</span><span class="token punctuation">(</span>ExcelTypeEnum<span class="token punctuation">.</span>XLS<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 循环创建两个 Sheet 页数据</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ExcelWriterSheetBuilder sheetBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExcelWriterSheetBuilder</span><span class="token punctuation">(</span>excelWriter<span class="token punctuation">)</span><span class="token punctuation">;</span>        sheetBuilder<span class="token punctuation">.</span><span class="token function">sheetName</span><span class="token punctuation">(</span><span class="token string">"Sheet-"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        sheetBuilder<span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span>ExcelUser<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sheetBuilder<span class="token punctuation">.</span><span class="token function">registerWriteHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LongestMatchColumnWidthStyleStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        excelWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>dataList<span class="token punctuation">,</span> sheetBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    excelWriter<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-动态写入"><a href="#3-动态写入" class="headerlink" title="3. 动态写入"></a>3. 动态写入</h4><p>在许多场景下数据是变动的通过实体匹配显然是不合适的，因此 EasyExcel 提供了动态写入的能力。</p><p>与上述提到的读取和写入类似，其列名通过 <code>List&lt;List&lt;String&gt;&gt;</code> 指定，但不同的是其数据的载体是 <code>List&lt;Object&gt;</code> 而非 <code>List&lt;Map&gt;</code>，因此在写入时我们需要将后者数据格式转为  <code>List&lt;Object&gt;</code>，对应的数据转化样例如下：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// List&lt;Map&lt;String, Object>></span><span class="token punctuation">[</span>    <span class="token punctuation">{</span>         <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>         <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"user-1"</span><span class="token punctuation">,</span>         <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token string">"Male"</span><span class="token punctuation">,</span>         <span class="token string">"birthday"</span><span class="token punctuation">:</span> <span class="token string">"2023-01-01 00:00:01"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>         <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span>         <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"user-2"</span><span class="token punctuation">,</span>         <span class="token string">"gender"</span><span class="token punctuation">:</span> <span class="token string">"Male"</span><span class="token punctuation">,</span>         <span class="token string">"birthday"</span><span class="token punctuation">:</span> <span class="token string">"2023-01-01 00:00:02"</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// List&lt;Object></span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"user-1"</span><span class="token punctuation">,</span> <span class="token string">"Male"</span><span class="token punctuation">,</span> <span class="token string">"2023-01-01 00:00:01"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"user-2"</span><span class="token punctuation">,</span> <span class="token string">"Male"</span><span class="token punctuation">,</span> <span class="token string">"2023-01-01 00:00:02"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>根据上述逻辑，其相对应的程序代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dynamicWrite</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> dataList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> Map<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>                <span class="token string">"id"</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">,</span>                <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"user-"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span>                <span class="token string">"gender"</span><span class="token punctuation">,</span> <span class="token string">"Male"</span><span class="token punctuation">,</span>                <span class="token string">"birthday"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        dataList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Convert "List&lt;Map&lt;?, ?>>" to "List&lt;?>"</span>    List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Object<span class="token operator">>></span> rowDatas <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">:</span> dataList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Object<span class="token operator">></span> row <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String name <span class="token operator">:</span> headList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            row<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        rowDatas<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Excel head</span>    List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>String<span class="token operator">>></span> heads <span class="token operator">=</span> Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"gender"</span><span class="token punctuation">,</span> <span class="token string">"birthday"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Arrays<span class="token operator">:</span><span class="token operator">:</span>asList<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Writer data</span>    String fileLocate <span class="token operator">=</span> <span class="token string">"src\\main\\resources\\info.xls"</span><span class="token punctuation">;</span>    EasyExcel<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>fileLocate<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">excelType</span><span class="token punctuation">(</span>ExcelTypeEnum<span class="token punctuation">.</span>XLS<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span>heads<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">sheet</span><span class="token punctuation">(</span><span class="token string">"Test-data"</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">doWrite</span><span class="token punctuation">(</span>rowDatas<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、注解使用"><a href="#三、注解使用" class="headerlink" title="三、注解使用"></a>三、注解使用</h3><h4 id="1-ExcelProperty"><a href="#1-ExcelProperty" class="headerlink" title="1. ExcelProperty"></a>1. ExcelProperty</h4><p><code>@ExcelProperty</code> 注解存在 <code>value</code> 与 <code>order</code> 两个属性，前者用于设置别名，后者用于设置列顺序。</p><p>如下示例中则最后生成 <code>Excel</code> 文件中列名分别为 <code>编号</code> 与 <code>姓名</code>，其中第一列为 <code>编号</code>，第二列为 <code>姓名</code>。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExcelUser</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"编号"</span><span class="token punctuation">,</span> order <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelProperty</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"姓名"</span><span class="token punctuation">,</span> order <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-ExcelIgnore"><a href="#2-ExcelIgnore" class="headerlink" title="2. ExcelIgnore"></a>2. ExcelIgnore</h4><p><code>@ExcelIgnore</code> 用于指定需要忽略的属性。</p><p>如下示例在读取或写入文件时将忽略 <code>address</code> 字段。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExcelUser</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ExcelIgnore</span>    <span class="token keyword">private</span> Date address<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-DateTimeFormat"><a href="#3-DateTimeFormat" class="headerlink" title="3. DateTimeFormat"></a>3. DateTimeFormat</h4><p><code>@DateTimeFormat</code> 用于指定格式化字段时间</p><p>如下示例在读取或写入文件时将会格式化字段 <code>birthday</code> 字段 值为 <code>yyy-MM-dd</code> 格式。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExcelUser</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span><span class="token string">"yyy-MM-dd"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Date birthday<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、数据读取&quot;&gt;&lt;a href=&quot;#一、数据读取&quot; class=&quot;headerlink&quot; title=&quot;一、数据读取&quot;&gt;&lt;/a&gt;一、数据读取&lt;/h3&gt;&lt;h4 id=&quot;1-模拟数据&quot;&gt;&lt;a href=&quot;#1-模拟数据&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="后端" scheme="https://great-jin.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
    <category term="Java" scheme="https://great-jin.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Vue构建部署教程</title>
    <link href="https://great-jin.github.io/vue/deploy/"/>
    <id>https://great-jin.github.io/vue/deploy/</id>
    <published>2023-12-29T16:00:00.000Z</published>
    <updated>2024-01-29T12:06:39.669Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、项目配置"><a href="#一、项目配置" class="headerlink" title="一、项目配置"></a>一、项目配置</h3><h4 id="1-路由变更"><a href="#1-路由变更" class="headerlink" title="1. 路由变更"></a>1. 路由变更</h4><p>修改前端项目的路由模式为 <code>Hash</code>，文件在 <code>src/router/index.js</code>，下述是 <code>Vue3</code> 的配置:</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>createRouter<span class="token punctuation">,</span> createWebHashHistory<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">const</span> routes <span class="token operator">=</span> pathArray<span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 设置模式为 Hash</span>    history<span class="token punctuation">:</span> <span class="token function">createWebHashHistory</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>BASE_URL<span class="token punctuation">)</span><span class="token punctuation">,</span>    routes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-服务配置"><a href="#2-服务配置" class="headerlink" title="2. 服务配置"></a>2. 服务配置</h4><p>修改项目根目录下的 <code>vue.config.js</code> 文件，注意将其中的 <code>192.168.0.100</code> 替换为你自己的服务器 <code>IP</code>。</p><p>其中 <code>8080</code> 是前端的访问端口，<code>9090</code> 为后端服务端口，<code>/daily-word</code> 为前端接口前缀，<code>/dailyWord</code> 为后端配置的 <code>servlet:context-path</code>。</p><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">defineConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    open<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// frontend server host and port</span>    host<span class="token punctuation">:</span> <span class="token string">"192.168.0.100"</span><span class="token punctuation">,</span>    port<span class="token punctuation">:</span> <span class="token number">8080</span><span class="token punctuation">,</span>    https<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"/daily-word"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// backend server url</span>        target<span class="token punctuation">:</span> <span class="token string">"http://192.168.0.100:9090/"</span><span class="token punctuation">,</span>        ws<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        changOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// Rewrite path prefix to backend "servlet:context-path"</span>          <span class="token string">"/daily-word"</span><span class="token punctuation">:</span> <span class="token string">"/dailyWord"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-应用打包"><a href="#3-应用打包" class="headerlink" title="3. 应用打包"></a>3. 应用打包</h4><p>在前端工程指定 <code>build</code> 命令完成后将会在项目根目录生成 <code>dist</code> 目录，其则为打包后的文件，将其上传到服务器的你期望的目录。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> run build<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="二、后端配置"><a href="#二、后端配置" class="headerlink" title="二、后端配置"></a>二、后端配置</h3><h4 id="1-跨域处理"><a href="#1-跨域处理" class="headerlink" title="1. 跨域处理"></a>1. 跨域处理</h4><p>为了部署之后前端接口请求能正常访问后端服务，后端需要设置跨域白名单。</p><p>在 <code>Spring</code> 工程中新建类并实现 <code>WebMvcConfigurer</code> 接口类定义跨域规则，这里为了方便我设置放行所有请求和地址，可根据需求进行调整。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CorsConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${auth.host.cors}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String hosts<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addCorsMappings</span><span class="token punctuation">(</span>CorsRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> crosHost <span class="token operator">=</span> hosts<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置允许跨域的路径</span>        registry<span class="token punctuation">.</span><span class="token function">addMapping</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 设置允许跨域请求的域名</span>                <span class="token punctuation">.</span><span class="token function">allowedOriginPatterns</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 是否允许cookie</span>                <span class="token punctuation">.</span><span class="token function">allowCredentials</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 设置允许的请求方式</span>                <span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"DELETE"</span><span class="token punctuation">,</span> <span class="token string">"PUT"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 设置允许的header属性</span>                <span class="token punctuation">.</span><span class="token function">allowedHeaders</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 跨域允许时间</span>                <span class="token punctuation">.</span><span class="token function">maxAge</span><span class="token punctuation">(</span>TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、服务部署"><a href="#三、服务部署" class="headerlink" title="三、服务部署"></a>三、服务部署</h3><h4 id="1-Nginx代理"><a href="#1-Nginx代理" class="headerlink" title="1. Nginx代理"></a>1. Nginx代理</h4><p>上述打包完成后的文件为静态资源，因此这里选择通过 <code>Nginx</code> 实现页面的访问，具体的 <code>Nginx</code> 部署教程之前的文章已经详细介绍过，这里不再重复详细展开，链接直达：<a href="https://great-jin.github.io/linux/nginx/">Nginx教程</a>。</p><h4 id="2-请求转发"><a href="#2-请求转发" class="headerlink" title="2. 请求转发"></a>2. 请求转发</h4><p>由于 <code>Nginx</code> 静态资源不支持 <code>Post</code> 接口请求，因此需要将请求进行转发。</p><pre class="line-numbers language-conf"><code class="language-conf">location / {    #root   html;    #index  index.html index.htm;    try_files $uri $uri/ /index.html;    error_page 405 =200  $request_uri;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-完整配置"><a href="#3-完整配置" class="headerlink" title="3. 完整配置"></a>3. 完整配置</h4><p>完成的 <code>Nginx</code> 配置文件如下，其中 <code>8080</code> 为页面访问地址，需要和第一步中配置的一致，<code>root</code> 配置打包上传的 <code>dist</code> 目录路径。</p><p>注意将其中的 <code>192.168.0.100</code> 替换为你自己的服务器 <code>IP</code>。</p><pre class="line-numbers language-conf"><code class="language-conf">server {    listen       8080;    server_name  localhost;    root         /home/budai/dailyword/dist;    location / {        #root   html;        #index  index.html index.htm;        try_files $uri $uri/ /index.html;        error_page 405 =200  $request_uri;    }    location ^~ /daily-word {        proxy_pass http://192.168.0.100:9090/dailyWord;    }    location @405 {        proxy_set_header Host $host;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;        # ip为后端服务地址        proxy_pass http://192.168.0.100:9090$request_uri;    }    error_page   500 502 503 504  /50x.html;    location = /50x.html {        root   html;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、项目配置&quot;&gt;&lt;a href=&quot;#一、项目配置&quot; class=&quot;headerlink&quot; title=&quot;一、项目配置&quot;&gt;&lt;/a&gt;一、项目配置&lt;/h3&gt;&lt;h4 id=&quot;1-路由变更&quot;&gt;&lt;a href=&quot;#1-路由变更&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="服务部署" scheme="https://great-jin.github.io/categories/%E6%9C%8D%E5%8A%A1%E9%83%A8%E7%BD%B2/"/>
    
    
    <category term="Vue" scheme="https://great-jin.github.io/tags/Vue/"/>
    
    <category term="CentOS" scheme="https://great-jin.github.io/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>Websocket入门教程</title>
    <link href="https://great-jin.github.io/java/spring/framework/websocket/"/>
    <id>https://great-jin.github.io/java/spring/framework/websocket/</id>
    <published>2023-12-29T16:00:00.000Z</published>
    <updated>2024-03-09T09:54:42.165Z</updated>
    
    <content type="html"><![CDATA[<p>在网络通讯领域，我们最熟悉的通讯协议即 <code>HTTP</code>，其在 <code>TCP</code> 的基础上进一步扩展使之更为的简单易用。而 WebSocket 作为一种通讯方式在某些应用场景下也是一种不错的选择。</p><p><code>WebSocket</code> 是一种在单个 <code>TCP</code> 连接上进行全双工通信的通信协议，它提供了一个持久的连接（即长链接），允许客户端和服务器之间进行实时、双向的数据传输。<code>WebSocket</code> 的出现解决了传统的 <code>HTTP</code> 协议的一些限制，特别是对于需要频繁更新的实时应用程序（如聊天应用、在线游戏等）而言，<code>WebSocket</code> 提供了更低的延迟和更高的效率。</p><p><code>Websocket</code> 一个经典应用场景即消息的主动推送，即由后端向主动推送讯息，在通知与聊天场景中应用广泛。本文即着重介绍如何在前后端分离项目中实现后端的消息主动推送。</p><h3 id="一、后端配置"><a href="#一、后端配置" class="headerlink" title="一、后端配置"></a>一、后端配置</h3><h4 id="1-依赖导入"><a href="#1-依赖导入" class="headerlink" title="1. 依赖导入"></a>1. 依赖导入</h4><p>老规矩，在后端的 Spring 项目工程中导入对应的依赖，内容如下：</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-websocket<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-配置管理"><a href="#2-配置管理" class="headerlink" title="2. 配置管理"></a>2. 配置管理</h4><p>在项目中注入 <code>WebSocket Bean</code> 对象，代码如下：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>server<span class="token punctuation">.</span>standard<span class="token punctuation">.</span>ServerEndpointExporter<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServerEndpointExporter <span class="token function">serverEndpointExporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ServerEndpointExporter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-服务启动"><a href="#3-服务启动" class="headerlink" title="3. 服务启动"></a>3. 服务启动</h4><p>新建 <code>WebSocketServer</code> 类用于管理请求的连接与关闭，当接收到新的请求时存入缓存容器 <code>websocketMap</code>，同时计数器 <code>onlineCount</code> 自增用于记录当前的连接数。</p><p>为了区分不同的连接这里通过请求参数的第一个值作为唯一标识符，即请求地址格式为：<code>ws://$&#123;host&#125;:$&#123;port&#125;/websocket?userId=1</code>，从而使后续能够精准的推送消息给指定连接用户。</p><p>其中 <code>@ServerEndpoint</code> 注解可以理解为 <code>HTTP</code> 接口中 <code>@RequstMapping</code> 与 <code>@RestController</code> 的复合体， <code>onMessage()</code> 方法为首次连接时返回值，用于响应以便知晓是否连接成功。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ServerEndpoint</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/websocket"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketServer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> Logger log <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>WebSocketServer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 当前在线连接数     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> AtomicInteger onlineCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 存放客户端对应的 WebSocket 对象     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> WebSocketServer<span class="token operator">></span> websocketMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 会话标识     */</span>    <span class="token keyword">private</span> String flag<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 与某个客户端的连接会话，需要通过它来给客户端发送数据     */</span>    <span class="token keyword">private</span> Session session<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 连接建立成功调用的方法     */</span>    <span class="token annotation punctuation">@OnOpen</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onOpen</span><span class="token punctuation">(</span>Session session<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 添加会话至容器</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>session <span class="token operator">=</span> session<span class="token punctuation">;</span>        String queryString <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        flag <span class="token operator">=</span> queryString<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        websocketMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 计数器自增</span>        onlineCount<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Receive new session, current connected number: "</span> <span class="token operator">+</span> <span class="token function">getOnlineCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">"You have successfully connected."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Websocket IO exception, stack tree: "</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 连接关闭调用的方法     */</span>    <span class="token annotation punctuation">@OnClose</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 从容器中删除会话</span>        websocketMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 计数器自减</span>        onlineCount<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"New session close, current connected number: "</span> <span class="token operator">+</span> <span class="token function">getOnlineCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 收到客户端消息后调用的方法     *     * @param message 客户端发送过来的消息     */</span>    <span class="token annotation punctuation">@OnMessage</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span>String message<span class="token punctuation">,</span> Session session<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Receive from client, message: {}"</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 群发消息</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>WebSocketServer item <span class="token operator">:</span> websocketMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                item<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Session onMessage, stack tree: "</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@OnError</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span>Session session<span class="token punctuation">,</span> Throwable error<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Session onError, stack tree: "</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">getBasicRemote</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sendText</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOnlineCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> onlineCount<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-消息推送"><a href="#4-消息推送" class="headerlink" title="4. 消息推送"></a>4. 消息推送</h4><p>当连接建立之后即可向连接主动推送数据消息，这里定义了两个方法 <code>send()</code> 与 <code>batchSend()</code> 用于单点推送与消息群发，其仍定义于上述的 <code>WebSocketServer</code> 类中，限于篇幅故分点介绍。</p><p>其中单点推送方法 <code>send()</code> 第一个参数 <code>key</code> 即建立连接时传入的唯一标识符，<code>batchSend()</code> 则会推送消息至所有当前的连接的用户，注意其中输入的内容为字符串，可使用 <code>Jackson</code> 等类库序列化为 <code>Json</code> 字符串后传输。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 群发自定义消息 */</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">send</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>websocketMap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Currently didn't have valid session."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        WebSocketServer server <span class="token operator">=</span> websocketMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Objects<span class="token punctuation">.</span><span class="token function">isNull</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"The session of [{}] not existed."</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        server<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Session send() error, stack tree: "</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> success<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">batchSend</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>websocketMap<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Currently didn't have valid session."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>WebSocketServer item <span class="token operator">:</span> websocketMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            item<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Session batchSend() error, stack tree: "</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> success<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、前端应用"><a href="#二、前端应用" class="headerlink" title="二、前端应用"></a>二、前端应用</h3><h4 id="1-依赖安装"><a href="#1-依赖安装" class="headerlink" title="1. 依赖安装"></a>1. 依赖安装</h4><p>在 <code>Vue</code> 前端项目中同样需要安装 <code>WebSocket</code> 依赖，命令如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> vue-websocket<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-应用监听"><a href="#2-应用监听" class="headerlink" title="2. 应用监听"></a>2. 应用监听</h4><p>完成依赖安装后即可在项目中建立依赖，通过 <code>new WebSocket(url)</code> 即可相对较为简单。 </p><p>连接建立之后通过 <code>addEventListener</code> 回调函数监听不同的连接事件，代码如下不详细介绍。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> host <span class="token operator">=</span> <span class="token number">127.0</span><span class="token punctuation">.</span><span class="token number">0.1</span>    <span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">9090</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token string">`ws://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>host<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/websocket?userId=1`</span></span>    <span class="token keyword">const</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 添加WebSocket事件监听器</span>    socket<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'open'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'WebSocket 连接已打开'</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    socket<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> data <span class="token operator">=</span> event<span class="token punctuation">.</span>data      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'接受到后端信息: '</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token string">'接受到后端消息: '</span> <span class="token operator">+</span> data<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    socket<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'WebSocket 连接已关闭'</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    socket<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'WebSocket 错误'</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在网络通讯领域，我们最熟悉的通讯协议即 &lt;code&gt;HTTP&lt;/code&gt;，其在 &lt;code&gt;TCP&lt;/code&gt; 的基础上进一步扩展使之更为的简单易用。而 WebSocket 作为一种通讯方式在某些应用场景下也是一种不错的选择。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WebSocke</summary>
      
    
    
    
    <category term="Spring工具" scheme="https://great-jin.github.io/categories/Spring%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="JAVA" scheme="https://great-jin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch入门教程</title>
    <link href="https://great-jin.github.io/db/es/basic/"/>
    <id>https://great-jin.github.io/db/es/basic/</id>
    <published>2023-12-15T16:00:00.000Z</published>
    <updated>2024-04-13T04:30:29.197Z</updated>
    
    <content type="html"><![CDATA[<p>在日常开发中，我们使用最多的数据应该就是关系型数据库如 <code>MySQL</code>, <code>Oracle</code> 等，其特性为表结构格式统一易于上手，但有一个缺点就是面对海量数据读写性能相对较差。</p><p>非关系型数据库中较为出名的就是 <code>Redis</code>, <code>Postgre</code>, <code>Mongo</code> 等，以 <code>Redis</code> 为例，其数据存储于内存之中，读写速度相对关系型有一个质的飞跃，但同时也带来了内存的损耗。</p><p><code>ElasticSearch</code> 是一款分布式存储数据库，在海量数据查询以及模糊查询时有着不错的性能，解决了 <code>MySQL</code> 等数据库性能瓶颈与 <code>Redis</code> 针对大数据量耗费资源的缺点。</p><h3 id="一、概念介绍"><a href="#一、概念介绍" class="headerlink" title="一、概念介绍"></a>一、概念介绍</h3><h4 id="1-索引"><a href="#1-索引" class="headerlink" title="1. 索引"></a>1. 索引</h4><p>在 <code>Elasticsearch</code> 中并没有库表的概念，取而代之的为索引 <code>(Indices)</code>，可以理解为传统数据库的 <code>Database</code>。</p><h4 id="2-类型"><a href="#2-类型" class="headerlink" title="2. 类型"></a>2. 类型</h4><p>在 <code>Elasticsearch 6.x</code> 中 <code>Types</code> 概念类似于数据库中的一张表，但随着版本更新，在最新的 <code>7.x</code> 版本中 <code>Types</code> 被逐渐废除，因此一个索引 <code>Indices</code> 下只允许存在一个 <code>Types</code>。</p><h4 id="3-文档"><a href="#3-文档" class="headerlink" title="3. 文档"></a>3. 文档</h4><p>在 <code>Elasticsearch</code> 中每条记录是以文档 <code>(Documents)</code> 的形式存在，相当于 <code>MySQL</code> 等数据表中的一条记录，每条文档都会自动为其分配一个唯一标识。</p><h4 id="4-字段"><a href="#4-字段" class="headerlink" title="4. 字段"></a>4. 字段</h4><p><code>Fields</code> 即为每条文档中的属性的类型，常用类型包含如下几类：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">类型</td>        <th style="text-align: center;">描述</td>    </tr>    <tr>        <td style="text-align: center;">text</td>        <td style="text-align: center;">当一个字段需要用于全文搜索(会被分词)则应该使用该类型。</td>    </tr>    <tr>        <td style="text-align: center;">keyword</td>        <td style="text-align: center;">当一个字段需要按照精确值进行过滤、排序、聚合等操作时则应该使用该类型。</td>    </tr>    <tr>        <td style="text-align: center;">date</td>        <td style="text-align: center;">时间类型，精度不包含时分秒。</td>    </tr>    <tr>        <td style="text-align: center;">boolean</td>        <td style="text-align: center;">布尔类型，即 true 与 false。</td>    </tr>    <tr>        <td style="text-align: center;">range</td>        <td style="text-align: center;">区间类型，取值范围如下：integer_range, long_range, float_range, double_range, date_range, ip_range </td>    </tr></table><h3 id="二、数据索引"><a href="#二、数据索引" class="headerlink" title="二、数据索引"></a>二、数据索引</h3><h4 id="1-索引创建"><a href="#1-索引创建" class="headerlink" title="1. 索引创建"></a>1. 索引创建</h4><p>通过 <code>PUT</code> 请求创建新索引，请求格式如下，其中 <code>settings</code> 参数非必填。</p><p><code>settings</code> 中 <code>number_of_shards</code> 用于执行数据的分片大小，类似于关系型的中的分区操作，以提高存储查询效率；<code>number_of_replicas</code> 用于指定副本大小，即集群状态多端副本保证数据的安全性以防止数据丢失或损坏。</p><pre class="line-numbers language-js"><code class="language-js">PUT http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index_name<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token string">"settings"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"number_of_shards"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        <span class="token string">"number_of_replicas"</span><span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-字段映射"><a href="#2-字段映射" class="headerlink" title="2. 字段映射"></a>2. 字段映射</h4><p>同理在创建索引时可通过 <code>mapping</code> 参数指定字段映射。</p><p>若不指定将会根据文档数据字段类型自动匹配，映射内容中的 <code>type</code> 参数上一点中的字段表格。</p><pre class="line-numbers language-js"><code class="language-js">PUT http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index_name<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token string">"settings"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"number_of_shards"</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        <span class="token string">"number_of_replicas"</span><span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"mapping"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"_doc"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"properties"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"keyword"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">"type"</span><span class="token punctuation">:</span> <span class="token string">"text"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-索引别名"><a href="#3-索引别名" class="headerlink" title="3. 索引别名"></a>3. 索引别名</h4><p><code>Elasticsearch</code> 索引别名是一个指向一个或多个索引的稳定引用名称。通过使用别名，可以将查询和索引维护从实际索引名称中分离出来，这为在切换索引版本、重建索引等操作时提供了更大的灵活性。</p><blockquote><p>使用索引别名的优点如下：</p></blockquote><ul><li><strong>日志切割</strong>：对于日志类型的索引，可以使用别名轻松地进行日志切割。</li><li><strong>切换版本</strong>：可以通过更改别名指向的实际索引，而不必更改应用程序中的查询代码。</li><li><strong>滚动升级</strong>：在进行索引版本升级时，可以创建新版本的索引，然后通过别名将查询指向新索引，实现滚动升级。</li></ul><h4 id="4-索引删除"><a href="#4-索引删除" class="headerlink" title="4. 索引删除"></a>4. 索引删除</h4><p>通过 DELETE 请求删除索引，删除索引会同步删除其对应下的数据，请求格式如下：</p><pre class="line-numbers language-js"><code class="language-js">DELETE http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index_name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="三、数据增改"><a href="#三、数据增改" class="headerlink" title="三、数据增改"></a>三、数据增改</h3><h4 id="1-数据插入"><a href="#1-数据插入" class="headerlink" title="1. 数据插入"></a>1. 数据插入</h4><p>数据插入的请求模板示例如下，其中 <code>&lt;type&gt;</code> 的可选值为：<code>_doc</code>，且 <code>&lt;id&gt;</code> 若未指定则回自动分配。</p><pre class="line-numbers language-js"><code class="language-js">POST http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>type<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>id<span class="token operator">></span><span class="token punctuation">{</span>     <span class="token string">"field1"</span><span class="token punctuation">:</span> <span class="token string">"value1"</span><span class="token punctuation">,</span>     <span class="token string">"field2"</span><span class="token punctuation">:</span> <span class="token string">"value2"</span><span class="token punctuation">,</span>     <span class="token string">"field3"</span><span class="token punctuation">:</span> <span class="token string">"value3"</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-数据更新"><a href="#2-数据更新" class="headerlink" title="2. 数据更新"></a>2. 数据更新</h4><p>数据更新的请求模板示例如下：</p><pre class="line-numbers language-js"><code class="language-js">PUT http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>type<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>id<span class="token operator">></span><span class="token punctuation">{</span>     <span class="token string">"field1"</span><span class="token punctuation">:</span> <span class="token string">"value1_1"</span><span class="token punctuation">,</span>     <span class="token string">"field2"</span><span class="token punctuation">:</span> <span class="token string">"value2_1"</span><span class="token punctuation">,</span>     <span class="token string">"field3"</span><span class="token punctuation">:</span> <span class="token string">"value3_1"</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-数据删除"><a href="#3-数据删除" class="headerlink" title="3. 数据删除"></a>3. 数据删除</h4><p>数据删除的请求模板示例如下：</p><pre class="line-numbers language-js"><code class="language-js">DELETE http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>type<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>id<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="四、批量操作"><a href="#四、批量操作" class="headerlink" title="四、批量操作"></a>四、批量操作</h3><h4 id="1-基本格式"><a href="#1-基本格式" class="headerlink" title="1. 基本格式"></a>1. 基本格式</h4><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">action</td>        <th style="text-align: center;">参数</td>    </tr>    <tr>        <td style="text-align: center;">create</td>        <td style="text-align: center;">创建新的一条记录。</td>    </tr>    <tr>        <td style="text-align: center;">update</td>        <td style="text-align: center;">更新已有一条记录。</td>    </tr>    <tr>        <td style="text-align: center;">index</td>        <td style="text-align: center;">若记录存在，则进行覆盖。</td>    </tr>    <tr>        <td style="text-align: center;">delete</td>        <td style="text-align: center;">删除一条数据记录。</td>    </tr></table><p>需要注意的是每一行数据要以换行符结束，同时内容必须空出最后一行空白行。</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"action"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">"metadata"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span>content<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>完成 <code>JSON</code> 文件的创建后可通过下图 <code>PostMan</code> 中入口设置。<br><img src="/album/loading.gif" data-original="/album/article/db/es/8.png"></p><h4 id="2-批量插入"><a href="#2-批量插入" class="headerlink" title="2. 批量插入"></a>2. 批量插入</h4><h5 id="1-索引不存在"><a href="#1-索引不存在" class="headerlink" title="(1) 索引不存在"></a>(1) 索引不存在</h5><p>批量插入数据，索引不存在时新建。</p><pre class="line-numbers language-js"><code class="language-js">POST http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span>_bulk<span class="token comment" spellcheck="true">// 文件内容</span><span class="token punctuation">{</span><span class="token string">"create"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"_index"</span><span class="token punctuation">:</span> <span class="token string">"&lt;index_name>"</span><span class="token punctuation">,</span><span class="token string">"_type"</span><span class="token punctuation">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span><span class="token string">"_id"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"alex"</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"create"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"_index"</span><span class="token punctuation">:</span> <span class="token string">"&lt;index_name>"</span><span class="token punctuation">,</span><span class="token string">"_type"</span><span class="token punctuation">:</span> <span class="token string">"_doc"</span><span class="token punctuation">,</span><span class="token string">"_id"</span><span class="token punctuation">:</span> <span class="token string">"2"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"beth"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-索引存在"><a href="#2-索引存在" class="headerlink" title="(2) 索引存在"></a>(2) 索引存在</h5><p>批量插入数据，索引必须已存在。</p><pre class="line-numbers language-js"><code class="language-js">POST http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index<span class="token operator">></span><span class="token operator">/</span>_doc<span class="token operator">/</span>_bulk<span class="token comment" spellcheck="true">// 文件内容</span><span class="token punctuation">{</span><span class="token string">"create"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"_id"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"alex"</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"create"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"_id"</span><span class="token punctuation">:</span> <span class="token string">"2"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"beth"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-增量插入"><a href="#2-增量插入" class="headerlink" title="(2) 增量插入"></a>(2) 增量插入</h5><p>批量插入数据，若数据已存在则覆盖。</p><pre class="line-numbers language-js"><code class="language-js">POST http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index<span class="token operator">></span><span class="token operator">/</span>_doc<span class="token operator">/</span>_bulk<span class="token comment" spellcheck="true">// 文件内容</span><span class="token punctuation">{</span><span class="token string">"index"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"_id"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"alex"</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"index"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"_id"</span><span class="token punctuation">:</span> <span class="token string">"2"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"beth"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-批量更新"><a href="#3-批量更新" class="headerlink" title="3. 批量更新"></a>3. 批量更新</h4><p>批量更新的请求模板示例如下：</p><pre class="line-numbers language-js"><code class="language-js">POST http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index<span class="token operator">></span><span class="token operator">/</span>_doc<span class="token operator">/</span>_bulk<span class="token comment" spellcheck="true">// 文件内容</span><span class="token punctuation">{</span><span class="token string">"update"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"_id"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token string">"doc"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token string">"update"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"_id"</span><span class="token punctuation">:</span> <span class="token string">"2"</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">{</span><span class="token string">"doc"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span><span class="token string">"2"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-批量删除"><a href="#4-批量删除" class="headerlink" title="4. 批量删除"></a>4. 批量删除</h4><p>批量删除的请求模板示例如下：</p><pre class="line-numbers language-js"><code class="language-js">POST http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index<span class="token operator">></span><span class="token operator">/</span>_doc<span class="token operator">/</span>_bulk<span class="token comment" spellcheck="true">// 文件内容</span><span class="token punctuation">{</span><span class="token string">"delete"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"_id"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">"delete"</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token string">"_id"</span><span class="token punctuation">:</span> <span class="token string">"2"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、数据查询"><a href="#五、数据查询" class="headerlink" title="五、数据查询"></a>五、数据查询</h3><h4 id="1-结构查询"><a href="#1-结构查询" class="headerlink" title="1. 结构查询"></a>1. 结构查询</h4><p>通过 <code>_mapping</code> 查询当前索引下的数据字段结构。</p><pre class="line-numbers language-js"><code class="language-js">GET http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index<span class="token operator">></span><span class="token operator">/</span>_mapping<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-查询得分"><a href="#2-查询得分" class="headerlink" title="2. 查询得分"></a>2. 查询得分</h4><p>在 <code>Elasticsearch</code> 中，每个文档的匹配程度可以通过一个称为 “分数”（<code>score</code>）的值来表示。分数反映了文档与查询条件的匹配程度，越匹配的文档得分越高。</p><p>当执行查询时，<code>Elasticsearch</code> 计算每个文档的得分，然后按照得分排序返回结果。这个得分是由查询条件中的每个子句（例如，匹配关键词的 <code>must</code> 子句）的相关性计算得出的。</p><p>对于 <code>bool</code> 查询中的 <code>must</code> 子句，其中的每个条件都会影响文档的得分。如果一个文档满足多个 <code>must</code> 子句的条件，那么它的得分会相应增加。这样，得分可以用来衡量文档与查询条件的匹配程度。</p><p>而对于 <code>filter</code> 子句，其中的条件也用于筛选文档，但它们不会影响文档的得分。<code>filter</code> 子句主要用于对文档进行精确匹配和过滤，而不涉及相关性计算。由于不计算得分，<code>filter</code> 子句的查询更轻量，对于一些不需要计算相关性的场景，这可以提高性能。</p><p>因此，当使用 <code>filter</code> 子句时，查询的主要目的是过滤文档，而不是影响查询结果的排序和相关性。这对于一些特定的过滤条件（如范围查询、精确匹配等）非常有用，因为它们可以更高效地执行，而无需计算和排序相关性得分。</p><h4 id="3-全量查询"><a href="#3-全量查询" class="headerlink" title="3. 全量查询"></a>3. 全量查询</h4><p>通过 <code>Get</code> 查询目标数据，效果等价于 <code>select * from &lt;table&gt;</code>。</p><p>默认查询仅返回十条数据，若查看多数据需分页进行，同时通过 <code>pretty=true</code> 可格式化返回的结果数据。</p><pre class="line-numbers language-js"><code class="language-js">GET http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index_name<span class="token operator">></span><span class="token operator">/</span>_searchGET http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index_name<span class="token operator">></span><span class="token operator">/</span>_search<span class="token operator">?</span>pretty<span class="token operator">=</span><span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-分页查询"><a href="#4-分页查询" class="headerlink" title="4. 分页查询"></a>4. 分页查询</h4><p>分页查询同理，在请求体内通过 <code>from</code> 与 <code>size</code> 指定分页参数，作用类似 <code>MySQL</code> 中的 <code>limit</code> 和 <code>offset</code>。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// paging query data</span>GET http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index_name<span class="token operator">></span><span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"match_all"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"from"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token string">"size"</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六、条件查询"><a href="#六、条件查询" class="headerlink" title="六、条件查询"></a>六、条件查询</h3><h4 id="1-精准查询"><a href="#1-精准查询" class="headerlink" title="1. 精准查询"></a>1. 精准查询</h4><p>精准查询即与常见关系型中 <code>where</code> 条件中的 <code>=</code> 作用等价。</p><p>下述示例的作用效果即等价于 <code>select * from &lt;table&gt; where &lt;column_name&gt; = &lt;column_name&gt;</code>。</p><pre class="line-numbers language-js"><code class="language-js">GET http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index_name<span class="token operator">></span><span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"bool"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"must"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token string">"match_phrase"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"&lt;column_name>"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>              <span class="token string">"query"</span><span class="token punctuation">:</span> <span class="token string">"&lt;column_value>"</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-区间查询"><a href="#2-区间查询" class="headerlink" title="2. 区间查询"></a>2. 区间查询</h4><p>区间查询即与常见关系型中 <code>where</code> 条件中的 <code>in</code> 作用等价。</p><p>下述示例的作用效果即等价于 <code>select * from &lt;table&gt; where &lt;column_name&gt; in (1, 2, 3)</code>。</p><pre class="line-numbers language-js"><code class="language-js">GET http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index_name<span class="token operator">></span><span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"bool"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"must"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token string">"terms"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"&lt;column_name>"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-范围查询"><a href="#3-范围查询" class="headerlink" title="3. 范围查询"></a>3. 范围查询</h4><p>范围查询即与常见关系型中 <code>where</code> 条件中的 <code>&gt;, &gt;=, &lt;, &lt;=</code> 作用等价。</p><p>其中不同的符号对应参考下表:</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">范围符</td>        <th style="text-align: center;">ES 关键字</td>    </tr>    <tr>        <td style="text-align: center;">></td>        <td style="text-align: center;">gt</td>    </tr>    <tr>        <td style="text-align: center;">>=</td>        <td style="text-align: center;">from</td>    </tr>    <tr>        <td style="text-align: center;"><</td>        <td style="text-align: center;">lt</td>    </tr>    <tr>        <td style="text-align: center;"><=</td>        <td style="text-align: center;">to</td>    </tr></table><p>下述示例的作用效果即等价于 <code>select * from &lt;table&gt; where &lt;column_name&gt; &gt;= 1</code>。</p><pre class="line-numbers language-js"><code class="language-js">GET http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index_name<span class="token operator">></span><span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"bool"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"must"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token string">"range"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"&lt;column_name>"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>              <span class="token string">"from"</span><span class="token punctuation">:</span> <span class="token string">"1"</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="七、聚合查询"><a href="#七、聚合查询" class="headerlink" title="七、聚合查询"></a>七、聚合查询</h3><h4 id="1-统计查询"><a href="#1-统计查询" class="headerlink" title="1. 统计查询"></a>1. 统计查询</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token operator">&lt;</span>table_name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中 <code>count_num_rows</code> 为自定义名称，<code>value_count</code> 等价于 <code>count(*)</code>，<code>aggregations</code> 可简写为 <code>aggs</code>。</p><pre class="line-numbers language-js"><code class="language-js">GET  http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token operator">&lt;</span>ip<span class="token operator">></span><span class="token punctuation">:</span><span class="token operator">&lt;</span>port<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span>index<span class="token operator">></span><span class="token operator">/</span>_search<span class="token punctuation">{</span>  <span class="token string">"size"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token string">"aggregations"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"count_num_rows"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"value_count"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"field"</span><span class="token punctuation">:</span> <span class="token string">"_index"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-分组查询"><a href="#2-分组查询" class="headerlink" title="2. 分组查询"></a>2. 分组查询</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span>     DATE_FORMAT<span class="token punctuation">(</span><span class="token string">'&lt;time_field>'</span><span class="token punctuation">,</span> <span class="token string">'%Y-%m-%d %H:00:00'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> time<span class="token punctuation">,</span>    <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> num<span class="token keyword">from</span>     <span class="token operator">&lt;</span>table_name<span class="token operator">></span><span class="token keyword">group</span> <span class="token keyword">by</span>     time<span class="token keyword">having</span>     num <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意字段 <code>&lt;time_field&gt;</code> 的类型 <code>type</code> 必须为 <code>date</code>，其中 <code>interval</code> 的可选值如下：</p><table style="display: table; margin-left: auto; margin-right: auto;">    <tr>        <th style="text-align: center;">参数</td>        <th style="text-align: center;">描述</td>    </tr>    <tr>        <td style="text-align: center;">year</td>        <td style="text-align: center;">年</td>    </tr>    <tr>        <td style="text-align: center;">quarter</td>        <td style="text-align: center;">季度</td>    </tr>    <tr>        <td style="text-align: center;">month</td>        <td style="text-align: center;">月</td>    </tr>    <tr>        <td style="text-align: center;">week</td>        <td style="text-align: center;">周</td>    </tr>    <tr>        <td style="text-align: center;">day</td>        <td style="text-align: center;">日</td>    </tr>    <tr>        <td style="text-align: center;">hour</td>        <td style="text-align: center;">小时</td>    </tr>    <tr>        <td style="text-align: center;">minute</td>        <td style="text-align: center;">分钟</td>    </tr>    <tr>        <td style="text-align: center;">second</td>        <td style="text-align: center;">秒</td>    </tr></table><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"size"</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token string">"aggs"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"group_date"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"date_histogram"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"field"</span><span class="token punctuation">:</span> <span class="token string">"&lt;time_field>"</span><span class="token punctuation">,</span>        <span class="token string">"interval"</span><span class="token punctuation">:</span> <span class="token string">"hour"</span><span class="token punctuation">,</span>        <span class="token string">"time_zone"</span><span class="token punctuation">:</span> <span class="token string">"+08:00"</span><span class="token punctuation">,</span>        <span class="token string">"format"</span><span class="token punctuation">:</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token string">"aggs"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">"num_filter"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token string">"bucket_selector"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">"buckets_path"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>              <span class="token string">"count"</span><span class="token punctuation">:</span> <span class="token string">"_count"</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token string">"script"</span><span class="token punctuation">:</span> <span class="token string">"params.count > 0"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在日常开发中，我们使用最多的数据应该就是关系型数据库如 &lt;code&gt;MySQL&lt;/code&gt;, &lt;code&gt;Oracle&lt;/code&gt; 等，其特性为表结构格式统一易于上手，但有一个缺点就是面对海量数据读写性能相对较差。&lt;/p&gt;
&lt;p&gt;非关系型数据库中较为出名的就是 &lt;cod</summary>
      
    
    
    
    <category term="大数据" scheme="https://great-jin.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Elasticsearch" scheme="https://great-jin.github.io/tags/Elasticsearch/"/>
    
  </entry>
  
</feed>
